<MIFFile 4.00> # Generated by FrameMaker xm4.0.1P1m
# Options:
#    Paragraph Text
#    Paragraph Tags
#    Paragraph Formats
#    Font Information
#    Markers
#    Anchored Frames
#    Tables
#    Graphics and TextRect Layout
#    Master Page Items
#    Condition Catalog
#    Table Catalogs
#    Font Catalog
#    Paragraph Catalog
#    Document Template
#    Document Dictionary
#    Variables
#    Element Definitions
#    Elements
#
<Units Uin >
<ColorCatalog 
 <Color 
  <ColorTag `Black'>
  <ColorCyan  0.000000>
  <ColorMagenta  0.000000>
  <ColorYellow  0.000000>
  <ColorBlack  100.000000>
  <ColorAttribute ColorIsBlack >
  <ColorAttribute ColorIsReserved >
 > # end of Color
 <Color 
  <ColorTag `White'>
  <ColorCyan  0.000000>
  <ColorMagenta  0.000000>
  <ColorYellow  0.000000>
  <ColorBlack  0.000000>
  <ColorAttribute ColorIsWhite >
  <ColorAttribute ColorIsReserved >
 > # end of Color
 <Color 
  <ColorTag `Red'>
  <ColorCyan  0.000000>
  <ColorMagenta  100.000000>
  <ColorYellow  100.000000>
  <ColorBlack  0.000000>
  <ColorAttribute ColorIsRed >
  <ColorAttribute ColorIsReserved >
 > # end of Color
 <Color 
  <ColorTag `Green'>
  <ColorCyan  100.000000>
  <ColorMagenta  0.000000>
  <ColorYellow  100.000000>
  <ColorBlack  0.000000>
  <ColorAttribute ColorIsGreen >
  <ColorAttribute ColorIsReserved >
 > # end of Color
 <Color 
  <ColorTag `Blue'>
  <ColorCyan  100.000000>
  <ColorMagenta  100.000000>
  <ColorYellow  0.000000>
  <ColorBlack  0.000000>
  <ColorAttribute ColorIsBlue >
  <ColorAttribute ColorIsReserved >
 > # end of Color
 <Color 
  <ColorTag `Cyan'>
  <ColorCyan  100.000000>
  <ColorMagenta  0.000000>
  <ColorYellow  0.000000>
  <ColorBlack  0.000000>
  <ColorAttribute ColorIsCyan >
  <ColorAttribute ColorIsReserved >
 > # end of Color
 <Color 
  <ColorTag `Magenta'>
  <ColorCyan  0.000000>
  <ColorMagenta  100.000000>
  <ColorYellow  0.000000>
  <ColorBlack  0.000000>
  <ColorAttribute ColorIsMagenta >
  <ColorAttribute ColorIsReserved >
 > # end of Color
 <Color 
  <ColorTag `Yellow'>
  <ColorCyan  0.000000>
  <ColorMagenta  0.000000>
  <ColorYellow  100.000000>
  <ColorBlack  0.000000>
  <ColorAttribute ColorIsYellow >
  <ColorAttribute ColorIsReserved >
 > # end of Color
> # end of ColorCatalog
<ConditionCatalog 
 <Condition 
  <CTag `Comment'>
  <CState CShown >
  <CStyle CUnderline >
  <CSeparation 2>
  <CColor `Red'>
 > # end of Condition
> # end of ConditionCatalog
<PgfCatalog 
 <Pgf 
  <PgfTag `Abstract'>
  <PgfUseNextTag Yes >
  <PgfNextTag `Abstract'>
  <PgfAlignment Left >
  <PgfFIndent  0.0">
  <PgfLIndent  0.0">
  <PgfRIndent  0.0">
  <PgfTopSeparator `'>
  <PgfBotSeparator `'>
  <PgfPlacement Anywhere >
  <PgfPlacementStyle Normal >
  <PgfRunInDefaultPunct `. '>
  <PgfSpBefore  4.0 pt>
  <PgfSpAfter  0.0 pt>
  <PgfWithPrev No >
  <PgfWithNext No >
  <PgfBlockSize 2>
  <PgfFont 
   <FTag `'>
   <FFamily `Palatino'>
   <FVar `Regular'>
   <FWeight `Regular'>
   <FAngle `Italic'>
   <FPostScriptName `Palatino-Italic'>
   <FSize  10.0 pt>
   <FUnderlining FNoUnderlining >
   <FUnderline No >
   <FDoubleUnderline No >
   <FNumericUnderline No >
   <FOverline No >
   <FStrike No >
   <FChangeBar No >
   <FOutline No >
   <FShadow No >
   <FPairKern No >
   <FCase FAsTyped >
   <FPosition FNormal >
   <FSupScript No >
   <FSubScript No >
   <FDX  0.0 pt>
   <FDY  0.0 pt>
   <FDW  0.0 pt>
   <FSeparation 0>
   <FColor `Black'>
  > # end of PgfFont
  <PgfLineSpacing Proportional >
  <PgfLeading  1.0 pt>
  <PgfAutoNum No >
  <PgfNumTabs 0>
  <PgfHyphenate No >
  <HyphenMaxLines 4>
  <HyphenMinPrefix 2>
  <HyphenMinSuffix 2>
  <HyphenMinWord 5>
  <PgfLetterSpace No >
  <PgfMinWordSpace 75>
  <PgfOptWordSpace 100>
  <PgfMaxWordSpace 125>
  <PgfLanguage USEnglish >
  <PgfCellAlignment Top >
  <PgfCellMargins  0.0 pt 0.0 pt 0.0 pt 0.0 pt>
  <PgfCellLMarginFixed No >
  <PgfCellTMarginFixed No >
  <PgfCellRMarginFixed No >
  <PgfCellBMarginFixed No >
 > # end of Pgf
 <Pgf 
  <PgfTag `Author'>
  <PgfUseNextTag Yes >
  <PgfNextTag `Organization'>
  <PgfAlignment Center >
  <PgfFIndent  0.0">
  <PgfLIndent  0.0">
  <PgfRIndent  0.0">
  <PgfTopSeparator `'>
  <PgfBotSeparator `'>
  <PgfPlacement Anywhere >
  <PgfPlacementStyle Normal >
  <PgfRunInDefaultPunct `. '>
  <PgfSpBefore  10.0 pt>
  <PgfSpAfter  0.0 pt>
  <PgfWithPrev Yes >
  <PgfWithNext No >
  <PgfBlockSize 1>
  <PgfFont 
   <FTag `'>
   <FFamily `Times'>
   <FVar `Regular'>
   <FWeight `Regular'>
   <FAngle `Italic'>
   <FPostScriptName `Times-Italic'>
   <FSize  14.0 pt>
   <FUnderlining FNoUnderlining >
   <FUnderline No >
   <FDoubleUnderline No >
   <FNumericUnderline No >
   <FOverline No >
   <FStrike No >
   <FChangeBar No >
   <FOutline No >
   <FShadow No >
   <FPairKern No >
   <FCase FAsTyped >
   <FPosition FNormal >
   <FSupScript No >
   <FSubScript No >
   <FDX  0.0 pt>
   <FDY  0.0 pt>
   <FDW  0.0 pt>
   <FSeparation 0>
   <FColor `Black'>
  > # end of PgfFont
  <PgfLineSpacing Floating >
  <PgfLeading  2.0 pt>
  <PgfAutoNum No >
  <PgfNumTabs 0>
  <PgfHyphenate No >
  <HyphenMaxLines 4>
  <HyphenMinPrefix 2>
  <HyphenMinSuffix 2>
  <HyphenMinWord 5>
  <PgfLetterSpace No >
  <PgfMinWordSpace 75>
  <PgfOptWordSpace 100>
  <PgfMaxWordSpace 125>
  <PgfLanguage USEnglish >
  <PgfCellAlignment Top >
  <PgfCellMargins  0.0 pt 0.0 pt 0.0 pt 0.0 pt>
  <PgfCellLMarginFixed No >
  <PgfCellTMarginFixed No >
  <PgfCellRMarginFixed No >
  <PgfCellBMarginFixed No >
 > # end of Pgf
 <Pgf 
  <PgfTag `body'>
  <PgfUseNextTag No >
  <PgfNextTag `'>
  <PgfAlignment LeftRight >
  <PgfFIndent  0.0">
  <PgfLIndent  0.0">
  <PgfRIndent  0.0">
  <PgfTopSeparator `'>
  <PgfBotSeparator `'>
  <PgfPlacement Anywhere >
  <PgfPlacementStyle Normal >
  <PgfRunInDefaultPunct `. '>
  <PgfSpBefore  7.0 pt>
  <PgfSpAfter  0.0 pt>
  <PgfWithPrev No >
  <PgfWithNext No >
  <PgfBlockSize 2>
  <PgfFont 
   <FTag `'>
   <FFamily `Palatino'>
   <FVar `Regular'>
   <FWeight `Regular'>
   <FAngle `Regular'>
   <FPostScriptName `Palatino-Roman'>
   <FSize  10.0 pt>
   <FUnderlining FNoUnderlining >
   <FUnderline No >
   <FDoubleUnderline No >
   <FNumericUnderline No >
   <FOverline No >
   <FStrike No >
   <FChangeBar No >
   <FOutline No >
   <FShadow No >
   <FPairKern No >
   <FCase FAsTyped >
   <FPosition FNormal >
   <FSupScript No >
   <FSubScript No >
   <FDX  0.0 pt>
   <FDY  0.0 pt>
   <FDW  0.0 pt>
   <FSeparation 0>
   <FColor `Black'>
  > # end of PgfFont
  <PgfLineSpacing Fixed >
  <PgfLeading  2.0 pt>
  <PgfAutoNum No >
  <PgfNumTabs 0>
  <PgfHyphenate No >
  <HyphenMaxLines 2>
  <HyphenMinPrefix 2>
  <HyphenMinSuffix 2>
  <HyphenMinWord 5>
  <PgfLetterSpace No >
  <PgfMinWordSpace 75>
  <PgfOptWordSpace 100>
  <PgfMaxWordSpace 125>
  <PgfLanguage USEnglish >
  <PgfCellAlignment Top >
  <PgfCellMargins  0.0 pt 0.0 pt 0.0 pt 0.0 pt>
  <PgfCellLMarginFixed No >
  <PgfCellTMarginFixed No >
  <PgfCellRMarginFixed No >
  <PgfCellBMarginFixed No >
 > # end of Pgf
 <Pgf 
  <PgfTag `bullet1'>
  <PgfUseNextTag No >
  <PgfNextTag `'>
  <PgfAlignment Left >
  <PgfFIndent  0.13333">
  <PgfLIndent  0.25">
  <PgfRIndent  0.0">
  <PgfTopSeparator `'>
  <PgfBotSeparator `'>
  <PgfPlacement Anywhere >
  <PgfPlacementStyle Normal >
  <PgfRunInDefaultPunct `. '>
  <PgfSpBefore  2.0 pt>
  <PgfSpAfter  0.0 pt>
  <PgfWithPrev No >
  <PgfWithNext No >
  <PgfBlockSize 2>
  <PgfFont 
   <FTag `'>
   <FFamily `Palatino'>
   <FVar `Regular'>
   <FWeight `Regular'>
   <FAngle `Regular'>
   <FPostScriptName `Palatino-Roman'>
   <FSize  10.0 pt>
   <FUnderlining FNoUnderlining >
   <FUnderline No >
   <FDoubleUnderline No >
   <FNumericUnderline No >
   <FOverline No >
   <FStrike No >
   <FChangeBar No >
   <FOutline No >
   <FShadow No >
   <FPairKern No >
   <FCase FAsTyped >
   <FPosition FNormal >
   <FSupScript No >
   <FSubScript No >
   <FDX  0.0 pt>
   <FDY  0.0 pt>
   <FDW  0.0 pt>
   <FSeparation 0>
   <FColor `Black'>
  > # end of PgfFont
  <PgfLineSpacing Fixed >
  <PgfLeading  1.0 pt>
  <PgfAutoNum Yes >
  <PgfNumFormat `\xa5 \\t'>
  <PgfNumberFont `'>
  <PgfNumAtEnd No >
  <PgfNumTabs 1>
  <TabStop 
   <TSX  0.25">
   <TSType Left >
   <TSLeaderStr ` '>
  > # end of TabStop
  <PgfHyphenate No >
  <HyphenMaxLines 1>
  <HyphenMinPrefix 2>
  <HyphenMinSuffix 2>
  <HyphenMinWord 5>
  <PgfLetterSpace No >
  <PgfMinWordSpace 75>
  <PgfOptWordSpace 100>
  <PgfMaxWordSpace 125>
  <PgfLanguage USEnglish >
  <PgfCellAlignment Top >
  <PgfCellMargins  0.0 pt 0.0 pt 0.0 pt 0.0 pt>
  <PgfCellLMarginFixed No >
  <PgfCellTMarginFixed No >
  <PgfCellRMarginFixed No >
  <PgfCellBMarginFixed No >
 > # end of Pgf
 <Pgf 
  <PgfTag `bullet2'>
  <PgfUseNextTag No >
  <PgfNextTag `'>
  <PgfAlignment Left >
  <PgfFIndent  0.25">
  <PgfLIndent  0.41667">
  <PgfRIndent  0.0">
  <PgfTopSeparator `'>
  <PgfBotSeparator `'>
  <PgfPlacement Anywhere >
  <PgfPlacementStyle Normal >
  <PgfRunInDefaultPunct `. '>
  <PgfSpBefore  2.0 pt>
  <PgfSpAfter  0.0 pt>
  <PgfWithPrev No >
  <PgfWithNext No >
  <PgfBlockSize 2>
  <PgfFont 
   <FTag `'>
   <FFamily `Palatino'>
   <FVar `Regular'>
   <FWeight `Regular'>
   <FAngle `Regular'>
   <FPostScriptName `Palatino-Roman'>
   <FSize  10.0 pt>
   <FUnderlining FNoUnderlining >
   <FUnderline No >
   <FDoubleUnderline No >
   <FNumericUnderline No >
   <FOverline No >
   <FStrike No >
   <FChangeBar No >
   <FOutline No >
   <FShadow No >
   <FPairKern No >
   <FCase FAsTyped >
   <FPosition FNormal >
   <FSupScript No >
   <FSubScript No >
   <FDX  0.0 pt>
   <FDY  0.0 pt>
   <FDW  0.0 pt>
   <FSeparation 0>
   <FColor `Black'>
  > # end of PgfFont
  <PgfLineSpacing Fixed >
  <PgfLeading  1.0 pt>
  <PgfAutoNum Yes >
  <PgfNumFormat `\xd0 \\t'>
  <PgfNumberFont `'>
  <PgfNumAtEnd No >
  <PgfNumTabs 1>
  <TabStop 
   <TSX  0.41667">
   <TSType Left >
   <TSLeaderStr ` '>
  > # end of TabStop
  <PgfHyphenate No >
  <HyphenMaxLines 1>
  <HyphenMinPrefix 2>
  <HyphenMinSuffix 2>
  <HyphenMinWord 5>
  <PgfLetterSpace No >
  <PgfMinWordSpace 75>
  <PgfOptWordSpace 100>
  <PgfMaxWordSpace 125>
  <PgfLanguage USEnglish >
  <PgfCellAlignment Top >
  <PgfCellMargins  0.0 pt 0.0 pt 0.0 pt 0.0 pt>
  <PgfCellLMarginFixed No >
  <PgfCellTMarginFixed No >
  <PgfCellRMarginFixed No >
  <PgfCellBMarginFixed No >
 > # end of Pgf
 <Pgf 
  <PgfTag `cbody'>
  <PgfUseNextTag No >
  <PgfNextTag `'>
  <PgfAlignment Center >
  <PgfFIndent  0.0">
  <PgfLIndent  0.0">
  <PgfRIndent  0.0">
  <PgfTopSeparator `'>
  <PgfBotSeparator `'>
  <PgfPlacement Anywhere >
  <PgfPlacementStyle Normal >
  <PgfRunInDefaultPunct `. '>
  <PgfSpBefore  7.0 pt>
  <PgfSpAfter  0.0 pt>
  <PgfWithPrev No >
  <PgfWithNext No >
  <PgfBlockSize 2>
  <PgfFont 
   <FTag `'>
   <FFamily `Palatino'>
   <FVar `Regular'>
   <FWeight `Regular'>
   <FAngle `Regular'>
   <FPostScriptName `Palatino-Roman'>
   <FSize  10.0 pt>
   <FUnderlining FNoUnderlining >
   <FUnderline No >
   <FDoubleUnderline No >
   <FNumericUnderline No >
   <FOverline No >
   <FStrike No >
   <FChangeBar No >
   <FOutline No >
   <FShadow No >
   <FPairKern No >
   <FCase FAsTyped >
   <FPosition FNormal >
   <FSupScript No >
   <FSubScript No >
   <FDX  0.0 pt>
   <FDY  0.0 pt>
   <FDW  0.0 pt>
   <FSeparation 0>
   <FColor `Black'>
  > # end of PgfFont
  <PgfLineSpacing Proportional >
  <PgfLeading  2.0 pt>
  <PgfAutoNum No >
  <PgfNumTabs 0>
  <PgfHyphenate No >
  <HyphenMaxLines 2>
  <HyphenMinPrefix 2>
  <HyphenMinSuffix 2>
  <HyphenMinWord 5>
  <PgfLetterSpace No >
  <PgfMinWordSpace 75>
  <PgfOptWordSpace 100>
  <PgfMaxWordSpace 125>
  <PgfLanguage USEnglish >
  <PgfCellAlignment Top >
  <PgfCellMargins  0.0 pt 0.0 pt 0.0 pt 0.0 pt>
  <PgfCellLMarginFixed No >
  <PgfCellTMarginFixed No >
  <PgfCellRMarginFixed No >
  <PgfCellBMarginFixed No >
 > # end of Pgf
 <Pgf 
  <PgfTag `CellBody'>
  <PgfUseNextTag No >
  <PgfNextTag `'>
  <PgfAlignment Left >
  <PgfFIndent  0.0">
  <PgfLIndent  0.0">
  <PgfRIndent  0.0">
  <PgfTopSeparator `'>
  <PgfBotSeparator `'>
  <PgfPlacement Anywhere >
  <PgfPlacementStyle Normal >
  <PgfRunInDefaultPunct `. '>
  <PgfSpBefore  0.0 pt>
  <PgfSpAfter  0.0 pt>
  <PgfWithPrev No >
  <PgfWithNext No >
  <PgfBlockSize 1>
  <PgfFont 
   <FTag `'>
   <FFamily `Times'>
   <FVar `Regular'>
   <FWeight `Regular'>
   <FAngle `Regular'>
   <FPostScriptName `Times-Roman'>
   <FSize  10.0 pt>
   <FUnderlining FNoUnderlining >
   <FUnderline No >
   <FDoubleUnderline No >
   <FNumericUnderline No >
   <FOverline No >
   <FStrike No >
   <FChangeBar No >
   <FOutline No >
   <FShadow No >
   <FPairKern Yes >
   <FCase FAsTyped >
   <FPosition FNormal >
   <FSupScript No >
   <FSubScript No >
   <FDX  0.0 pt>
   <FDY  0.0 pt>
   <FDW  0.0 pt>
   <FSeparation 0>
   <FColor `Black'>
  > # end of PgfFont
  <PgfLineSpacing Fixed >
  <PgfLeading  2.0 pt>
  <PgfAutoNum No >
  <PgfNumTabs 0>
  <PgfHyphenate Yes >
  <HyphenMaxLines 2>
  <HyphenMinPrefix 3>
  <HyphenMinSuffix 3>
  <HyphenMinWord 5>
  <PgfLetterSpace No >
  <PgfMinWordSpace 90>
  <PgfOptWordSpace 100>
  <PgfMaxWordSpace 110>
  <PgfLanguage USEnglish >
  <PgfCellAlignment Top >
  <PgfCellMargins  0.0 pt 0.0 pt 0.0 pt 0.0 pt>
  <PgfCellLMarginFixed No >
  <PgfCellTMarginFixed No >
  <PgfCellRMarginFixed No >
  <PgfCellBMarginFixed No >
 > # end of Pgf
 <Pgf 
  <PgfTag `Date'>
  <PgfUseNextTag No >
  <PgfNextTag `'>
  <PgfAlignment Left >
  <PgfFIndent  0.0">
  <PgfLIndent  0.0">
  <PgfRIndent  0.0">
  <PgfTopSeparator `'>
  <PgfBotSeparator `'>
  <PgfPlacement Anywhere >
  <PgfPlacementStyle Normal >
  <PgfRunInDefaultPunct `. '>
  <PgfSpBefore  4.0 pt>
  <PgfSpAfter  0.0 pt>
  <PgfWithPrev Yes >
  <PgfWithNext No >
  <PgfBlockSize 1>
  <PgfFont 
   <FTag `'>
   <FFamily `Helvetica'>
   <FVar `Regular'>
   <FWeight `Regular'>
   <FAngle `Regular'>
   <FPostScriptName `Helvetica'>
   <FSize  10.0 pt>
   <FUnderlining FNoUnderlining >
   <FUnderline No >
   <FDoubleUnderline No >
   <FNumericUnderline No >
   <FOverline No >
   <FStrike No >
   <FChangeBar No >
   <FOutline No >
   <FShadow No >
   <FPairKern No >
   <FCase FAsTyped >
   <FPosition FNormal >
   <FSupScript No >
   <FSubScript No >
   <FDX  0.0 pt>
   <FDY  0.0 pt>
   <FDW  0.0 pt>
   <FSeparation 0>
   <FColor `Black'>
  > # end of PgfFont
  <PgfLineSpacing Proportional >
  <PgfLeading  2.0 pt>
  <PgfAutoNum No >
  <PgfNumTabs 0>
  <PgfHyphenate No >
  <HyphenMaxLines 4>
  <HyphenMinPrefix 2>
  <HyphenMinSuffix 2>
  <HyphenMinWord 5>
  <PgfLetterSpace No >
  <PgfMinWordSpace 75>
  <PgfOptWordSpace 100>
  <PgfMaxWordSpace 125>
  <PgfLanguage USEnglish >
  <PgfCellAlignment Top >
  <PgfCellMargins  0.0 pt 0.0 pt 0.0 pt 0.0 pt>
  <PgfCellLMarginFixed No >
  <PgfCellTMarginFixed No >
  <PgfCellRMarginFixed No >
  <PgfCellBMarginFixed No >
 > # end of Pgf
 <Pgf 
  <PgfTag `ebody'>
  <PgfUseNextTag No >
  <PgfNextTag `'>
  <PgfAlignment LeftRight >
  <PgfFIndent  0.0">
  <PgfLIndent  0.0">
  <PgfRIndent  0.0">
  <PgfTopSeparator `'>
  <PgfBotSeparator `'>
  <PgfPlacement Anywhere >
  <PgfPlacementStyle Normal >
  <PgfRunInDefaultPunct `. '>
  <PgfSpBefore  7.0 pt>
  <PgfSpAfter  0.0 pt>
  <PgfWithPrev No >
  <PgfWithNext No >
  <PgfBlockSize 2>
  <PgfFont 
   <FTag `'>
   <FFamily `Palatino'>
   <FVar `Regular'>
   <FWeight `Regular'>
   <FAngle `Regular'>
   <FPostScriptName `Palatino-Roman'>
   <FSize  10.0 pt>
   <FUnderlining FNoUnderlining >
   <FUnderline No >
   <FDoubleUnderline No >
   <FNumericUnderline No >
   <FOverline No >
   <FStrike No >
   <FChangeBar No >
   <FOutline No >
   <FShadow No >
   <FPairKern No >
   <FCase FAsTyped >
   <FPosition FNormal >
   <FSupScript No >
   <FSubScript No >
   <FDX  0.0 pt>
   <FDY  0.0 pt>
   <FDW  0.0 pt>
   <FSeparation 0>
   <FColor `Black'>
  > # end of PgfFont
  <PgfLineSpacing Proportional >
  <PgfLeading  2.0 pt>
  <PgfAutoNum No >
  <PgfNumTabs 0>
  <PgfHyphenate No >
  <HyphenMaxLines 2>
  <HyphenMinPrefix 2>
  <HyphenMinSuffix 2>
  <HyphenMinWord 5>
  <PgfLetterSpace No >
  <PgfMinWordSpace 75>
  <PgfOptWordSpace 100>
  <PgfMaxWordSpace 125>
  <PgfLanguage USEnglish >
  <PgfCellAlignment Top >
  <PgfCellMargins  0.0 pt 0.0 pt 0.0 pt 0.0 pt>
  <PgfCellLMarginFixed No >
  <PgfCellTMarginFixed No >
  <PgfCellRMarginFixed No >
  <PgfCellBMarginFixed No >
 > # end of Pgf
 <Pgf 
  <PgfTag `Footnote'>
  <PgfUseNextTag No >
  <PgfNextTag `'>
  <PgfAlignment LeftRight >
  <PgfFIndent  0.25">
  <PgfLIndent  0.25">
  <PgfRIndent  0.25">
  <PgfTopSeparator `'>
  <PgfBotSeparator `'>
  <PgfPlacement Anywhere >
  <PgfPlacementStyle Normal >
  <PgfRunInDefaultPunct `. '>
  <PgfSpBefore  0.0 pt>
  <PgfSpAfter  0.0 pt>
  <PgfWithPrev No >
  <PgfWithNext No >
  <PgfBlockSize 1>
  <PgfFont 
   <FTag `'>
   <FFamily `Times'>
   <FVar `Regular'>
   <FWeight `Regular'>
   <FAngle `Regular'>
   <FPostScriptName `Times-Roman'>
   <FSize  8.0 pt>
   <FUnderlining FNoUnderlining >
   <FUnderline No >
   <FDoubleUnderline No >
   <FNumericUnderline No >
   <FOverline No >
   <FStrike No >
   <FChangeBar No >
   <FOutline No >
   <FShadow No >
   <FPairKern No >
   <FCase FAsTyped >
   <FPosition FNormal >
   <FSupScript No >
   <FSubScript No >
   <FDX  0.0 pt>
   <FDY  0.0 pt>
   <FDW  0.0 pt>
   <FSeparation 0>
   <FColor `Black'>
  > # end of PgfFont
  <PgfLineSpacing Fixed >
  <PgfLeading  2.0 pt>
  <PgfAutoNum No >
  <PgfNumTabs 0>
  <PgfHyphenate Yes >
  <HyphenMaxLines 2>
  <HyphenMinPrefix 2>
  <HyphenMinSuffix 2>
  <HyphenMinWord 5>
  <PgfLetterSpace No >
  <PgfMinWordSpace 75>
  <PgfOptWordSpace 100>
  <PgfMaxWordSpace 125>
  <PgfLanguage USEnglish >
  <PgfCellAlignment Top >
  <PgfCellMargins  0.0 pt 0.0 pt 0.0 pt 0.0 pt>
  <PgfCellLMarginFixed No >
  <PgfCellTMarginFixed No >
  <PgfCellRMarginFixed No >
  <PgfCellBMarginFixed No >
 > # end of Pgf
 <Pgf 
  <PgfTag `footnote'>
  <PgfUseNextTag No >
  <PgfNextTag `'>
  <PgfAlignment Left >
  <PgfFIndent  0.0">
  <PgfLIndent  0.16667">
  <PgfRIndent  0.0">
  <PgfTopSeparator `'>
  <PgfBotSeparator `'>
  <PgfPlacement Anywhere >
  <PgfPlacementStyle Normal >
  <PgfRunInDefaultPunct `. '>
  <PgfSpBefore  2.0 pt>
  <PgfSpAfter  0.0 pt>
  <PgfWithPrev No >
  <PgfWithNext No >
  <PgfBlockSize 2>
  <PgfFont 
   <FTag `'>
   <FFamily `Palatino'>
   <FVar `Regular'>
   <FWeight `Regular'>
   <FAngle `Regular'>
   <FPostScriptName `Palatino-Roman'>
   <FSize  8.0 pt>
   <FUnderlining FNoUnderlining >
   <FUnderline No >
   <FDoubleUnderline No >
   <FNumericUnderline No >
   <FOverline No >
   <FStrike No >
   <FChangeBar No >
   <FOutline No >
   <FShadow No >
   <FPairKern No >
   <FCase FAsTyped >
   <FPosition FNormal >
   <FSupScript No >
   <FSubScript No >
   <FDX  0.0 pt>
   <FDY  0.0 pt>
   <FDW  0.0 pt>
   <FSeparation 0>
   <FColor `Black'>
  > # end of PgfFont
  <PgfLineSpacing Floating >
  <PgfLeading  1.0 pt>
  <PgfAutoNum Yes >
  <PgfNumFormat `f:\\t<n+\>\\t'>
  <PgfNumberFont `Superscript'>
  <PgfNumAtEnd No >
  <PgfNumTabs 2>
  <TabStop 
   <TSX  0.13333">
   <TSType Right >
   <TSLeaderStr ` '>
  > # end of TabStop
  <TabStop 
   <TSX  0.16667">
   <TSType Left >
   <TSLeaderStr ` '>
  > # end of TabStop
  <PgfHyphenate No >
  <HyphenMaxLines 4>
  <HyphenMinPrefix 2>
  <HyphenMinSuffix 2>
  <HyphenMinWord 5>
  <PgfLetterSpace No >
  <PgfMinWordSpace 75>
  <PgfOptWordSpace 100>
  <PgfMaxWordSpace 125>
  <PgfLanguage USEnglish >
  <PgfCellAlignment Top >
  <PgfCellMargins  0.0 pt 0.0 pt 0.0 pt 0.0 pt>
  <PgfCellLMarginFixed No >
  <PgfCellTMarginFixed No >
  <PgfCellRMarginFixed No >
  <PgfCellBMarginFixed No >
 > # end of Pgf
 <Pgf 
  <PgfTag `heading'>
  <PgfUseNextTag Yes >
  <PgfNextTag `bopy'>
  <PgfAlignment Center >
  <PgfFIndent  0.0">
  <PgfLIndent  0.0">
  <PgfRIndent  0.0">
  <PgfTopSeparator `'>
  <PgfBotSeparator `'>
  <PgfPlacement Anywhere >
  <PgfPlacementStyle Normal >
  <PgfRunInDefaultPunct `. '>
  <PgfSpBefore  16.0 pt>
  <PgfSpAfter  0.0 pt>
  <PgfWithPrev No >
  <PgfWithNext Yes >
  <PgfBlockSize 2>
  <PgfFont 
   <FTag `'>
   <FFamily `Palatino'>
   <FVar `Regular'>
   <FWeight `Bold'>
   <FAngle `Regular'>
   <FPostScriptName `Palatino-Bold'>
   <FSize  14.0 pt>
   <FUnderlining FNoUnderlining >
   <FUnderline No >
   <FDoubleUnderline No >
   <FNumericUnderline No >
   <FOverline No >
   <FStrike No >
   <FChangeBar No >
   <FOutline No >
   <FShadow No >
   <FPairKern No >
   <FCase FAsTyped >
   <FPosition FNormal >
   <FSupScript No >
   <FSubScript No >
   <FDX  0.0 pt>
   <FDY  0.0 pt>
   <FDW  0.0 pt>
   <FSeparation 0>
   <FColor `Black'>
  > # end of PgfFont
  <PgfLineSpacing Floating >
  <PgfLeading  2.0 pt>
  <PgfAutoNum No >
  <PgfNumTabs 0>
  <PgfHyphenate No >
  <HyphenMaxLines 1>
  <HyphenMinPrefix 2>
  <HyphenMinSuffix 2>
  <HyphenMinWord 5>
  <PgfLetterSpace No >
  <PgfMinWordSpace 75>
  <PgfOptWordSpace 100>
  <PgfMaxWordSpace 125>
  <PgfLanguage USEnglish >
  <PgfCellAlignment Top >
  <PgfCellMargins  0.0 pt 0.0 pt 0.0 pt 0.0 pt>
  <PgfCellLMarginFixed No >
  <PgfCellTMarginFixed No >
  <PgfCellRMarginFixed No >
  <PgfCellBMarginFixed No >
 > # end of Pgf
 <Pgf 
  <PgfTag `indent1'>
  <PgfUseNextTag No >
  <PgfNextTag `'>
  <PgfAlignment Left >
  <PgfFIndent  0.25">
  <PgfLIndent  0.25">
  <PgfRIndent  0.0">
  <PgfTopSeparator `'>
  <PgfBotSeparator `'>
  <PgfPlacement Anywhere >
  <PgfPlacementStyle Normal >
  <PgfRunInDefaultPunct `. '>
  <PgfSpBefore  2.0 pt>
  <PgfSpAfter  0.0 pt>
  <PgfWithPrev No >
  <PgfWithNext No >
  <PgfBlockSize 2>
  <PgfFont 
   <FTag `'>
   <FFamily `Palatino'>
   <FVar `Regular'>
   <FWeight `Regular'>
   <FAngle `Regular'>
   <FPostScriptName `Palatino-Roman'>
   <FSize  10.0 pt>
   <FUnderlining FNoUnderlining >
   <FUnderline No >
   <FDoubleUnderline No >
   <FNumericUnderline No >
   <FOverline No >
   <FStrike No >
   <FChangeBar No >
   <FOutline No >
   <FShadow No >
   <FPairKern No >
   <FCase FAsTyped >
   <FPosition FNormal >
   <FSupScript No >
   <FSubScript No >
   <FDX  0.0 pt>
   <FDY  0.0 pt>
   <FDW  0.0 pt>
   <FSeparation 0>
   <FColor `Black'>
  > # end of PgfFont
  <PgfLineSpacing Fixed >
  <PgfLeading  1.0 pt>
  <PgfAutoNum No >
  <PgfNumTabs 1>
  <TabStop 
   <TSX  0.19">
   <TSType Left >
   <TSLeaderStr ` '>
  > # end of TabStop
  <PgfHyphenate No >
  <HyphenMaxLines 1>
  <HyphenMinPrefix 2>
  <HyphenMinSuffix 2>
  <HyphenMinWord 5>
  <PgfLetterSpace No >
  <PgfMinWordSpace 75>
  <PgfOptWordSpace 100>
  <PgfMaxWordSpace 125>
  <PgfLanguage USEnglish >
  <PgfCellAlignment Top >
  <PgfCellMargins  0.0 pt 0.0 pt 0.0 pt 0.0 pt>
  <PgfCellLMarginFixed No >
  <PgfCellTMarginFixed No >
  <PgfCellRMarginFixed No >
  <PgfCellBMarginFixed No >
 > # end of Pgf
 <Pgf 
  <PgfTag `indent2'>
  <PgfUseNextTag No >
  <PgfNextTag `'>
  <PgfAlignment Left >
  <PgfFIndent  0.41667">
  <PgfLIndent  0.41667">
  <PgfRIndent  0.0">
  <PgfTopSeparator `'>
  <PgfBotSeparator `'>
  <PgfPlacement Anywhere >
  <PgfPlacementStyle Normal >
  <PgfRunInDefaultPunct `. '>
  <PgfSpBefore  2.0 pt>
  <PgfSpAfter  0.0 pt>
  <PgfWithPrev No >
  <PgfWithNext No >
  <PgfBlockSize 2>
  <PgfFont 
   <FTag `'>
   <FFamily `Palatino'>
   <FVar `Regular'>
   <FWeight `Regular'>
   <FAngle `Regular'>
   <FPostScriptName `Palatino-Roman'>
   <FSize  10.0 pt>
   <FUnderlining FNoUnderlining >
   <FUnderline No >
   <FDoubleUnderline No >
   <FNumericUnderline No >
   <FOverline No >
   <FStrike No >
   <FChangeBar No >
   <FOutline No >
   <FShadow No >
   <FPairKern No >
   <FCase FAsTyped >
   <FPosition FNormal >
   <FSupScript No >
   <FSubScript No >
   <FDX  0.0 pt>
   <FDY  0.0 pt>
   <FDW  0.0 pt>
   <FSeparation 0>
   <FColor `Black'>
  > # end of PgfFont
  <PgfLineSpacing Fixed >
  <PgfLeading  1.0 pt>
  <PgfAutoNum No >
  <PgfNumTabs 1>
  <TabStop 
   <TSX  0.4">
   <TSType Left >
   <TSLeaderStr ` '>
  > # end of TabStop
  <PgfHyphenate No >
  <HyphenMaxLines 1>
  <HyphenMinPrefix 2>
  <HyphenMinSuffix 2>
  <HyphenMinWord 5>
  <PgfLetterSpace No >
  <PgfMinWordSpace 75>
  <PgfOptWordSpace 100>
  <PgfMaxWordSpace 125>
  <PgfLanguage USEnglish >
  <PgfCellAlignment Top >
  <PgfCellMargins  0.0 pt 0.0 pt 0.0 pt 0.0 pt>
  <PgfCellLMarginFixed No >
  <PgfCellTMarginFixed No >
  <PgfCellRMarginFixed No >
  <PgfCellBMarginFixed No >
 > # end of Pgf
 <Pgf 
  <PgfTag `number1'>
  <PgfUseNextTag No >
  <PgfNextTag `'>
  <PgfAlignment Left >
  <PgfFIndent  0.0">
  <PgfLIndent  0.25">
  <PgfRIndent  0.0">
  <PgfTopSeparator `'>
  <PgfBotSeparator `'>
  <PgfPlacement Anywhere >
  <PgfPlacementStyle Normal >
  <PgfRunInDefaultPunct `. '>
  <PgfSpBefore  2.0 pt>
  <PgfSpAfter  0.0 pt>
  <PgfWithPrev No >
  <PgfWithNext No >
  <PgfBlockSize 2>
  <PgfFont 
   <FTag `'>
   <FFamily `Palatino'>
   <FVar `Regular'>
   <FWeight `Regular'>
   <FAngle `Regular'>
   <FPostScriptName `Palatino-Roman'>
   <FSize  10.0 pt>
   <FUnderlining FNoUnderlining >
   <FUnderline No >
   <FDoubleUnderline No >
   <FNumericUnderline No >
   <FOverline No >
   <FStrike No >
   <FChangeBar No >
   <FOutline No >
   <FShadow No >
   <FPairKern No >
   <FCase FAsTyped >
   <FPosition FNormal >
   <FSupScript No >
   <FSubScript No >
   <FDX  0.0 pt>
   <FDY  0.0 pt>
   <FDW  0.0 pt>
   <FSeparation 0>
   <FColor `Black'>
  > # end of PgfFont
  <PgfLineSpacing Fixed >
  <PgfLeading  1.0 pt>
  <PgfAutoNum Yes >
  <PgfNumFormat `N:\\t<+\>.\\t'>
  <PgfNumberFont `'>
  <PgfNumAtEnd No >
  <PgfNumTabs 2>
  <TabStop 
   <TSX  0.21667">
   <TSType Right >
   <TSLeaderStr ` '>
  > # end of TabStop
  <TabStop 
   <TSX  0.25">
   <TSType Left >
   <TSLeaderStr ` '>
  > # end of TabStop
  <PgfHyphenate No >
  <HyphenMaxLines 2>
  <HyphenMinPrefix 2>
  <HyphenMinSuffix 2>
  <HyphenMinWord 5>
  <PgfLetterSpace No >
  <PgfMinWordSpace 75>
  <PgfOptWordSpace 100>
  <PgfMaxWordSpace 125>
  <PgfLanguage USEnglish >
  <PgfCellAlignment Top >
  <PgfCellMargins  0.0 pt 0.0 pt 0.0 pt 0.0 pt>
  <PgfCellLMarginFixed No >
  <PgfCellTMarginFixed No >
  <PgfCellRMarginFixed No >
  <PgfCellBMarginFixed No >
 > # end of Pgf
 <Pgf 
  <PgfTag `number1Start'>
  <PgfUseNextTag Yes >
  <PgfNextTag `number1'>
  <PgfAlignment Left >
  <PgfFIndent  0.0">
  <PgfLIndent  0.16667">
  <PgfRIndent  0.0">
  <PgfTopSeparator `'>
  <PgfBotSeparator `'>
  <PgfPlacement Anywhere >
  <PgfPlacementStyle Normal >
  <PgfRunInDefaultPunct `. '>
  <PgfSpBefore  2.0 pt>
  <PgfSpAfter  0.0 pt>
  <PgfWithPrev No >
  <PgfWithNext No >
  <PgfBlockSize 2>
  <PgfFont 
   <FTag `'>
   <FFamily `Palatino'>
   <FVar `Regular'>
   <FWeight `Regular'>
   <FAngle `Regular'>
   <FPostScriptName `Palatino-Roman'>
   <FSize  10.0 pt>
   <FUnderlining FNoUnderlining >
   <FUnderline No >
   <FDoubleUnderline No >
   <FNumericUnderline No >
   <FOverline No >
   <FStrike No >
   <FChangeBar No >
   <FOutline No >
   <FShadow No >
   <FPairKern No >
   <FCase FAsTyped >
   <FPosition FNormal >
   <FSupScript No >
   <FSubScript No >
   <FDX  0.0 pt>
   <FDY  0.0 pt>
   <FDW  0.0 pt>
   <FSeparation 0>
   <FColor `Black'>
  > # end of PgfFont
  <PgfLineSpacing Fixed >
  <PgfLeading  1.0 pt>
  <PgfAutoNum Yes >
  <PgfNumFormat `N:\\t<n=1\>.\\t'>
  <PgfNumberFont `'>
  <PgfNumAtEnd No >
  <PgfNumTabs 2>
  <TabStop 
   <TSX  0.21667">
   <TSType Right >
   <TSLeaderStr ` '>
  > # end of TabStop
  <TabStop 
   <TSX  0.25">
   <TSType Left >
   <TSLeaderStr ` '>
  > # end of TabStop
  <PgfHyphenate No >
  <HyphenMaxLines 2>
  <HyphenMinPrefix 2>
  <HyphenMinSuffix 2>
  <HyphenMinWord 5>
  <PgfLetterSpace No >
  <PgfMinWordSpace 75>
  <PgfOptWordSpace 100>
  <PgfMaxWordSpace 125>
  <PgfLanguage USEnglish >
  <PgfCellAlignment Top >
  <PgfCellMargins  0.0 pt 0.0 pt 0.0 pt 0.0 pt>
  <PgfCellLMarginFixed No >
  <PgfCellTMarginFixed No >
  <PgfCellRMarginFixed No >
  <PgfCellBMarginFixed No >
 > # end of Pgf
 <Pgf 
  <PgfTag `Organization'>
  <PgfUseNextTag Yes >
  <PgfNextTag `Confidential'>
  <PgfAlignment Left >
  <PgfFIndent  0.0">
  <PgfLIndent  0.0">
  <PgfRIndent  0.0">
  <PgfTopSeparator `'>
  <PgfBotSeparator `'>
  <PgfPlacement Anywhere >
  <PgfPlacementStyle Normal >
  <PgfRunInDefaultPunct `. '>
  <PgfSpBefore  10.0 pt>
  <PgfSpAfter  0.0 pt>
  <PgfWithPrev No >
  <PgfWithNext No >
  <PgfBlockSize 1>
  <PgfFont 
   <FTag `'>
   <FFamily `Helvetica'>
   <FVar `Regular'>
   <FWeight `Regular'>
   <FAngle `Regular'>
   <FPostScriptName `Helvetica'>
   <FSize  10.0 pt>
   <FUnderlining FNoUnderlining >
   <FUnderline No >
   <FDoubleUnderline No >
   <FNumericUnderline No >
   <FOverline No >
   <FStrike No >
   <FChangeBar No >
   <FOutline No >
   <FShadow No >
   <FPairKern No >
   <FCase FAsTyped >
   <FPosition FNormal >
   <FSupScript No >
   <FSubScript No >
   <FDX  0.0 pt>
   <FDY  0.0 pt>
   <FDW  0.0 pt>
   <FSeparation 0>
   <FColor `Black'>
  > # end of PgfFont
  <PgfLineSpacing Proportional >
  <PgfLeading  2.0 pt>
  <PgfAutoNum No >
  <PgfNumTabs 0>
  <PgfHyphenate No >
  <HyphenMaxLines 4>
  <HyphenMinPrefix 2>
  <HyphenMinSuffix 2>
  <HyphenMinWord 5>
  <PgfLetterSpace No >
  <PgfMinWordSpace 75>
  <PgfOptWordSpace 100>
  <PgfMaxWordSpace 125>
  <PgfLanguage USEnglish >
  <PgfCellAlignment Top >
  <PgfCellMargins  0.0 pt 0.0 pt 0.0 pt 0.0 pt>
  <PgfCellLMarginFixed No >
  <PgfCellTMarginFixed No >
  <PgfCellRMarginFixed No >
  <PgfCellBMarginFixed No >
 > # end of Pgf
 <Pgf 
  <PgfTag `program'>
  <PgfUseNextTag No >
  <PgfNextTag `'>
  <PgfAlignment Left >
  <PgfFIndent  0.5">
  <PgfLIndent  1.5">
  <PgfRIndent  0.0">
  <PgfTopSeparator `'>
  <PgfBotSeparator `'>
  <PgfPlacement Anywhere >
  <PgfPlacementStyle Normal >
  <PgfRunInDefaultPunct `. '>
  <PgfSpBefore  0.0 pt>
  <PgfSpAfter  0.0 pt>
  <PgfWithPrev No >
  <PgfWithNext No >
  <PgfBlockSize 2>
  <PgfFont 
   <FTag `'>
   <FFamily `Courier'>
   <FVar `Regular'>
   <FWeight `Regular'>
   <FAngle `Regular'>
   <FPostScriptName `Courier'>
   <FSize  9.0 pt>
   <FUnderlining FNoUnderlining >
   <FUnderline No >
   <FDoubleUnderline No >
   <FNumericUnderline No >
   <FOverline No >
   <FStrike No >
   <FChangeBar No >
   <FOutline No >
   <FShadow No >
   <FPairKern No >
   <FCase FAsTyped >
   <FPosition FNormal >
   <FSupScript No >
   <FSubScript No >
   <FDX  0.0 pt>
   <FDY  0.0 pt>
   <FDW  0.0 pt>
   <FSeparation 0>
   <FColor `Black'>
  > # end of PgfFont
  <PgfLineSpacing Proportional >
  <PgfLeading  2.0 pt>
  <PgfAutoNum No >
  <PgfNumTabs 11>
  <TabStop 
   <TSX  1.0">
   <TSType Left >
   <TSLeaderStr ` '>
  > # end of TabStop
  <TabStop 
   <TSX  1.5">
   <TSType Left >
   <TSLeaderStr ` '>
  > # end of TabStop
  <TabStop 
   <TSX  2.0">
   <TSType Left >
   <TSLeaderStr ` '>
  > # end of TabStop
  <TabStop 
   <TSX  2.5">
   <TSType Left >
   <TSLeaderStr ` '>
  > # end of TabStop
  <TabStop 
   <TSX  3.0">
   <TSType Left >
   <TSLeaderStr ` '>
  > # end of TabStop
  <TabStop 
   <TSX  3.5">
   <TSType Left >
   <TSLeaderStr ` '>
  > # end of TabStop
  <TabStop 
   <TSX  4.0">
   <TSType Left >
   <TSLeaderStr ` '>
  > # end of TabStop
  <TabStop 
   <TSX  4.5">
   <TSType Left >
   <TSLeaderStr ` '>
  > # end of TabStop
  <TabStop 
   <TSX  5.0">
   <TSType Left >
   <TSLeaderStr ` '>
  > # end of TabStop
  <TabStop 
   <TSX  5.5">
   <TSType Left >
   <TSLeaderStr ` '>
  > # end of TabStop
  <TabStop 
   <TSX  6.0">
   <TSType Left >
   <TSLeaderStr ` '>
  > # end of TabStop
  <PgfHyphenate No >
  <HyphenMaxLines 2>
  <HyphenMinPrefix 2>
  <HyphenMinSuffix 2>
  <HyphenMinWord 5>
  <PgfLetterSpace No >
  <PgfMinWordSpace 75>
  <PgfOptWordSpace 100>
  <PgfMaxWordSpace 125>
  <PgfLanguage USEnglish >
  <PgfCellAlignment Top >
  <PgfCellMargins  0.0 pt 0.0 pt 0.0 pt 0.0 pt>
  <PgfCellLMarginFixed No >
  <PgfCellTMarginFixed No >
  <PgfCellRMarginFixed No >
  <PgfCellBMarginFixed No >
 > # end of Pgf
 <Pgf 
  <PgfTag `reference'>
  <PgfUseNextTag No >
  <PgfNextTag `'>
  <PgfAlignment Left >
  <PgfFIndent  0.0">
  <PgfLIndent  0.16667">
  <PgfRIndent  0.0">
  <PgfTopSeparator `'>
  <PgfBotSeparator `'>
  <PgfPlacement Anywhere >
  <PgfPlacementStyle Normal >
  <PgfRunInDefaultPunct `. '>
  <PgfSpBefore  4.0 pt>
  <PgfSpAfter  0.0 pt>
  <PgfWithPrev No >
  <PgfWithNext No >
  <PgfBlockSize 2>
  <PgfFont 
   <FTag `'>
   <FFamily `Palatino'>
   <FVar `Regular'>
   <FWeight `Regular'>
   <FAngle `Regular'>
   <FPostScriptName `Palatino-Roman'>
   <FSize  10.0 pt>
   <FUnderlining FNoUnderlining >
   <FUnderline No >
   <FDoubleUnderline No >
   <FNumericUnderline No >
   <FOverline No >
   <FStrike No >
   <FChangeBar No >
   <FOutline No >
   <FShadow No >
   <FPairKern No >
   <FCase FAsTyped >
   <FPosition FNormal >
   <FSupScript No >
   <FSubScript No >
   <FDX  0.0 pt>
   <FDY  0.0 pt>
   <FDW  0.0 pt>
   <FSeparation 0>
   <FColor `Black'>
  > # end of PgfFont
  <PgfLineSpacing Fixed >
  <PgfLeading  1.0 pt>
  <PgfAutoNum No >
  <PgfNumTabs 0>
  <PgfHyphenate No >
  <HyphenMaxLines 2>
  <HyphenMinPrefix 2>
  <HyphenMinSuffix 2>
  <HyphenMinWord 5>
  <PgfLetterSpace No >
  <PgfMinWordSpace 75>
  <PgfOptWordSpace 100>
  <PgfMaxWordSpace 125>
  <PgfLanguage USEnglish >
  <PgfCellAlignment Top >
  <PgfCellMargins  0.0 pt 0.0 pt 0.0 pt 0.0 pt>
  <PgfCellLMarginFixed No >
  <PgfCellTMarginFixed No >
  <PgfCellRMarginFixed No >
  <PgfCellBMarginFixed No >
 > # end of Pgf
 <Pgf 
  <PgfTag `section'>
  <PgfUseNextTag Yes >
  <PgfNextTag `body'>
  <PgfAlignment Left >
  <PgfFIndent  0.0">
  <PgfLIndent  0.0">
  <PgfRIndent  0.0">
  <PgfTopSeparator `'>
  <PgfBotSeparator `'>
  <PgfPlacement Anywhere >
  <PgfPlacementStyle Normal >
  <PgfRunInDefaultPunct `. '>
  <PgfSpBefore  16.0 pt>
  <PgfSpAfter  0.0 pt>
  <PgfWithPrev No >
  <PgfWithNext Yes >
  <PgfBlockSize 2>
  <PgfFont 
   <FTag `'>
   <FFamily `Helvetica'>
   <FVar `Regular'>
   <FWeight `Bold'>
   <FAngle `Regular'>
   <FPostScriptName `Helvetica-Bold'>
   <FSize  12.0 pt>
   <FUnderlining FNoUnderlining >
   <FUnderline No >
   <FDoubleUnderline No >
   <FNumericUnderline No >
   <FOverline No >
   <FStrike No >
   <FChangeBar No >
   <FOutline No >
   <FShadow No >
   <FPairKern No >
   <FCase FAsTyped >
   <FPosition FNormal >
   <FSupScript No >
   <FSubScript No >
   <FDX  0.0 pt>
   <FDY  0.0 pt>
   <FDW  0.0 pt>
   <FSeparation 0>
   <FColor `Black'>
  > # end of PgfFont
  <PgfLineSpacing Floating >
  <PgfLeading  2.0 pt>
  <PgfAutoNum Yes >
  <PgfNumFormat `s:<+\>  '>
  <PgfNumberFont `'>
  <PgfNumAtEnd No >
  <PgfNumTabs 1>
  <TabStop 
   <TSX  0.19">
   <TSType Left >
   <TSLeaderStr ` '>
  > # end of TabStop
  <PgfHyphenate No >
  <HyphenMaxLines 4>
  <HyphenMinPrefix 2>
  <HyphenMinSuffix 2>
  <HyphenMinWord 5>
  <PgfLetterSpace No >
  <PgfMinWordSpace 75>
  <PgfOptWordSpace 100>
  <PgfMaxWordSpace 125>
  <PgfLanguage USEnglish >
  <PgfCellAlignment Top >
  <PgfCellMargins  0.0 pt 0.0 pt 0.0 pt 0.0 pt>
  <PgfCellLMarginFixed No >
  <PgfCellTMarginFixed No >
  <PgfCellRMarginFixed No >
  <PgfCellBMarginFixed No >
 > # end of Pgf
 <Pgf 
  <PgfTag `sectionTOC'>
  <PgfUseNextTag No >
  <PgfNextTag `'>
  <PgfAlignment LeftRight >
  <PgfFIndent  0.0">
  <PgfLIndent  0.375">
  <PgfRIndent  0.0">
  <PgfTopSeparator `'>
  <PgfBotSeparator `'>
  <PgfPlacement Anywhere >
  <PgfPlacementStyle Normal >
  <PgfRunInDefaultPunct `. '>
  <PgfSpBefore  6.0 pt>
  <PgfSpAfter  0.0 pt>
  <PgfWithPrev No >
  <PgfWithNext No >
  <PgfBlockSize 1>
  <PgfFont 
   <FTag `'>
   <FFamily `Palatino'>
   <FVar `Regular'>
   <FWeight `Regular'>
   <FAngle `Regular'>
   <FPostScriptName `Palatino-Roman'>
   <FSize  10.0 pt>
   <FUnderlining FNoUnderlining >
   <FUnderline No >
   <FDoubleUnderline No >
   <FNumericUnderline No >
   <FOverline No >
   <FStrike No >
   <FChangeBar No >
   <FOutline No >
   <FShadow No >
   <FPairKern Yes >
   <FCase FAsTyped >
   <FPosition FNormal >
   <FSupScript No >
   <FSubScript No >
   <FDX  0.0 pt>
   <FDY  0.0 pt>
   <FDW  0.0 pt>
   <FSeparation 0>
   <FColor `Black'>
  > # end of PgfFont
  <PgfLineSpacing Fixed >
  <PgfLeading  2.0 pt>
  <PgfAutoNum No >
  <PgfNumTabs 1>
  <TabStop 
   <TSX  6.5">
   <TSType Right >
   <TSLeaderStr `. '>
  > # end of TabStop
  <PgfHyphenate Yes >
  <HyphenMaxLines 2>
  <HyphenMinPrefix 3>
  <HyphenMinSuffix 3>
  <HyphenMinWord 5>
  <PgfLetterSpace No >
  <PgfMinWordSpace 90>
  <PgfOptWordSpace 100>
  <PgfMaxWordSpace 110>
  <PgfLanguage USEnglish >
  <PgfCellAlignment Top >
  <PgfCellMargins  0.0 pt 0.0 pt 0.0 pt 0.0 pt>
  <PgfCellLMarginFixed No >
  <PgfCellTMarginFixed No >
  <PgfCellRMarginFixed No >
  <PgfCellBMarginFixed No >
 > # end of Pgf
 <Pgf 
  <PgfTag `subheading'>
  <PgfUseNextTag Yes >
  <PgfNextTag `body'>
  <PgfAlignment Left >
  <PgfFIndent  0.0">
  <PgfLIndent  0.0">
  <PgfRIndent  0.0">
  <PgfTopSeparator `'>
  <PgfBotSeparator `'>
  <PgfPlacement Anywhere >
  <PgfPlacementStyle Normal >
  <PgfRunInDefaultPunct `. '>
  <PgfSpBefore  10.0 pt>
  <PgfSpAfter  0.0 pt>
  <PgfWithPrev No >
  <PgfWithNext Yes >
  <PgfBlockSize 2>
  <PgfFont 
   <FTag `'>
   <FFamily `Helvetica'>
   <FVar `Regular'>
   <FWeight `Bold'>
   <FAngle `Regular'>
   <FPostScriptName `Helvetica-Bold'>
   <FSize  10.0 pt>
   <FUnderlining FNoUnderlining >
   <FUnderline No >
   <FDoubleUnderline No >
   <FNumericUnderline No >
   <FOverline No >
   <FStrike No >
   <FChangeBar No >
   <FOutline No >
   <FShadow No >
   <FPairKern No >
   <FCase FAsTyped >
   <FPosition FNormal >
   <FSupScript No >
   <FSubScript No >
   <FDX  0.0 pt>
   <FDY  0.0 pt>
   <FDW  0.0 pt>
   <FSeparation 0>
   <FColor `Black'>
  > # end of PgfFont
  <PgfLineSpacing Floating >
  <PgfLeading  1.0 pt>
  <PgfAutoNum No >
  <PgfNumTabs 0>
  <PgfHyphenate No >
  <HyphenMaxLines 1>
  <HyphenMinPrefix 2>
  <HyphenMinSuffix 2>
  <HyphenMinWord 5>
  <PgfLetterSpace No >
  <PgfMinWordSpace 75>
  <PgfOptWordSpace 100>
  <PgfMaxWordSpace 125>
  <PgfLanguage USEnglish >
  <PgfCellAlignment Top >
  <PgfCellMargins  0.0 pt 0.0 pt 0.0 pt 0.0 pt>
  <PgfCellLMarginFixed No >
  <PgfCellTMarginFixed No >
  <PgfCellRMarginFixed No >
  <PgfCellBMarginFixed No >
 > # end of Pgf
 <Pgf 
  <PgfTag `subsection'>
  <PgfUseNextTag Yes >
  <PgfNextTag `body'>
  <PgfAlignment Left >
  <PgfFIndent  0.0">
  <PgfLIndent  0.0">
  <PgfRIndent  0.0">
  <PgfTopSeparator `'>
  <PgfBotSeparator `'>
  <PgfPlacement Anywhere >
  <PgfPlacementStyle Normal >
  <PgfRunInDefaultPunct `. '>
  <PgfSpBefore  10.0 pt>
  <PgfSpAfter  0.0 pt>
  <PgfWithPrev No >
  <PgfWithNext Yes >
  <PgfBlockSize 2>
  <PgfFont 
   <FTag `'>
   <FFamily `Helvetica'>
   <FVar `Regular'>
   <FWeight `Bold'>
   <FAngle `Regular'>
   <FPostScriptName `Helvetica-Bold'>
   <FSize  11.0 pt>
   <FUnderlining FNoUnderlining >
   <FUnderline No >
   <FDoubleUnderline No >
   <FNumericUnderline No >
   <FOverline No >
   <FStrike No >
   <FChangeBar No >
   <FOutline No >
   <FShadow No >
   <FPairKern No >
   <FCase FAsTyped >
   <FPosition FNormal >
   <FSupScript No >
   <FSubScript No >
   <FDX  0.0 pt>
   <FDY  0.0 pt>
   <FDW  0.0 pt>
   <FSeparation 0>
   <FColor `Black'>
  > # end of PgfFont
  <PgfLineSpacing Floating >
  <PgfLeading  1.0 pt>
  <PgfAutoNum Yes >
  <PgfNumFormat `s:<#\>.<+\> '>
  <PgfNumberFont `'>
  <PgfNumAtEnd No >
  <PgfNumTabs 0>
  <PgfHyphenate No >
  <HyphenMaxLines 1>
  <HyphenMinPrefix 2>
  <HyphenMinSuffix 2>
  <HyphenMinWord 5>
  <PgfLetterSpace No >
  <PgfMinWordSpace 75>
  <PgfOptWordSpace 100>
  <PgfMaxWordSpace 125>
  <PgfLanguage USEnglish >
  <PgfCellAlignment Top >
  <PgfCellMargins  0.0 pt 0.0 pt 0.0 pt 0.0 pt>
  <PgfCellLMarginFixed No >
  <PgfCellTMarginFixed No >
  <PgfCellRMarginFixed No >
  <PgfCellBMarginFixed No >
 > # end of Pgf
 <Pgf 
  <PgfTag `subsectionTOC'>
  <PgfUseNextTag No >
  <PgfNextTag `'>
  <PgfAlignment LeftRight >
  <PgfFIndent  0.375">
  <PgfLIndent  0.75">
  <PgfRIndent  0.0">
  <PgfTopSeparator `'>
  <PgfBotSeparator `'>
  <PgfPlacement Anywhere >
  <PgfPlacementStyle Normal >
  <PgfRunInDefaultPunct `. '>
  <PgfSpBefore  0.0 pt>
  <PgfSpAfter  0.0 pt>
  <PgfWithPrev No >
  <PgfWithNext No >
  <PgfBlockSize 1>
  <PgfFont 
   <FTag `'>
   <FFamily `Times'>
   <FVar `Regular'>
   <FWeight `Regular'>
   <FAngle `Regular'>
   <FPostScriptName `Times-Roman'>
   <FSize  10.0 pt>
   <FUnderlining FNoUnderlining >
   <FUnderline No >
   <FDoubleUnderline No >
   <FNumericUnderline No >
   <FOverline No >
   <FStrike No >
   <FChangeBar No >
   <FOutline No >
   <FShadow No >
   <FPairKern Yes >
   <FCase FAsTyped >
   <FPosition FNormal >
   <FSupScript No >
   <FSubScript No >
   <FDX  0.0 pt>
   <FDY  0.0 pt>
   <FDW  0.0 pt>
   <FSeparation 0>
   <FColor `Black'>
  > # end of PgfFont
  <PgfLineSpacing Fixed >
  <PgfLeading  2.0 pt>
  <PgfAutoNum No >
  <PgfNumTabs 1>
  <TabStop 
   <TSX  6.5">
   <TSType Right >
   <TSLeaderStr `. '>
  > # end of TabStop
  <PgfHyphenate Yes >
  <HyphenMaxLines 2>
  <HyphenMinPrefix 3>
  <HyphenMinSuffix 3>
  <HyphenMinWord 5>
  <PgfLetterSpace No >
  <PgfMinWordSpace 90>
  <PgfOptWordSpace 100>
  <PgfMaxWordSpace 110>
  <PgfLanguage USEnglish >
  <PgfCellAlignment Top >
  <PgfCellMargins  0.0 pt 0.0 pt 0.0 pt 0.0 pt>
  <PgfCellLMarginFixed No >
  <PgfCellTMarginFixed No >
  <PgfCellRMarginFixed No >
  <PgfCellBMarginFixed No >
 > # end of Pgf
 <Pgf 
  <PgfTag `subsubheading'>
  <PgfUseNextTag Yes >
  <PgfNextTag `body'>
  <PgfAlignment Left >
  <PgfFIndent  0.0">
  <PgfLIndent  0.0">
  <PgfRIndent  0.0">
  <PgfTopSeparator `'>
  <PgfBotSeparator `'>
  <PgfPlacement Anywhere >
  <PgfPlacementStyle Normal >
  <PgfRunInDefaultPunct `. '>
  <PgfSpBefore  8.0 pt>
  <PgfSpAfter  0.0 pt>
  <PgfWithPrev No >
  <PgfWithNext Yes >
  <PgfBlockSize 2>
  <PgfFont 
   <FTag `'>
   <FFamily `Helvetica'>
   <FVar `Regular'>
   <FWeight `Regular'>
   <FAngle `Oblique'>
   <FPostScriptName `Helvetica-Oblique'>
   <FSize  10.0 pt>
   <FUnderlining FNoUnderlining >
   <FUnderline No >
   <FDoubleUnderline No >
   <FNumericUnderline No >
   <FOverline No >
   <FStrike No >
   <FChangeBar No >
   <FOutline No >
   <FShadow No >
   <FPairKern No >
   <FCase FAsTyped >
   <FPosition FNormal >
   <FSupScript No >
   <FSubScript No >
   <FDX  0.0 pt>
   <FDY  0.0 pt>
   <FDW  0.0 pt>
   <FSeparation 0>
   <FColor `Black'>
  > # end of PgfFont
  <PgfLineSpacing Floating >
  <PgfLeading  1.0 pt>
  <PgfAutoNum No >
  <PgfNumTabs 0>
  <PgfHyphenate No >
  <HyphenMaxLines 1>
  <HyphenMinPrefix 2>
  <HyphenMinSuffix 2>
  <HyphenMinWord 5>
  <PgfLetterSpace No >
  <PgfMinWordSpace 75>
  <PgfOptWordSpace 100>
  <PgfMaxWordSpace 125>
  <PgfLanguage USEnglish >
  <PgfCellAlignment Top >
  <PgfCellMargins  0.0 pt 0.0 pt 0.0 pt 0.0 pt>
  <PgfCellLMarginFixed No >
  <PgfCellTMarginFixed No >
  <PgfCellRMarginFixed No >
  <PgfCellBMarginFixed No >
 > # end of Pgf
 <Pgf 
  <PgfTag `subsubsection'>
  <PgfUseNextTag Yes >
  <PgfNextTag `body'>
  <PgfAlignment Left >
  <PgfFIndent  0.0">
  <PgfLIndent  0.0">
  <PgfRIndent  0.0">
  <PgfTopSeparator `'>
  <PgfBotSeparator `'>
  <PgfPlacement Anywhere >
  <PgfPlacementStyle Normal >
  <PgfRunInDefaultPunct `. '>
  <PgfSpBefore  8.0 pt>
  <PgfSpAfter  0.0 pt>
  <PgfWithPrev No >
  <PgfWithNext Yes >
  <PgfBlockSize 2>
  <PgfFont 
   <FTag `'>
   <FFamily `Helvetica'>
   <FVar `Regular'>
   <FWeight `Regular'>
   <FAngle `Oblique'>
   <FPostScriptName `Helvetica-Oblique'>
   <FSize  10.0 pt>
   <FUnderlining FNoUnderlining >
   <FUnderline No >
   <FDoubleUnderline No >
   <FNumericUnderline No >
   <FOverline No >
   <FStrike No >
   <FChangeBar No >
   <FOutline No >
   <FShadow No >
   <FPairKern No >
   <FCase FAsTyped >
   <FPosition FNormal >
   <FSupScript No >
   <FSubScript No >
   <FDX  0.0 pt>
   <FDY  0.0 pt>
   <FDW  0.0 pt>
   <FSeparation 0>
   <FColor `Black'>
  > # end of PgfFont
  <PgfLineSpacing Floating >
  <PgfLeading  1.0 pt>
  <PgfAutoNum Yes >
  <PgfNumFormat `s:<#\>.<#\>.<+\> '>
  <PgfNumberFont `'>
  <PgfNumAtEnd No >
  <PgfNumTabs 0>
  <PgfHyphenate No >
  <HyphenMaxLines 1>
  <HyphenMinPrefix 2>
  <HyphenMinSuffix 2>
  <HyphenMinWord 5>
  <PgfLetterSpace No >
  <PgfMinWordSpace 75>
  <PgfOptWordSpace 100>
  <PgfMaxWordSpace 125>
  <PgfLanguage USEnglish >
  <PgfCellAlignment Top >
  <PgfCellMargins  0.0 pt 0.0 pt 0.0 pt 0.0 pt>
  <PgfCellLMarginFixed No >
  <PgfCellTMarginFixed No >
  <PgfCellRMarginFixed No >
  <PgfCellBMarginFixed No >
 > # end of Pgf
 <Pgf 
  <PgfTag `subsubsectionTOC'>
  <PgfUseNextTag No >
  <PgfNextTag `'>
  <PgfAlignment LeftRight >
  <PgfFIndent  0.75">
  <PgfLIndent  1.125">
  <PgfRIndent  0.0">
  <PgfTopSeparator `'>
  <PgfBotSeparator `'>
  <PgfPlacement Anywhere >
  <PgfPlacementStyle Normal >
  <PgfRunInDefaultPunct `. '>
  <PgfSpBefore  0.0 pt>
  <PgfSpAfter  0.0 pt>
  <PgfWithPrev No >
  <PgfWithNext No >
  <PgfBlockSize 1>
  <PgfFont 
   <FTag `'>
   <FFamily `Times'>
   <FVar `Regular'>
   <FWeight `Regular'>
   <FAngle `Regular'>
   <FPostScriptName `Times-Roman'>
   <FSize  10.0 pt>
   <FUnderlining FNoUnderlining >
   <FUnderline No >
   <FDoubleUnderline No >
   <FNumericUnderline No >
   <FOverline No >
   <FStrike No >
   <FChangeBar No >
   <FOutline No >
   <FShadow No >
   <FPairKern No >
   <FCase FAsTyped >
   <FPosition FNormal >
   <FSupScript No >
   <FSubScript No >
   <FDX  0.0 pt>
   <FDY  0.0 pt>
   <FDW  0.0 pt>
   <FSeparation 0>
   <FColor `Black'>
  > # end of PgfFont
  <PgfLineSpacing Fixed >
  <PgfLeading  2.0 pt>
  <PgfAutoNum No >
  <PgfNumTabs 1>
  <TabStop 
   <TSX  6.5">
   <TSType Right >
   <TSLeaderStr `. '>
  > # end of TabStop
  <PgfHyphenate Yes >
  <HyphenMaxLines 2>
  <HyphenMinPrefix 3>
  <HyphenMinSuffix 3>
  <HyphenMinWord 5>
  <PgfLetterSpace No >
  <PgfMinWordSpace 90>
  <PgfOptWordSpace 100>
  <PgfMaxWordSpace 110>
  <PgfLanguage USEnglish >
  <PgfCellAlignment Top >
  <PgfCellMargins  0.0 pt 0.0 pt 0.0 pt 0.0 pt>
  <PgfCellLMarginFixed No >
  <PgfCellTMarginFixed No >
  <PgfCellRMarginFixed No >
  <PgfCellBMarginFixed No >
 > # end of Pgf
 <Pgf 
  <PgfTag `Title'>
  <PgfUseNextTag No >
  <PgfNextTag `'>
  <PgfAlignment Center >
  <PgfFIndent  0.0">
  <PgfLIndent  0.0">
  <PgfRIndent  0.0">
  <PgfTopSeparator `'>
  <PgfBotSeparator `'>
  <PgfPlacement Anywhere >
  <PgfPlacementStyle Normal >
  <PgfRunInDefaultPunct `. '>
  <PgfSpBefore  0.0 pt>
  <PgfSpAfter  0.0 pt>
  <PgfWithPrev No >
  <PgfWithNext No >
  <PgfBlockSize 2>
  <PgfFont 
   <FTag `'>
   <FFamily `Helvetica'>
   <FVar `Regular'>
   <FWeight `Bold'>
   <FAngle `Regular'>
   <FPostScriptName `Helvetica-Bold'>
   <FSize  18.0 pt>
   <FUnderlining FNoUnderlining >
   <FUnderline No >
   <FDoubleUnderline No >
   <FNumericUnderline No >
   <FOverline No >
   <FStrike No >
   <FChangeBar No >
   <FOutline No >
   <FShadow No >
   <FPairKern No >
   <FCase FAsTyped >
   <FPosition FNormal >
   <FSupScript No >
   <FSubScript No >
   <FDX  0.0 pt>
   <FDY  0.0 pt>
   <FDW  0.0 pt>
   <FSeparation 0>
   <FColor `Black'>
  > # end of PgfFont
  <PgfLineSpacing Floating >
  <PgfLeading  0.0 pt>
  <PgfAutoNum No >
  <PgfNumTabs 1>
  <TabStop 
   <TSX  8.0">
   <TSType Right >
   <TSLeaderStr ` '>
  > # end of TabStop
  <PgfHyphenate No >
  <HyphenMaxLines 4>
  <HyphenMinPrefix 2>
  <HyphenMinSuffix 2>
  <HyphenMinWord 5>
  <PgfLetterSpace No >
  <PgfMinWordSpace 75>
  <PgfOptWordSpace 100>
  <PgfMaxWordSpace 125>
  <PgfLanguage USEnglish >
  <PgfCellAlignment Top >
  <PgfCellMargins  0.0 pt 0.0 pt 0.0 pt 0.0 pt>
  <PgfCellLMarginFixed No >
  <PgfCellTMarginFixed No >
  <PgfCellRMarginFixed No >
  <PgfCellBMarginFixed No >
 > # end of Pgf
 <Pgf 
  <PgfTag `TRnumber'>
  <PgfUseNextTag Yes >
  <PgfNextTag `Date'>
  <PgfAlignment Left >
  <PgfFIndent  0.0">
  <PgfLIndent  0.0">
  <PgfRIndent  0.0">
  <PgfTopSeparator `'>
  <PgfBotSeparator `'>
  <PgfPlacement Anywhere >
  <PgfPlacementStyle Normal >
  <PgfRunInDefaultPunct `. '>
  <PgfSpBefore  4.0 pt>
  <PgfSpAfter  0.0 pt>
  <PgfWithPrev No >
  <PgfWithNext No >
  <PgfBlockSize 2>
  <PgfFont 
   <FTag `'>
   <FFamily `Helvetica'>
   <FVar `Regular'>
   <FWeight `Bold'>
   <FAngle `Regular'>
   <FPostScriptName `Helvetica-Bold'>
   <FSize  10.0 pt>
   <FUnderlining FNoUnderlining >
   <FUnderline No >
   <FDoubleUnderline No >
   <FNumericUnderline No >
   <FOverline No >
   <FStrike No >
   <FChangeBar No >
   <FOutline No >
   <FShadow No >
   <FPairKern No >
   <FCase FAsTyped >
   <FPosition FNormal >
   <FSupScript No >
   <FSubScript No >
   <FDX  0.0 pt>
   <FDY  0.0 pt>
   <FDW  0.0 pt>
   <FSeparation 0>
   <FColor `Black'>
  > # end of PgfFont
  <PgfLineSpacing Proportional >
  <PgfLeading  0.0 pt>
  <PgfAutoNum No >
  <PgfNumTabs 1>
  <TabStop 
   <TSX  8.0">
   <TSType Right >
   <TSLeaderStr ` '>
  > # end of TabStop
  <PgfHyphenate No >
  <HyphenMaxLines 0>
  <HyphenMinPrefix 2>
  <HyphenMinSuffix 2>
  <HyphenMinWord 5>
  <PgfLetterSpace No >
  <PgfMinWordSpace 75>
  <PgfOptWordSpace 100>
  <PgfMaxWordSpace 125>
  <PgfLanguage USEnglish >
  <PgfCellAlignment Top >
  <PgfCellMargins  0.0 pt 0.0 pt 0.0 pt 0.0 pt>
  <PgfCellLMarginFixed No >
  <PgfCellTMarginFixed No >
  <PgfCellRMarginFixed No >
  <PgfCellBMarginFixed No >
 > # end of Pgf
> # end of PgfCatalog
<ElementDefCatalog 
> # end of ElementDefCatalog
<FontCatalog 
 <Font 
  <FTag `Bold'>
  <FWeight `Bold'>
  <FOverline No >
  <FStrike No >
  <FChangeBar No >
  <FPairKern No >
  <FPosition FNormal >
  <FSupScript No >
  <FSubScript No >
  <FDW  0.0 pt>
  <FSeparation 0>
  <FColor `Black'>
 > # end of Font
 <Font 
  <FTag `Bullet Symbol'>
  <FFamily `ZapfDingbats'>
  <FVar `Regular'>
  <FWeight `Regular'>
  <FAngle `Regular'>
  <FPostScriptName `ZapfDingbats'>
  <FSize  7.0 pt>
  <FOverline No >
  <FStrike No >
  <FChangeBar No >
  <FPairKern Yes >
  <FPosition FNormal >
  <FSupScript No >
  <FSubScript No >
  <FDW  0.0 pt>
  <FSeparation 0>
  <FColor `Black'>
 > # end of Font
 <Font 
  <FTag `Callout'>
  <FFamily `Helvetica'>
  <FVar `Regular'>
  <FWeight `Regular'>
  <FAngle `Regular'>
  <FPostScriptName `Helvetica'>
  <FSize  8.0 pt>
  <FOverline No >
  <FStrike No >
  <FChangeBar No >
  <FPairKern Yes >
  <FPosition FNormal >
  <FSupScript No >
  <FSubScript No >
  <FDW  0.0 pt>
  <FSeparation 0>
  <FColor `Black'>
 > # end of Font
 <Font 
  <FTag `Emphasis'>
  <FAngle `Italic'>
 > # end of Font
 <Font 
  <FTag `Equation Number'>
  <FFamily `Helvetica'>
  <FVar `Regular'>
  <FWeight `Bold'>
  <FAngle `Regular'>
  <FPostScriptName `Helvetica-Bold'>
  <FSize  8.0 pt>
  <FOverline No >
  <FStrike No >
  <FChangeBar No >
  <FPairKern Yes >
  <FPosition FNormal >
  <FSupScript No >
  <FSubScript No >
  <FDW  0.0 pt>
  <FSeparation 0>
  <FColor `Black'>
 > # end of Font
 <Font 
  <FTag `EquationVariables'>
  <FAngle `Italic'>
 > # end of Font
 <Font 
  <FTag `First Letter'>
  <FFamily `Times'>
  <FVar `Regular'>
  <FWeight `Regular'>
  <FAngle `Regular'>
  <FPostScriptName `Times-Roman'>
  <FSize  24.0 pt>
  <FOverline No >
  <FStrike No >
  <FChangeBar No >
  <FPairKern Yes >
  <FPosition FNormal >
  <FSupScript No >
  <FSubScript No >
  <FDW  0.0 pt>
  <FSeparation 0>
  <FColor `Black'>
 > # end of Font
 <Font 
  <FTag `program'>
  <FFamily `Courier'>
  <FVar `Regular'>
  <FWeight `Regular'>
  <FAngle `Regular'>
  <FPostScriptName `Courier'>
  <FSize  9.0 pt>
  <FOverline No >
  <FStrike No >
  <FChangeBar No >
  <FPairKern No >
  <FPosition FNormal >
  <FSupScript No >
  <FSubScript No >
  <FDW  0.0 pt>
  <FSeparation 0>
  <FColor `Black'>
 > # end of Font
 <Font 
  <FTag `Run-In Heading'>
  <FFamily `Times'>
  <FVar `Regular'>
  <FWeight `Bold'>
  <FAngle `Regular'>
  <FPostScriptName `Times-Bold'>
  <FSize  10.0 pt>
  <FOverline No >
  <FStrike No >
  <FChangeBar No >
  <FPairKern Yes >
  <FPosition FNormal >
  <FSupScript No >
  <FSubScript No >
  <FDW  0.0 pt>
  <FSeparation 0>
  <FColor `Black'>
 > # end of Font
 <Font 
  <FTag `Step Number'>
  <FFamily `Helvetica'>
  <FVar `Regular'>
  <FWeight `Bold'>
  <FAngle `Regular'>
  <FPostScriptName `Helvetica-Bold'>
  <FSize  9.0 pt>
  <FOverline No >
  <FStrike No >
  <FChangeBar No >
  <FPairKern Yes >
  <FPosition FNormal >
  <FSupScript No >
  <FSubScript No >
  <FDW  0.0 pt>
  <FSeparation 0>
  <FColor `Black'>
 > # end of Font
 <Font 
  <FTag `Subscript'>
  <FPosition FSubscript >
  <FSupScript No >
  <FSubScript Yes >
 > # end of Font
 <Font 
  <FTag `Superscript'>
  <FPosition FSuperscript >
  <FSupScript Yes >
  <FSubScript No >
 > # end of Font
 <Font 
  <FTag `symbol'>
  <FFamily `Symbol'>
  <FVar `Regular'>
  <FWeight `Regular'>
  <FAngle `Regular'>
  <FPostScriptName `Symbol'>
  <FSize  10.0 pt>
  <FOverline No >
  <FStrike No >
  <FChangeBar No >
  <FPairKern No >
  <FPosition FNormal >
  <FSupScript No >
  <FSubScript No >
  <FDW  0.0 pt>
  <FSeparation 0>
  <FColor `Black'>
 > # end of Font
> # end of FontCatalog
<RulingCatalog 
 <Ruling 
  <RulingTag `Thin'>
  <RulingPenWidth  0.5 pt>
  <RulingGap  0.0 pt>
  <RulingSeparation 0>
  <RulingColor `Black'>
  <RulingPen 0>
  <RulingLines 1>
 > # end of Ruling
 <Ruling 
  <RulingTag `Medium'>
  <RulingPenWidth  2.0 pt>
  <RulingGap  0.0 pt>
  <RulingSeparation 0>
  <RulingColor `Black'>
  <RulingPen 0>
  <RulingLines 1>
 > # end of Ruling
 <Ruling 
  <RulingTag `Double'>
  <RulingPenWidth  0.5 pt>
  <RulingGap  2.0 pt>
  <RulingSeparation 0>
  <RulingColor `Black'>
  <RulingPen 0>
  <RulingLines 2>
 > # end of Ruling
 <Ruling 
  <RulingTag `Thick'>
  <RulingPenWidth  3.0 pt>
  <RulingGap  0.0 pt>
  <RulingSeparation 0>
  <RulingColor `Black'>
  <RulingPen 0>
  <RulingLines 1>
 > # end of Ruling
 <Ruling 
  <RulingTag `Very Thin'>
  <RulingPenWidth  0.25 pt>
  <RulingGap  0.0 pt>
  <RulingSeparation 0>
  <RulingColor `Black'>
  <RulingPen 0>
  <RulingLines 1>
 > # end of Ruling
> # end of RulingCatalog
<TblCatalog 
 <TblFormat 
  <TblTag `Format B'>
  <TblColumn 
   <TblColumnNum 0>
   <TblColumnWidth  1.0">
   <TblColumnH 
    <Pgf 
     <PgfTag `CellHeading'>
     <PgfUseNextTag No >
     <PgfNextTag `'>
     <PgfAlignment Center >
     <PgfSpBefore  0.0 pt>
     <PgfBlockSize 1>
     <PgfFont 
      <FTag `'>
      <FFamily `Times'>
      <FVar `Regular'>
      <FWeight `Regular'>
      <FAngle `Regular'>
      <FPostScriptName `Times-Roman'>
      <FSize  12.0 pt>
      <FUnderlining FNoUnderlining >
      <FUnderline No >
      <FDoubleUnderline No >
      <FNumericUnderline No >
      <FOverline No >
      <FStrike No >
      <FChangeBar No >
      <FOutline No >
      <FShadow No >
      <FPairKern Yes >
      <FCase FAsTyped >
      <FPosition FNormal >
      <FSupScript No >
      <FSubScript No >
      <FDX  0.0 pt>
      <FDY  0.0 pt>
      <FDW  0.0 pt>
      <FSeparation 0>
      <FColor `Black'>
     > # end of PgfFont
     <PgfLineSpacing Fixed >
     <PgfLeading  2.0 pt>
     <PgfNumTabs 0>
     <HyphenMaxLines 2>
     <HyphenMinPrefix 3>
     <HyphenMinSuffix 3>
     <PgfMinWordSpace 90>
     <PgfMaxWordSpace 110>
     <PgfCellAlignment Middle >
     <PgfCellMargins  0.0 pt 2.0 pt 0.0 pt 2.0 pt>
    > # end of Pgf
   > # end of TblColumnH
   <TblColumnBody 
    <PgfTag `CellBody'>
   > # end of TblColumnBody
   <TblColumnF 
    <Pgf 
     <PgfTag `CellHeading'>
     <PgfAlignment Center >
     <PgfFont 
      <FTag `'>
      <FFamily `Times'>
      <FVar `Regular'>
      <FWeight `Regular'>
      <FAngle `Regular'>
      <FPostScriptName `Times-Roman'>
      <FSize  12.0 pt>
      <FUnderlining FNoUnderlining >
      <FUnderline No >
      <FDoubleUnderline No >
      <FNumericUnderline No >
      <FOverline No >
      <FStrike No >
      <FChangeBar No >
      <FOutline No >
      <FShadow No >
      <FPairKern Yes >
      <FCase FAsTyped >
      <FPosition FNormal >
      <FSupScript No >
      <FSubScript No >
      <FDX  0.0 pt>
      <FDY  0.0 pt>
      <FDW  0.0 pt>
      <FSeparation 0>
      <FColor `Black'>
     > # end of PgfFont
     <PgfHyphenate No >
     <PgfCellAlignment Middle >
     <PgfCellMargins  0.0 pt 2.0 pt 0.0 pt 2.0 pt>
    > # end of Pgf
   > # end of TblColumnF
  > # end of TblColumn
  <TblColumn 
   <TblColumnNum 1>
   <TblColumnWidth  1.0">
   <TblColumnH 
   > # end of TblColumnH
   <TblColumnBody 
    <PgfTag `CellBody'>
   > # end of TblColumnBody
   <TblColumnF 
    <Pgf 
     <PgfTag `CellHeading'>
     <PgfAlignment Center >
     <PgfFont 
      <FTag `'>
      <FFamily `Times'>
      <FVar `Regular'>
      <FWeight `Regular'>
      <FAngle `Regular'>
      <FPostScriptName `Times-Roman'>
      <FSize  12.0 pt>
      <FUnderlining FNoUnderlining >
      <FUnderline No >
      <FDoubleUnderline No >
      <FNumericUnderline No >
      <FOverline No >
      <FStrike No >
      <FChangeBar No >
      <FOutline No >
      <FShadow No >
      <FPairKern Yes >
      <FCase FAsTyped >
      <FPosition FNormal >
      <FSupScript No >
      <FSubScript No >
      <FDX  0.0 pt>
      <FDY  0.0 pt>
      <FDW  0.0 pt>
      <FSeparation 0>
      <FColor `Black'>
     > # end of PgfFont
     <PgfHyphenate No >
     <PgfCellAlignment Middle >
     <PgfCellMargins  0.0 pt 2.0 pt 0.0 pt 2.0 pt>
    > # end of Pgf
   > # end of TblColumnF
  > # end of TblColumn
  <TblColumn 
   <TblColumnNum 2>
   <TblColumnWidth  1.0">
   <TblColumnH 
   > # end of TblColumnH
   <TblColumnBody 
    <PgfTag `CellBody'>
   > # end of TblColumnBody
   <TblColumnF 
    <Pgf 
     <PgfTag `CellHeading'>
     <PgfAlignment Center >
     <PgfFont 
      <FTag `'>
      <FFamily `Times'>
      <FVar `Regular'>
      <FWeight `Regular'>
      <FAngle `Regular'>
      <FPostScriptName `Times-Roman'>
      <FSize  12.0 pt>
      <FUnderlining FNoUnderlining >
      <FUnderline No >
      <FDoubleUnderline No >
      <FNumericUnderline No >
      <FOverline No >
      <FStrike No >
      <FChangeBar No >
      <FOutline No >
      <FShadow No >
      <FPairKern Yes >
      <FCase FAsTyped >
      <FPosition FNormal >
      <FSupScript No >
      <FSubScript No >
      <FDX  0.0 pt>
      <FDY  0.0 pt>
      <FDW  0.0 pt>
      <FSeparation 0>
      <FColor `Black'>
     > # end of PgfFont
     <PgfHyphenate No >
     <PgfCellAlignment Middle >
     <PgfCellMargins  0.0 pt 2.0 pt 0.0 pt 2.0 pt>
    > # end of Pgf
   > # end of TblColumnF
  > # end of TblColumn
  <TblColumn 
   <TblColumnNum 3>
   <TblColumnWidth  1.0">
   <TblColumnH 
   > # end of TblColumnH
   <TblColumnBody 
    <PgfTag `CellBody'>
   > # end of TblColumnBody
   <TblColumnF 
    <Pgf 
     <PgfTag `CellHeading'>
     <PgfAlignment Center >
     <PgfFont 
      <FTag `'>
      <FFamily `Times'>
      <FVar `Regular'>
      <FWeight `Regular'>
      <FAngle `Regular'>
      <FPostScriptName `Times-Roman'>
      <FSize  12.0 pt>
      <FUnderlining FNoUnderlining >
      <FUnderline No >
      <FDoubleUnderline No >
      <FNumericUnderline No >
      <FOverline No >
      <FStrike No >
      <FChangeBar No >
      <FOutline No >
      <FShadow No >
      <FPairKern Yes >
      <FCase FAsTyped >
      <FPosition FNormal >
      <FSupScript No >
      <FSubScript No >
      <FDX  0.0 pt>
      <FDY  0.0 pt>
      <FDW  0.0 pt>
      <FSeparation 0>
      <FColor `Black'>
     > # end of PgfFont
     <PgfHyphenate No >
     <PgfCellAlignment Middle >
     <PgfCellMargins  0.0 pt 2.0 pt 0.0 pt 2.0 pt>
    > # end of Pgf
   > # end of TblColumnF
  > # end of TblColumn
  <TblColumn 
   <TblColumnNum 4>
   <TblColumnWidth  1.0">
   <TblColumnH 
   > # end of TblColumnH
   <TblColumnBody 
    <PgfTag `CellBody'>
   > # end of TblColumnBody
   <TblColumnF 
    <Pgf 
     <PgfTag `CellHeading'>
     <PgfAlignment Center >
     <PgfFont 
      <FTag `'>
      <FFamily `Times'>
      <FVar `Regular'>
      <FWeight `Regular'>
      <FAngle `Regular'>
      <FPostScriptName `Times-Roman'>
      <FSize  12.0 pt>
      <FUnderlining FNoUnderlining >
      <FUnderline No >
      <FDoubleUnderline No >
      <FNumericUnderline No >
      <FOverline No >
      <FStrike No >
      <FChangeBar No >
      <FOutline No >
      <FShadow No >
      <FPairKern Yes >
      <FCase FAsTyped >
      <FPosition FNormal >
      <FSupScript No >
      <FSubScript No >
      <FDX  0.0 pt>
      <FDY  0.0 pt>
      <FDW  0.0 pt>
      <FSeparation 0>
      <FColor `Black'>
     > # end of PgfFont
     <PgfHyphenate No >
     <PgfCellAlignment Middle >
     <PgfCellMargins  0.0 pt 2.0 pt 0.0 pt 2.0 pt>
    > # end of Pgf
   > # end of TblColumnF
  > # end of TblColumn
  <TblCellMargins  6.0 pt 6.0 pt 6.0 pt 4.0 pt>
  <TblLIndent  0.0">
  <TblRIndent  0.0">
  <TblAlignment Center >
  <TblPlacement Anywhere >
  <TblSpBefore  12.0 pt>
  <TblSpAfter  12.0 pt>
  <TblBlockSize 1>
  <TblHFFill 15>
  <TblHFSeparation 0>
  <TblHFColor `Black'>
  <TblBodyFill 15>
  <TblBodySeparation 0>
  <TblBodyColor `Black'>
  <TblShadeByColumn No >
  <TblShadePeriod 2>
  <TblXFill 15>
  <TblXSeparation 0>
  <TblXColor `Black'>
  <TblAltShadePeriod 2>
  <TblLRuling `'>
  <TblBRuling `Thin'>
  <TblRRuling `'>
  <TblTRuling `Medium'>
  <TblColumnRuling `Thin'>
  <TblXColumnRuling `Thin'>
  <TblBodyRowRuling `Thin'>
  <TblXRowRuling `Thin'>
  <TblHFRowRuling `Thin'>
  <TblSeparatorRuling `Medium'>
  <TblXColumnNum 1>
  <TblRulingPeriod 4>
  <TblLastBRuling No >
  <TblTitlePlacement InHeader >
  <TblTitlePgf1 
   <Pgf 
    <PgfTag `TableTitle'>
    <PgfFont 
     <FTag `'>
     <FFamily `Times'>
     <FVar `Regular'>
     <FWeight `Bold'>
     <FAngle `Regular'>
     <FPostScriptName `Times-Bold'>
     <FSize  12.0 pt>
     <FUnderlining FNoUnderlining >
     <FUnderline No >
     <FDoubleUnderline No >
     <FNumericUnderline No >
     <FOverline No >
     <FStrike No >
     <FChangeBar No >
     <FOutline No >
     <FShadow No >
     <FPairKern Yes >
     <FCase FAsTyped >
     <FPosition FNormal >
     <FSupScript No >
     <FSubScript No >
     <FDX  0.0 pt>
     <FDY  0.0 pt>
     <FDW  0.0 pt>
     <FSeparation 0>
     <FColor `Black'>
    > # end of PgfFont
    <PgfAutoNum Yes >
    <PgfNumFormat `T:Table <n+\>: '>
    <PgfNumberFont `'>
    <PgfNumAtEnd No >
    <PgfCellAlignment Top >
    <PgfCellMargins  0.0 pt 0.0 pt 0.0 pt 0.0 pt>
   > # end of Pgf
  > # end of TblTitlePgf1
  <TblTitleGap  6.0 pt>
  <TblInitNumColumns 7>
  <TblInitNumHRows 0>
  <TblInitNumBodyRows 1>
  <TblInitNumFRows 0>
  <TblNumByColumn No >
 > # end of TblFormat
 <TblFormat 
  <TblTag `Format A'>
  <TblColumn 
   <TblColumnNum 0>
   <TblColumnWidth  1.0">
   <TblColumnH 
    <Pgf 
     <PgfTag `CellHeading'>
     <PgfFont 
      <FTag `'>
      <FFamily `Times'>
      <FVar `Regular'>
      <FWeight `Regular'>
      <FAngle `Regular'>
      <FPostScriptName `Times-Roman'>
      <FSize  12.0 pt>
      <FUnderlining FNoUnderlining >
      <FUnderline No >
      <FDoubleUnderline No >
      <FNumericUnderline No >
      <FOverline No >
      <FStrike No >
      <FChangeBar No >
      <FOutline No >
      <FShadow No >
      <FPairKern Yes >
      <FCase FAsTyped >
      <FPosition FNormal >
      <FSupScript No >
      <FSubScript No >
      <FDX  0.0 pt>
      <FDY  0.0 pt>
      <FDW  0.0 pt>
      <FSeparation 0>
      <FColor `Black'>
     > # end of PgfFont
     <PgfAutoNum No >
     <PgfCellAlignment Middle >
     <PgfCellMargins  0.0 pt 2.0 pt 0.0 pt 2.0 pt>
    > # end of Pgf
   > # end of TblColumnH
   <TblColumnBody 
    <PgfTag `CellBody'>
   > # end of TblColumnBody
   <TblColumnF 
    <Pgf 
     <PgfTag `CellHeading'>
     <PgfAlignment Center >
     <PgfFont 
      <FTag `'>
      <FFamily `Times'>
      <FVar `Regular'>
      <FWeight `Regular'>
      <FAngle `Regular'>
      <FPostScriptName `Times-Roman'>
      <FSize  12.0 pt>
      <FUnderlining FNoUnderlining >
      <FUnderline No >
      <FDoubleUnderline No >
      <FNumericUnderline No >
      <FOverline No >
      <FStrike No >
      <FChangeBar No >
      <FOutline No >
      <FShadow No >
      <FPairKern Yes >
      <FCase FAsTyped >
      <FPosition FNormal >
      <FSupScript No >
      <FSubScript No >
      <FDX  0.0 pt>
      <FDY  0.0 pt>
      <FDW  0.0 pt>
      <FSeparation 0>
      <FColor `Black'>
     > # end of PgfFont
     <PgfHyphenate No >
     <PgfCellAlignment Middle >
     <PgfCellMargins  0.0 pt 2.0 pt 0.0 pt 2.0 pt>
    > # end of Pgf
   > # end of TblColumnF
  > # end of TblColumn
  <TblColumn 
   <TblColumnNum 1>
   <TblColumnWidth  1.0">
   <TblColumnH 
   > # end of TblColumnH
   <TblColumnBody 
    <PgfTag `CellBody'>
   > # end of TblColumnBody
   <TblColumnF 
    <Pgf 
     <PgfTag `CellHeading'>
     <PgfAlignment Center >
     <PgfFont 
      <FTag `'>
      <FFamily `Times'>
      <FVar `Regular'>
      <FWeight `Regular'>
      <FAngle `Regular'>
      <FPostScriptName `Times-Roman'>
      <FSize  12.0 pt>
      <FUnderlining FNoUnderlining >
      <FUnderline No >
      <FDoubleUnderline No >
      <FNumericUnderline No >
      <FOverline No >
      <FStrike No >
      <FChangeBar No >
      <FOutline No >
      <FShadow No >
      <FPairKern Yes >
      <FCase FAsTyped >
      <FPosition FNormal >
      <FSupScript No >
      <FSubScript No >
      <FDX  0.0 pt>
      <FDY  0.0 pt>
      <FDW  0.0 pt>
      <FSeparation 0>
      <FColor `Black'>
     > # end of PgfFont
     <PgfHyphenate No >
     <PgfCellAlignment Middle >
     <PgfCellMargins  0.0 pt 2.0 pt 0.0 pt 2.0 pt>
    > # end of Pgf
   > # end of TblColumnF
  > # end of TblColumn
  <TblColumn 
   <TblColumnNum 2>
   <TblColumnWidth  1.0">
   <TblColumnH 
   > # end of TblColumnH
   <TblColumnBody 
    <PgfTag `CellBody'>
   > # end of TblColumnBody
   <TblColumnF 
    <Pgf 
     <PgfTag `CellHeading'>
     <PgfAlignment Center >
     <PgfFont 
      <FTag `'>
      <FFamily `Times'>
      <FVar `Regular'>
      <FWeight `Regular'>
      <FAngle `Regular'>
      <FPostScriptName `Times-Roman'>
      <FSize  12.0 pt>
      <FUnderlining FNoUnderlining >
      <FUnderline No >
      <FDoubleUnderline No >
      <FNumericUnderline No >
      <FOverline No >
      <FStrike No >
      <FChangeBar No >
      <FOutline No >
      <FShadow No >
      <FPairKern Yes >
      <FCase FAsTyped >
      <FPosition FNormal >
      <FSupScript No >
      <FSubScript No >
      <FDX  0.0 pt>
      <FDY  0.0 pt>
      <FDW  0.0 pt>
      <FSeparation 0>
      <FColor `Black'>
     > # end of PgfFont
     <PgfHyphenate No >
     <PgfCellAlignment Middle >
     <PgfCellMargins  0.0 pt 2.0 pt 0.0 pt 2.0 pt>
    > # end of Pgf
   > # end of TblColumnF
  > # end of TblColumn
  <TblColumn 
   <TblColumnNum 3>
   <TblColumnWidth  1.0">
   <TblColumnH 
   > # end of TblColumnH
   <TblColumnBody 
    <PgfTag `CellBody'>
   > # end of TblColumnBody
   <TblColumnF 
    <Pgf 
     <PgfTag `CellHeading'>
     <PgfAlignment Center >
     <PgfFont 
      <FTag `'>
      <FFamily `Times'>
      <FVar `Regular'>
      <FWeight `Regular'>
      <FAngle `Regular'>
      <FPostScriptName `Times-Roman'>
      <FSize  12.0 pt>
      <FUnderlining FNoUnderlining >
      <FUnderline No >
      <FDoubleUnderline No >
      <FNumericUnderline No >
      <FOverline No >
      <FStrike No >
      <FChangeBar No >
      <FOutline No >
      <FShadow No >
      <FPairKern Yes >
      <FCase FAsTyped >
      <FPosition FNormal >
      <FSupScript No >
      <FSubScript No >
      <FDX  0.0 pt>
      <FDY  0.0 pt>
      <FDW  0.0 pt>
      <FSeparation 0>
      <FColor `Black'>
     > # end of PgfFont
     <PgfHyphenate No >
     <PgfCellAlignment Middle >
     <PgfCellMargins  0.0 pt 2.0 pt 0.0 pt 2.0 pt>
    > # end of Pgf
   > # end of TblColumnF
  > # end of TblColumn
  <TblColumn 
   <TblColumnNum 4>
   <TblColumnWidth  1.0">
   <TblColumnH 
   > # end of TblColumnH
   <TblColumnBody 
    <PgfTag `CellBody'>
   > # end of TblColumnBody
   <TblColumnF 
    <Pgf 
     <PgfTag `CellHeading'>
     <PgfAlignment Center >
     <PgfFont 
      <FTag `'>
      <FFamily `Times'>
      <FVar `Regular'>
      <FWeight `Regular'>
      <FAngle `Regular'>
      <FPostScriptName `Times-Roman'>
      <FSize  12.0 pt>
      <FUnderlining FNoUnderlining >
      <FUnderline No >
      <FDoubleUnderline No >
      <FNumericUnderline No >
      <FOverline No >
      <FStrike No >
      <FChangeBar No >
      <FOutline No >
      <FShadow No >
      <FPairKern Yes >
      <FCase FAsTyped >
      <FPosition FNormal >
      <FSupScript No >
      <FSubScript No >
      <FDX  0.0 pt>
      <FDY  0.0 pt>
      <FDW  0.0 pt>
      <FSeparation 0>
      <FColor `Black'>
     > # end of PgfFont
     <PgfHyphenate No >
     <PgfCellAlignment Middle >
     <PgfCellMargins  0.0 pt 2.0 pt 0.0 pt 2.0 pt>
    > # end of Pgf
   > # end of TblColumnF
  > # end of TblColumn
  <TblCellMargins  6.0 pt 6.0 pt 6.0 pt 4.0 pt>
  <TblLIndent  0.0">
  <TblRIndent  0.0">
  <TblAlignment Center >
  <TblPlacement Anywhere >
  <TblSpBefore  12.0 pt>
  <TblSpAfter  12.0 pt>
  <TblBlockSize 1>
  <TblHFFill 15>
  <TblHFSeparation 0>
  <TblHFColor `Black'>
  <TblBodyFill 15>
  <TblBodySeparation 0>
  <TblBodyColor `Black'>
  <TblShadeByColumn No >
  <TblShadePeriod 2>
  <TblXFill 15>
  <TblXSeparation 0>
  <TblXColor `Black'>
  <TblAltShadePeriod 2>
  <TblLRuling `Thin'>
  <TblBRuling `Thin'>
  <TblRRuling `Thin'>
  <TblTRuling `Thin'>
  <TblColumnRuling `Thin'>
  <TblXColumnRuling `Thin'>
  <TblBodyRowRuling `Thin'>
  <TblXRowRuling `Thin'>
  <TblHFRowRuling `Thin'>
  <TblSeparatorRuling `Double'>
  <TblXColumnNum 1>
  <TblRulingPeriod 4>
  <TblLastBRuling No >
  <TblTitlePlacement InHeader >
  <TblTitlePgf1 
   <Pgf 
    <PgfTag `TableTitle'>
    <PgfFont 
     <FTag `'>
     <FFamily `Times'>
     <FVar `Regular'>
     <FWeight `Bold'>
     <FAngle `Regular'>
     <FPostScriptName `Times-Bold'>
     <FSize  12.0 pt>
     <FUnderlining FNoUnderlining >
     <FUnderline No >
     <FDoubleUnderline No >
     <FNumericUnderline No >
     <FOverline No >
     <FStrike No >
     <FChangeBar No >
     <FOutline No >
     <FShadow No >
     <FPairKern Yes >
     <FCase FAsTyped >
     <FPosition FNormal >
     <FSupScript No >
     <FSubScript No >
     <FDX  0.0 pt>
     <FDY  0.0 pt>
     <FDW  0.0 pt>
     <FSeparation 0>
     <FColor `Black'>
    > # end of PgfFont
    <PgfAutoNum Yes >
    <PgfNumFormat `T:Table <n+\>: '>
    <PgfNumberFont `'>
    <PgfNumAtEnd No >
    <PgfCellAlignment Top >
    <PgfCellMargins  0.0 pt 0.0 pt 0.0 pt 0.0 pt>
   > # end of Pgf
  > # end of TblTitlePgf1
  <TblTitleGap  6.0 pt>
  <TblInitNumColumns 5>
  <TblInitNumHRows 1>
  <TblInitNumBodyRows 6>
  <TblInitNumFRows 0>
  <TblNumByColumn No >
 > # end of TblFormat
> # end of TblCatalog
<Views 
 <View 
  <ViewNumber 1>
  <ViewCutout `White'>
 > # end of View
 <View 
  <ViewNumber 2>
  <ViewCutout `White'>
  <ViewInvisible `Red'>
  <ViewInvisible `Green'>
  <ViewInvisible `Blue'>
  <ViewInvisible `Cyan'>
  <ViewInvisible `Magenta'>
 > # end of View
 <View 
  <ViewNumber 3>
  <ViewInvisible `Black'>
  <ViewCutout `White'>
 > # end of View
 <View 
  <ViewNumber 4>
  <ViewCutout `White'>
 > # end of View
 <View 
  <ViewNumber 5>
  <ViewCutout `White'>
 > # end of View
 <View 
  <ViewNumber 6>
  <ViewCutout `White'>
 > # end of View
> # end of Views
<VariableFormats 
 <VariableFormat 
  <VariableName `Current Date (Long)'>
  <VariableDef `<$monthname\> <$daynum\>, <$year\>'>
 > # end of VariableFormat
 <VariableFormat 
  <VariableName `Running H/F 1'>
  <VariableDef `<$paratext[Title]\>'>
 > # end of VariableFormat
 <VariableFormat 
  <VariableName `Running H/F 2'>
  <VariableDef `<$paratext[Heading]\>'>
 > # end of VariableFormat
 <VariableFormat 
  <VariableName `Current Page #'>
  <VariableDef `<$curpagenum\>'>
 > # end of VariableFormat
 <VariableFormat 
  <VariableName `Page Count'>
  <VariableDef `<$lastpagenum\>'>
 > # end of VariableFormat
 <VariableFormat 
  <VariableName `Modification Date (Short)'>
  <VariableDef `<$monthname\> <$daynum\>, <$year\>'>
 > # end of VariableFormat
 <VariableFormat 
  <VariableName `Modification Date (Long)'>
  <VariableDef `<$monthname\> <$daynum\>, <$year\> <$hour\>:<$minute00\> <$ampm\>'>
 > # end of VariableFormat
 <VariableFormat 
  <VariableName `Current Date (Short)'>
  <VariableDef `<$monthnum\>/<$daynum\>/<$shortyear\>'>
 > # end of VariableFormat
 <VariableFormat 
  <VariableName `Creation Date (Long)'>
  <VariableDef `<$monthname\> <$daynum\>, <$year\>'>
 > # end of VariableFormat
 <VariableFormat 
  <VariableName `Creation Date (Short)'>
  <VariableDef `<$monthnum\>/<$daynum\>/<$shortyear\>'>
 > # end of VariableFormat
 <VariableFormat 
  <VariableName `Filename (Long)'>
  <VariableDef `<$fullfilename\>'>
 > # end of VariableFormat
 <VariableFormat 
  <VariableName `Filename (Short)'>
  <VariableDef `<$filename\>'>
 > # end of VariableFormat
 <VariableFormat 
  <VariableName `Running H/F 3'>
  <VariableDef `<$marker1\>'>
 > # end of VariableFormat
 <VariableFormat 
  <VariableName `Running H/F 4'>
  <VariableDef `<$marker2\>'>
 > # end of VariableFormat
 <VariableFormat 
  <VariableName `Table Continuation'>
  <VariableDef ` (Continued)'>
 > # end of VariableFormat
 <VariableFormat 
  <VariableName `Table Sheet'>
  <VariableDef ` (Sheet <$tblsheetnum\> of <$tblsheetcount\>)'>
 > # end of VariableFormat
> # end of VariableFormats
<XRefFormats 
 <XRefFormat 
  <XRefName `Section & Heading'>
  <XRefDef `Section <$paranum\> (<$paratext\>)'>
 > # end of XRefFormat
 <XRefFormat 
  <XRefName `Page'>
  <XRefDef `page <$pagenum\>'>
 > # end of XRefFormat
 <XRefFormat 
  <XRefName `Heading & Page'>
  <XRefDef `<$paratext\> on page <$pagenum\>'>
 > # end of XRefFormat
 <XRefFormat 
  <XRefName `Section & Page'>
  <XRefDef `section <$paranum\> on page <$pagenum\>'>
 > # end of XRefFormat
 <XRefFormat 
  <XRefName `Section'>
  <XRefDef `section <$paranum\>'>
 > # end of XRefFormat
> # end of XRefFormats
<Document 
 <DViewRect 108 37 1026 764 >
 <DWindowRect 84 11 1070 867 >
 <DViewScale  200.0%>
 <DNextUnique 10544>
 <DPageSize  8.5" 11.0">
 <DStartPage -1>
 <DPageNumStyle Arabic >
 <DPagePointStyle Arabic >
 <DTwoSides Yes >
 <DParity FirstRight >
 <DFrozenPages No >
 <DPageRounding DeleteEmptyPages >
 <DMaxInterLine  2.0 pt>
 <DMaxInterPgf  6.0 pt>
 <DFNoteMaxH  4.0">
 <FNoteStartNum 1>
 <DFNoteRestart PerFlow >
 <DFNoteTag `Footnote'>
 <DFNoteLabels `*\xa0 \xe0 '>
 <DFNoteNumStyle Arabic >
 <DFNoteAnchorPos FNSuperscript >
 <DFNoteNumberPos FNBaseline >
 <DFNoteAnchorPrefix `'>
 <DFNoteAnchorSuffix `'>
 <DFNoteNumberPrefix `'>
 <DFNoteNumberSuffix `. '>
 <DTblFNoteTag `TableFootnote'>
 <DTblFNoteLabels `*\xa0 \xe0 '>
 <DTblFNoteNumStyle LCAlpha >
 <DTblFNoteAnchorPos FNSuperscript >
 <DTblFNoteNumberPos FNBaseline >
 <DTblFNoteAnchorPrefix `'>
 <DTblFNoteAnchorSuffix `'>
 <DTblFNoteNumberPrefix `'>
 <DTblFNoteNumberSuffix `. '>
 <DLinebreakChars `/ - \xd0  \xd1 '>
 <DPunctuationChars `:;,.\xc9 !?'>
 <DChBarGap  0.25">
 <DChBarWidth  2.0 pt>
 <DChBarPosition LeftOfCol >
 <DChBarColor `Black'>
 <DAutoChBars No >
 <DShowAllConditions Yes >
 <DDisplayOverrides Yes >
 <DViewOnly No >
 <DViewOnlyXRef GotoBehavior >
 <DViewOnlySelect Yes >
 <DViewOnlyWinBorders Yes >
 <DViewOnlyWinMenubar Yes >
 <DViewOnlyWinPopup Yes >
 <DViewOnlyWinPalette No >
 <DGridOn No >
 <DPageGrid  0.25">
 <DSnapGrid  0.125">
 <DSnapRotation  0.0>
 <DRulersOn Yes >
 <DFullRulers Yes >
 <DGraphicsOff No >
 <DCurrentView 1>
 <DBordersOn Yes >
 <DSymbolsOn No >
 <DElementBordersOn No >
 <DSmartQuotesOn Yes >
 <DSmartSpacesOn Yes >
 <DLanguage USEnglish >
 <DSuperscriptSize  80.0%>
 <DSubscriptSize  80.0%>
 <DSmallCapsSize  80.0%>
 <DSuperscriptShift  40.0%>
 <DSubscriptShift  25.0%>
 <DMathAlphaCharFontFamily `Times'>
 <DMathSmallIntegral  14.0 pt>
 <DMathMediumIntegral  18.0 pt>
 <DMathLargeIntegral  24.0 pt>
 <DMathSmallSigma  14.0 pt>
 <DMathMediumSigma  18.0 pt>
 <DMathLargeSigma  24.0 pt>
 <DMathSmallLevel1  9.0 pt>
 <DMathMediumLevel1  12.0 pt>
 <DMathLargeLevel1  14.0 pt>
 <DMathSmallLevel2  7.0 pt>
 <DMathMediumLevel2  9.0 pt>
 <DMathLargeLevel2  12.0 pt>
 <DMathSmallLevel3  5.0 pt>
 <DMathMediumLevel3  6.0 pt>
 <DMathLargeLevel3  8.0 pt>
 <DMathSmallHoriz  0.0 pt>
 <DMathMediumHoriz  0.0 pt>
 <DMathLargeHoriz  0.0 pt>
 <DMathSmallVert  0.0 pt>
 <DMathMediumVert  0.0 pt>
 <DMathLargeVert  0.0 pt>
 <DMathShowCustom No >
 <DMathFunctions `'>
 <DMathNumbers `'>
 <DMathVariables `EquationVariables'>
 <DMathStrings `'>
 <DMathGreek `'>
  <DMathCatalog >
 <DElementCatalogScope Strict >
 <DPrintSkipBlankPages No >
 <DPrintSeparations No >
 <DNoPrintSepColor `White'>
> # end of Document
<BookComponent 
 <FileName `<c\>tmpLOT.doc'>
 <FileNameSuffix `LOT'>
 <DeriveLinks No >
 <DeriveType LOT >
 <DeriveTag `Table'>
> # end of BookComponent
<BookComponent 
 <FileName `<c\>tmpLOF.doc'>
 <FileNameSuffix `LOF'>
 <DeriveLinks No >
 <DeriveType LOF >
 <DeriveTag `Figure'>
> # end of BookComponent
<BookComponent 
 <FileName `<c\>tmpTOC.doc'>
 <FileNameSuffix `TOC'>
 <DeriveLinks No >
 <DeriveType TOC >
 <DeriveTag `section'>
 <DeriveTag `subsection'>
 <DeriveTag `subsubsection'>
> # end of BookComponent
<InitialAutoNums 
> # end of InitialAutoNums
<Dictionary 
<OKWord `Bakkers'>
<OKWord `Bretton'>
<OKWord `Das'>
<OKWord `Douglis'>
<OKWord `Fabry'>
<OKWord `Lampson'>
<OKWord `Leffler'>
<OKWord `McKusick'>
<OKWord `Ousterhout'>
<OKWord `ReversePointer'>
<OKWord `ReversePointer<T\>'>
<OKWord `ReversePointer<T\>(i'>
<OKWord `Rheingold'>
<OKWord `argc'>
<OKWord `argv'>
<OKWord `blockdegrades'>
<OKWord `bursty'>
<OKWord `caching,and'>
<OKWord `checkpointing'>
<OKWord `erase(T'>
<OKWord `expectedChange'>
<OKWord `filesystems'>
<OKWord `freemap'>
<OKWord `ghee'>
<OKWord `int'>
<OKWord `loh'>
<OKWord `main(int'>
<OKWord `mergeCopy'>
<OKWord `mergeCopy(a'>
<OKWord `offs'>
<OKWord `read:write'>
<OKWord `theoretically,make'>
<OKWord `usr'>
<OKWord `workloads'>
> # end of Dictionary
<AFrames 
 <Frame 
  <ID 1>
  <Unique 8179>
  <Pen 15>
  <Fill 15>
  <PenWidth  1.0 pt>
  <Separation 0>
  <ObColor `Black'>
  <DashedPattern 
   <DashedStyle Solid >
  > # end of DashedPattern
  <Angle  360.0>
  <Overprint No >
  <ShapeRect  1.88281" 4.555" 4.73437" 1.66666">
  <BRect  1.88281" 4.555" 4.73437" 1.66666">
  <FrameType Below >
  <Float No >
  <NSOffset  0.0">
  <BLOffset  0.0">
  <AnchorAlign Center >
  <Cropped Yes >
  <TextRect 
   <ID 2>
   <Unique 8181>
   <Fill 7>
   <PenWidth  0.5 pt>
   <Overprint No >
   <ShapeRect  0.125" 0.125" 4.5" 1.43055">
   <BRect  0.125" 0.125" 4.5" 1.43055">
   <TRNext 0>
  > # end of TextRect
 > # end of Frame
 <Frame 
  <ID 3>
  <Unique 38849>
  <Pen 15>
  <Fill 15>
  <PenWidth  1.0 pt>
  <Separation 0>
  <ObColor `Black'>
  <DashedPattern 
   <DashedStyle Solid >
  > # end of DashedPattern
  <Angle  360.0>
  <Overprint No >
  <ShapeRect  1.0" 7.81077" 6.5" 1.125">
  <BRect  1.0" 7.81077" 6.5" 1.125">
  <FrameType Below >
  <Float No >
  <NSOffset  0.0">
  <BLOffset  -0.36111">
  <AnchorAlign Left >
  <Cropped Yes >
  <TextRect 
   <ID 4>
   <Unique 38854>
   <Fill 7>
   <PenWidth  0.5 pt>
   <Overprint No >
   <ShapeRect  0.0" -0.23611" 6.5" 1.375">
   <BRect  0.0" -0.23611" 6.5" 1.375">
   <TRNext 0>
  > # end of TextRect
  <PolyLine 
   <Unique 10>
   <GroupID 5>
   <Pen 0>
   <HeadCap Square >
   <HeadCap ArrowHead >
   <TailCap Square >
   <ArrowStyle 
    <TipAngle 30>
    <BaseAngle 90>
    <Length  6.0 pt>
    <HeadType Stick >
    <ScaleHead Yes >
    <ScaleFactor  0.25 pt>
   > # end of ArrowStyle
   <Overprint No >
   <NumPoints 2>
   <Point  1.70833" 0.65972">
   <Point  2.08333" 0.65972">
  > # end of PolyLine
  <PolyLine 
   <Unique 12>
   <GroupID 5>
   <Overprint No >
   <NumPoints 2>
   <Point  3.45833" 0.65972">
   <Point  3.83333" 0.65972">
  > # end of PolyLine
  <PolyLine 
   <Unique 14>
   <GroupID 5>
   <Overprint No >
   <NumPoints 2>
   <Point  4.83333" 0.65972">
   <Point  5.20833" 0.53472">
  > # end of PolyLine
  <PolyLine 
   <Unique 16>
   <GroupID 5>
   <Overprint No >
   <NumPoints 2>
   <Point  4.83333" 0.65972">
   <Point  5.20833" 0.78472">
  > # end of PolyLine
  <Group 
   <ID 5>
   <Unique 38902>
   <Overprint No >
  > # end of Group
 > # end of Frame
 <Frame 
  <ID 6>
  <Unique 38788>
  <Pen 15>
  <Fill 15>
  <PenWidth  1.0 pt>
  <Separation 0>
  <ObColor `Black'>
  <DashedPattern 
   <DashedStyle Solid >
  > # end of DashedPattern
  <Angle  360.0>
  <Overprint No >
  <ShapeRect  1.0" 1.83333" 6.5" 1.34722">
  <BRect  1.0" 1.83333" 6.5" 1.34722">
  <FrameType Below >
  <Float No >
  <NSOffset  0.0">
  <BLOffset  -0.36978">
  <AnchorAlign Left >
  <Cropped Yes >
  <Rectangle 
   <Unique 38789>
   <Pen 0>
   <Fill 7>
   <PenWidth  0.5 pt>
   <Overprint No >
   <ShapeRect  0.375" 0.10243" 5.75" 1.07812">
   <BRect  0.375" 0.10243" 5.75" 1.07812">
  > # end of Rectangle
  <TextRect 
   <ID 7>
   <Unique 38790>
   <Pen 15>
   <Overprint No >
   <ShapeRect  0.5" 0.22743" 5.5" 0.95312">
   <BRect  0.5" 0.22743" 5.5" 0.95312">
   <TRNext 0>
  > # end of TextRect
 > # end of Frame
> # end of AFrames
<Tbls 
 <Tbl 
 <TblID 8>
 <TblTag `Format A'>
 <TblFormat 
  <TblColumn 
   <TblColumnNum 0>
   <TblColumnWidth  1.0">
   <TblColumnH 
    <Pgf 
     <PgfTag `CellHeading'>
     <PgfFont 
      <FTag `'>
      <FFamily `Times'>
      <FVar `Regular'>
      <FWeight `Regular'>
      <FAngle `Regular'>
      <FPostScriptName `Times-Roman'>
      <FSize  12.0 pt>
      <FUnderlining FNoUnderlining >
      <FUnderline No >
      <FDoubleUnderline No >
      <FNumericUnderline No >
      <FOverline No >
      <FStrike No >
      <FChangeBar No >
      <FOutline No >
      <FShadow No >
      <FPairKern Yes >
      <FCase FAsTyped >
      <FPosition FNormal >
      <FSupScript No >
      <FSubScript No >
      <FDX  0.0 pt>
      <FDY  0.0 pt>
      <FDW  0.0 pt>
      <FSeparation 0>
      <FColor `Black'>
     > # end of PgfFont
     <PgfAutoNum No >
     <PgfCellAlignment Middle >
     <PgfCellMargins  0.0 pt 2.0 pt 0.0 pt 2.0 pt>
    > # end of Pgf
   > # end of TblColumnH
   <TblColumnBody 
    <PgfTag `CellBody'>
    <Pgf 
     <PgfFont 
      <FTag `'>
      <FFamily `Times'>
      <FVar `Regular'>
      <FWeight `Regular'>
      <FAngle `Regular'>
      <FPostScriptName `Times-Roman'>
      <FSize  12.0 pt>
      <FUnderlining FNoUnderlining >
      <FUnderline No >
      <FDoubleUnderline No >
      <FNumericUnderline No >
      <FOverline No >
      <FStrike No >
      <FChangeBar No >
      <FOutline No >
      <FShadow No >
      <FPairKern Yes >
      <FCase FAsTyped >
      <FPosition FNormal >
      <FSupScript No >
      <FSubScript No >
      <FDX  0.0 pt>
      <FDY  0.0 pt>
      <FDW  0.0 pt>
      <FSeparation 0>
      <FColor `Black'>
     > # end of PgfFont
    > # end of Pgf
   > # end of TblColumnBody
   <TblColumnF 
    <Pgf 
     <PgfTag `CellHeading'>
     <PgfAlignment Center >
     <PgfHyphenate No >
     <PgfCellAlignment Middle >
     <PgfCellMargins  0.0 pt 2.0 pt 0.0 pt 2.0 pt>
    > # end of Pgf
   > # end of TblColumnF
  > # end of TblColumn
  <TblColumn 
   <TblColumnNum 1>
   <TblColumnWidth  1.0">
   <TblColumnH 
   > # end of TblColumnH
   <TblColumnBody 
    <PgfTag `CellBody'>
    <Pgf 
     <PgfFont 
      <FTag `'>
      <FFamily `Times'>
      <FVar `Regular'>
      <FWeight `Regular'>
      <FAngle `Regular'>
      <FPostScriptName `Times-Roman'>
      <FSize  12.0 pt>
      <FUnderlining FNoUnderlining >
      <FUnderline No >
      <FDoubleUnderline No >
      <FNumericUnderline No >
      <FOverline No >
      <FStrike No >
      <FChangeBar No >
      <FOutline No >
      <FShadow No >
      <FPairKern Yes >
      <FCase FAsTyped >
      <FPosition FNormal >
      <FSupScript No >
      <FSubScript No >
      <FDX  0.0 pt>
      <FDY  0.0 pt>
      <FDW  0.0 pt>
      <FSeparation 0>
      <FColor `Black'>
     > # end of PgfFont
    > # end of Pgf
   > # end of TblColumnBody
   <TblColumnF 
    <Pgf 
     <PgfTag `CellHeading'>
     <PgfAlignment Center >
     <PgfHyphenate No >
     <PgfCellAlignment Middle >
     <PgfCellMargins  0.0 pt 2.0 pt 0.0 pt 2.0 pt>
    > # end of Pgf
   > # end of TblColumnF
  > # end of TblColumn
  <TblColumn 
   <TblColumnNum 2>
   <TblColumnWidth  1.0">
   <TblColumnH 
   > # end of TblColumnH
   <TblColumnBody 
    <PgfTag `CellBody'>
    <Pgf 
     <PgfFont 
      <FTag `'>
      <FFamily `Times'>
      <FVar `Regular'>
      <FWeight `Regular'>
      <FAngle `Regular'>
      <FPostScriptName `Times-Roman'>
      <FSize  12.0 pt>
      <FUnderlining FNoUnderlining >
      <FUnderline No >
      <FDoubleUnderline No >
      <FNumericUnderline No >
      <FOverline No >
      <FStrike No >
      <FChangeBar No >
      <FOutline No >
      <FShadow No >
      <FPairKern Yes >
      <FCase FAsTyped >
      <FPosition FNormal >
      <FSupScript No >
      <FSubScript No >
      <FDX  0.0 pt>
      <FDY  0.0 pt>
      <FDW  0.0 pt>
      <FSeparation 0>
      <FColor `Black'>
     > # end of PgfFont
    > # end of Pgf
   > # end of TblColumnBody
   <TblColumnF 
    <Pgf 
     <PgfTag `CellHeading'>
     <PgfAlignment Center >
     <PgfHyphenate No >
     <PgfCellAlignment Middle >
     <PgfCellMargins  0.0 pt 2.0 pt 0.0 pt 2.0 pt>
    > # end of Pgf
   > # end of TblColumnF
  > # end of TblColumn
  <TblColumn 
   <TblColumnNum 3>
   <TblColumnWidth  1.0">
   <TblColumnH 
   > # end of TblColumnH
   <TblColumnBody 
    <PgfTag `CellBody'>
    <Pgf 
     <PgfFont 
      <FTag `'>
      <FFamily `Times'>
      <FVar `Regular'>
      <FWeight `Regular'>
      <FAngle `Regular'>
      <FPostScriptName `Times-Roman'>
      <FSize  12.0 pt>
      <FUnderlining FNoUnderlining >
      <FUnderline No >
      <FDoubleUnderline No >
      <FNumericUnderline No >
      <FOverline No >
      <FStrike No >
      <FChangeBar No >
      <FOutline No >
      <FShadow No >
      <FPairKern Yes >
      <FCase FAsTyped >
      <FPosition FNormal >
      <FSupScript No >
      <FSubScript No >
      <FDX  0.0 pt>
      <FDY  0.0 pt>
      <FDW  0.0 pt>
      <FSeparation 0>
      <FColor `Black'>
     > # end of PgfFont
    > # end of Pgf
   > # end of TblColumnBody
   <TblColumnF 
    <Pgf 
     <PgfTag `CellHeading'>
     <PgfAlignment Center >
     <PgfHyphenate No >
     <PgfCellAlignment Middle >
     <PgfCellMargins  0.0 pt 2.0 pt 0.0 pt 2.0 pt>
    > # end of Pgf
   > # end of TblColumnF
  > # end of TblColumn
  <TblColumn 
   <TblColumnNum 4>
   <TblColumnWidth  1.0">
   <TblColumnH 
   > # end of TblColumnH
   <TblColumnBody 
    <PgfTag `CellBody'>
    <Pgf 
     <PgfFont 
      <FTag `'>
      <FFamily `Times'>
      <FVar `Regular'>
      <FWeight `Regular'>
      <FAngle `Regular'>
      <FPostScriptName `Times-Roman'>
      <FSize  12.0 pt>
      <FUnderlining FNoUnderlining >
      <FUnderline No >
      <FDoubleUnderline No >
      <FNumericUnderline No >
      <FOverline No >
      <FStrike No >
      <FChangeBar No >
      <FOutline No >
      <FShadow No >
      <FPairKern Yes >
      <FCase FAsTyped >
      <FPosition FNormal >
      <FSupScript No >
      <FSubScript No >
      <FDX  0.0 pt>
      <FDY  0.0 pt>
      <FDW  0.0 pt>
      <FSeparation 0>
      <FColor `Black'>
     > # end of PgfFont
    > # end of Pgf
   > # end of TblColumnBody
   <TblColumnF 
    <Pgf 
     <PgfTag `CellHeading'>
     <PgfAlignment Center >
     <PgfHyphenate No >
     <PgfCellAlignment Middle >
     <PgfCellMargins  0.0 pt 2.0 pt 0.0 pt 2.0 pt>
    > # end of Pgf
   > # end of TblColumnF
  > # end of TblColumn
  <TblInitNumBodyRows 8>
 > # end of TblFormat
 <TblNumColumns 4>
 <Unique 9498>
 <TblColumnWidth  0.89">
 <TblColumnWidth  1.3">
 <TblColumnWidth  1.4">
 <TblColumnWidth  2.75">
 <TblTitleContent 
  <Notes 
  > # end of Notes
  <Para 
   <Unique 9500>
   <Pgf 
    <PgfTag `TableTitle'>
    <PgfFont 
     <FTag `'>
     <FFamily `Times'>
     <FVar `Regular'>
     <FWeight `Bold'>
     <FAngle `Regular'>
     <FPostScriptName `Times-Bold'>
     <FSize  12.0 pt>
     <FUnderlining FNoUnderlining >
     <FUnderline No >
     <FDoubleUnderline No >
     <FNumericUnderline No >
     <FOverline No >
     <FStrike No >
     <FChangeBar No >
     <FOutline No >
     <FShadow No >
     <FPairKern Yes >
     <FCase FAsTyped >
     <FPosition FNormal >
     <FSupScript No >
     <FSubScript No >
     <FDX  0.0 pt>
     <FDY  0.0 pt>
     <FDW  0.0 pt>
     <FSeparation 0>
     <FColor `Black'>
    > # end of PgfFont
    <PgfAutoNum Yes >
    <PgfNumFormat `T:Table <n+\>: '>
    <PgfNumberFont `'>
    <PgfNumAtEnd No >
    <PgfCellAlignment Top >
    <PgfCellMargins  0.0 pt 0.0 pt 0.0 pt 0.0 pt>
   > # end of Pgf
   <PgfNumString `Table 2: '>
   <ParaLine 
    <Font 
     <FTag `'>
     <FFamily `Times'>
     <FVar `Regular'>
     <FWeight `Bold'>
     <FAngle `Regular'>
     <FPostScriptName `Times-Bold'>
     <FSize  12.0 pt>
     <FUnderlining FNoUnderlining >
     <FUnderline No >
     <FDoubleUnderline No >
     <FNumericUnderline No >
     <FOverline No >
     <FStrike No >
     <FChangeBar No >
     <FOutline No >
     <FShadow No >
     <FPairKern Yes >
     <FCase FAsTyped >
     <FPosition FNormal >
     <FSupScript No >
     <FSubScript No >
     <FDX  0.0 pt>
     <FDY  0.0 pt>
     <FDW  0.0 pt>
     <FSeparation 0>
     <FColor `Black'>
    > # end of Font
    <String `Input iterator requirements'>
   >
  > # end of Para
 > # end of TblTitleContent
 <TblH 
  <Row 
   <RowMaxHeight  14.0">
   <RowHeight  0.5">
   <Cell 
    <CellContent 
     <Notes 
     > # end of Notes
     <Para 
      <Unique 9508>
      <Pgf 
       <PgfTag `CellHeading'>
       <PgfFont 
        <FTag `'>
        <FFamily `Times'>
        <FVar `Regular'>
        <FWeight `Regular'>
        <FAngle `Regular'>
        <FPostScriptName `Times-Roman'>
        <FSize  10.0 pt>
        <FUnderlining FNoUnderlining >
        <FUnderline No >
        <FDoubleUnderline No >
        <FNumericUnderline No >
        <FOverline No >
        <FStrike No >
        <FChangeBar No >
        <FOutline No >
        <FShadow No >
        <FPairKern Yes >
        <FCase FAsTyped >
        <FPosition FNormal >
        <FSupScript No >
        <FSubScript No >
        <FDX  0.0 pt>
        <FDY  0.0 pt>
        <FDW  0.0 pt>
        <FSeparation 0>
        <FColor `Black'>
       > # end of PgfFont
       <PgfAutoNum No >
       <PgfCellAlignment Middle >
       <PgfCellMargins  0.0 pt 2.0 pt 0.0 pt 2.0 pt>
      > # end of Pgf
      <ParaLine 
       <String `expression'>
      >
     > # end of Para
    > # end of CellContent
   > # end of Cell
   <Cell 
    <CellContent 
     <Notes 
     > # end of Notes
     <Para 
      <Unique 9510>
      <ParaLine 
       <String `return type'>
      >
     > # end of Para
    > # end of CellContent
   > # end of Cell
   <Cell 
    <CellContent 
     <Notes 
     > # end of Notes
     <Para 
      <Unique 9512>
      <ParaLine 
       <String `operational semantics'>
      >
     > # end of Para
    > # end of CellContent
   > # end of Cell
   <Cell 
    <CellContent 
     <Notes 
     > # end of Notes
     <Para 
      <Unique 9514>
      <ParaLine 
       <String `assertion/note'>
      >
     > # end of Para
     <Para 
      <Unique 9515>
      <ParaLine 
       <String `pre/post-condition'>
      >
     > # end of Para
    > # end of CellContent
   > # end of Cell
  > # end of Row
 > # end of TblH
 <TblBody 
  <Row 
   <RowMaxHeight  14.0">
   <RowHeight  0.44444">
   <Cell 
    <CellContent 
     <Notes 
     > # end of Notes
     <Para 
      <Unique 9517>
      <PgfTag `CellBody'>
      <Pgf 
       <PgfFont 
        <FTag `'>
        <FFamily `Courier'>
        <FVar `Regular'>
        <FWeight `Regular'>
        <FAngle `Regular'>
        <FPostScriptName `Courier'>
        <FSize  9.0 pt>
        <FUnderlining FNoUnderlining >
        <FUnderline No >
        <FDoubleUnderline No >
        <FNumericUnderline No >
        <FOverline No >
        <FStrike No >
        <FChangeBar No >
        <FOutline No >
        <FShadow No >
        <FPairKern No >
        <FCase FAsTyped >
        <FPosition FNormal >
        <FSupScript No >
        <FSubScript No >
        <FDX  0.0 pt>
        <FDY  0.0 pt>
        <FDW  0.0 pt>
        <FSeparation 0>
        <FColor `Black'>
       > # end of PgfFont
      > # end of Pgf
      <ParaLine 
       <Font 
        <FTag `program'>
       > # end of Font
       <String `X(a)'>
      >
     > # end of Para
    > # end of CellContent
   > # end of Cell
   <Cell 
    <CellContent 
     <Notes 
     > # end of Notes
     <Para 
      <Unique 9519>
      <PgfTag `CellBody'>
      <Pgf 
       <PgfFont 
        <FTag `'>
        <FFamily `Courier'>
        <FVar `Regular'>
        <FWeight `Regular'>
        <FAngle `Regular'>
        <FPostScriptName `Courier'>
        <FSize  9.0 pt>
        <FUnderlining FNoUnderlining >
        <FUnderline No >
        <FDoubleUnderline No >
        <FNumericUnderline No >
        <FOverline No >
        <FStrike No >
        <FChangeBar No >
        <FOutline No >
        <FShadow No >
        <FPairKern No >
        <FCase FAsTyped >
        <FPosition FNormal >
        <FSupScript No >
        <FSubScript No >
        <FDX  0.0 pt>
        <FDY  0.0 pt>
        <FDW  0.0 pt>
        <FSeparation 0>
        <FColor `Black'>
       > # end of PgfFont
      > # end of Pgf
      <ParaLine 
      >
     > # end of Para
    > # end of CellContent
   > # end of Cell
   <Cell 
    <CellContent 
     <Notes 
     > # end of Notes
     <Para 
      <Unique 9521>
      <PgfTag `CellBody'>
      <ParaLine 
      >
     > # end of Para
    > # end of CellContent
   > # end of Cell
   <Cell 
    <CellContent 
     <Notes 
     > # end of Notes
     <Para 
      <Unique 9523>
      <PgfTag `CellBody'>
      <ParaLine 
       <Font 
        <FTag `program'>
       > # end of Font
       <String `X(a)'>
       <Font 
        <FTag `'>
       > # end of Font
       <String ` is a copy of '>
       <Font 
        <FTag `program'>
       > # end of Font
       <String `a'>
       <Font 
        <FTag `'>
       > # end of Font
       <String `.'>
      >
     > # end of Para
     <Para 
      <Unique 9524>
      <PgfTag `CellBody'>
      <ParaLine 
       <String `note: a destructor is assumed.'>
      >
     > # end of Para
    > # end of CellContent
   > # end of Cell
  > # end of Row
  <Row 
   <RowMaxHeight  14.0">
   <RowHeight  0.41667">
   <Cell 
    <CellContent 
     <Notes 
     > # end of Notes
     <Para 
      <Unique 9526>
      <PgfTag `CellBody'>
      <Pgf 
       <PgfFont 
        <FTag `'>
        <FFamily `Courier'>
        <FVar `Regular'>
        <FWeight `Regular'>
        <FAngle `Regular'>
        <FPostScriptName `Courier'>
        <FSize  9.0 pt>
        <FUnderlining FNoUnderlining >
        <FUnderline No >
        <FDoubleUnderline No >
        <FNumericUnderline No >
        <FOverline No >
        <FStrike No >
        <FChangeBar No >
        <FOutline No >
        <FShadow No >
        <FPairKern No >
        <FCase FAsTyped >
        <FPosition FNormal >
        <FSupScript No >
        <FSubScript No >
        <FDX  0.0 pt>
        <FDY  0.0 pt>
        <FDW  0.0 pt>
        <FSeparation 0>
        <FColor `Black'>
       > # end of PgfFont
      > # end of Pgf
      <ParaLine 
       <Font 
        <FTag `program'>
       > # end of Font
       <String `X u(a);'>
      >
     > # end of Para
     <Para 
      <Unique 9527>
      <PgfTag `CellBody'>
      <Pgf 
       <PgfFont 
        <FTag `'>
        <FFamily `Courier'>
        <FVar `Regular'>
        <FWeight `Regular'>
        <FAngle `Regular'>
        <FPostScriptName `Courier'>
        <FSize  9.0 pt>
        <FUnderlining FNoUnderlining >
        <FUnderline No >
        <FDoubleUnderline No >
        <FNumericUnderline No >
        <FOverline No >
        <FStrike No >
        <FChangeBar No >
        <FOutline No >
        <FShadow No >
        <FPairKern No >
        <FCase FAsTyped >
        <FPosition FNormal >
        <FSupScript No >
        <FSubScript No >
        <FDX  0.0 pt>
        <FDY  0.0 pt>
        <FDW  0.0 pt>
        <FSeparation 0>
        <FColor `Black'>
       > # end of PgfFont
      > # end of Pgf
      <ParaLine 
       <Font 
        <FTag `program'>
       > # end of Font
       <String `X u = a;'>
      >
     > # end of Para
    > # end of CellContent
   > # end of Cell
   <Cell 
    <CellContent 
     <Notes 
     > # end of Notes
     <Para 
      <Unique 9529>
      <PgfTag `CellBody'>
      <ParaLine 
      >
     > # end of Para
    > # end of CellContent
   > # end of Cell
   <Cell 
    <CellContent 
     <Notes 
     > # end of Notes
     <Para 
      <Unique 9531>
      <PgfTag `CellBody'>
      <Pgf 
       <PgfFont 
        <FTag `'>
        <FFamily `Courier'>
        <FVar `Regular'>
        <FWeight `Regular'>
        <FAngle `Regular'>
        <FPostScriptName `Courier'>
        <FSize  9.0 pt>
        <FUnderlining FNoUnderlining >
        <FUnderline No >
        <FDoubleUnderline No >
        <FNumericUnderline No >
        <FOverline No >
        <FStrike No >
        <FChangeBar No >
        <FOutline No >
        <FShadow No >
        <FPairKern No >
        <FCase FAsTyped >
        <FPosition FNormal >
        <FSupScript No >
        <FSubScript No >
        <FDX  0.0 pt>
        <FDY  0.0 pt>
        <FDW  0.0 pt>
        <FSeparation 0>
        <FColor `Black'>
       > # end of PgfFont
      > # end of Pgf
      <ParaLine 
      >
     > # end of Para
    > # end of CellContent
   > # end of Cell
   <Cell 
    <CellContent 
     <Notes 
     > # end of Notes
     <Para 
      <Unique 9533>
      <PgfTag `CellBody'>
      <ParaLine 
       <String `post: '>
       <Font 
        <FTag `program'>
       > # end of Font
       <String `u'>
       <Font 
        <FTag `'>
       > # end of Font
       <String ` is a copy of '>
       <Font 
        <FTag `program'>
       > # end of Font
       <String `a'>
       <String `.'>
      >
     > # end of Para
    > # end of CellContent
   > # end of Cell
  > # end of Row
  <Row 
   <RowMaxHeight  14.0">
   <RowHeight  0.27778">
   <Cell 
    <CellContent 
     <Notes 
     > # end of Notes
     <Para 
      <Unique 9535>
      <PgfTag `CellBody'>
      <Pgf 
       <PgfFont 
        <FTag `'>
        <FFamily `Courier'>
        <FVar `Regular'>
        <FWeight `Regular'>
        <FAngle `Regular'>
        <FPostScriptName `Courier'>
        <FSize  9.0 pt>
        <FUnderlining FNoUnderlining >
        <FUnderline No >
        <FDoubleUnderline No >
        <FNumericUnderline No >
        <FOverline No >
        <FStrike No >
        <FChangeBar No >
        <FOutline No >
        <FShadow No >
        <FPairKern No >
        <FCase FAsTyped >
        <FPosition FNormal >
        <FSupScript No >
        <FSubScript No >
        <FDX  0.0 pt>
        <FDY  0.0 pt>
        <FDW  0.0 pt>
        <FSeparation 0>
        <FColor `Black'>
       > # end of PgfFont
      > # end of Pgf
      <ParaLine 
       <String `u = a'>
      >
     > # end of Para
    > # end of CellContent
   > # end of Cell
   <Cell 
    <CellContent 
     <Notes 
     > # end of Notes
     <Para 
      <Unique 9537>
      <PgfTag `CellBody'>
      <Pgf 
       <PgfFont 
        <FTag `'>
        <FFamily `Courier'>
        <FVar `Regular'>
        <FWeight `Regular'>
        <FAngle `Regular'>
        <FPostScriptName `Courier'>
        <FSize  9.0 pt>
        <FUnderlining FNoUnderlining >
        <FUnderline No >
        <FDoubleUnderline No >
        <FNumericUnderline No >
        <FOverline No >
        <FStrike No >
        <FChangeBar No >
        <FOutline No >
        <FShadow No >
        <FPairKern No >
        <FCase FAsTyped >
        <FPosition FNormal >
        <FSupScript No >
        <FSubScript No >
        <FDX  0.0 pt>
        <FDY  0.0 pt>
        <FDW  0.0 pt>
        <FSeparation 0>
        <FColor `Black'>
       > # end of PgfFont
      > # end of Pgf
      <ParaLine 
       <Font 
        <FTag `program'>
       > # end of Font
       <String `X&'>
      >
     > # end of Para
    > # end of CellContent
   > # end of Cell
   <Cell 
    <CellContent 
     <Notes 
     > # end of Notes
     <Para 
      <Unique 9539>
      <PgfTag `CellBody'>
      <Pgf 
       <PgfFont 
        <FTag `'>
        <FFamily `Courier'>
        <FVar `Regular'>
        <FWeight `Regular'>
        <FAngle `Regular'>
        <FPostScriptName `Courier'>
        <FSize  9.0 pt>
        <FUnderlining FNoUnderlining >
        <FUnderline No >
        <FDoubleUnderline No >
        <FNumericUnderline No >
        <FOverline No >
        <FStrike No >
        <FChangeBar No >
        <FOutline No >
        <FShadow No >
        <FPairKern No >
        <FCase FAsTyped >
        <FPosition FNormal >
        <FSupScript No >
        <FSubScript No >
        <FDX  0.0 pt>
        <FDY  0.0 pt>
        <FDW  0.0 pt>
        <FSeparation 0>
        <FColor `Black'>
       > # end of PgfFont
      > # end of Pgf
      <ParaLine 
      >
     > # end of Para
    > # end of CellContent
   > # end of Cell
   <Cell 
    <CellContent 
     <Notes 
     > # end of Notes
     <Para 
      <Unique 9541>
      <PgfTag `CellBody'>
      <ParaLine 
       <String `post: '>
       <Font 
        <FTag `program'>
       > # end of Font
       <String `u'>
       <Font 
        <FTag `'>
       > # end of Font
       <String ` is a copy of '>
       <Font 
        <FTag `program'>
       > # end of Font
       <String `a.'>
       <Font 
        <FTag `'>
       > # end of Font
      >
     > # end of Para
    > # end of CellContent
   > # end of Cell
  > # end of Row
  <Row 
   <RowMaxHeight  14.0">
   <RowHeight  0.61111">
   <Cell 
    <CellContent 
     <Notes 
     > # end of Notes
     <Para 
      <Unique 9543>
      <PgfTag `CellBody'>
      <Pgf 
       <PgfFont 
        <FTag `'>
        <FFamily `Courier'>
        <FVar `Regular'>
        <FWeight `Regular'>
        <FAngle `Regular'>
        <FPostScriptName `Courier'>
        <FSize  9.0 pt>
        <FUnderlining FNoUnderlining >
        <FUnderline No >
        <FDoubleUnderline No >
        <FNumericUnderline No >
        <FOverline No >
        <FStrike No >
        <FChangeBar No >
        <FOutline No >
        <FShadow No >
        <FPairKern No >
        <FCase FAsTyped >
        <FPosition FNormal >
        <FSupScript No >
        <FSubScript No >
        <FDX  0.0 pt>
        <FDY  0.0 pt>
        <FDW  0.0 pt>
        <FSeparation 0>
        <FColor `Black'>
       > # end of PgfFont
      > # end of Pgf
      <ParaLine 
       <Font 
        <FTag `program'>
       > # end of Font
       <String `a == b'>
      >
     > # end of Para
    > # end of CellContent
   > # end of Cell
   <Cell 
    <CellContent 
     <Notes 
     > # end of Notes
     <Para 
      <Unique 9545>
      <PgfTag `CellBody'>
      <ParaLine 
       <String `convertible to '>
       <Font 
        <FTag `program'>
       > # end of Font
       <String `bool'>
      >
     > # end of Para
    > # end of CellContent
   > # end of Cell
   <Cell 
    <CellContent 
     <Notes 
     > # end of Notes
     <Para 
      <Unique 9547>
      <PgfTag `CellBody'>
      <Pgf 
       <PgfFont 
        <FTag `'>
        <FFamily `Courier'>
        <FVar `Regular'>
        <FWeight `Regular'>
        <FAngle `Regular'>
        <FPostScriptName `Courier'>
        <FSize  9.0 pt>
        <FUnderlining FNoUnderlining >
        <FUnderline No >
        <FDoubleUnderline No >
        <FNumericUnderline No >
        <FOverline No >
        <FStrike No >
        <FChangeBar No >
        <FOutline No >
        <FShadow No >
        <FPairKern No >
        <FCase FAsTyped >
        <FPosition FNormal >
        <FSupScript No >
        <FSubScript No >
        <FDX  0.0 pt>
        <FDY  0.0 pt>
        <FDW  0.0 pt>
        <FSeparation 0>
        <FColor `Black'>
       > # end of PgfFont
      > # end of Pgf
      <ParaLine 
      >
     > # end of Para
    > # end of CellContent
   > # end of Cell
   <Cell 
    <CellContent 
     <Notes 
     > # end of Notes
     <Para 
      <Unique 9549>
      <PgfTag `CellBody'>
      <ParaLine 
       <String `if '>
       <Font 
        <FTag `program'>
       > # end of Font
       <String `a'>
       <Font 
        <FTag `'>
       > # end of Font
       <String ` is a copy of '>
       <Font 
        <FTag `program'>
       > # end of Font
       <String `b'>
       <Font 
        <FTag `'>
       > # end of Font
       <String `,'>
       <String ` then '>
       <Font 
        <FTag `program'>
       > # end of Font
       <String `a'>
       <String ` '>
       <String `=='>
       <String ` '>
       <String `b'>
       <Font 
        <FTag `'>
       > # end of Font
       <String ` returns '>
       <Font 
        <FTag `program'>
       > # end of Font
       <String `true'>
       <Font 
        <FTag `'>
       > # end of Font
       <String `.'>
       <Font 
        <FTag `program'>
       > # end of Font
      >
     > # end of Para
     <Para 
      <Unique 9550>
      <PgfTag `CellBody'>
      <ParaLine 
       <Font 
        <FTag `program'>
       > # end of Font
       <String `=='>
       <Font 
        <FTag `'>
       > # end of Font
       <String ` is an equivalence relation'>
       <String ` over the domain '>
      >
      <ParaLine 
       <String `of '>
       <Font 
        <FTag `program'>
       > # end of Font
       <String `=='>
       <Font 
        <FTag `'>
       > # end of Font
       <String `.'>
      >
     > # end of Para
    > # end of CellContent
   > # end of Cell
  > # end of Row
  <Row 
   <RowMaxHeight  14.0">
   <RowHeight  0.27778">
   <Cell 
    <CellContent 
     <Notes 
     > # end of Notes
     <Para 
      <Unique 9552>
      <PgfTag `CellBody'>
      <Pgf 
       <PgfFont 
        <FTag `'>
        <FFamily `Courier'>
        <FVar `Regular'>
        <FWeight `Regular'>
        <FAngle `Regular'>
        <FPostScriptName `Courier'>
        <FSize  9.0 pt>
        <FUnderlining FNoUnderlining >
        <FUnderline No >
        <FDoubleUnderline No >
        <FNumericUnderline No >
        <FOverline No >
        <FStrike No >
        <FChangeBar No >
        <FOutline No >
        <FShadow No >
        <FPairKern No >
        <FCase FAsTyped >
        <FPosition FNormal >
        <FSupScript No >
        <FSubScript No >
        <FDX  0.0 pt>
        <FDY  0.0 pt>
        <FDW  0.0 pt>
        <FSeparation 0>
        <FColor `Black'>
       > # end of PgfFont
      > # end of Pgf
      <ParaLine 
       <Font 
        <FTag `program'>
       > # end of Font
       <String `a != b'>
      >
     > # end of Para
    > # end of CellContent
   > # end of Cell
   <Cell 
    <CellContent 
     <Notes 
     > # end of Notes
     <Para 
      <Unique 9554>
      <PgfTag `CellBody'>
      <ParaLine 
       <String `convertible to '>
       <Font 
        <FTag `program'>
       > # end of Font
       <String `bool'>
      >
     > # end of Para
    > # end of CellContent
   > # end of Cell
   <Cell 
    <CellContent 
     <Notes 
     > # end of Notes
     <Para 
      <Unique 9556>
      <PgfTag `CellBody'>
      <Pgf 
       <PgfFont 
        <FTag `'>
        <FFamily `Courier'>
        <FVar `Regular'>
        <FWeight `Regular'>
        <FAngle `Regular'>
        <FPostScriptName `Courier'>
        <FSize  9.0 pt>
        <FUnderlining FNoUnderlining >
        <FUnderline No >
        <FDoubleUnderline No >
        <FNumericUnderline No >
        <FOverline No >
        <FStrike No >
        <FChangeBar No >
        <FOutline No >
        <FShadow No >
        <FPairKern No >
        <FCase FAsTyped >
        <FPosition FNormal >
        <FSupScript No >
        <FSubScript No >
        <FDX  0.0 pt>
        <FDY  0.0 pt>
        <FDW  0.0 pt>
        <FSeparation 0>
        <FColor `Black'>
       > # end of PgfFont
      > # end of Pgf
      <ParaLine 
       <Font 
        <FTag `program'>
       > # end of Font
       <String `!(a == b)'>
      >
     > # end of Para
    > # end of CellContent
   > # end of Cell
   <Cell 
    <CellContent 
     <Notes 
     > # end of Notes
     <Para 
      <Unique 9558>
      <PgfTag `CellBody'>
      <ParaLine 
      >
     > # end of Para
    > # end of CellContent
   > # end of Cell
  > # end of Row
  <Row 
   <RowMaxHeight  14.0">
   <RowHeight  0.44444">
   <Cell 
    <CellContent 
     <Notes 
     > # end of Notes
     <Para 
      <Unique 9560>
      <PgfTag `CellBody'>
      <Pgf 
       <PgfFont 
        <FTag `'>
        <FFamily `Courier'>
        <FVar `Regular'>
        <FWeight `Regular'>
        <FAngle `Regular'>
        <FPostScriptName `Courier'>
        <FSize  9.0 pt>
        <FUnderlining FNoUnderlining >
        <FUnderline No >
        <FDoubleUnderline No >
        <FNumericUnderline No >
        <FOverline No >
        <FStrike No >
        <FChangeBar No >
        <FOutline No >
        <FShadow No >
        <FPairKern No >
        <FCase FAsTyped >
        <FPosition FNormal >
        <FSupScript No >
        <FSubScript No >
        <FDX  0.0 pt>
        <FDY  0.0 pt>
        <FDW  0.0 pt>
        <FSeparation 0>
        <FColor `Black'>
       > # end of PgfFont
      > # end of Pgf
      <ParaLine 
       <Font 
        <FTag `program'>
       > # end of Font
       <String `*a'>
      >
     > # end of Para
    > # end of CellContent
   > # end of Cell
   <Cell 
    <CellContent 
     <Notes 
     > # end of Notes
     <Para 
      <Unique 9562>
      <PgfTag `CellBody'>
      <ParaLine 
       <String `convertible to '>
       <Font 
        <FTag `program'>
       > # end of Font
       <String `T'>
       <Font 
        <FTag `'>
       > # end of Font
       <String ` '>
      >
     > # end of Para
    > # end of CellContent
   > # end of Cell
   <Cell 
    <CellContent 
     <Notes 
     > # end of Notes
     <Para 
      <Unique 9564>
      <PgfTag `CellBody'>
      <Pgf 
       <PgfFont 
        <FTag `'>
        <FFamily `Courier'>
        <FVar `Regular'>
        <FWeight `Regular'>
        <FAngle `Regular'>
        <FPostScriptName `Courier'>
        <FSize  9.0 pt>
        <FUnderlining FNoUnderlining >
        <FUnderline No >
        <FDoubleUnderline No >
        <FNumericUnderline No >
        <FOverline No >
        <FStrike No >
        <FChangeBar No >
        <FOutline No >
        <FShadow No >
        <FPairKern No >
        <FCase FAsTyped >
        <FPosition FNormal >
        <FSupScript No >
        <FSubScript No >
        <FDX  0.0 pt>
        <FDY  0.0 pt>
        <FDW  0.0 pt>
        <FSeparation 0>
        <FColor `Black'>
       > # end of PgfFont
      > # end of Pgf
      <ParaLine 
      >
     > # end of Para
    > # end of CellContent
   > # end of Cell
   <Cell 
    <CellContent 
     <Notes 
     > # end of Notes
     <Para 
      <Unique 9566>
      <PgfTag `CellBody'>
      <ParaLine 
       <String `pre: '>
       <Font 
        <FTag `program'>
       > # end of Font
       <String `a'>
       <Font 
        <FTag `'>
       > # end of Font
       <String ` is dereferenceable.'>
      >
     > # end of Para
     <Para 
      <Unique 9567>
      <PgfTag `CellBody'>
      <ParaLine 
       <String `if '>
       <Font 
        <FTag `program'>
       > # end of Font
       <String `a'>
       <Font 
        <FTag `'>
       > # end of Font
       <String ` is a copy of '>
       <Font 
        <FTag `program'>
       > # end of Font
       <String `b'>
       <Font 
        <FTag `'>
       > # end of Font
       <String `, then '>
       <Font 
        <FTag `program'>
       > # end of Font
       <String `*'>
       <String `a'>
       <Font 
        <FTag `'>
       > # end of Font
       <String ` is equivalent to '>
       <Font 
        <FTag `program'>
       > # end of Font
       <String `*'>
       <String `b'>
       <Font 
        <FTag `'>
       > # end of Font
       <String `.'>
      >
     > # end of Para
    > # end of CellContent
   > # end of Cell
  > # end of Row
  <Row 
   <RowMaxHeight  14.0">
   <RowHeight  0.44444">
   <Cell 
    <CellContent 
     <Notes 
     > # end of Notes
     <Para 
      <Unique 9569>
      <PgfTag `CellBody'>
      <Pgf 
       <PgfFont 
        <FTag `'>
        <FFamily `Courier'>
        <FVar `Regular'>
        <FWeight `Regular'>
        <FAngle `Regular'>
        <FPostScriptName `Courier'>
        <FSize  9.0 pt>
        <FUnderlining FNoUnderlining >
        <FUnderline No >
        <FDoubleUnderline No >
        <FNumericUnderline No >
        <FOverline No >
        <FStrike No >
        <FChangeBar No >
        <FOutline No >
        <FShadow No >
        <FPairKern No >
        <FCase FAsTyped >
        <FPosition FNormal >
        <FSupScript No >
        <FSubScript No >
        <FDX  0.0 pt>
        <FDY  0.0 pt>
        <FDW  0.0 pt>
        <FSeparation 0>
        <FColor `Black'>
       > # end of PgfFont
      > # end of Pgf
      <ParaLine 
       <Font 
        <FTag `program'>
       > # end of Font
       <String `++'>
       <String `r'>
      >
     > # end of Para
    > # end of CellContent
   > # end of Cell
   <Cell 
    <CellContent 
     <Notes 
     > # end of Notes
     <Para 
      <Unique 9571>
      <PgfTag `CellBody'>
      <Pgf 
       <PgfFont 
        <FTag `'>
        <FFamily `Courier'>
        <FVar `Regular'>
        <FWeight `Regular'>
        <FAngle `Regular'>
        <FPostScriptName `Courier'>
        <FSize  9.0 pt>
        <FUnderlining FNoUnderlining >
        <FUnderline No >
        <FDoubleUnderline No >
        <FNumericUnderline No >
        <FOverline No >
        <FStrike No >
        <FChangeBar No >
        <FOutline No >
        <FShadow No >
        <FPairKern No >
        <FCase FAsTyped >
        <FPosition FNormal >
        <FSupScript No >
        <FSubScript No >
        <FDX  0.0 pt>
        <FDY  0.0 pt>
        <FDW  0.0 pt>
        <FSeparation 0>
        <FColor `Black'>
       > # end of PgfFont
      > # end of Pgf
      <ParaLine 
       <Font 
        <FTag `program'>
       > # end of Font
       <String `X&'>
      >
     > # end of Para
    > # end of CellContent
   > # end of Cell
   <Cell 
    <CellContent 
     <Notes 
     > # end of Notes
     <Para 
      <Unique 9573>
      <PgfTag `CellBody'>
      <Pgf 
       <PgfFont 
        <FTag `'>
        <FFamily `Courier'>
        <FVar `Regular'>
        <FWeight `Regular'>
        <FAngle `Regular'>
        <FPostScriptName `Courier'>
        <FSize  9.0 pt>
        <FUnderlining FNoUnderlining >
        <FUnderline No >
        <FDoubleUnderline No >
        <FNumericUnderline No >
        <FOverline No >
        <FStrike No >
        <FChangeBar No >
        <FOutline No >
        <FShadow No >
        <FPairKern No >
        <FCase FAsTyped >
        <FPosition FNormal >
        <FSupScript No >
        <FSubScript No >
        <FDX  0.0 pt>
        <FDY  0.0 pt>
        <FDW  0.0 pt>
        <FSeparation 0>
        <FColor `Black'>
       > # end of PgfFont
      > # end of Pgf
      <ParaLine 
      >
     > # end of Para
    > # end of CellContent
   > # end of Cell
   <Cell 
    <CellContent 
     <Notes 
     > # end of Notes
     <Para 
      <Unique 9575>
      <PgfTag `CellBody'>
      <ParaLine 
       <String `pre: '>
       <Font 
        <FTag `program'>
       > # end of Font
       <String `r'>
       <Font 
        <FTag `'>
       > # end of Font
       <String ` i'>
       <String `s dereferenceable.'>
      >
     > # end of Para
     <Para 
      <Unique 9576>
      <PgfTag `CellBody'>
      <ParaLine 
       <String `post: '>
       <Font 
        <FTag `program'>
       > # end of Font
       <String `r'>
       <Font 
        <FTag `'>
       > # end of Font
       <String ` i'>
       <String `s dereferenceable or '>
       <Font 
        <FTag `program'>
       > # end of Font
       <String `r'>
       <Font 
        <FTag `'>
       > # end of Font
       <String ` i'>
       <String `s past-the-end'>
       <String `.'>
       <Font 
        <FTag `program'>
       > # end of Font
      >
     > # end of Para
    > # end of CellContent
   > # end of Cell
  > # end of Row
  <Row 
   <RowMaxHeight  14.0">
   <RowHeight  0.27778">
   <Cell 
    <CellContent 
     <Notes 
     > # end of Notes
     <Para 
      <Unique 9578>
      <PgfTag `CellBody'>
      <Pgf 
       <PgfFont 
        <FTag `'>
        <FFamily `Courier'>
        <FVar `Regular'>
        <FWeight `Regular'>
        <FAngle `Regular'>
        <FPostScriptName `Courier'>
        <FSize  9.0 pt>
        <FUnderlining FNoUnderlining >
        <FUnderline No >
        <FDoubleUnderline No >
        <FNumericUnderline No >
        <FOverline No >
        <FStrike No >
        <FChangeBar No >
        <FOutline No >
        <FShadow No >
        <FPairKern No >
        <FCase FAsTyped >
        <FPosition FNormal >
        <FSupScript No >
        <FSubScript No >
        <FDX  0.0 pt>
        <FDY  0.0 pt>
        <FDW  0.0 pt>
        <FSeparation 0>
        <FColor `Black'>
       > # end of PgfFont
      > # end of Pgf
      <ParaLine 
       <Font 
        <FTag `program'>
       > # end of Font
       <String `(void)'>
       <String `r++'>
      >
     > # end of Para
    > # end of CellContent
   > # end of Cell
   <Cell 
    <CellContent 
     <Notes 
     > # end of Notes
     <Para 
      <Unique 9580>
      <PgfTag `CellBody'>
      <Pgf 
       <PgfFont 
        <FTag `'>
        <FFamily `Courier'>
        <FVar `Regular'>
        <FWeight `Regular'>
        <FAngle `Regular'>
        <FPostScriptName `Courier'>
        <FSize  9.0 pt>
        <FUnderlining FNoUnderlining >
        <FUnderline No >
        <FDoubleUnderline No >
        <FNumericUnderline No >
        <FOverline No >
        <FStrike No >
        <FChangeBar No >
        <FOutline No >
        <FShadow No >
        <FPairKern No >
        <FCase FAsTyped >
        <FPosition FNormal >
        <FSupScript No >
        <FSubScript No >
        <FDX  0.0 pt>
        <FDY  0.0 pt>
        <FDW  0.0 pt>
        <FSeparation 0>
        <FColor `Black'>
       > # end of PgfFont
      > # end of Pgf
      <ParaLine 
       <Font 
        <FTag `program'>
       > # end of Font
       <String `void'>
      >
     > # end of Para
    > # end of CellContent
   > # end of Cell
   <Cell 
    <CellContent 
     <Notes 
     > # end of Notes
     <Para 
      <Unique 9582>
      <PgfTag `CellBody'>
      <Pgf 
       <PgfFont 
        <FTag `'>
        <FFamily `Courier'>
        <FVar `Regular'>
        <FWeight `Regular'>
        <FAngle `Regular'>
        <FPostScriptName `Courier'>
        <FSize  9.0 pt>
        <FUnderlining FNoUnderlining >
        <FUnderline No >
        <FDoubleUnderline No >
        <FNumericUnderline No >
        <FOverline No >
        <FStrike No >
        <FChangeBar No >
        <FOutline No >
        <FShadow No >
        <FPairKern No >
        <FCase FAsTyped >
        <FPosition FNormal >
        <FSupScript No >
        <FSubScript No >
        <FDX  0.0 pt>
        <FDY  0.0 pt>
        <FDW  0.0 pt>
        <FSeparation 0>
        <FColor `Black'>
       > # end of PgfFont
      > # end of Pgf
      <ParaLine 
       <Font 
        <FTag `program'>
       > # end of Font
       <String `(void)++r'>
      >
     > # end of Para
    > # end of CellContent
   > # end of Cell
   <Cell 
    <CellContent 
     <Notes 
     > # end of Notes
     <Para 
      <Unique 9584>
      <PgfTag `CellBody'>
      <ParaLine 
      >
     > # end of Para
    > # end of CellContent
   > # end of Cell
  > # end of Row
  <Row 
   <RowMaxHeight  14.0">
   <RowHeight  0.56944">
   <Cell 
    <CellContent 
     <Notes 
     > # end of Notes
     <Para 
      <Unique 9586>
      <PgfTag `CellBody'>
      <Pgf 
       <PgfFont 
        <FTag `'>
        <FFamily `Courier'>
        <FVar `Regular'>
        <FWeight `Regular'>
        <FAngle `Regular'>
        <FPostScriptName `Courier'>
        <FSize  9.0 pt>
        <FUnderlining FNoUnderlining >
        <FUnderline No >
        <FDoubleUnderline No >
        <FNumericUnderline No >
        <FOverline No >
        <FStrike No >
        <FChangeBar No >
        <FOutline No >
        <FShadow No >
        <FPairKern No >
        <FCase FAsTyped >
        <FPosition FNormal >
        <FSupScript No >
        <FSubScript No >
        <FDX  0.0 pt>
        <FDY  0.0 pt>
        <FDW  0.0 pt>
        <FSeparation 0>
        <FColor `Black'>
       > # end of PgfFont
      > # end of Pgf
      <ParaLine 
       <Font 
        <FTag `program'>
       > # end of Font
       <String `*'>
       <String `r+'>
       <String `+'>
      >
     > # end of Para
    > # end of CellContent
   > # end of Cell
   <Cell 
    <CellContent 
     <Notes 
     > # end of Notes
     <Para 
      <Unique 9588>
      <PgfTag `CellBody'>
      <Pgf 
       <PgfFont 
        <FTag `'>
        <FFamily `Courier'>
        <FVar `Regular'>
        <FWeight `Regular'>
        <FAngle `Regular'>
        <FPostScriptName `Courier'>
        <FSize  9.0 pt>
        <FUnderlining FNoUnderlining >
        <FUnderline No >
        <FDoubleUnderline No >
        <FNumericUnderline No >
        <FOverline No >
        <FStrike No >
        <FChangeBar No >
        <FOutline No >
        <FShadow No >
        <FPairKern No >
        <FCase FAsTyped >
        <FPosition FNormal >
        <FSupScript No >
        <FSubScript No >
        <FDX  0.0 pt>
        <FDY  0.0 pt>
        <FDW  0.0 pt>
        <FSeparation 0>
        <FColor `Black'>
       > # end of PgfFont
      > # end of Pgf
      <ParaLine 
       <Font 
        <FTag `program'>
       > # end of Font
       <String `T'>
      >
     > # end of Para
    > # end of CellContent
   > # end of Cell
   <Cell 
    <CellContent 
     <Notes 
     > # end of Notes
     <Para 
      <Unique 9590>
      <PgfTag `CellBody'>
      <Pgf 
       <PgfFont 
        <FTag `'>
        <FFamily `Courier'>
        <FVar `Regular'>
        <FWeight `Regular'>
        <FAngle `Regular'>
        <FPostScriptName `Courier'>
        <FSize  9.0 pt>
        <FUnderlining FNoUnderlining >
        <FUnderline No >
        <FDoubleUnderline No >
        <FNumericUnderline No >
        <FOverline No >
        <FStrike No >
        <FChangeBar No >
        <FOutline No >
        <FShadow No >
        <FPairKern No >
        <FCase FAsTyped >
        <FPosition FNormal >
        <FSupScript No >
        <FSubScript No >
        <FDX  0.0 pt>
        <FDY  0.0 pt>
        <FDW  0.0 pt>
        <FSeparation 0>
        <FColor `Black'>
       > # end of PgfFont
      > # end of Pgf
      <ParaLine 
       <Font 
        <FTag `program'>
       > # end of Font
       <String `{ X tmp = '>
       <String `r;'>
      >
     > # end of Para
     <Para 
      <Unique 9591>
      <PgfTag `CellBody'>
      <Pgf 
       <PgfFIndent  0.14167">
       <PgfFont 
        <FTag `'>
        <FFamily `Courier'>
        <FVar `Regular'>
        <FWeight `Regular'>
        <FAngle `Regular'>
        <FPostScriptName `Courier'>
        <FSize  9.0 pt>
        <FUnderlining FNoUnderlining >
        <FUnderline No >
        <FDoubleUnderline No >
        <FNumericUnderline No >
        <FOverline No >
        <FStrike No >
        <FChangeBar No >
        <FOutline No >
        <FShadow No >
        <FPairKern No >
        <FCase FAsTyped >
        <FPosition FNormal >
        <FSupScript No >
        <FSubScript No >
        <FDX  0.0 pt>
        <FDY  0.0 pt>
        <FDW  0.0 pt>
        <FSeparation 0>
        <FColor `Black'>
       > # end of PgfFont
      > # end of Pgf
      <ParaLine 
       <Font 
        <FTag `program'>
       > # end of Font
       <String `++'>
       <String `r;'>
      >
     > # end of Para
     <Para 
      <Unique 9592>
      <PgfTag `CellBody'>
      <Pgf 
       <PgfFIndent  0.14167">
       <PgfFont 
        <FTag `'>
        <FFamily `Courier'>
        <FVar `Regular'>
        <FWeight `Regular'>
        <FAngle `Regular'>
        <FPostScriptName `Courier'>
        <FSize  9.0 pt>
        <FUnderlining FNoUnderlining >
        <FUnderline No >
        <FDoubleUnderline No >
        <FNumericUnderline No >
        <FOverline No >
        <FStrike No >
        <FChangeBar No >
        <FOutline No >
        <FShadow No >
        <FPairKern No >
        <FCase FAsTyped >
        <FPosition FNormal >
        <FSupScript No >
        <FSubScript No >
        <FDX  0.0 pt>
        <FDY  0.0 pt>
        <FDW  0.0 pt>
        <FSeparation 0>
        <FColor `Black'>
       > # end of PgfFont
      > # end of Pgf
      <ParaLine 
       <Font 
        <FTag `program'>
       > # end of Font
       <String `return tmp; }'>
      >
     > # end of Para
    > # end of CellContent
   > # end of Cell
   <Cell 
    <CellContent 
     <Notes 
     > # end of Notes
     <Para 
      <Unique 9594>
      <PgfTag `CellBody'>
      <ParaLine 
      >
     > # end of Para
    > # end of CellContent
   > # end of Cell
  > # end of Row
 > # end of TblBody
> # end of Tbl
<Tbl 
<TblID 9>
<TblTag `Format A'>
<TblFormat 
 <TblColumn 
  <TblColumnNum 0>
  <TblColumnWidth  1.0">
  <TblColumnH 
   <Pgf 
    <PgfTag `CellHeading'>
    <PgfAlignment Center >
    <PgfFont 
     <FTag `'>
     <FFamily `Times'>
     <FVar `Regular'>
     <FWeight `Regular'>
     <FAngle `Regular'>
     <FPostScriptName `Times-Roman'>
     <FSize  12.0 pt>
     <FUnderlining FNoUnderlining >
     <FUnderline No >
     <FDoubleUnderline No >
     <FNumericUnderline No >
     <FOverline No >
     <FStrike No >
     <FChangeBar No >
     <FOutline No >
     <FShadow No >
     <FPairKern Yes >
     <FCase FAsTyped >
     <FPosition FNormal >
     <FSupScript No >
     <FSubScript No >
     <FDX  0.0 pt>
     <FDY  0.0 pt>
     <FDW  0.0 pt>
     <FSeparation 0>
     <FColor `Black'>
    > # end of PgfFont
    <PgfHyphenate No >
    <PgfCellAlignment Middle >
    <PgfCellMargins  0.0 pt 2.0 pt 0.0 pt 2.0 pt>
   > # end of Pgf
  > # end of TblColumnH
  <TblColumnBody 
   <PgfTag `CellBody'>
   <Pgf 
    <PgfFont 
     <FTag `'>
     <FFamily `Times'>
     <FVar `Regular'>
     <FWeight `Regular'>
     <FAngle `Regular'>
     <FPostScriptName `Times-Roman'>
     <FSize  12.0 pt>
     <FUnderlining FNoUnderlining >
     <FUnderline No >
     <FDoubleUnderline No >
     <FNumericUnderline No >
     <FOverline No >
     <FStrike No >
     <FChangeBar No >
     <FOutline No >
     <FShadow No >
     <FPairKern Yes >
     <FCase FAsTyped >
     <FPosition FNormal >
     <FSupScript No >
     <FSubScript No >
     <FDX  0.0 pt>
     <FDY  0.0 pt>
     <FDW  0.0 pt>
     <FSeparation 0>
     <FColor `Black'>
    > # end of PgfFont
   > # end of Pgf
  > # end of TblColumnBody
  <TblColumnF 
   <Pgf 
    <PgfTag `CellHeading'>
    <PgfAlignment Center >
    <PgfHyphenate No >
    <PgfCellAlignment Middle >
    <PgfCellMargins  0.0 pt 2.0 pt 0.0 pt 2.0 pt>
   > # end of Pgf
  > # end of TblColumnF
 > # end of TblColumn
 <TblColumn 
  <TblColumnNum 1>
  <TblColumnWidth  1.0">
  <TblColumnH 
  > # end of TblColumnH
  <TblColumnBody 
   <PgfTag `CellBody'>
   <Pgf 
    <PgfFont 
     <FTag `'>
     <FFamily `Times'>
     <FVar `Regular'>
     <FWeight `Regular'>
     <FAngle `Regular'>
     <FPostScriptName `Times-Roman'>
     <FSize  12.0 pt>
     <FUnderlining FNoUnderlining >
     <FUnderline No >
     <FDoubleUnderline No >
     <FNumericUnderline No >
     <FOverline No >
     <FStrike No >
     <FChangeBar No >
     <FOutline No >
     <FShadow No >
     <FPairKern Yes >
     <FCase FAsTyped >
     <FPosition FNormal >
     <FSupScript No >
     <FSubScript No >
     <FDX  0.0 pt>
     <FDY  0.0 pt>
     <FDW  0.0 pt>
     <FSeparation 0>
     <FColor `Black'>
    > # end of PgfFont
   > # end of Pgf
  > # end of TblColumnBody
  <TblColumnF 
   <Pgf 
    <PgfTag `CellHeading'>
    <PgfAlignment Center >
    <PgfHyphenate No >
    <PgfCellAlignment Middle >
    <PgfCellMargins  0.0 pt 2.0 pt 0.0 pt 2.0 pt>
   > # end of Pgf
  > # end of TblColumnF
 > # end of TblColumn
 <TblColumn 
  <TblColumnNum 2>
  <TblColumnWidth  1.0">
  <TblColumnH 
  > # end of TblColumnH
  <TblColumnBody 
   <PgfTag `CellBody'>
   <Pgf 
    <PgfFont 
     <FTag `'>
     <FFamily `Times'>
     <FVar `Regular'>
     <FWeight `Regular'>
     <FAngle `Regular'>
     <FPostScriptName `Times-Roman'>
     <FSize  12.0 pt>
     <FUnderlining FNoUnderlining >
     <FUnderline No >
     <FDoubleUnderline No >
     <FNumericUnderline No >
     <FOverline No >
     <FStrike No >
     <FChangeBar No >
     <FOutline No >
     <FShadow No >
     <FPairKern Yes >
     <FCase FAsTyped >
     <FPosition FNormal >
     <FSupScript No >
     <FSubScript No >
     <FDX  0.0 pt>
     <FDY  0.0 pt>
     <FDW  0.0 pt>
     <FSeparation 0>
     <FColor `Black'>
    > # end of PgfFont
   > # end of Pgf
  > # end of TblColumnBody
  <TblColumnF 
   <Pgf 
    <PgfTag `CellHeading'>
    <PgfAlignment Center >
    <PgfHyphenate No >
    <PgfCellAlignment Middle >
    <PgfCellMargins  0.0 pt 2.0 pt 0.0 pt 2.0 pt>
   > # end of Pgf
  > # end of TblColumnF
 > # end of TblColumn
 <TblColumn 
  <TblColumnNum 3>
  <TblColumnWidth  1.0">
  <TblColumnH 
  > # end of TblColumnH
  <TblColumnBody 
   <PgfTag `CellBody'>
   <Pgf 
    <PgfFont 
     <FTag `'>
     <FFamily `Times'>
     <FVar `Regular'>
     <FWeight `Regular'>
     <FAngle `Regular'>
     <FPostScriptName `Times-Roman'>
     <FSize  12.0 pt>
     <FUnderlining FNoUnderlining >
     <FUnderline No >
     <FDoubleUnderline No >
     <FNumericUnderline No >
     <FOverline No >
     <FStrike No >
     <FChangeBar No >
     <FOutline No >
     <FShadow No >
     <FPairKern Yes >
     <FCase FAsTyped >
     <FPosition FNormal >
     <FSupScript No >
     <FSubScript No >
     <FDX  0.0 pt>
     <FDY  0.0 pt>
     <FDW  0.0 pt>
     <FSeparation 0>
     <FColor `Black'>
    > # end of PgfFont
   > # end of Pgf
  > # end of TblColumnBody
  <TblColumnF 
   <Pgf 
    <PgfTag `CellHeading'>
    <PgfAlignment Center >
    <PgfHyphenate No >
    <PgfCellAlignment Middle >
    <PgfCellMargins  0.0 pt 2.0 pt 0.0 pt 2.0 pt>
   > # end of Pgf
  > # end of TblColumnF
 > # end of TblColumn
 <TblColumn 
  <TblColumnNum 4>
  <TblColumnWidth  1.0">
  <TblColumnH 
  > # end of TblColumnH
  <TblColumnBody 
   <PgfTag `CellBody'>
   <Pgf 
    <PgfFont 
     <FTag `'>
     <FFamily `Times'>
     <FVar `Regular'>
     <FWeight `Regular'>
     <FAngle `Regular'>
     <FPostScriptName `Times-Roman'>
     <FSize  12.0 pt>
     <FUnderlining FNoUnderlining >
     <FUnderline No >
     <FDoubleUnderline No >
     <FNumericUnderline No >
     <FOverline No >
     <FStrike No >
     <FChangeBar No >
     <FOutline No >
     <FShadow No >
     <FPairKern Yes >
     <FCase FAsTyped >
     <FPosition FNormal >
     <FSupScript No >
     <FSubScript No >
     <FDX  0.0 pt>
     <FDY  0.0 pt>
     <FDW  0.0 pt>
     <FSeparation 0>
     <FColor `Black'>
    > # end of PgfFont
   > # end of Pgf
  > # end of TblColumnBody
  <TblColumnF 
   <Pgf 
    <PgfTag `CellHeading'>
    <PgfAlignment Center >
    <PgfHyphenate No >
    <PgfCellAlignment Middle >
    <PgfCellMargins  0.0 pt 2.0 pt 0.0 pt 2.0 pt>
   > # end of Pgf
  > # end of TblColumnF
 > # end of TblColumn
 <TblInitNumBodyRows 8>
> # end of TblFormat
<TblNumColumns 4>
<Unique 14438>
<TblColumnWidth  0.8">
<TblColumnWidth  1.2">
<TblColumnWidth  1.4">
<TblColumnWidth  2.5">
<TblTitleContent 
 <Notes 
 > # end of Notes
 <Para 
  <Unique 8615>
  <Pgf 
   <PgfTag `TableTitle'>
   <PgfFont 
    <FTag `'>
    <FFamily `Times'>
    <FVar `Regular'>
    <FWeight `Bold'>
    <FAngle `Regular'>
    <FPostScriptName `Times-Bold'>
    <FSize  12.0 pt>
    <FUnderlining FNoUnderlining >
    <FUnderline No >
    <FDoubleUnderline No >
    <FNumericUnderline No >
    <FOverline No >
    <FStrike No >
    <FChangeBar No >
    <FOutline No >
    <FShadow No >
    <FPairKern Yes >
    <FCase FAsTyped >
    <FPosition FNormal >
    <FSupScript No >
    <FSubScript No >
    <FDX  0.0 pt>
    <FDY  0.0 pt>
    <FDW  0.0 pt>
    <FSeparation 0>
    <FColor `Black'>
   > # end of PgfFont
   <PgfAutoNum Yes >
   <PgfNumFormat `T:Table <n+\>: '>
   <PgfNumberFont `'>
   <PgfNumAtEnd No >
   <PgfCellAlignment Top >
   <PgfCellMargins  0.0 pt 0.0 pt 0.0 pt 0.0 pt>
  > # end of Pgf
  <PgfNumString `Table 3: '>
  <ParaLine 
   <String `Output iterator requirements'>
  >
 > # end of Para
> # end of TblTitleContent
<TblH 
 <Row 
  <RowMaxHeight  14.0">
  <RowHeight  0.5">
  <Cell 
   <CellContent 
    <Notes 
    > # end of Notes
    <Para 
     <Unique 8623>
     <Pgf 
      <PgfTag `CellHeading'>
      <PgfFont 
       <FTag `'>
       <FFamily `Times'>
       <FVar `Regular'>
       <FWeight `Regular'>
       <FAngle `Regular'>
       <FPostScriptName `Times-Roman'>
       <FSize  10.0 pt>
       <FUnderlining FNoUnderlining >
       <FUnderline No >
       <FDoubleUnderline No >
       <FNumericUnderline No >
       <FOverline No >
       <FStrike No >
       <FChangeBar No >
       <FOutline No >
       <FShadow No >
       <FPairKern Yes >
       <FCase FAsTyped >
       <FPosition FNormal >
       <FSupScript No >
       <FSubScript No >
       <FDX  0.0 pt>
       <FDY  0.0 pt>
       <FDW  0.0 pt>
       <FSeparation 0>
       <FColor `Black'>
      > # end of PgfFont
      <PgfAutoNum No >
      <PgfCellAlignment Middle >
      <PgfCellMargins  0.0 pt 2.0 pt 0.0 pt 2.0 pt>
     > # end of Pgf
     <ParaLine 
      <String `expression'>
     >
    > # end of Para
   > # end of CellContent
  > # end of Cell
  <Cell 
   <CellContent 
    <Notes 
    > # end of Notes
    <Para 
     <Unique 8625>
     <ParaLine 
      <String `return type'>
     >
    > # end of Para
   > # end of CellContent
  > # end of Cell
  <Cell 
   <CellContent 
    <Notes 
    > # end of Notes
    <Para 
     <Unique 8627>
     <ParaLine 
      <String `operational semantics'>
     >
    > # end of Para
   > # end of CellContent
  > # end of Cell
  <Cell 
   <CellContent 
    <Notes 
    > # end of Notes
    <Para 
     <Unique 8629>
     <ParaLine 
      <String `assertion/note'>
     >
    > # end of Para
    <Para 
     <Unique 8630>
     <ParaLine 
      <String `pre/post-condition'>
     >
    > # end of Para
   > # end of CellContent
  > # end of Cell
 > # end of Row
> # end of TblH
<TblBody 
 <Row 
  <RowMaxHeight  14.0">
  <RowHeight  0.44444">
  <Cell 
   <CellContent 
    <Notes 
    > # end of Notes
    <Para 
     <Unique 8632>
     <PgfTag `CellBody'>
     <Pgf 
      <PgfFont 
       <FTag `'>
       <FFamily `Courier'>
       <FVar `Regular'>
       <FWeight `Regular'>
       <FAngle `Regular'>
       <FPostScriptName `Courier'>
       <FSize  9.0 pt>
       <FUnderlining FNoUnderlining >
       <FUnderline No >
       <FDoubleUnderline No >
       <FNumericUnderline No >
       <FOverline No >
       <FStrike No >
       <FChangeBar No >
       <FOutline No >
       <FShadow No >
       <FPairKern No >
       <FCase FAsTyped >
       <FPosition FNormal >
       <FSupScript No >
       <FSubScript No >
       <FDX  0.0 pt>
       <FDY  0.0 pt>
       <FDW  0.0 pt>
       <FSeparation 0>
       <FColor `Black'>
      > # end of PgfFont
     > # end of Pgf
     <ParaLine 
      <Font 
       <FTag `program'>
      > # end of Font
      <String `X(a)'>
     >
    > # end of Para
   > # end of CellContent
  > # end of Cell
  <Cell 
   <CellContent 
    <Notes 
    > # end of Notes
    <Para 
     <Unique 8634>
     <PgfTag `CellBody'>
     <Pgf 
      <PgfFont 
       <FTag `'>
       <FFamily `Courier'>
       <FVar `Regular'>
       <FWeight `Regular'>
       <FAngle `Regular'>
       <FPostScriptName `Courier'>
       <FSize  9.0 pt>
       <FUnderlining FNoUnderlining >
       <FUnderline No >
       <FDoubleUnderline No >
       <FNumericUnderline No >
       <FOverline No >
       <FStrike No >
       <FChangeBar No >
       <FOutline No >
       <FShadow No >
       <FPairKern No >
       <FCase FAsTyped >
       <FPosition FNormal >
       <FSupScript No >
       <FSubScript No >
       <FDX  0.0 pt>
       <FDY  0.0 pt>
       <FDW  0.0 pt>
       <FSeparation 0>
       <FColor `Black'>
      > # end of PgfFont
     > # end of Pgf
     <ParaLine 
     >
    > # end of Para
   > # end of CellContent
  > # end of Cell
  <Cell 
   <CellContent 
    <Notes 
    > # end of Notes
    <Para 
     <Unique 8636>
     <PgfTag `CellBody'>
     <ParaLine 
     >
    > # end of Para
   > # end of CellContent
  > # end of Cell
  <Cell 
   <CellContent 
    <Notes 
    > # end of Notes
    <Para 
     <Unique 8638>
     <PgfTag `CellBody'>
     <ParaLine 
      <Font 
       <FTag `program'>
      > # end of Font
      <String `*a = t '>
      <Font 
       <FTag `'>
      > # end of Font
      <String `is equivalent t'>
      <String `o'>
      <Font 
       <FTag `program'>
      > # end of Font
      <String ` '>
      <String `*X(a) = t'>
      <Font 
       <FTag `'>
      > # end of Font
      <String `.'>
     >
    > # end of Para
    <Para 
     <Unique 8639>
     <PgfTag `CellBody'>
     <ParaLine 
      <String `note: a destructor is assumed.'>
     >
    > # end of Para
   > # end of CellContent
  > # end of Cell
 > # end of Row
 <Row 
  <RowMaxHeight  14.0">
  <RowHeight  0.41667">
  <Cell 
   <CellContent 
    <Notes 
    > # end of Notes
    <Para 
     <Unique 8641>
     <PgfTag `CellBody'>
     <Pgf 
      <PgfFont 
       <FTag `'>
       <FFamily `Courier'>
       <FVar `Regular'>
       <FWeight `Regular'>
       <FAngle `Regular'>
       <FPostScriptName `Courier'>
       <FSize  9.0 pt>
       <FUnderlining FNoUnderlining >
       <FUnderline No >
       <FDoubleUnderline No >
       <FNumericUnderline No >
       <FOverline No >
       <FStrike No >
       <FChangeBar No >
       <FOutline No >
       <FShadow No >
       <FPairKern No >
       <FCase FAsTyped >
       <FPosition FNormal >
       <FSupScript No >
       <FSubScript No >
       <FDX  0.0 pt>
       <FDY  0.0 pt>
       <FDW  0.0 pt>
       <FSeparation 0>
       <FColor `Black'>
      > # end of PgfFont
     > # end of Pgf
     <ParaLine 
      <Font 
       <FTag `program'>
      > # end of Font
      <String `X u(a);'>
     >
    > # end of Para
    <Para 
     <Unique 8642>
     <PgfTag `CellBody'>
     <Pgf 
      <PgfFont 
       <FTag `'>
       <FFamily `Courier'>
       <FVar `Regular'>
       <FWeight `Regular'>
       <FAngle `Regular'>
       <FPostScriptName `Courier'>
       <FSize  9.0 pt>
       <FUnderlining FNoUnderlining >
       <FUnderline No >
       <FDoubleUnderline No >
       <FNumericUnderline No >
       <FOverline No >
       <FStrike No >
       <FChangeBar No >
       <FOutline No >
       <FShadow No >
       <FPairKern No >
       <FCase FAsTyped >
       <FPosition FNormal >
       <FSupScript No >
       <FSubScript No >
       <FDX  0.0 pt>
       <FDY  0.0 pt>
       <FDW  0.0 pt>
       <FSeparation 0>
       <FColor `Black'>
      > # end of PgfFont
     > # end of Pgf
     <ParaLine 
      <Font 
       <FTag `program'>
      > # end of Font
      <String `X u = a;'>
     >
    > # end of Para
   > # end of CellContent
  > # end of Cell
  <Cell 
   <CellContent 
    <Notes 
    > # end of Notes
    <Para 
     <Unique 8644>
     <PgfTag `CellBody'>
     <ParaLine 
     >
    > # end of Para
   > # end of CellContent
  > # end of Cell
  <Cell 
   <CellContent 
    <Notes 
    > # end of Notes
    <Para 
     <Unique 8646>
     <PgfTag `CellBody'>
     <Pgf 
      <PgfFont 
       <FTag `'>
       <FFamily `Courier'>
       <FVar `Regular'>
       <FWeight `Regular'>
       <FAngle `Regular'>
       <FPostScriptName `Courier'>
       <FSize  9.0 pt>
       <FUnderlining FNoUnderlining >
       <FUnderline No >
       <FDoubleUnderline No >
       <FNumericUnderline No >
       <FOverline No >
       <FStrike No >
       <FChangeBar No >
       <FOutline No >
       <FShadow No >
       <FPairKern No >
       <FCase FAsTyped >
       <FPosition FNormal >
       <FSupScript No >
       <FSubScript No >
       <FDX  0.0 pt>
       <FDY  0.0 pt>
       <FDW  0.0 pt>
       <FSeparation 0>
       <FColor `Black'>
      > # end of PgfFont
     > # end of Pgf
     <ParaLine 
     >
    > # end of Para
   > # end of CellContent
  > # end of Cell
  <Cell 
   <CellContent 
    <Notes 
    > # end of Notes
    <Para 
     <Unique 8648>
     <PgfTag `CellBody'>
     <ParaLine 
     >
    > # end of Para
   > # end of CellContent
  > # end of Cell
 > # end of Row
 <Row 
  <RowMaxHeight  14.0">
  <RowHeight  0.27778">
  <Cell 
   <CellContent 
    <Notes 
    > # end of Notes
    <Para 
     <Unique 8650>
     <PgfTag `CellBody'>
     <Pgf 
      <PgfFont 
       <FTag `'>
       <FFamily `Courier'>
       <FVar `Regular'>
       <FWeight `Regular'>
       <FAngle `Regular'>
       <FPostScriptName `Courier'>
       <FSize  9.0 pt>
       <FUnderlining FNoUnderlining >
       <FUnderline No >
       <FDoubleUnderline No >
       <FNumericUnderline No >
       <FOverline No >
       <FStrike No >
       <FChangeBar No >
       <FOutline No >
       <FShadow No >
       <FPairKern No >
       <FCase FAsTyped >
       <FPosition FNormal >
       <FSupScript No >
       <FSubScript No >
       <FDX  0.0 pt>
       <FDY  0.0 pt>
       <FDW  0.0 pt>
       <FSeparation 0>
       <FColor `Black'>
      > # end of PgfFont
     > # end of Pgf
     <ParaLine 
      <Font 
       <FTag `program'>
      > # end of Font
      <String `*a = t'>
     >
    > # end of Para
   > # end of CellContent
  > # end of Cell
  <Cell 
   <CellContent 
    <Notes 
    > # end of Notes
    <Para 
     <Unique 8652>
     <PgfTag `CellBody'>
     <ParaLine 
      <String `result is not used'>
     >
    > # end of Para
   > # end of CellContent
  > # end of Cell
  <Cell 
   <CellContent 
    <Notes 
    > # end of Notes
    <Para 
     <Unique 8654>
     <PgfTag `CellBody'>
     <Pgf 
      <PgfFont 
       <FTag `'>
       <FFamily `Courier'>
       <FVar `Regular'>
       <FWeight `Regular'>
       <FAngle `Regular'>
       <FPostScriptName `Courier'>
       <FSize  9.0 pt>
       <FUnderlining FNoUnderlining >
       <FUnderline No >
       <FDoubleUnderline No >
       <FNumericUnderline No >
       <FOverline No >
       <FStrike No >
       <FChangeBar No >
       <FOutline No >
       <FShadow No >
       <FPairKern No >
       <FCase FAsTyped >
       <FPosition FNormal >
       <FSupScript No >
       <FSubScript No >
       <FDX  0.0 pt>
       <FDY  0.0 pt>
       <FDW  0.0 pt>
       <FSeparation 0>
       <FColor `Black'>
      > # end of PgfFont
     > # end of Pgf
     <ParaLine 
     >
    > # end of Para
   > # end of CellContent
  > # end of Cell
  <Cell 
   <CellContent 
    <Notes 
    > # end of Notes
    <Para 
     <Unique 8656>
     <PgfTag `CellBody'>
     <ParaLine 
     >
    > # end of Para
   > # end of CellContent
  > # end of Cell
 > # end of Row
 <Row 
  <RowMaxHeight  14.0">
  <RowHeight  0.26389">
  <Cell 
   <CellContent 
    <Notes 
    > # end of Notes
    <Para 
     <Unique 8658>
     <PgfTag `CellBody'>
     <Pgf 
      <PgfFont 
       <FTag `'>
       <FFamily `Courier'>
       <FVar `Regular'>
       <FWeight `Regular'>
       <FAngle `Regular'>
       <FPostScriptName `Courier'>
       <FSize  9.0 pt>
       <FUnderlining FNoUnderlining >
       <FUnderline No >
       <FDoubleUnderline No >
       <FNumericUnderline No >
       <FOverline No >
       <FStrike No >
       <FChangeBar No >
       <FOutline No >
       <FShadow No >
       <FPairKern No >
       <FCase FAsTyped >
       <FPosition FNormal >
       <FSupScript No >
       <FSubScript No >
       <FDX  0.0 pt>
       <FDY  0.0 pt>
       <FDW  0.0 pt>
       <FSeparation 0>
       <FColor `Black'>
      > # end of PgfFont
     > # end of Pgf
     <ParaLine 
      <Font 
       <FTag `program'>
      > # end of Font
      <String `++'>
      <String `r'>
     >
    > # end of Para
   > # end of CellContent
  > # end of Cell
  <Cell 
   <CellContent 
    <Notes 
    > # end of Notes
    <Para 
     <Unique 8660>
     <PgfTag `CellBody'>
     <Pgf 
      <PgfFont 
       <FTag `'>
       <FFamily `Courier'>
       <FVar `Regular'>
       <FWeight `Regular'>
       <FAngle `Regular'>
       <FPostScriptName `Courier'>
       <FSize  9.0 pt>
       <FUnderlining FNoUnderlining >
       <FUnderline No >
       <FDoubleUnderline No >
       <FNumericUnderline No >
       <FOverline No >
       <FStrike No >
       <FChangeBar No >
       <FOutline No >
       <FShadow No >
       <FPairKern No >
       <FCase FAsTyped >
       <FPosition FNormal >
       <FSupScript No >
       <FSubScript No >
       <FDX  0.0 pt>
       <FDY  0.0 pt>
       <FDW  0.0 pt>
       <FSeparation 0>
       <FColor `Black'>
      > # end of PgfFont
     > # end of Pgf
     <ParaLine 
      <Font 
       <FTag `program'>
      > # end of Font
      <String `X&'>
     >
    > # end of Para
   > # end of CellContent
  > # end of Cell
  <Cell 
   <CellContent 
    <Notes 
    > # end of Notes
    <Para 
     <Unique 8662>
     <PgfTag `CellBody'>
     <Pgf 
      <PgfFont 
       <FTag `'>
       <FFamily `Courier'>
       <FVar `Regular'>
       <FWeight `Regular'>
       <FAngle `Regular'>
       <FPostScriptName `Courier'>
       <FSize  9.0 pt>
       <FUnderlining FNoUnderlining >
       <FUnderline No >
       <FDoubleUnderline No >
       <FNumericUnderline No >
       <FOverline No >
       <FStrike No >
       <FChangeBar No >
       <FOutline No >
       <FShadow No >
       <FPairKern No >
       <FCase FAsTyped >
       <FPosition FNormal >
       <FSupScript No >
       <FSubScript No >
       <FDX  0.0 pt>
       <FDY  0.0 pt>
       <FDW  0.0 pt>
       <FSeparation 0>
       <FColor `Black'>
      > # end of PgfFont
     > # end of Pgf
     <ParaLine 
     >
    > # end of Para
   > # end of CellContent
  > # end of Cell
  <Cell 
   <CellContent 
    <Notes 
    > # end of Notes
    <Para 
     <Unique 8664>
     <PgfTag `CellBody'>
     <Pgf 
      <PgfFont 
       <FTag `'>
       <FFamily `Courier'>
       <FVar `Regular'>
       <FWeight `Regular'>
       <FAngle `Regular'>
       <FPostScriptName `Courier'>
       <FSize  9.0 pt>
       <FUnderlining FNoUnderlining >
       <FUnderline No >
       <FDoubleUnderline No >
       <FNumericUnderline No >
       <FOverline No >
       <FStrike No >
       <FChangeBar No >
       <FOutline No >
       <FShadow No >
       <FPairKern No >
       <FCase FAsTyped >
       <FPosition FNormal >
       <FSupScript No >
       <FSubScript No >
       <FDX  0.0 pt>
       <FDY  0.0 pt>
       <FDW  0.0 pt>
       <FSeparation 0>
       <FColor `Black'>
      > # end of PgfFont
     > # end of Pgf
     <ParaLine 
      <Font 
       <FTag `program'>
      > # end of Font
     >
    > # end of Para
   > # end of CellContent
  > # end of Cell
 > # end of Row
 <Row 
  <RowMaxHeight  14.0">
  <RowHeight  0.27778">
  <Cell 
   <CellContent 
    <Notes 
    > # end of Notes
    <Para 
     <Unique 8666>
     <PgfTag `CellBody'>
     <Pgf 
      <PgfFont 
       <FTag `'>
       <FFamily `Courier'>
       <FVar `Regular'>
       <FWeight `Regular'>
       <FAngle `Regular'>
       <FPostScriptName `Courier'>
       <FSize  9.0 pt>
       <FUnderlining FNoUnderlining >
       <FUnderline No >
       <FDoubleUnderline No >
       <FNumericUnderline No >
       <FOverline No >
       <FStrike No >
       <FChangeBar No >
       <FOutline No >
       <FShadow No >
       <FPairKern No >
       <FCase FAsTyped >
       <FPosition FNormal >
       <FSupScript No >
       <FSubScript No >
       <FDX  0.0 pt>
       <FDY  0.0 pt>
       <FDW  0.0 pt>
       <FSeparation 0>
       <FColor `Black'>
      > # end of PgfFont
     > # end of Pgf
     <ParaLine 
      <Font 
       <FTag `program'>
      > # end of Font
      <String `r+'>
      <String `+'>
     >
    > # end of Para
   > # end of CellContent
  > # end of Cell
  <Cell 
   <CellContent 
    <Notes 
    > # end of Notes
    <Para 
     <Unique 8668>
     <PgfTag `CellBody'>
     <ParaLine 
      <Font 
       <FTag `program'>
      > # end of Font
      <String `X'>
      <Font 
       <FTag `'>
      > # end of Font
      <String ` or '>
      <Font 
       <FTag `program'>
      > # end of Font
      <String `X&'>
     >
    > # end of Para
   > # end of CellContent
  > # end of Cell
  <Cell 
   <CellContent 
    <Notes 
    > # end of Notes
    <Para 
     <Unique 8670>
     <PgfTag `CellBody'>
     <Pgf 
      <PgfFIndent  0.14167">
      <PgfFont 
       <FTag `'>
       <FFamily `Courier'>
       <FVar `Regular'>
       <FWeight `Regular'>
       <FAngle `Regular'>
       <FPostScriptName `Courier'>
       <FSize  9.0 pt>
       <FUnderlining FNoUnderlining >
       <FUnderline No >
       <FDoubleUnderline No >
       <FNumericUnderline No >
       <FOverline No >
       <FStrike No >
       <FChangeBar No >
       <FOutline No >
       <FShadow No >
       <FPairKern No >
       <FCase FAsTyped >
       <FPosition FNormal >
       <FSupScript No >
       <FSubScript No >
       <FDX  0.0 pt>
       <FDY  0.0 pt>
       <FDW  0.0 pt>
       <FSeparation 0>
       <FColor `Black'>
      > # end of PgfFont
     > # end of Pgf
     <ParaLine 
      <Font 
       <FTag `program'>
      > # end of Font
     >
    > # end of Para
   > # end of CellContent
  > # end of Cell
  <Cell 
   <CellContent 
    <Notes 
    > # end of Notes
    <Para 
     <Unique 8672>
     <PgfTag `CellBody'>
     <ParaLine 
     >
    > # end of Para
   > # end of CellContent
  > # end of Cell
 > # end of Row
> # end of TblBody
> # end of Tbl
<Tbl 
<TblID 10>
<TblTag `Format A'>
<TblFormat 
 <TblColumn 
  <TblColumnNum 0>
  <TblColumnWidth  1.0">
  <TblColumnH 
   <Pgf 
    <PgfTag `CellHeading'>
    <PgfAlignment Center >
    <PgfFont 
     <FTag `'>
     <FFamily `Times'>
     <FVar `Regular'>
     <FWeight `Regular'>
     <FAngle `Regular'>
     <FPostScriptName `Times-Roman'>
     <FSize  12.0 pt>
     <FUnderlining FNoUnderlining >
     <FUnderline No >
     <FDoubleUnderline No >
     <FNumericUnderline No >
     <FOverline No >
     <FStrike No >
     <FChangeBar No >
     <FOutline No >
     <FShadow No >
     <FPairKern Yes >
     <FCase FAsTyped >
     <FPosition FNormal >
     <FSupScript No >
     <FSubScript No >
     <FDX  0.0 pt>
     <FDY  0.0 pt>
     <FDW  0.0 pt>
     <FSeparation 0>
     <FColor `Black'>
    > # end of PgfFont
    <PgfHyphenate No >
    <PgfCellAlignment Middle >
    <PgfCellMargins  0.0 pt 2.0 pt 0.0 pt 2.0 pt>
   > # end of Pgf
  > # end of TblColumnH
  <TblColumnBody 
   <PgfTag `CellBody'>
   <Pgf 
    <PgfFont 
     <FTag `'>
     <FFamily `Times'>
     <FVar `Regular'>
     <FWeight `Regular'>
     <FAngle `Regular'>
     <FPostScriptName `Times-Roman'>
     <FSize  12.0 pt>
     <FUnderlining FNoUnderlining >
     <FUnderline No >
     <FDoubleUnderline No >
     <FNumericUnderline No >
     <FOverline No >
     <FStrike No >
     <FChangeBar No >
     <FOutline No >
     <FShadow No >
     <FPairKern Yes >
     <FCase FAsTyped >
     <FPosition FNormal >
     <FSupScript No >
     <FSubScript No >
     <FDX  0.0 pt>
     <FDY  0.0 pt>
     <FDW  0.0 pt>
     <FSeparation 0>
     <FColor `Black'>
    > # end of PgfFont
   > # end of Pgf
  > # end of TblColumnBody
  <TblColumnF 
   <Pgf 
    <PgfTag `CellHeading'>
    <PgfAlignment Center >
    <PgfHyphenate No >
    <PgfCellAlignment Middle >
    <PgfCellMargins  0.0 pt 2.0 pt 0.0 pt 2.0 pt>
   > # end of Pgf
  > # end of TblColumnF
 > # end of TblColumn
 <TblColumn 
  <TblColumnNum 1>
  <TblColumnWidth  1.0">
  <TblColumnH 
  > # end of TblColumnH
  <TblColumnBody 
   <PgfTag `CellBody'>
   <Pgf 
    <PgfFont 
     <FTag `'>
     <FFamily `Times'>
     <FVar `Regular'>
     <FWeight `Regular'>
     <FAngle `Regular'>
     <FPostScriptName `Times-Roman'>
     <FSize  12.0 pt>
     <FUnderlining FNoUnderlining >
     <FUnderline No >
     <FDoubleUnderline No >
     <FNumericUnderline No >
     <FOverline No >
     <FStrike No >
     <FChangeBar No >
     <FOutline No >
     <FShadow No >
     <FPairKern Yes >
     <FCase FAsTyped >
     <FPosition FNormal >
     <FSupScript No >
     <FSubScript No >
     <FDX  0.0 pt>
     <FDY  0.0 pt>
     <FDW  0.0 pt>
     <FSeparation 0>
     <FColor `Black'>
    > # end of PgfFont
   > # end of Pgf
  > # end of TblColumnBody
  <TblColumnF 
   <Pgf 
    <PgfTag `CellHeading'>
    <PgfAlignment Center >
    <PgfHyphenate No >
    <PgfCellAlignment Middle >
    <PgfCellMargins  0.0 pt 2.0 pt 0.0 pt 2.0 pt>
   > # end of Pgf
  > # end of TblColumnF
 > # end of TblColumn
 <TblColumn 
  <TblColumnNum 2>
  <TblColumnWidth  1.0">
  <TblColumnH 
  > # end of TblColumnH
  <TblColumnBody 
   <PgfTag `CellBody'>
   <Pgf 
    <PgfFont 
     <FTag `'>
     <FFamily `Times'>
     <FVar `Regular'>
     <FWeight `Regular'>
     <FAngle `Regular'>
     <FPostScriptName `Times-Roman'>
     <FSize  12.0 pt>
     <FUnderlining FNoUnderlining >
     <FUnderline No >
     <FDoubleUnderline No >
     <FNumericUnderline No >
     <FOverline No >
     <FStrike No >
     <FChangeBar No >
     <FOutline No >
     <FShadow No >
     <FPairKern Yes >
     <FCase FAsTyped >
     <FPosition FNormal >
     <FSupScript No >
     <FSubScript No >
     <FDX  0.0 pt>
     <FDY  0.0 pt>
     <FDW  0.0 pt>
     <FSeparation 0>
     <FColor `Black'>
    > # end of PgfFont
   > # end of Pgf
  > # end of TblColumnBody
  <TblColumnF 
   <Pgf 
    <PgfTag `CellHeading'>
    <PgfAlignment Center >
    <PgfHyphenate No >
    <PgfCellAlignment Middle >
    <PgfCellMargins  0.0 pt 2.0 pt 0.0 pt 2.0 pt>
   > # end of Pgf
  > # end of TblColumnF
 > # end of TblColumn
 <TblColumn 
  <TblColumnNum 3>
  <TblColumnWidth  1.0">
  <TblColumnH 
  > # end of TblColumnH
  <TblColumnBody 
   <PgfTag `CellBody'>
   <Pgf 
    <PgfFont 
     <FTag `'>
     <FFamily `Times'>
     <FVar `Regular'>
     <FWeight `Regular'>
     <FAngle `Regular'>
     <FPostScriptName `Times-Roman'>
     <FSize  12.0 pt>
     <FUnderlining FNoUnderlining >
     <FUnderline No >
     <FDoubleUnderline No >
     <FNumericUnderline No >
     <FOverline No >
     <FStrike No >
     <FChangeBar No >
     <FOutline No >
     <FShadow No >
     <FPairKern Yes >
     <FCase FAsTyped >
     <FPosition FNormal >
     <FSupScript No >
     <FSubScript No >
     <FDX  0.0 pt>
     <FDY  0.0 pt>
     <FDW  0.0 pt>
     <FSeparation 0>
     <FColor `Black'>
    > # end of PgfFont
   > # end of Pgf
  > # end of TblColumnBody
  <TblColumnF 
   <Pgf 
    <PgfTag `CellHeading'>
    <PgfAlignment Center >
    <PgfHyphenate No >
    <PgfCellAlignment Middle >
    <PgfCellMargins  0.0 pt 2.0 pt 0.0 pt 2.0 pt>
   > # end of Pgf
  > # end of TblColumnF
 > # end of TblColumn
 <TblColumn 
  <TblColumnNum 4>
  <TblColumnWidth  1.0">
  <TblColumnH 
  > # end of TblColumnH
  <TblColumnBody 
   <PgfTag `CellBody'>
   <Pgf 
    <PgfFont 
     <FTag `'>
     <FFamily `Times'>
     <FVar `Regular'>
     <FWeight `Regular'>
     <FAngle `Regular'>
     <FPostScriptName `Times-Roman'>
     <FSize  12.0 pt>
     <FUnderlining FNoUnderlining >
     <FUnderline No >
     <FDoubleUnderline No >
     <FNumericUnderline No >
     <FOverline No >
     <FStrike No >
     <FChangeBar No >
     <FOutline No >
     <FShadow No >
     <FPairKern Yes >
     <FCase FAsTyped >
     <FPosition FNormal >
     <FSupScript No >
     <FSubScript No >
     <FDX  0.0 pt>
     <FDY  0.0 pt>
     <FDW  0.0 pt>
     <FSeparation 0>
     <FColor `Black'>
    > # end of PgfFont
   > # end of Pgf
  > # end of TblColumnBody
  <TblColumnF 
   <Pgf 
    <PgfTag `CellHeading'>
    <PgfAlignment Center >
    <PgfHyphenate No >
    <PgfCellAlignment Middle >
    <PgfCellMargins  0.0 pt 2.0 pt 0.0 pt 2.0 pt>
   > # end of Pgf
  > # end of TblColumnF
 > # end of TblColumn
 <TblInitNumBodyRows 8>
> # end of TblFormat
<TblNumColumns 3>
<Unique 10392>
<TblColumnWidth  1.6">
<TblColumnWidth  1.6">
<TblColumnWidth  3.3">
<TblTitleContent 
 <Notes 
 > # end of Notes
 <Para 
  <Unique 10394>
  <Pgf 
   <PgfTag `TableTitle'>
   <PgfFont 
    <FTag `'>
    <FFamily `Times'>
    <FVar `Regular'>
    <FWeight `Bold'>
    <FAngle `Regular'>
    <FPostScriptName `Times-Bold'>
    <FSize  12.0 pt>
    <FUnderlining FNoUnderlining >
    <FUnderline No >
    <FDoubleUnderline No >
    <FNumericUnderline No >
    <FOverline No >
    <FStrike No >
    <FChangeBar No >
    <FOutline No >
    <FShadow No >
    <FPairKern Yes >
    <FCase FAsTyped >
    <FPosition FNormal >
    <FSupScript No >
    <FSubScript No >
    <FDX  0.0 pt>
    <FDY  0.0 pt>
    <FDW  0.0 pt>
    <FSeparation 0>
    <FColor `Black'>
   > # end of PgfFont
   <PgfAutoNum Yes >
   <PgfNumFormat `T:Table <n+\>: '>
   <PgfNumberFont `'>
   <PgfNumAtEnd No >
   <PgfCellAlignment Top >
   <PgfCellMargins  0.0 pt 0.0 pt 0.0 pt 0.0 pt>
  > # end of Pgf
  <PgfNumString `Table 7: '>
  <ParaLine 
   <String `Allocator requirements'>
  >
 > # end of Para
> # end of TblTitleContent
<TblH 
 <Row 
  <RowMaxHeight  14.0">
  <RowHeight  0.5">
  <Cell 
   <CellContent 
    <Notes 
    > # end of Notes
    <Para 
     <Unique 10400>
     <Pgf 
      <PgfTag `CellHeading'>
      <PgfFont 
       <FTag `'>
       <FFamily `Times'>
       <FVar `Regular'>
       <FWeight `Regular'>
       <FAngle `Regular'>
       <FPostScriptName `Times-Roman'>
       <FSize  10.0 pt>
       <FUnderlining FNoUnderlining >
       <FUnderline No >
       <FDoubleUnderline No >
       <FNumericUnderline No >
       <FOverline No >
       <FStrike No >
       <FChangeBar No >
       <FOutline No >
       <FShadow No >
       <FPairKern Yes >
       <FCase FAsTyped >
       <FPosition FNormal >
       <FSupScript No >
       <FSubScript No >
       <FDX  0.0 pt>
       <FDY  0.0 pt>
       <FDW  0.0 pt>
       <FSeparation 0>
       <FColor `Black'>
      > # end of PgfFont
      <PgfAutoNum No >
      <PgfCellAlignment Middle >
      <PgfCellMargins  0.0 pt 2.0 pt 0.0 pt 2.0 pt>
     > # end of Pgf
     <ParaLine 
      <String `expression'>
     >
    > # end of Para
   > # end of CellContent
  > # end of Cell
  <Cell 
   <CellContent 
    <Notes 
    > # end of Notes
    <Para 
     <Unique 10402>
     <ParaLine 
      <String `return type'>
     >
    > # end of Para
   > # end of CellContent
  > # end of Cell
  <Cell 
   <CellContent 
    <Notes 
    > # end of Notes
    <Para 
     <Unique 10404>
     <ParaLine 
      <String `assertion/note'>
     >
    > # end of Para
    <Para 
     <Unique 10405>
     <ParaLine 
      <String `pre/post-condition'>
     >
    > # end of Para
   > # end of CellContent
  > # end of Cell
 > # end of Row
> # end of TblH
<TblBody 
 <Row 
  <RowMaxHeight  14.0">
  <RowHeight  0.27778">
  <Cell 
   <CellContent 
    <Notes 
    > # end of Notes
    <Para 
     <Unique 10407>
     <PgfTag `CellBody'>
     <Pgf 
      <PgfFont 
       <FTag `'>
       <FFamily `Courier'>
       <FVar `Regular'>
       <FWeight `Regular'>
       <FAngle `Regular'>
       <FPostScriptName `Courier'>
       <FSize  9.0 pt>
       <FUnderlining FNoUnderlining >
       <FUnderline No >
       <FDoubleUnderline No >
       <FNumericUnderline No >
       <FOverline No >
       <FStrike No >
       <FChangeBar No >
       <FOutline No >
       <FShadow No >
       <FPairKern No >
       <FCase FAsTyped >
       <FPosition FNormal >
       <FSupScript No >
       <FSubScript No >
       <FDX  0.0 pt>
       <FDY  0.0 pt>
       <FDW  0.0 pt>
       <FSeparation 0>
       <FColor `Black'>
      > # end of PgfFont
     > # end of Pgf
     <ParaLine 
      <Font 
       <FTag `program'>
      > # end of Font
      <String `X::value_type '>
     >
    > # end of Para
   > # end of CellContent
  > # end of Cell
  <Cell 
   <CellContent 
    <Notes 
    > # end of Notes
    <Para 
     <Unique 10409>
     <PgfTag `CellBody'>
     <Pgf 
      <PgfFont 
       <FTag `'>
       <FFamily `Courier'>
       <FVar `Regular'>
       <FWeight `Regular'>
       <FAngle `Regular'>
       <FPostScriptName `Courier'>
       <FSize  9.0 pt>
       <FUnderlining FNoUnderlining >
       <FUnderline No >
       <FDoubleUnderline No >
       <FNumericUnderline No >
       <FOverline No >
       <FStrike No >
       <FChangeBar No >
       <FOutline No >
       <FShadow No >
       <FPairKern No >
       <FCase FAsTyped >
       <FPosition FNormal >
       <FSupScript No >
       <FSubScript No >
       <FDX  0.0 pt>
       <FDY  0.0 pt>
       <FDW  0.0 pt>
       <FSeparation 0>
       <FColor `Black'>
      > # end of PgfFont
     > # end of Pgf
     <ParaLine 
      <Font 
       <FTag `program'>
      > # end of Font
      <String `T'>
     >
    > # end of Para
   > # end of CellContent
  > # end of Cell
  <Cell 
   <CellContent 
    <Notes 
    > # end of Notes
    <Para 
     <Unique 10411>
     <PgfTag `CellBody'>
     <ParaLine 
     >
    > # end of Para
   > # end of CellContent
  > # end of Cell
 > # end of Row
 <Row 
  <RowMaxHeight  14.0">
  <RowHeight  0.27778">
  <Cell 
   <CellContent 
    <Notes 
    > # end of Notes
    <Para 
     <Unique 10413>
     <PgfTag `CellBody'>
     <Pgf 
      <PgfFont 
       <FTag `'>
       <FFamily `Courier'>
       <FVar `Regular'>
       <FWeight `Regular'>
       <FAngle `Regular'>
       <FPostScriptName `Courier'>
       <FSize  9.0 pt>
       <FUnderlining FNoUnderlining >
       <FUnderline No >
       <FDoubleUnderline No >
       <FNumericUnderline No >
       <FOverline No >
       <FStrike No >
       <FChangeBar No >
       <FOutline No >
       <FShadow No >
       <FPairKern No >
       <FCase FAsTyped >
       <FPosition FNormal >
       <FSupScript No >
       <FSubScript No >
       <FDX  0.0 pt>
       <FDY  0.0 pt>
       <FDW  0.0 pt>
       <FSeparation 0>
       <FColor `Black'>
      > # end of PgfFont
     > # end of Pgf
     <ParaLine 
      <String `X::reference'>
     >
    > # end of Para
   > # end of CellContent
  > # end of Cell
  <Cell 
   <CellContent 
    <Notes 
    > # end of Notes
    <Para 
     <Unique 10415>
     <PgfTag `CellBody'>
     <ParaLine 
      <String `lvalue of '>
      <Font 
       <FTag `program'>
      > # end of Font
      <String `T'>
     >
    > # end of Para
   > # end of CellContent
  > # end of Cell
  <Cell 
   <CellContent 
    <Notes 
    > # end of Notes
    <Para 
     <Unique 10417>
     <PgfTag `CellBody'>
     <ParaLine 
     >
    > # end of Para
   > # end of CellContent
  > # end of Cell
 > # end of Row
 <Row 
  <RowMaxHeight  14.0">
  <RowHeight  0.27778">
  <Cell 
   <CellContent 
    <Notes 
    > # end of Notes
    <Para 
     <Unique 10419>
     <PgfTag `CellBody'>
     <Pgf 
      <PgfFont 
       <FTag `'>
       <FFamily `Courier'>
       <FVar `Regular'>
       <FWeight `Regular'>
       <FAngle `Regular'>
       <FPostScriptName `Courier'>
       <FSize  9.0 pt>
       <FUnderlining FNoUnderlining >
       <FUnderline No >
       <FDoubleUnderline No >
       <FNumericUnderline No >
       <FOverline No >
       <FStrike No >
       <FChangeBar No >
       <FOutline No >
       <FShadow No >
       <FPairKern No >
       <FCase FAsTyped >
       <FPosition FNormal >
       <FSupScript No >
       <FSubScript No >
       <FDX  0.0 pt>
       <FDY  0.0 pt>
       <FDW  0.0 pt>
       <FSeparation 0>
       <FColor `Black'>
      > # end of PgfFont
     > # end of Pgf
     <ParaLine 
      <String `X::const_reference'>
     >
    > # end of Para
   > # end of CellContent
  > # end of Cell
  <Cell 
   <CellContent 
    <Notes 
    > # end of Notes
    <Para 
     <Unique 10421>
     <PgfTag `CellBody'>
     <ParaLine 
      <String `const lvalue of '>
      <Font 
       <FTag `program'>
      > # end of Font
      <String `T'>
     >
    > # end of Para
   > # end of CellContent
  > # end of Cell
  <Cell 
   <CellContent 
    <Notes 
    > # end of Notes
    <Para 
     <Unique 10423>
     <PgfTag `CellBody'>
     <ParaLine 
     >
    > # end of Para
   > # end of CellContent
  > # end of Cell
 > # end of Row
 <Row 
  <RowMaxHeight  14.0">
  <RowHeight  0.44444">
  <Cell 
   <CellContent 
    <Notes 
    > # end of Notes
    <Para 
     <Unique 10425>
     <PgfTag `CellBody'>
     <Pgf 
      <PgfFont 
       <FTag `'>
       <FFamily `Courier'>
       <FVar `Regular'>
       <FWeight `Regular'>
       <FAngle `Regular'>
       <FPostScriptName `Courier'>
       <FSize  9.0 pt>
       <FUnderlining FNoUnderlining >
       <FUnderline No >
       <FDoubleUnderline No >
       <FNumericUnderline No >
       <FOverline No >
       <FStrike No >
       <FChangeBar No >
       <FOutline No >
       <FShadow No >
       <FPairKern No >
       <FCase FAsTyped >
       <FPosition FNormal >
       <FSupScript No >
       <FSubScript No >
       <FDX  0.0 pt>
       <FDY  0.0 pt>
       <FDW  0.0 pt>
       <FSeparation 0>
       <FColor `Black'>
      > # end of PgfFont
     > # end of Pgf
     <ParaLine 
      <Font 
       <FTag `program'>
      > # end of Font
      <String `X::pointer'>
     >
    > # end of Para
   > # end of CellContent
  > # end of Cell
  <Cell 
   <CellContent 
    <Notes 
    > # end of Notes
    <Para 
     <Unique 10427>
     <PgfTag `CellBody'>
     <ParaLine 
      <String `pointer to '>
      <Font 
       <FTag `program'>
      > # end of Font
      <String `T'>
      <Font 
       <FTag `'>
      > # end of Font
      <String ` type'>
     >
    > # end of Para
   > # end of CellContent
  > # end of Cell
  <Cell 
   <CellContent 
    <Notes 
    > # end of Notes
    <Para 
     <Unique 10429>
     <PgfTag `CellBody'>
     <ParaLine 
      <String `the result of '>
      <Font 
       <FTag `program'>
      > # end of Font
      <String `operator*'>
      <Font 
       <FTag `'>
      > # end of Font
      <String ` of values of '>
      <Font 
       <FTag `program'>
      > # end of Font
      <String `X::pointer'>
      <Font 
       <FTag `'>
      > # end of Font
      <String ` is of '>
     >
     <ParaLine 
      <Font 
       <FTag `program'>
      > # end of Font
      <String `reference.'>
      <Font 
       <FTag `'>
      > # end of Font
     >
    > # end of Para
   > # end of CellContent
  > # end of Cell
 > # end of Row
 <Row 
  <RowMaxHeight  14.0">
  <RowHeight  0.94444">
  <Cell 
   <CellContent 
    <Notes 
    > # end of Notes
    <Para 
     <Unique 10431>
     <PgfTag `CellBody'>
     <Pgf 
      <PgfFont 
       <FTag `'>
       <FFamily `Courier'>
       <FVar `Regular'>
       <FWeight `Regular'>
       <FAngle `Regular'>
       <FPostScriptName `Courier'>
       <FSize  9.0 pt>
       <FUnderlining FNoUnderlining >
       <FUnderline No >
       <FDoubleUnderline No >
       <FNumericUnderline No >
       <FOverline No >
       <FStrike No >
       <FChangeBar No >
       <FOutline No >
       <FShadow No >
       <FPairKern No >
       <FCase FAsTyped >
       <FPosition FNormal >
       <FSupScript No >
       <FSubScript No >
       <FDX  0.0 pt>
       <FDY  0.0 pt>
       <FDW  0.0 pt>
       <FSeparation 0>
       <FColor `Black'>
      > # end of PgfFont
     > # end of Pgf
     <ParaLine 
      <String `X::const_pointer'>
     >
    > # end of Para
   > # end of CellContent
  > # end of Cell
  <Cell 
   <CellContent 
    <Notes 
    > # end of Notes
    <Para 
     <Unique 10433>
     <PgfTag `CellBody'>
     <ParaLine 
      <String `pointer to'>
      <Font 
       <FTag `program'>
      > # end of Font
      <String ` const T'>
      <Font 
       <FTag `'>
      > # end of Font
      <String ` type'>
     >
    > # end of Para
   > # end of CellContent
  > # end of Cell
  <Cell 
   <CellContent 
    <Notes 
    > # end of Notes
    <Para 
     <Unique 10435>
     <PgfTag `CellBody'>
     <ParaLine 
      <String `the result of '>
      <Font 
       <FTag `program'>
      > # end of Font
      <String `operator*'>
      <Font 
       <FTag `'>
      > # end of Font
      <String ` of values of '>
     >
     <ParaLine 
      <Font 
       <FTag `program'>
      > # end of Font
      <String `X::const_pointer'>
      <Font 
       <FTag `'>
      > # end of Font
      <String ` is of '>
      <Font 
       <FTag `program'>
      > # end of Font
      <String `const_reference'>
      <String `;'>
     >
    > # end of Para
    <Para 
     <Unique 10436>
     <PgfTag `CellBody'>
     <ParaLine 
      <String `it is the same type of pointer as '>
      <Font 
       <FTag `program'>
      > # end of Font
      <String `X::pointer'>
      <Font 
       <FTag `'>
      > # end of Font
      <String `, in particu'>
      <Char SoftHyphen >
     >
     <ParaLine 
      <String `lar, '>
      <Font 
       <FTag `program'>
      > # end of Font
      <String `sizeof(X::const_pointer) == '>
     >
     <ParaLine 
      <String `sizeof(X::pointer).'>
     >
    > # end of Para
   > # end of CellContent
  > # end of Cell
 > # end of Row
 <Row 
  <RowMaxHeight  14.0">
  <RowHeight  0.44444">
  <Cell 
   <CellContent 
    <Notes 
    > # end of Notes
    <Para 
     <Unique 10438>
     <PgfTag `CellBody'>
     <Pgf 
      <PgfFont 
       <FTag `'>
       <FFamily `Courier'>
       <FVar `Regular'>
       <FWeight `Regular'>
       <FAngle `Regular'>
       <FPostScriptName `Courier'>
       <FSize  9.0 pt>
       <FUnderlining FNoUnderlining >
       <FUnderline No >
       <FDoubleUnderline No >
       <FNumericUnderline No >
       <FOverline No >
       <FStrike No >
       <FChangeBar No >
       <FOutline No >
       <FShadow No >
       <FPairKern No >
       <FCase FAsTyped >
       <FPosition FNormal >
       <FSupScript No >
       <FSubScript No >
       <FDX  0.0 pt>
       <FDY  0.0 pt>
       <FDW  0.0 pt>
       <FSeparation 0>
       <FColor `Black'>
      > # end of PgfFont
     > # end of Pgf
     <ParaLine 
      <String `X::size_type'>
     >
    > # end of Para
   > # end of CellContent
  > # end of Cell
  <Cell 
   <CellContent 
    <Notes 
    > # end of Notes
    <Para 
     <Unique 10440>
     <PgfTag `CellBody'>
     <ParaLine 
      <String `unsigned integral type'>
     >
    > # end of Para
   > # end of CellContent
  > # end of Cell
  <Cell 
   <CellContent 
    <Notes 
    > # end of Notes
    <Para 
     <Unique 10442>
     <PgfTag `CellBody'>
     <ParaLine 
      <String `the type that can represent the size of the largest object '>
     >
     <ParaLine 
      <String `in the memory model.'>
     >
    > # end of Para
   > # end of CellContent
  > # end of Cell
 > # end of Row
 <Row 
  <RowMaxHeight  14.0">
  <RowHeight  0.44444">
  <Cell 
   <CellContent 
    <Notes 
    > # end of Notes
    <Para 
     <Unique 10444>
     <PgfTag `CellBody'>
     <Pgf 
      <PgfFont 
       <FTag `'>
       <FFamily `Courier'>
       <FVar `Regular'>
       <FWeight `Regular'>
       <FAngle `Regular'>
       <FPostScriptName `Courier'>
       <FSize  9.0 pt>
       <FUnderlining FNoUnderlining >
       <FUnderline No >
       <FDoubleUnderline No >
       <FNumericUnderline No >
       <FOverline No >
       <FStrike No >
       <FChangeBar No >
       <FOutline No >
       <FShadow No >
       <FPairKern No >
       <FCase FAsTyped >
       <FPosition FNormal >
       <FSupScript No >
       <FSubScript No >
       <FDX  0.0 pt>
       <FDY  0.0 pt>
       <FDW  0.0 pt>
       <FSeparation 0>
       <FColor `Black'>
      > # end of PgfFont
     > # end of Pgf
     <ParaLine 
      <Font 
       <FTag `program'>
      > # end of Font
      <String `X::difference_type'>
     >
    > # end of Para
   > # end of CellContent
  > # end of Cell
  <Cell 
   <CellContent 
    <Notes 
    > # end of Notes
    <Para 
     <Unique 10446>
     <PgfTag `CellBody'>
     <ParaLine 
      <String `signed integral type'>
     >
    > # end of Para
   > # end of CellContent
  > # end of Cell
  <Cell 
   <CellContent 
    <Notes 
    > # end of Notes
    <Para 
     <Unique 10448>
     <PgfTag `CellBody'>
     <ParaLine 
      <String `the type that can represent the difference between any '>
     >
     <ParaLine 
      <String `two pointers in the memory model.'>
     >
    > # end of Para
   > # end of CellContent
  > # end of Cell
 > # end of Row
 <Row 
  <RowMaxHeight  14.0">
  <RowHeight  0.27778">
  <Cell 
   <CellContent 
    <Notes 
    > # end of Notes
    <Para 
     <Unique 10450>
     <PgfTag `CellBody'>
     <Pgf 
      <PgfFont 
       <FTag `'>
       <FFamily `Courier'>
       <FVar `Regular'>
       <FWeight `Regular'>
       <FAngle `Regular'>
       <FPostScriptName `Courier'>
       <FSize  9.0 pt>
       <FUnderlining FNoUnderlining >
       <FUnderline No >
       <FDoubleUnderline No >
       <FNumericUnderline No >
       <FOverline No >
       <FStrike No >
       <FChangeBar No >
       <FOutline No >
       <FShadow No >
       <FPairKern No >
       <FCase FAsTyped >
       <FPosition FNormal >
       <FSupScript No >
       <FSubScript No >
       <FDX  0.0 pt>
       <FDY  0.0 pt>
       <FDW  0.0 pt>
       <FSeparation 0>
       <FColor `Black'>
      > # end of PgfFont
     > # end of Pgf
     <ParaLine 
      <String `X a;'>
     >
    > # end of Para
   > # end of CellContent
  > # end of Cell
  <Cell 
   <CellContent 
    <Notes 
    > # end of Notes
    <Para 
     <Unique 10452>
     <PgfTag `CellBody'>
     <ParaLine 
     >
    > # end of Para
   > # end of CellContent
  > # end of Cell
  <Cell 
   <CellContent 
    <Notes 
    > # end of Notes
    <Para 
     <Unique 10454>
     <PgfTag `CellBody'>
     <ParaLine 
      <String `note: a destructor is assumed.'>
     >
    > # end of Para
   > # end of CellContent
  > # end of Cell
 > # end of Row
 <Row 
  <RowMaxHeight  14.0">
  <RowHeight  0.27778">
  <Cell 
   <CellContent 
    <Notes 
    > # end of Notes
    <Para 
     <Unique 10456>
     <PgfTag `CellBody'>
     <Pgf 
      <PgfFont 
       <FTag `'>
       <FFamily `Courier'>
       <FVar `Regular'>
       <FWeight `Regular'>
       <FAngle `Regular'>
       <FPostScriptName `Courier'>
       <FSize  9.0 pt>
       <FUnderlining FNoUnderlining >
       <FUnderline No >
       <FDoubleUnderline No >
       <FNumericUnderline No >
       <FOverline No >
       <FStrike No >
       <FChangeBar No >
       <FOutline No >
       <FShadow No >
       <FPairKern No >
       <FCase FAsTyped >
       <FPosition FNormal >
       <FSupScript No >
       <FSubScript No >
       <FDX  0.0 pt>
       <FDY  0.0 pt>
       <FDW  0.0 pt>
       <FSeparation 0>
       <FColor `Black'>
      > # end of PgfFont
     > # end of Pgf
     <ParaLine 
      <String `a.address(r)'>
     >
    > # end of Para
   > # end of CellContent
  > # end of Cell
  <Cell 
   <CellContent 
    <Notes 
    > # end of Notes
    <Para 
     <Unique 10458>
     <PgfTag `CellBody'>
     <Pgf 
      <PgfFont 
       <FTag `'>
       <FFamily `Courier'>
       <FVar `Regular'>
       <FWeight `Regular'>
       <FAngle `Regular'>
       <FPostScriptName `Courier'>
       <FSize  9.0 pt>
       <FUnderlining FNoUnderlining >
       <FUnderline No >
       <FDoubleUnderline No >
       <FNumericUnderline No >
       <FOverline No >
       <FStrike No >
       <FChangeBar No >
       <FOutline No >
       <FShadow No >
       <FPairKern No >
       <FCase FAsTyped >
       <FPosition FNormal >
       <FSupScript No >
       <FSubScript No >
       <FDX  0.0 pt>
       <FDY  0.0 pt>
       <FDW  0.0 pt>
       <FSeparation 0>
       <FColor `Black'>
      > # end of PgfFont
     > # end of Pgf
     <ParaLine 
      <Font 
       <FTag `program'>
      > # end of Font
      <String `pointer'>
     >
    > # end of Para
   > # end of CellContent
  > # end of Cell
  <Cell 
   <CellContent 
    <Notes 
    > # end of Notes
    <Para 
     <Unique 10460>
     <PgfTag `CellBody'>
     <ParaLine 
      <Font 
       <FTag `program'>
      > # end of Font
      <String `*(a.address(r)) == r'>
      <Font 
       <FTag `'>
      > # end of Font
      <String `.'>
     >
    > # end of Para
   > # end of CellContent
  > # end of Cell
 > # end of Row
 <Row 
  <RowMaxHeight  14.0">
  <RowHeight  0.27778">
  <Cell 
   <CellContent 
    <Notes 
    > # end of Notes
    <Para 
     <Unique 10462>
     <PgfTag `CellBody'>
     <Pgf 
      <PgfFont 
       <FTag `'>
       <FFamily `Courier'>
       <FVar `Regular'>
       <FWeight `Regular'>
       <FAngle `Regular'>
       <FPostScriptName `Courier'>
       <FSize  9.0 pt>
       <FUnderlining FNoUnderlining >
       <FUnderline No >
       <FDoubleUnderline No >
       <FNumericUnderline No >
       <FOverline No >
       <FStrike No >
       <FChangeBar No >
       <FOutline No >
       <FShadow No >
       <FPairKern No >
       <FCase FAsTyped >
       <FPosition FNormal >
       <FSupScript No >
       <FSubScript No >
       <FDX  0.0 pt>
       <FDY  0.0 pt>
       <FDW  0.0 pt>
       <FSeparation 0>
       <FColor `Black'>
      > # end of PgfFont
     > # end of Pgf
     <ParaLine 
      <String `a.const_address(s)'>
     >
    > # end of Para
   > # end of CellContent
  > # end of Cell
  <Cell 
   <CellContent 
    <Notes 
    > # end of Notes
    <Para 
     <Unique 10464>
     <PgfTag `CellBody'>
     <Pgf 
      <PgfFont 
       <FTag `'>
       <FFamily `Courier'>
       <FVar `Regular'>
       <FWeight `Regular'>
       <FAngle `Regular'>
       <FPostScriptName `Courier'>
       <FSize  9.0 pt>
       <FUnderlining FNoUnderlining >
       <FUnderline No >
       <FDoubleUnderline No >
       <FNumericUnderline No >
       <FOverline No >
       <FStrike No >
       <FChangeBar No >
       <FOutline No >
       <FShadow No >
       <FPairKern No >
       <FCase FAsTyped >
       <FPosition FNormal >
       <FSupScript No >
       <FSubScript No >
       <FDX  0.0 pt>
       <FDY  0.0 pt>
       <FDW  0.0 pt>
       <FSeparation 0>
       <FColor `Black'>
      > # end of PgfFont
     > # end of Pgf
     <ParaLine 
      <Font 
       <FTag `program'>
      > # end of Font
      <String `const_pointer'>
     >
    > # end of Para
   > # end of CellContent
  > # end of Cell
  <Cell 
   <CellContent 
    <Notes 
    > # end of Notes
    <Para 
     <Unique 10466>
     <PgfTag `CellBody'>
     <ParaLine 
      <Font 
       <FTag `program'>
      > # end of Font
      <String `*(a.address(s)) == s'>
      <Font 
       <FTag `'>
      > # end of Font
      <String `.'>
     >
    > # end of Para
   > # end of CellContent
  > # end of Cell
 > # end of Row
 <Row 
  <RowMaxHeight  14.0">
  <RowHeight  0.61111">
  <Cell 
   <CellContent 
    <Notes 
    > # end of Notes
    <Para 
     <Unique 10468>
     <PgfTag `CellBody'>
     <Pgf 
      <PgfFont 
       <FTag `'>
       <FFamily `Courier'>
       <FVar `Regular'>
       <FWeight `Regular'>
       <FAngle `Regular'>
       <FPostScriptName `Courier'>
       <FSize  9.0 pt>
       <FUnderlining FNoUnderlining >
       <FUnderline No >
       <FDoubleUnderline No >
       <FNumericUnderline No >
       <FOverline No >
       <FStrike No >
       <FChangeBar No >
       <FOutline No >
       <FShadow No >
       <FPairKern No >
       <FCase FAsTyped >
       <FPosition FNormal >
       <FSupScript No >
       <FSubScript No >
       <FDX  0.0 pt>
       <FDY  0.0 pt>
       <FDW  0.0 pt>
       <FSeparation 0>
       <FColor `Black'>
      > # end of PgfFont
     > # end of Pgf
     <ParaLine 
      <Font 
       <FTag `program'>
      > # end of Font
      <String `a.allocate(n)'>
     >
    > # end of Para
   > # end of CellContent
  > # end of Cell
  <Cell 
   <CellContent 
    <Notes 
    > # end of Notes
    <Para 
     <Unique 10470>
     <PgfTag `CellBody'>
     <Pgf 
      <PgfFont 
       <FTag `'>
       <FFamily `Courier'>
       <FVar `Regular'>
       <FWeight `Regular'>
       <FAngle `Regular'>
       <FPostScriptName `Courier'>
       <FSize  9.0 pt>
       <FUnderlining FNoUnderlining >
       <FUnderline No >
       <FDoubleUnderline No >
       <FNumericUnderline No >
       <FOverline No >
       <FStrike No >
       <FChangeBar No >
       <FOutline No >
       <FShadow No >
       <FPairKern No >
       <FCase FAsTyped >
       <FPosition FNormal >
       <FSupScript No >
       <FSubScript No >
       <FDX  0.0 pt>
       <FDY  0.0 pt>
       <FDW  0.0 pt>
       <FSeparation 0>
       <FColor `Black'>
      > # end of PgfFont
     > # end of Pgf
     <ParaLine 
      <Font 
       <FTag `program'>
      > # end of Font
      <String `X::pointer'>
     >
    > # end of Para
   > # end of CellContent
  > # end of Cell
  <Cell 
   <CellContent 
    <Notes 
    > # end of Notes
    <Para 
     <Unique 10472>
     <PgfTag `CellBody'>
     <ParaLine 
      <String `memory is allocated for '>
      <Font 
       <FTag `program'>
      > # end of Font
      <String `n'>
      <Font 
       <FTag `'>
      > # end of Font
      <String ` objects of type '>
      <Font 
       <FTag `program'>
      > # end of Font
      <String `T'>
      <Font 
       <FTag `'>
      > # end of Font
      <String ` but objects '>
     >
     <ParaLine 
      <String `are not constructed. '>
      <Font 
       <FTag `program'>
      > # end of Font
      <String `allocate'>
      <Font 
       <FTag `'>
      > # end of Font
      <String ` may raise an appropriate '>
     >
     <ParaLine 
      <String `exception.'>
     >
    > # end of Para
   > # end of CellContent
  > # end of Cell
 > # end of Row
 <Row 
  <RowMaxHeight  14.0">
  <RowHeight  0.44444">
  <Cell 
   <CellContent 
    <Notes 
    > # end of Notes
    <Para 
     <Unique 10474>
     <PgfTag `CellBody'>
     <Pgf 
      <PgfFont 
       <FTag `'>
       <FFamily `Courier'>
       <FVar `Regular'>
       <FWeight `Regular'>
       <FAngle `Regular'>
       <FPostScriptName `Courier'>
       <FSize  9.0 pt>
       <FUnderlining FNoUnderlining >
       <FUnderline No >
       <FDoubleUnderline No >
       <FNumericUnderline No >
       <FOverline No >
       <FStrike No >
       <FChangeBar No >
       <FOutline No >
       <FShadow No >
       <FPairKern No >
       <FCase FAsTyped >
       <FPosition FNormal >
       <FSupScript No >
       <FSubScript No >
       <FDX  0.0 pt>
       <FDY  0.0 pt>
       <FDW  0.0 pt>
       <FSeparation 0>
       <FColor `Black'>
      > # end of PgfFont
     > # end of Pgf
     <ParaLine 
      <String `a.deallocate(p)'>
     >
    > # end of Para
   > # end of CellContent
  > # end of Cell
  <Cell 
   <CellContent 
    <Notes 
    > # end of Notes
    <Para 
     <Unique 10476>
     <PgfTag `CellBody'>
     <ParaLine 
      <String `result is not used'>
     >
    > # end of Para
   > # end of CellContent
  > # end of Cell
  <Cell 
   <CellContent 
    <Notes 
    > # end of Notes
    <Para 
     <Unique 10478>
     <PgfTag `CellBody'>
     <ParaLine 
      <String `all the objects in the area pointed by '>
      <Font 
       <FTag `program'>
      > # end of Font
      <String `p'>
      <Font 
       <FTag `'>
      > # end of Font
      <String ` should be '>
     >
     <ParaLine 
      <String `destroyed prior to the call of the deallocate.'>
     >
    > # end of Para
   > # end of CellContent
  > # end of Cell
 > # end of Row
 <Row 
  <RowMaxHeight  14.0">
  <RowHeight  0.27778">
  <Cell 
   <CellContent 
    <Notes 
    > # end of Notes
    <Para 
     <Unique 10480>
     <PgfTag `CellBody'>
     <Pgf 
      <PgfFont 
       <FTag `'>
       <FFamily `Courier'>
       <FVar `Regular'>
       <FWeight `Regular'>
       <FAngle `Regular'>
       <FPostScriptName `Courier'>
       <FSize  9.0 pt>
       <FUnderlining FNoUnderlining >
       <FUnderline No >
       <FDoubleUnderline No >
       <FNumericUnderline No >
       <FOverline No >
       <FStrike No >
       <FChangeBar No >
       <FOutline No >
       <FShadow No >
       <FPairKern No >
       <FCase FAsTyped >
       <FPosition FNormal >
       <FSupScript No >
       <FSubScript No >
       <FDX  0.0 pt>
       <FDY  0.0 pt>
       <FDW  0.0 pt>
       <FSeparation 0>
       <FColor `Black'>
      > # end of PgfFont
     > # end of Pgf
     <ParaLine 
      <String `construct(p, a)'>
     >
    > # end of Para
   > # end of CellContent
  > # end of Cell
  <Cell 
   <CellContent 
    <Notes 
    > # end of Notes
    <Para 
     <Unique 10482>
     <PgfTag `CellBody'>
     <Pgf 
      <PgfFont 
       <FTag `'>
       <FFamily `Courier'>
       <FVar `Regular'>
       <FWeight `Regular'>
       <FAngle `Regular'>
       <FPostScriptName `Courier'>
       <FSize  9.0 pt>
       <FUnderlining FNoUnderlining >
       <FUnderline No >
       <FDoubleUnderline No >
       <FNumericUnderline No >
       <FOverline No >
       <FStrike No >
       <FChangeBar No >
       <FOutline No >
       <FShadow No >
       <FPairKern No >
       <FCase FAsTyped >
       <FPosition FNormal >
       <FSupScript No >
       <FSubScript No >
       <FDX  0.0 pt>
       <FDY  0.0 pt>
       <FDW  0.0 pt>
       <FSeparation 0>
       <FColor `Black'>
      > # end of PgfFont
     > # end of Pgf
     <ParaLine 
      <Font 
       <FTag `program'>
      > # end of Font
      <String `void'>
     >
    > # end of Para
   > # end of CellContent
  > # end of Cell
  <Cell 
   <CellContent 
    <Notes 
    > # end of Notes
    <Para 
     <Unique 10484>
     <PgfTag `CellBody'>
     <ParaLine 
      <String `post: '>
      <Font 
       <FTag `program'>
      > # end of Font
      <String `*p == a'>
      <Font 
       <FTag `'>
      > # end of Font
      <String `.'>
     >
    > # end of Para
   > # end of CellContent
  > # end of Cell
 > # end of Row
 <Row 
  <RowMaxHeight  14.0">
  <RowHeight  0.27778">
  <Cell 
   <CellContent 
    <Notes 
    > # end of Notes
    <Para 
     <Unique 10486>
     <PgfTag `CellBody'>
     <Pgf 
      <PgfFont 
       <FTag `'>
       <FFamily `Courier'>
       <FVar `Regular'>
       <FWeight `Regular'>
       <FAngle `Regular'>
       <FPostScriptName `Courier'>
       <FSize  9.0 pt>
       <FUnderlining FNoUnderlining >
       <FUnderline No >
       <FDoubleUnderline No >
       <FNumericUnderline No >
       <FOverline No >
       <FStrike No >
       <FChangeBar No >
       <FOutline No >
       <FShadow No >
       <FPairKern No >
       <FCase FAsTyped >
       <FPosition FNormal >
       <FSupScript No >
       <FSubScript No >
       <FDX  0.0 pt>
       <FDY  0.0 pt>
       <FDW  0.0 pt>
       <FSeparation 0>
       <FColor `Black'>
      > # end of PgfFont
     > # end of Pgf
     <ParaLine 
      <String `destroy(p)'>
     >
    > # end of Para
   > # end of CellContent
  > # end of Cell
  <Cell 
   <CellContent 
    <Notes 
    > # end of Notes
    <Para 
     <Unique 10488>
     <PgfTag `CellBody'>
     <Pgf 
      <PgfFont 
       <FTag `'>
       <FFamily `Courier'>
       <FVar `Regular'>
       <FWeight `Regular'>
       <FAngle `Regular'>
       <FPostScriptName `Courier'>
       <FSize  9.0 pt>
       <FUnderlining FNoUnderlining >
       <FUnderline No >
       <FDoubleUnderline No >
       <FNumericUnderline No >
       <FOverline No >
       <FStrike No >
       <FChangeBar No >
       <FOutline No >
       <FShadow No >
       <FPairKern No >
       <FCase FAsTyped >
       <FPosition FNormal >
       <FSupScript No >
       <FSubScript No >
       <FDX  0.0 pt>
       <FDY  0.0 pt>
       <FDW  0.0 pt>
       <FSeparation 0>
       <FColor `Black'>
      > # end of PgfFont
     > # end of Pgf
     <ParaLine 
      <Font 
       <FTag `program'>
      > # end of Font
      <String `void'>
     >
    > # end of Para
   > # end of CellContent
  > # end of Cell
  <Cell 
   <CellContent 
    <Notes 
    > # end of Notes
    <Para 
     <Unique 10490>
     <PgfTag `CellBody'>
     <ParaLine 
      <String `the value pointed by '>
      <Font 
       <FTag `program'>
      > # end of Font
      <String `p'>
      <Font 
       <FTag `'>
      > # end of Font
      <String ` is destroyed.'>
     >
    > # end of Para
   > # end of CellContent
  > # end of Cell
 > # end of Row
 <Row 
  <RowMaxHeight  14.0">
  <RowHeight  0.94444">
  <Cell 
   <CellContent 
    <Notes 
    > # end of Notes
    <Para 
     <Unique 10492>
     <PgfTag `CellBody'>
     <Pgf 
      <PgfFont 
       <FTag `'>
       <FFamily `Courier'>
       <FVar `Regular'>
       <FWeight `Regular'>
       <FAngle `Regular'>
       <FPostScriptName `Courier'>
       <FSize  9.0 pt>
       <FUnderlining FNoUnderlining >
       <FUnderline No >
       <FDoubleUnderline No >
       <FNumericUnderline No >
       <FOverline No >
       <FStrike No >
       <FChangeBar No >
       <FOutline No >
       <FShadow No >
       <FPairKern No >
       <FCase FAsTyped >
       <FPosition FNormal >
       <FSupScript No >
       <FSubScript No >
       <FDX  0.0 pt>
       <FDY  0.0 pt>
       <FDW  0.0 pt>
       <FSeparation 0>
       <FColor `Black'>
      > # end of PgfFont
     > # end of Pgf
     <ParaLine 
      <String `a.init_page_size()'>
     >
    > # end of Para
   > # end of CellContent
  > # end of Cell
  <Cell 
   <CellContent 
    <Notes 
    > # end of Notes
    <Para 
     <Unique 10494>
     <PgfTag `CellBody'>
     <Pgf 
      <PgfFont 
       <FTag `'>
       <FFamily `Courier'>
       <FVar `Regular'>
       <FWeight `Regular'>
       <FAngle `Regular'>
       <FPostScriptName `Courier'>
       <FSize  9.0 pt>
       <FUnderlining FNoUnderlining >
       <FUnderline No >
       <FDoubleUnderline No >
       <FNumericUnderline No >
       <FOverline No >
       <FStrike No >
       <FChangeBar No >
       <FOutline No >
       <FShadow No >
       <FPairKern No >
       <FCase FAsTyped >
       <FPosition FNormal >
       <FSupScript No >
       <FSubScript No >
       <FDX  0.0 pt>
       <FDY  0.0 pt>
       <FDW  0.0 pt>
       <FSeparation 0>
       <FColor `Black'>
      > # end of PgfFont
     > # end of Pgf
     <ParaLine 
      <Font 
       <FTag `program'>
      > # end of Font
      <String `X::size_type'>
     >
    > # end of Para
   > # end of CellContent
  > # end of Cell
  <Cell 
   <CellContent 
    <Notes 
    > # end of Notes
    <Para 
     <Unique 10496>
     <PgfTag `CellBody'>
     <ParaLine 
      <String `the returned value is the optimal value for an initial '>
     >
     <ParaLine 
      <String `buffer size of the given type. It is assumed that if '>
      <Font 
       <FTag `program'>
      > # end of Font
      <String `k'>
      <Font 
       <FTag `'>
      > # end of Font
      <String ` is '>
     >
     <ParaLine 
      <String `returned by '>
      <Font 
       <FTag `program'>
      > # end of Font
      <String `init_page_size'>
      <Font 
       <FTag `'>
      > # end of Font
      <String `, '>
      <Font 
       <FTag `program'>
      > # end of Font
      <String `t'>
      <Font 
       <FTag `'>
      > # end of Font
      <String ` is the construction '>
     >
     <ParaLine 
      <String `time for '>
      <Font 
       <FTag `program'>
      > # end of Font
      <String `T'>
      <Font 
       <FTag `'>
      > # end of Font
      <String `, and '>
      <Font 
       <FTag `program'>
      > # end of Font
      <String `u'>
      <Font 
       <FTag `'>
      > # end of Font
      <String ` is the time that it takes to do '>
      <Font 
       <FTag `program'>
      > # end of Font
      <String `allo'>
      <Char SoftHyphen >
     >
     <ParaLine 
      <String `cate(k)'>
      <Font 
       <FTag `'>
      > # end of Font
      <String `, then '>
      <Font 
       <FTag `program'>
      > # end of Font
      <String `k * t'>
      <Font 
       <FTag `'>
      > # end of Font
      <String ` is much greater th'>
      <String `an'>
      <String ` '>
      <Font 
       <FTag `program'>
      > # end of Font
      <String `u'>
      <Font 
       <FTag `'>
      > # end of Font
      <String `.'>
     >
    > # end of Para
   > # end of CellContent
  > # end of Cell
 > # end of Row
 <Row 
  <RowMaxHeight  14.0">
  <RowHeight  0.27778">
  <Cell 
   <CellContent 
    <Notes 
    > # end of Notes
    <Para 
     <Unique 10498>
     <PgfTag `CellBody'>
     <Pgf 
      <PgfFont 
       <FTag `'>
       <FFamily `Courier'>
       <FVar `Regular'>
       <FWeight `Regular'>
       <FAngle `Regular'>
       <FPostScriptName `Courier'>
       <FSize  9.0 pt>
       <FUnderlining FNoUnderlining >
       <FUnderline No >
       <FDoubleUnderline No >
       <FNumericUnderline No >
       <FOverline No >
       <FStrike No >
       <FChangeBar No >
       <FOutline No >
       <FShadow No >
       <FPairKern No >
       <FCase FAsTyped >
       <FPosition FNormal >
       <FSupScript No >
       <FSubScript No >
       <FDX  0.0 pt>
       <FDY  0.0 pt>
       <FDW  0.0 pt>
       <FSeparation 0>
       <FColor `Black'>
      > # end of PgfFont
     > # end of Pgf
     <ParaLine 
      <String `a.max_size()'>
     >
    > # end of Para
   > # end of CellContent
  > # end of Cell
  <Cell 
   <CellContent 
    <Notes 
    > # end of Notes
    <Para 
     <Unique 10500>
     <PgfTag `CellBody'>
     <Pgf 
      <PgfFont 
       <FTag `'>
       <FFamily `Courier'>
       <FVar `Regular'>
       <FWeight `Regular'>
       <FAngle `Regular'>
       <FPostScriptName `Courier'>
       <FSize  9.0 pt>
       <FUnderlining FNoUnderlining >
       <FUnderline No >
       <FDoubleUnderline No >
       <FNumericUnderline No >
       <FOverline No >
       <FStrike No >
       <FChangeBar No >
       <FOutline No >
       <FShadow No >
       <FPairKern No >
       <FCase FAsTyped >
       <FPosition FNormal >
       <FSupScript No >
       <FSubScript No >
       <FDX  0.0 pt>
       <FDY  0.0 pt>
       <FDW  0.0 pt>
       <FSeparation 0>
       <FColor `Black'>
      > # end of PgfFont
     > # end of Pgf
     <ParaLine 
      <String `X::size_type'>
     >
    > # end of Para
   > # end of CellContent
  > # end of Cell
  <Cell 
   <CellContent 
    <Notes 
    > # end of Notes
    <Para 
     <Unique 10502>
     <PgfTag `CellBody'>
     <ParaLine 
      <String `the '>
      <String `l'>
      <String `argest '>
      <String `positive value of '>
      <Font 
       <FTag `program'>
      > # end of Font
      <String `X::difference_'>
      <String `type'>
     >
    > # end of Para
   > # end of CellContent
  > # end of Cell
 > # end of Row
> # end of TblBody
> # end of Tbl
<Tbl 
<TblID 11>
<TblTag `Format A'>
<TblFormat 
 <TblColumn 
  <TblColumnNum 0>
  <TblColumnWidth  1.0">
  <TblColumnH 
   <Pgf 
    <PgfTag `CellHeading'>
    <PgfAlignment Center >
    <PgfFont 
     <FTag `'>
     <FFamily `Times'>
     <FVar `Regular'>
     <FWeight `Regular'>
     <FAngle `Regular'>
     <FPostScriptName `Times-Roman'>
     <FSize  12.0 pt>
     <FUnderlining FNoUnderlining >
     <FUnderline No >
     <FDoubleUnderline No >
     <FNumericUnderline No >
     <FOverline No >
     <FStrike No >
     <FChangeBar No >
     <FOutline No >
     <FShadow No >
     <FPairKern Yes >
     <FCase FAsTyped >
     <FPosition FNormal >
     <FSupScript No >
     <FSubScript No >
     <FDX  0.0 pt>
     <FDY  0.0 pt>
     <FDW  0.0 pt>
     <FSeparation 0>
     <FColor `Black'>
    > # end of PgfFont
    <PgfHyphenate No >
    <PgfCellAlignment Middle >
    <PgfCellMargins  0.0 pt 2.0 pt 0.0 pt 2.0 pt>
   > # end of Pgf
  > # end of TblColumnH
  <TblColumnBody 
   <PgfTag `CellBody'>
   <Pgf 
    <PgfFont 
     <FTag `'>
     <FFamily `Times'>
     <FVar `Regular'>
     <FWeight `Regular'>
     <FAngle `Regular'>
     <FPostScriptName `Times-Roman'>
     <FSize  12.0 pt>
     <FUnderlining FNoUnderlining >
     <FUnderline No >
     <FDoubleUnderline No >
     <FNumericUnderline No >
     <FOverline No >
     <FStrike No >
     <FChangeBar No >
     <FOutline No >
     <FShadow No >
     <FPairKern Yes >
     <FCase FAsTyped >
     <FPosition FNormal >
     <FSupScript No >
     <FSubScript No >
     <FDX  0.0 pt>
     <FDY  0.0 pt>
     <FDW  0.0 pt>
     <FSeparation 0>
     <FColor `Black'>
    > # end of PgfFont
   > # end of Pgf
  > # end of TblColumnBody
  <TblColumnF 
   <Pgf 
    <PgfTag `CellHeading'>
    <PgfAlignment Center >
    <PgfHyphenate No >
    <PgfCellAlignment Middle >
    <PgfCellMargins  0.0 pt 2.0 pt 0.0 pt 2.0 pt>
   > # end of Pgf
  > # end of TblColumnF
 > # end of TblColumn
 <TblColumn 
  <TblColumnNum 1>
  <TblColumnWidth  1.0">
  <TblColumnH 
  > # end of TblColumnH
  <TblColumnBody 
   <PgfTag `CellBody'>
   <Pgf 
    <PgfFont 
     <FTag `'>
     <FFamily `Times'>
     <FVar `Regular'>
     <FWeight `Regular'>
     <FAngle `Regular'>
     <FPostScriptName `Times-Roman'>
     <FSize  12.0 pt>
     <FUnderlining FNoUnderlining >
     <FUnderline No >
     <FDoubleUnderline No >
     <FNumericUnderline No >
     <FOverline No >
     <FStrike No >
     <FChangeBar No >
     <FOutline No >
     <FShadow No >
     <FPairKern Yes >
     <FCase FAsTyped >
     <FPosition FNormal >
     <FSupScript No >
     <FSubScript No >
     <FDX  0.0 pt>
     <FDY  0.0 pt>
     <FDW  0.0 pt>
     <FSeparation 0>
     <FColor `Black'>
    > # end of PgfFont
   > # end of Pgf
  > # end of TblColumnBody
  <TblColumnF 
   <Pgf 
    <PgfTag `CellHeading'>
    <PgfAlignment Center >
    <PgfHyphenate No >
    <PgfCellAlignment Middle >
    <PgfCellMargins  0.0 pt 2.0 pt 0.0 pt 2.0 pt>
   > # end of Pgf
  > # end of TblColumnF
 > # end of TblColumn
 <TblColumn 
  <TblColumnNum 2>
  <TblColumnWidth  1.0">
  <TblColumnH 
  > # end of TblColumnH
  <TblColumnBody 
   <PgfTag `CellBody'>
   <Pgf 
    <PgfFont 
     <FTag `'>
     <FFamily `Times'>
     <FVar `Regular'>
     <FWeight `Regular'>
     <FAngle `Regular'>
     <FPostScriptName `Times-Roman'>
     <FSize  12.0 pt>
     <FUnderlining FNoUnderlining >
     <FUnderline No >
     <FDoubleUnderline No >
     <FNumericUnderline No >
     <FOverline No >
     <FStrike No >
     <FChangeBar No >
     <FOutline No >
     <FShadow No >
     <FPairKern Yes >
     <FCase FAsTyped >
     <FPosition FNormal >
     <FSupScript No >
     <FSubScript No >
     <FDX  0.0 pt>
     <FDY  0.0 pt>
     <FDW  0.0 pt>
     <FSeparation 0>
     <FColor `Black'>
    > # end of PgfFont
   > # end of Pgf
  > # end of TblColumnBody
  <TblColumnF 
   <Pgf 
    <PgfTag `CellHeading'>
    <PgfAlignment Center >
    <PgfHyphenate No >
    <PgfCellAlignment Middle >
    <PgfCellMargins  0.0 pt 2.0 pt 0.0 pt 2.0 pt>
   > # end of Pgf
  > # end of TblColumnF
 > # end of TblColumn
 <TblColumn 
  <TblColumnNum 3>
  <TblColumnWidth  1.0">
  <TblColumnH 
  > # end of TblColumnH
  <TblColumnBody 
   <PgfTag `CellBody'>
   <Pgf 
    <PgfFont 
     <FTag `'>
     <FFamily `Times'>
     <FVar `Regular'>
     <FWeight `Regular'>
     <FAngle `Regular'>
     <FPostScriptName `Times-Roman'>
     <FSize  12.0 pt>
     <FUnderlining FNoUnderlining >
     <FUnderline No >
     <FDoubleUnderline No >
     <FNumericUnderline No >
     <FOverline No >
     <FStrike No >
     <FChangeBar No >
     <FOutline No >
     <FShadow No >
     <FPairKern Yes >
     <FCase FAsTyped >
     <FPosition FNormal >
     <FSupScript No >
     <FSubScript No >
     <FDX  0.0 pt>
     <FDY  0.0 pt>
     <FDW  0.0 pt>
     <FSeparation 0>
     <FColor `Black'>
    > # end of PgfFont
   > # end of Pgf
  > # end of TblColumnBody
  <TblColumnF 
   <Pgf 
    <PgfTag `CellHeading'>
    <PgfAlignment Center >
    <PgfHyphenate No >
    <PgfCellAlignment Middle >
    <PgfCellMargins  0.0 pt 2.0 pt 0.0 pt 2.0 pt>
   > # end of Pgf
  > # end of TblColumnF
 > # end of TblColumn
 <TblColumn 
  <TblColumnNum 4>
  <TblColumnWidth  1.0">
  <TblColumnH 
  > # end of TblColumnH
  <TblColumnBody 
   <PgfTag `CellBody'>
   <Pgf 
    <PgfFont 
     <FTag `'>
     <FFamily `Times'>
     <FVar `Regular'>
     <FWeight `Regular'>
     <FAngle `Regular'>
     <FPostScriptName `Times-Roman'>
     <FSize  12.0 pt>
     <FUnderlining FNoUnderlining >
     <FUnderline No >
     <FDoubleUnderline No >
     <FNumericUnderline No >
     <FOverline No >
     <FStrike No >
     <FChangeBar No >
     <FOutline No >
     <FShadow No >
     <FPairKern Yes >
     <FCase FAsTyped >
     <FPosition FNormal >
     <FSupScript No >
     <FSubScript No >
     <FDX  0.0 pt>
     <FDY  0.0 pt>
     <FDW  0.0 pt>
     <FSeparation 0>
     <FColor `Black'>
    > # end of PgfFont
   > # end of Pgf
  > # end of TblColumnBody
  <TblColumnF 
   <Pgf 
    <PgfTag `CellHeading'>
    <PgfAlignment Center >
    <PgfHyphenate No >
    <PgfCellAlignment Middle >
    <PgfCellMargins  0.0 pt 2.0 pt 0.0 pt 2.0 pt>
   > # end of Pgf
  > # end of TblColumnF
 > # end of TblColumn
 <TblInitNumBodyRows 8>
> # end of TblFormat
<TblNumColumns 4>
<Unique 10091>
<TblColumnWidth  0.8">
<TblColumnWidth  1.3">
<TblColumnWidth  1.4">
<TblColumnWidth  2.6">
<TblTitleContent 
 <Notes 
 > # end of Notes
 <Para 
  <Unique 10093>
  <Pgf 
   <PgfTag `TableTitle'>
   <PgfFont 
    <FTag `'>
    <FFamily `Times'>
    <FVar `Regular'>
    <FWeight `Bold'>
    <FAngle `Regular'>
    <FPostScriptName `Times-Bold'>
    <FSize  12.0 pt>
    <FUnderlining FNoUnderlining >
    <FUnderline No >
    <FDoubleUnderline No >
    <FNumericUnderline No >
    <FOverline No >
    <FStrike No >
    <FChangeBar No >
    <FOutline No >
    <FShadow No >
    <FPairKern Yes >
    <FCase FAsTyped >
    <FPosition FNormal >
    <FSupScript No >
    <FSubScript No >
    <FDX  0.0 pt>
    <FDY  0.0 pt>
    <FDW  0.0 pt>
    <FSeparation 0>
    <FColor `Black'>
   > # end of PgfFont
   <PgfAutoNum Yes >
   <PgfNumFormat `T:Table <n+\>: '>
   <PgfNumberFont `'>
   <PgfNumAtEnd No >
   <PgfCellAlignment Top >
   <PgfCellMargins  0.0 pt 0.0 pt 0.0 pt 0.0 pt>
  > # end of Pgf
  <PgfNumString `Table 5: '>
  <ParaLine 
   <String `Bidirectional iterator requirements (in addition to forward iterator)'>
  >
 > # end of Para
> # end of TblTitleContent
<TblH 
 <Row 
  <RowMaxHeight  14.0">
  <RowHeight  0.5">
  <Cell 
   <CellContent 
    <Notes 
    > # end of Notes
    <Para 
     <Unique 10101>
     <Pgf 
      <PgfTag `CellHeading'>
      <PgfFont 
       <FTag `'>
       <FFamily `Times'>
       <FVar `Regular'>
       <FWeight `Regular'>
       <FAngle `Regular'>
       <FPostScriptName `Times-Roman'>
       <FSize  10.0 pt>
       <FUnderlining FNoUnderlining >
       <FUnderline No >
       <FDoubleUnderline No >
       <FNumericUnderline No >
       <FOverline No >
       <FStrike No >
       <FChangeBar No >
       <FOutline No >
       <FShadow No >
       <FPairKern Yes >
       <FCase FAsTyped >
       <FPosition FNormal >
       <FSupScript No >
       <FSubScript No >
       <FDX  0.0 pt>
       <FDY  0.0 pt>
       <FDW  0.0 pt>
       <FSeparation 0>
       <FColor `Black'>
      > # end of PgfFont
      <PgfAutoNum No >
      <PgfCellAlignment Middle >
      <PgfCellMargins  0.0 pt 2.0 pt 0.0 pt 2.0 pt>
     > # end of Pgf
     <ParaLine 
      <String `expression'>
     >
    > # end of Para
   > # end of CellContent
  > # end of Cell
  <Cell 
   <CellContent 
    <Notes 
    > # end of Notes
    <Para 
     <Unique 10103>
     <ParaLine 
      <String `return type'>
     >
    > # end of Para
   > # end of CellContent
  > # end of Cell
  <Cell 
   <CellContent 
    <Notes 
    > # end of Notes
    <Para 
     <Unique 10105>
     <ParaLine 
      <String `operational semantics'>
     >
    > # end of Para
   > # end of CellContent
  > # end of Cell
  <Cell 
   <CellContent 
    <Notes 
    > # end of Notes
    <Para 
     <Unique 10107>
     <ParaLine 
      <String `assertion/note'>
     >
    > # end of Para
    <Para 
     <Unique 10108>
     <ParaLine 
      <String `pre/post-condition'>
     >
    > # end of Para
   > # end of CellContent
  > # end of Cell
 > # end of Row
> # end of TblH
<TblBody 
 <Row 
  <RowMaxHeight  14.0">
  <RowHeight  0.94444">
  <Cell 
   <CellContent 
    <Notes 
    > # end of Notes
    <Para 
     <Unique 10110>
     <PgfTag `CellBody'>
     <Pgf 
      <PgfFont 
       <FTag `'>
       <FFamily `Courier'>
       <FVar `Regular'>
       <FWeight `Regular'>
       <FAngle `Regular'>
       <FPostScriptName `Courier'>
       <FSize  9.0 pt>
       <FUnderlining FNoUnderlining >
       <FUnderline No >
       <FDoubleUnderline No >
       <FNumericUnderline No >
       <FOverline No >
       <FStrike No >
       <FChangeBar No >
       <FOutline No >
       <FShadow No >
       <FPairKern No >
       <FCase FAsTyped >
       <FPosition FNormal >
       <FSupScript No >
       <FSubScript No >
       <FDX  0.0 pt>
       <FDY  0.0 pt>
       <FDW  0.0 pt>
       <FSeparation 0>
       <FColor `Black'>
      > # end of PgfFont
     > # end of Pgf
     <ParaLine 
      <String `--'>
      <String `r'>
     >
    > # end of Para
   > # end of CellContent
  > # end of Cell
  <Cell 
   <CellContent 
    <Notes 
    > # end of Notes
    <Para 
     <Unique 10112>
     <PgfTag `CellBody'>
     <Pgf 
      <PgfFont 
       <FTag `'>
       <FFamily `Courier'>
       <FVar `Regular'>
       <FWeight `Regular'>
       <FAngle `Regular'>
       <FPostScriptName `Courier'>
       <FSize  9.0 pt>
       <FUnderlining FNoUnderlining >
       <FUnderline No >
       <FDoubleUnderline No >
       <FNumericUnderline No >
       <FOverline No >
       <FStrike No >
       <FChangeBar No >
       <FOutline No >
       <FShadow No >
       <FPairKern No >
       <FCase FAsTyped >
       <FPosition FNormal >
       <FSupScript No >
       <FSubScript No >
       <FDX  0.0 pt>
       <FDY  0.0 pt>
       <FDW  0.0 pt>
       <FSeparation 0>
       <FColor `Black'>
      > # end of PgfFont
     > # end of Pgf
     <ParaLine 
      <String `X&'>
     >
    > # end of Para
   > # end of CellContent
  > # end of Cell
  <Cell 
   <CellContent 
    <Notes 
    > # end of Notes
    <Para 
     <Unique 10114>
     <PgfTag `CellBody'>
     <Pgf 
      <PgfFont 
       <FTag `'>
       <FFamily `Courier'>
       <FVar `Regular'>
       <FWeight `Regular'>
       <FAngle `Regular'>
       <FPostScriptName `Courier'>
       <FSize  9.0 pt>
       <FUnderlining FNoUnderlining >
       <FUnderline No >
       <FDoubleUnderline No >
       <FNumericUnderline No >
       <FOverline No >
       <FStrike No >
       <FChangeBar No >
       <FOutline No >
       <FShadow No >
       <FPairKern No >
       <FCase FAsTyped >
       <FPosition FNormal >
       <FSupScript No >
       <FSubScript No >
       <FDX  0.0 pt>
       <FDY  0.0 pt>
       <FDW  0.0 pt>
       <FSeparation 0>
       <FColor `Black'>
      > # end of PgfFont
     > # end of Pgf
     <ParaLine 
     >
    > # end of Para
   > # end of CellContent
  > # end of Cell
  <Cell 
   <CellContent 
    <Notes 
    > # end of Notes
    <Para 
     <Unique 10116>
     <PgfTag `CellBody'>
     <ParaLine 
      <String `pre: there exists '>
      <Font 
       <FTag `program'>
      > # end of Font
      <String `s'>
      <Font 
       <FTag `'>
      > # end of Font
      <String ` s'>
      <String `uch that '>
      <Font 
       <FTag `program'>
      > # end of Font
      <String `r ='>
      <String `= ++'>
      <String `s.'>
     >
    > # end of Para
    <Para 
     <Unique 10117>
     <PgfTag `CellBody'>
     <ParaLine 
      <String `post: '>
      <Font 
       <FTag `program'>
      > # end of Font
      <String `s'>
      <Font 
       <FTag `'>
      > # end of Font
      <String ` i'>
      <String `s dereferenceable.'>
     >
    > # end of Para
    <Para 
     <Unique 10118>
     <PgfTag `CellBody'>
     <ParaLine 
      <Font 
       <FTag `program'>
      > # end of Font
      <String `--(++'>
      <String `r)'>
      <String ` == '>
      <String `r'>
      <Font 
       <FTag `'>
      > # end of Font
      <String `.'>
     >
    > # end of Para
    <Para 
     <Unique 10119>
     <PgfTag `CellBody'>
     <ParaLine 
      <Font 
       <FTag `program'>
      > # end of Font
      <String `--'>
      <String `r ='>
      <String `= --'>
      <String `s'>
      <Font 
       <FTag `'>
      > # end of Font
      <String ` i'>
      <String `mplies '>
      <Font 
       <FTag `program'>
      > # end of Font
      <String `r ='>
      <String `= '>
      <String `s'>
      <Font 
       <FTag `'>
      > # end of Font
      <String `.'>
     >
    > # end of Para
    <Para 
     <Unique 10120>
     <PgfTag `CellBody'>
     <ParaLine 
      <Font 
       <FTag `program'>
      > # end of Font
      <String `&'>
      <String `r ='>
      <String `= &--'>
      <String `r'>
      <Font 
       <FTag `'>
      > # end of Font
      <String `.'>
     >
    > # end of Para
   > # end of CellContent
  > # end of Cell
 > # end of Row
 <Row 
  <RowMaxHeight  14.0">
  <RowHeight  0.56944">
  <Cell 
   <CellContent 
    <Notes 
    > # end of Notes
    <Para 
     <Unique 10122>
     <PgfTag `CellBody'>
     <Pgf 
      <PgfFont 
       <FTag `'>
       <FFamily `Courier'>
       <FVar `Regular'>
       <FWeight `Regular'>
       <FAngle `Regular'>
       <FPostScriptName `Courier'>
       <FSize  9.0 pt>
       <FUnderlining FNoUnderlining >
       <FUnderline No >
       <FDoubleUnderline No >
       <FNumericUnderline No >
       <FOverline No >
       <FStrike No >
       <FChangeBar No >
       <FOutline No >
       <FShadow No >
       <FPairKern No >
       <FCase FAsTyped >
       <FPosition FNormal >
       <FSupScript No >
       <FSubScript No >
       <FDX  0.0 pt>
       <FDY  0.0 pt>
       <FDW  0.0 pt>
       <FSeparation 0>
       <FColor `Black'>
      > # end of PgfFont
     > # end of Pgf
     <ParaLine 
      <String `r-'>
      <String `-'>
     >
    > # end of Para
   > # end of CellContent
  > # end of Cell
  <Cell 
   <CellContent 
    <Notes 
    > # end of Notes
    <Para 
     <Unique 10124>
     <PgfTag `CellBody'>
     <Pgf 
      <PgfFont 
       <FTag `'>
       <FFamily `Courier'>
       <FVar `Regular'>
       <FWeight `Regular'>
       <FAngle `Regular'>
       <FPostScriptName `Courier'>
       <FSize  9.0 pt>
       <FUnderlining FNoUnderlining >
       <FUnderline No >
       <FDoubleUnderline No >
       <FNumericUnderline No >
       <FOverline No >
       <FStrike No >
       <FChangeBar No >
       <FOutline No >
       <FShadow No >
       <FPairKern No >
       <FCase FAsTyped >
       <FPosition FNormal >
       <FSupScript No >
       <FSubScript No >
       <FDX  0.0 pt>
       <FDY  0.0 pt>
       <FDW  0.0 pt>
       <FSeparation 0>
       <FColor `Black'>
      > # end of PgfFont
     > # end of Pgf
     <ParaLine 
      <String `X'>
     >
    > # end of Para
   > # end of CellContent
  > # end of Cell
  <Cell 
   <CellContent 
    <Notes 
    > # end of Notes
    <Para 
     <Unique 10126>
     <PgfTag `CellBody'>
     <Pgf 
      <PgfFont 
       <FTag `'>
       <FFamily `Courier'>
       <FVar `Regular'>
       <FWeight `Regular'>
       <FAngle `Regular'>
       <FPostScriptName `Courier'>
       <FSize  9.0 pt>
       <FUnderlining FNoUnderlining >
       <FUnderline No >
       <FDoubleUnderline No >
       <FNumericUnderline No >
       <FOverline No >
       <FStrike No >
       <FChangeBar No >
       <FOutline No >
       <FShadow No >
       <FPairKern No >
       <FCase FAsTyped >
       <FPosition FNormal >
       <FSupScript No >
       <FSubScript No >
       <FDX  0.0 pt>
       <FDY  0.0 pt>
       <FDW  0.0 pt>
       <FSeparation 0>
       <FColor `Black'>
      > # end of PgfFont
     > # end of Pgf
     <ParaLine 
      <String `{ X tmp = '>
      <String `r;'>
     >
    > # end of Para
    <Para 
     <Unique 10127>
     <PgfTag `CellBody'>
     <Pgf 
      <PgfFIndent  0.14167">
      <PgfFont 
       <FTag `'>
       <FFamily `Courier'>
       <FVar `Regular'>
       <FWeight `Regular'>
       <FAngle `Regular'>
       <FPostScriptName `Courier'>
       <FSize  9.0 pt>
       <FUnderlining FNoUnderlining >
       <FUnderline No >
       <FDoubleUnderline No >
       <FNumericUnderline No >
       <FOverline No >
       <FStrike No >
       <FChangeBar No >
       <FOutline No >
       <FShadow No >
       <FPairKern No >
       <FCase FAsTyped >
       <FPosition FNormal >
       <FSupScript No >
       <FSubScript No >
       <FDX  0.0 pt>
       <FDY  0.0 pt>
       <FDW  0.0 pt>
       <FSeparation 0>
       <FColor `Black'>
      > # end of PgfFont
     > # end of Pgf
     <ParaLine 
      <String `--'>
      <String `r;'>
     >
    > # end of Para
    <Para 
     <Unique 10128>
     <PgfTag `CellBody'>
     <Pgf 
      <PgfFIndent  0.14167">
      <PgfFont 
       <FTag `'>
       <FFamily `Courier'>
       <FVar `Regular'>
       <FWeight `Regular'>
       <FAngle `Regular'>
       <FPostScriptName `Courier'>
       <FSize  9.0 pt>
       <FUnderlining FNoUnderlining >
       <FUnderline No >
       <FDoubleUnderline No >
       <FNumericUnderline No >
       <FOverline No >
       <FStrike No >
       <FChangeBar No >
       <FOutline No >
       <FShadow No >
       <FPairKern No >
       <FCase FAsTyped >
       <FPosition FNormal >
       <FSupScript No >
       <FSubScript No >
       <FDX  0.0 pt>
       <FDY  0.0 pt>
       <FDW  0.0 pt>
       <FSeparation 0>
       <FColor `Black'>
      > # end of PgfFont
     > # end of Pgf
     <ParaLine 
      <String `return tmp; }'>
     >
    > # end of Para
   > # end of CellContent
  > # end of Cell
  <Cell 
   <CellContent 
    <Notes 
    > # end of Notes
    <Para 
     <Unique 10130>
     <PgfTag `CellBody'>
     <ParaLine 
     >
    > # end of Para
   > # end of CellContent
  > # end of Cell
 > # end of Row
> # end of TblBody
> # end of Tbl
<Tbl 
<TblID 12>
<TblTag `Format A'>
<TblFormat 
 <TblColumn 
  <TblColumnNum 0>
  <TblColumnWidth  1.0">
  <TblColumnH 
   <Pgf 
    <PgfTag `CellHeading'>
    <PgfAlignment Center >
    <PgfFont 
     <FTag `'>
     <FFamily `Times'>
     <FVar `Regular'>
     <FWeight `Regular'>
     <FAngle `Regular'>
     <FPostScriptName `Times-Roman'>
     <FSize  12.0 pt>
     <FUnderlining FNoUnderlining >
     <FUnderline No >
     <FDoubleUnderline No >
     <FNumericUnderline No >
     <FOverline No >
     <FStrike No >
     <FChangeBar No >
     <FOutline No >
     <FShadow No >
     <FPairKern Yes >
     <FCase FAsTyped >
     <FPosition FNormal >
     <FSupScript No >
     <FSubScript No >
     <FDX  0.0 pt>
     <FDY  0.0 pt>
     <FDW  0.0 pt>
     <FSeparation 0>
     <FColor `Black'>
    > # end of PgfFont
    <PgfHyphenate No >
    <PgfCellAlignment Middle >
    <PgfCellMargins  0.0 pt 2.0 pt 0.0 pt 2.0 pt>
   > # end of Pgf
  > # end of TblColumnH
  <TblColumnBody 
   <PgfTag `CellBody'>
   <Pgf 
    <PgfFont 
     <FTag `'>
     <FFamily `Times'>
     <FVar `Regular'>
     <FWeight `Regular'>
     <FAngle `Regular'>
     <FPostScriptName `Times-Roman'>
     <FSize  12.0 pt>
     <FUnderlining FNoUnderlining >
     <FUnderline No >
     <FDoubleUnderline No >
     <FNumericUnderline No >
     <FOverline No >
     <FStrike No >
     <FChangeBar No >
     <FOutline No >
     <FShadow No >
     <FPairKern Yes >
     <FCase FAsTyped >
     <FPosition FNormal >
     <FSupScript No >
     <FSubScript No >
     <FDX  0.0 pt>
     <FDY  0.0 pt>
     <FDW  0.0 pt>
     <FSeparation 0>
     <FColor `Black'>
    > # end of PgfFont
   > # end of Pgf
  > # end of TblColumnBody
  <TblColumnF 
   <Pgf 
    <PgfTag `CellHeading'>
    <PgfAlignment Center >
    <PgfHyphenate No >
    <PgfCellAlignment Middle >
    <PgfCellMargins  0.0 pt 2.0 pt 0.0 pt 2.0 pt>
   > # end of Pgf
  > # end of TblColumnF
 > # end of TblColumn
 <TblColumn 
  <TblColumnNum 1>
  <TblColumnWidth  1.0">
  <TblColumnH 
  > # end of TblColumnH
  <TblColumnBody 
   <PgfTag `CellBody'>
   <Pgf 
    <PgfFont 
     <FTag `'>
     <FFamily `Times'>
     <FVar `Regular'>
     <FWeight `Regular'>
     <FAngle `Regular'>
     <FPostScriptName `Times-Roman'>
     <FSize  12.0 pt>
     <FUnderlining FNoUnderlining >
     <FUnderline No >
     <FDoubleUnderline No >
     <FNumericUnderline No >
     <FOverline No >
     <FStrike No >
     <FChangeBar No >
     <FOutline No >
     <FShadow No >
     <FPairKern Yes >
     <FCase FAsTyped >
     <FPosition FNormal >
     <FSupScript No >
     <FSubScript No >
     <FDX  0.0 pt>
     <FDY  0.0 pt>
     <FDW  0.0 pt>
     <FSeparation 0>
     <FColor `Black'>
    > # end of PgfFont
   > # end of Pgf
  > # end of TblColumnBody
  <TblColumnF 
   <Pgf 
    <PgfTag `CellHeading'>
    <PgfAlignment Center >
    <PgfHyphenate No >
    <PgfCellAlignment Middle >
    <PgfCellMargins  0.0 pt 2.0 pt 0.0 pt 2.0 pt>
   > # end of Pgf
  > # end of TblColumnF
 > # end of TblColumn
 <TblColumn 
  <TblColumnNum 2>
  <TblColumnWidth  1.0">
  <TblColumnH 
  > # end of TblColumnH
  <TblColumnBody 
   <PgfTag `CellBody'>
   <Pgf 
    <PgfFont 
     <FTag `'>
     <FFamily `Times'>
     <FVar `Regular'>
     <FWeight `Regular'>
     <FAngle `Regular'>
     <FPostScriptName `Times-Roman'>
     <FSize  12.0 pt>
     <FUnderlining FNoUnderlining >
     <FUnderline No >
     <FDoubleUnderline No >
     <FNumericUnderline No >
     <FOverline No >
     <FStrike No >
     <FChangeBar No >
     <FOutline No >
     <FShadow No >
     <FPairKern Yes >
     <FCase FAsTyped >
     <FPosition FNormal >
     <FSupScript No >
     <FSubScript No >
     <FDX  0.0 pt>
     <FDY  0.0 pt>
     <FDW  0.0 pt>
     <FSeparation 0>
     <FColor `Black'>
    > # end of PgfFont
   > # end of Pgf
  > # end of TblColumnBody
  <TblColumnF 
   <Pgf 
    <PgfTag `CellHeading'>
    <PgfAlignment Center >
    <PgfHyphenate No >
    <PgfCellAlignment Middle >
    <PgfCellMargins  0.0 pt 2.0 pt 0.0 pt 2.0 pt>
   > # end of Pgf
  > # end of TblColumnF
 > # end of TblColumn
 <TblColumn 
  <TblColumnNum 3>
  <TblColumnWidth  1.0">
  <TblColumnH 
  > # end of TblColumnH
  <TblColumnBody 
   <PgfTag `CellBody'>
   <Pgf 
    <PgfFont 
     <FTag `'>
     <FFamily `Times'>
     <FVar `Regular'>
     <FWeight `Regular'>
     <FAngle `Regular'>
     <FPostScriptName `Times-Roman'>
     <FSize  12.0 pt>
     <FUnderlining FNoUnderlining >
     <FUnderline No >
     <FDoubleUnderline No >
     <FNumericUnderline No >
     <FOverline No >
     <FStrike No >
     <FChangeBar No >
     <FOutline No >
     <FShadow No >
     <FPairKern Yes >
     <FCase FAsTyped >
     <FPosition FNormal >
     <FSupScript No >
     <FSubScript No >
     <FDX  0.0 pt>
     <FDY  0.0 pt>
     <FDW  0.0 pt>
     <FSeparation 0>
     <FColor `Black'>
    > # end of PgfFont
   > # end of Pgf
  > # end of TblColumnBody
  <TblColumnF 
   <Pgf 
    <PgfTag `CellHeading'>
    <PgfAlignment Center >
    <PgfHyphenate No >
    <PgfCellAlignment Middle >
    <PgfCellMargins  0.0 pt 2.0 pt 0.0 pt 2.0 pt>
   > # end of Pgf
  > # end of TblColumnF
 > # end of TblColumn
 <TblColumn 
  <TblColumnNum 4>
  <TblColumnWidth  1.0">
  <TblColumnH 
  > # end of TblColumnH
  <TblColumnBody 
   <PgfTag `CellBody'>
   <Pgf 
    <PgfFont 
     <FTag `'>
     <FFamily `Times'>
     <FVar `Regular'>
     <FWeight `Regular'>
     <FAngle `Regular'>
     <FPostScriptName `Times-Roman'>
     <FSize  12.0 pt>
     <FUnderlining FNoUnderlining >
     <FUnderline No >
     <FDoubleUnderline No >
     <FNumericUnderline No >
     <FOverline No >
     <FStrike No >
     <FChangeBar No >
     <FOutline No >
     <FShadow No >
     <FPairKern Yes >
     <FCase FAsTyped >
     <FPosition FNormal >
     <FSupScript No >
     <FSubScript No >
     <FDX  0.0 pt>
     <FDY  0.0 pt>
     <FDW  0.0 pt>
     <FSeparation 0>
     <FColor `Black'>
    > # end of PgfFont
   > # end of Pgf
  > # end of TblColumnBody
  <TblColumnF 
   <Pgf 
    <PgfTag `CellHeading'>
    <PgfAlignment Center >
    <PgfHyphenate No >
    <PgfCellAlignment Middle >
    <PgfCellMargins  0.0 pt 2.0 pt 0.0 pt 2.0 pt>
   > # end of Pgf
  > # end of TblColumnF
 > # end of TblColumn
 <TblInitNumBodyRows 8>
> # end of TblFormat
<TblNumColumns 4>
<Unique 14619>
<TblColumnWidth  0.8">
<TblColumnWidth  1.3">
<TblColumnWidth  1.7">
<TblColumnWidth  2.6">
<TblTitleContent 
 <Notes 
 > # end of Notes
 <Para 
  <Unique 23156>
  <Pgf 
   <PgfTag `TableTitle'>
   <PgfFont 
    <FTag `'>
    <FFamily `Times'>
    <FVar `Regular'>
    <FWeight `Bold'>
    <FAngle `Regular'>
    <FPostScriptName `Times-Bold'>
    <FSize  12.0 pt>
    <FUnderlining FNoUnderlining >
    <FUnderline No >
    <FDoubleUnderline No >
    <FNumericUnderline No >
    <FOverline No >
    <FStrike No >
    <FChangeBar No >
    <FOutline No >
    <FShadow No >
    <FPairKern Yes >
    <FCase FAsTyped >
    <FPosition FNormal >
    <FSupScript No >
    <FSubScript No >
    <FDX  0.0 pt>
    <FDY  0.0 pt>
    <FDW  0.0 pt>
    <FSeparation 0>
    <FColor `Black'>
   > # end of PgfFont
   <PgfAutoNum Yes >
   <PgfNumFormat `T:Table <n+\>: '>
   <PgfNumberFont `'>
   <PgfNumAtEnd No >
   <PgfCellAlignment Top >
   <PgfCellMargins  0.0 pt 0.0 pt 0.0 pt 0.0 pt>
  > # end of Pgf
  <PgfNumString `Table 6: '>
  <ParaLine 
   <String `Random access iterator requirements (in addition to bidirectional iterator)'>
  >
 > # end of Para
> # end of TblTitleContent
<TblH 
 <Row 
  <RowMaxHeight  14.0">
  <RowHeight  0.5">
  <Cell 
   <CellContent 
    <Notes 
    > # end of Notes
    <Para 
     <Unique 23164>
     <Pgf 
      <PgfTag `CellHeading'>
      <PgfFont 
       <FTag `'>
       <FFamily `Times'>
       <FVar `Regular'>
       <FWeight `Regular'>
       <FAngle `Regular'>
       <FPostScriptName `Times-Roman'>
       <FSize  10.0 pt>
       <FUnderlining FNoUnderlining >
       <FUnderline No >
       <FDoubleUnderline No >
       <FNumericUnderline No >
       <FOverline No >
       <FStrike No >
       <FChangeBar No >
       <FOutline No >
       <FShadow No >
       <FPairKern Yes >
       <FCase FAsTyped >
       <FPosition FNormal >
       <FSupScript No >
       <FSubScript No >
       <FDX  0.0 pt>
       <FDY  0.0 pt>
       <FDW  0.0 pt>
       <FSeparation 0>
       <FColor `Black'>
      > # end of PgfFont
      <PgfAutoNum No >
      <PgfCellAlignment Middle >
      <PgfCellMargins  0.0 pt 2.0 pt 0.0 pt 2.0 pt>
     > # end of Pgf
     <ParaLine 
      <String `expression'>
     >
    > # end of Para
   > # end of CellContent
  > # end of Cell
  <Cell 
   <CellContent 
    <Notes 
    > # end of Notes
    <Para 
     <Unique 23166>
     <ParaLine 
      <String `return type'>
     >
    > # end of Para
   > # end of CellContent
  > # end of Cell
  <Cell 
   <CellContent 
    <Notes 
    > # end of Notes
    <Para 
     <Unique 23168>
     <ParaLine 
      <String `operational semantics'>
     >
    > # end of Para
   > # end of CellContent
  > # end of Cell
  <Cell 
   <CellContent 
    <Notes 
    > # end of Notes
    <Para 
     <Unique 23170>
     <ParaLine 
      <String `assertion/note'>
     >
    > # end of Para
    <Para 
     <Unique 23171>
     <ParaLine 
      <String `pre/post-condition'>
     >
    > # end of Para
   > # end of CellContent
  > # end of Cell
 > # end of Row
> # end of TblH
<TblBody 
 <Row 
  <RowMaxHeight  14.0">
  <RowHeight  1.02778">
  <Cell 
   <CellContent 
    <Notes 
    > # end of Notes
    <Para 
     <Unique 23173>
     <PgfTag `CellBody'>
     <Pgf 
      <PgfFont 
       <FTag `'>
       <FFamily `Courier'>
       <FVar `Regular'>
       <FWeight `Regular'>
       <FAngle `Regular'>
       <FPostScriptName `Courier'>
       <FSize  9.0 pt>
       <FUnderlining FNoUnderlining >
       <FUnderline No >
       <FDoubleUnderline No >
       <FNumericUnderline No >
       <FOverline No >
       <FStrike No >
       <FChangeBar No >
       <FOutline No >
       <FShadow No >
       <FPairKern No >
       <FCase FAsTyped >
       <FPosition FNormal >
       <FSupScript No >
       <FSubScript No >
       <FDX  0.0 pt>
       <FDY  0.0 pt>
       <FDW  0.0 pt>
       <FSeparation 0>
       <FColor `Black'>
      > # end of PgfFont
     > # end of Pgf
     <ParaLine 
      <Font 
       <FTag `program'>
      > # end of Font
      <String `r +'>
      <String `= n'>
     >
    > # end of Para
   > # end of CellContent
  > # end of Cell
  <Cell 
   <CellContent 
    <Notes 
    > # end of Notes
    <Para 
     <Unique 23175>
     <PgfTag `CellBody'>
     <Pgf 
      <PgfFont 
       <FTag `'>
       <FFamily `Courier'>
       <FVar `Regular'>
       <FWeight `Regular'>
       <FAngle `Regular'>
       <FPostScriptName `Courier'>
       <FSize  9.0 pt>
       <FUnderlining FNoUnderlining >
       <FUnderline No >
       <FDoubleUnderline No >
       <FNumericUnderline No >
       <FOverline No >
       <FStrike No >
       <FChangeBar No >
       <FOutline No >
       <FShadow No >
       <FPairKern No >
       <FCase FAsTyped >
       <FPosition FNormal >
       <FSupScript No >
       <FSubScript No >
       <FDX  0.0 pt>
       <FDY  0.0 pt>
       <FDW  0.0 pt>
       <FSeparation 0>
       <FColor `Black'>
      > # end of PgfFont
     > # end of Pgf
     <ParaLine 
      <Font 
       <FTag `program'>
      > # end of Font
      <String `X&'>
     >
    > # end of Para
   > # end of CellContent
  > # end of Cell
  <Cell 
   <CellContent 
    <Notes 
    > # end of Notes
    <Para 
     <Unique 23177>
     <PgfTag `CellBody'>
     <Pgf 
      <PgfFont 
       <FTag `'>
       <FFamily `Courier'>
       <FVar `Regular'>
       <FWeight `Regular'>
       <FAngle `Regular'>
       <FPostScriptName `Courier'>
       <FSize  9.0 pt>
       <FUnderlining FNoUnderlining >
       <FUnderline No >
       <FDoubleUnderline No >
       <FNumericUnderline No >
       <FOverline No >
       <FStrike No >
       <FChangeBar No >
       <FOutline No >
       <FShadow No >
       <FPairKern No >
       <FCase FAsTyped >
       <FPosition FNormal >
       <FSupScript No >
       <FSubScript No >
       <FDX  0.0 pt>
       <FDY  0.0 pt>
       <FDW  0.0 pt>
       <FSeparation 0>
       <FColor `Black'>
      > # end of PgfFont
     > # end of Pgf
     <ParaLine 
      <Font 
       <FTag `program'>
      > # end of Font
      <String `{ Distance m = n;'>
     >
    > # end of Para
    <Para 
     <Unique 23178>
     <PgfTag `CellBody'>
     <Pgf 
      <PgfFIndent  0.14167">
      <PgfFont 
       <FTag `'>
       <FFamily `Courier'>
       <FVar `Regular'>
       <FWeight `Regular'>
       <FAngle `Regular'>
       <FPostScriptName `Courier'>
       <FSize  9.0 pt>
       <FUnderlining FNoUnderlining >
       <FUnderline No >
       <FDoubleUnderline No >
       <FNumericUnderline No >
       <FOverline No >
       <FStrike No >
       <FChangeBar No >
       <FOutline No >
       <FShadow No >
       <FPairKern No >
       <FCase FAsTyped >
       <FPosition FNormal >
       <FSupScript No >
       <FSubScript No >
       <FDX  0.0 pt>
       <FDY  0.0 pt>
       <FDW  0.0 pt>
       <FSeparation 0>
       <FColor `Black'>
      > # end of PgfFont
     > # end of Pgf
     <ParaLine 
      <Font 
       <FTag `program'>
      > # end of Font
      <String `if (m \>= 0)'>
     >
    > # end of Para
    <Para 
     <Unique 23363>
     <PgfTag `CellBody'>
     <Pgf 
      <PgfFIndent  0.29167">
      <PgfFont 
       <FTag `'>
       <FFamily `Courier'>
       <FVar `Regular'>
       <FWeight `Regular'>
       <FAngle `Regular'>
       <FPostScriptName `Courier'>
       <FSize  9.0 pt>
       <FUnderlining FNoUnderlining >
       <FUnderline No >
       <FDoubleUnderline No >
       <FNumericUnderline No >
       <FOverline No >
       <FStrike No >
       <FChangeBar No >
       <FOutline No >
       <FShadow No >
       <FPairKern No >
       <FCase FAsTyped >
       <FPosition FNormal >
       <FSupScript No >
       <FSubScript No >
       <FDX  0.0 pt>
       <FDY  0.0 pt>
       <FDW  0.0 pt>
       <FSeparation 0>
       <FColor `Black'>
      > # end of PgfFont
     > # end of Pgf
     <ParaLine 
      <Font 
       <FTag `program'>
      > # end of Font
      <String `while (m--) ++'>
      <String `r;'>
      <String ` '>
     >
    > # end of Para
    <Para 
     <Unique 23367>
     <PgfTag `CellBody'>
     <Pgf 
      <PgfFIndent  0.14167">
      <PgfFont 
       <FTag `'>
       <FFamily `Courier'>
       <FVar `Regular'>
       <FWeight `Regular'>
       <FAngle `Regular'>
       <FPostScriptName `Courier'>
       <FSize  9.0 pt>
       <FUnderlining FNoUnderlining >
       <FUnderline No >
       <FDoubleUnderline No >
       <FNumericUnderline No >
       <FOverline No >
       <FStrike No >
       <FChangeBar No >
       <FOutline No >
       <FShadow No >
       <FPairKern No >
       <FCase FAsTyped >
       <FPosition FNormal >
       <FSupScript No >
       <FSubScript No >
       <FDX  0.0 pt>
       <FDY  0.0 pt>
       <FDW  0.0 pt>
       <FSeparation 0>
       <FColor `Black'>
      > # end of PgfFont
     > # end of Pgf
     <ParaLine 
      <Font 
       <FTag `program'>
      > # end of Font
      <String `else'>
     >
    > # end of Para
    <Para 
     <Unique 23371>
     <PgfTag `CellBody'>
     <Pgf 
      <PgfFIndent  0.29167">
      <PgfFont 
       <FTag `'>
       <FFamily `Courier'>
       <FVar `Regular'>
       <FWeight `Regular'>
       <FAngle `Regular'>
       <FPostScriptName `Courier'>
       <FSize  9.0 pt>
       <FUnderlining FNoUnderlining >
       <FUnderline No >
       <FDoubleUnderline No >
       <FNumericUnderline No >
       <FOverline No >
       <FStrike No >
       <FChangeBar No >
       <FOutline No >
       <FShadow No >
       <FPairKern No >
       <FCase FAsTyped >
       <FPosition FNormal >
       <FSupScript No >
       <FSubScript No >
       <FDX  0.0 pt>
       <FDY  0.0 pt>
       <FDW  0.0 pt>
       <FSeparation 0>
       <FColor `Black'>
      > # end of PgfFont
     > # end of Pgf
     <ParaLine 
      <Font 
       <FTag `program'>
      > # end of Font
      <String `while (m++) --'>
      <String `r;'>
      <String ` '>
     >
    > # end of Para
    <Para 
     <Unique 23179>
     <PgfTag `CellBody'>
     <Pgf 
      <PgfFIndent  0.14167">
      <PgfFont 
       <FTag `'>
       <FFamily `Courier'>
       <FVar `Regular'>
       <FWeight `Regular'>
       <FAngle `Regular'>
       <FPostScriptName `Courier'>
       <FSize  9.0 pt>
       <FUnderlining FNoUnderlining >
       <FUnderline No >
       <FDoubleUnderline No >
       <FNumericUnderline No >
       <FOverline No >
       <FStrike No >
       <FChangeBar No >
       <FOutline No >
       <FShadow No >
       <FPairKern No >
       <FCase FAsTyped >
       <FPosition FNormal >
       <FSupScript No >
       <FSubScript No >
       <FDX  0.0 pt>
       <FDY  0.0 pt>
       <FDW  0.0 pt>
       <FSeparation 0>
       <FColor `Black'>
      > # end of PgfFont
     > # end of Pgf
     <ParaLine 
      <Font 
       <FTag `program'>
      > # end of Font
      <String `return '>
      <String `r;'>
      <String ` }'>
     >
    > # end of Para
   > # end of CellContent
  > # end of Cell
  <Cell 
   <CellContent 
    <Notes 
    > # end of Notes
    <Para 
     <Unique 23181>
     <PgfTag `CellBody'>
     <ParaLine 
     >
    > # end of Para
   > # end of CellContent
  > # end of Cell
 > # end of Row
 <Row 
  <RowMaxHeight  14.0">
  <RowHeight  0.41667">
  <Cell 
   <CellContent 
    <Notes 
    > # end of Notes
    <Para 
     <Unique 23183>
     <PgfTag `CellBody'>
     <Pgf 
      <PgfFont 
       <FTag `'>
       <FFamily `Courier'>
       <FVar `Regular'>
       <FWeight `Regular'>
       <FAngle `Regular'>
       <FPostScriptName `Courier'>
       <FSize  9.0 pt>
       <FUnderlining FNoUnderlining >
       <FUnderline No >
       <FDoubleUnderline No >
       <FNumericUnderline No >
       <FOverline No >
       <FStrike No >
       <FChangeBar No >
       <FOutline No >
       <FShadow No >
       <FPairKern No >
       <FCase FAsTyped >
       <FPosition FNormal >
       <FSupScript No >
       <FSubScript No >
       <FDX  0.0 pt>
       <FDY  0.0 pt>
       <FDW  0.0 pt>
       <FSeparation 0>
       <FColor `Black'>
      > # end of PgfFont
     > # end of Pgf
     <ParaLine 
      <Font 
       <FTag `program'>
      > # end of Font
      <String `a +'>
      <String ` n'>
     >
    > # end of Para
    <Para 
     <Unique 23184>
     <PgfTag `CellBody'>
     <Pgf 
      <PgfFont 
       <FTag `'>
       <FFamily `Courier'>
       <FVar `Regular'>
       <FWeight `Regular'>
       <FAngle `Regular'>
       <FPostScriptName `Courier'>
       <FSize  9.0 pt>
       <FUnderlining FNoUnderlining >
       <FUnderline No >
       <FDoubleUnderline No >
       <FNumericUnderline No >
       <FOverline No >
       <FStrike No >
       <FChangeBar No >
       <FOutline No >
       <FShadow No >
       <FPairKern No >
       <FCase FAsTyped >
       <FPosition FNormal >
       <FSupScript No >
       <FSubScript No >
       <FDX  0.0 pt>
       <FDY  0.0 pt>
       <FDW  0.0 pt>
       <FSeparation 0>
       <FColor `Black'>
      > # end of PgfFont
     > # end of Pgf
     <ParaLine 
      <String `n + '>
      <String `a'>
     >
    > # end of Para
   > # end of CellContent
  > # end of Cell
  <Cell 
   <CellContent 
    <Notes 
    > # end of Notes
    <Para 
     <Unique 23186>
     <PgfTag `CellBody'>
     <Pgf 
      <PgfFont 
       <FTag `'>
       <FFamily `Courier'>
       <FVar `Regular'>
       <FWeight `Regular'>
       <FAngle `Regular'>
       <FPostScriptName `Courier'>
       <FSize  9.0 pt>
       <FUnderlining FNoUnderlining >
       <FUnderline No >
       <FDoubleUnderline No >
       <FNumericUnderline No >
       <FOverline No >
       <FStrike No >
       <FChangeBar No >
       <FOutline No >
       <FShadow No >
       <FPairKern No >
       <FCase FAsTyped >
       <FPosition FNormal >
       <FSupScript No >
       <FSubScript No >
       <FDX  0.0 pt>
       <FDY  0.0 pt>
       <FDW  0.0 pt>
       <FSeparation 0>
       <FColor `Black'>
      > # end of PgfFont
     > # end of Pgf
     <ParaLine 
      <Font 
       <FTag `program'>
      > # end of Font
      <String `X'>
     >
    > # end of Para
   > # end of CellContent
  > # end of Cell
  <Cell 
   <CellContent 
    <Notes 
    > # end of Notes
    <Para 
     <Unique 23188>
     <PgfTag `CellBody'>
     <Pgf 
      <PgfFont 
       <FTag `'>
       <FFamily `Courier'>
       <FVar `Regular'>
       <FWeight `Regular'>
       <FAngle `Regular'>
       <FPostScriptName `Courier'>
       <FSize  9.0 pt>
       <FUnderlining FNoUnderlining >
       <FUnderline No >
       <FDoubleUnderline No >
       <FNumericUnderline No >
       <FOverline No >
       <FStrike No >
       <FChangeBar No >
       <FOutline No >
       <FShadow No >
       <FPairKern No >
       <FCase FAsTyped >
       <FPosition FNormal >
       <FSupScript No >
       <FSubScript No >
       <FDX  0.0 pt>
       <FDY  0.0 pt>
       <FDW  0.0 pt>
       <FSeparation 0>
       <FColor `Black'>
      > # end of PgfFont
     > # end of Pgf
     <ParaLine 
      <Font 
       <FTag `program'>
      > # end of Font
      <String `{ X tmp = '>
      <String `a;'>
      <String ` '>
     >
    > # end of Para
    <Para 
     <Unique 23189>
     <PgfTag `CellBody'>
     <Pgf 
      <PgfFIndent  0.14167">
      <PgfFont 
       <FTag `'>
       <FFamily `Courier'>
       <FVar `Regular'>
       <FWeight `Regular'>
       <FAngle `Regular'>
       <FPostScriptName `Courier'>
       <FSize  9.0 pt>
       <FUnderlining FNoUnderlining >
       <FUnderline No >
       <FDoubleUnderline No >
       <FNumericUnderline No >
       <FOverline No >
       <FStrike No >
       <FChangeBar No >
       <FOutline No >
       <FShadow No >
       <FPairKern No >
       <FCase FAsTyped >
       <FPosition FNormal >
       <FSupScript No >
       <FSubScript No >
       <FDX  0.0 pt>
       <FDY  0.0 pt>
       <FDW  0.0 pt>
       <FSeparation 0>
       <FColor `Black'>
      > # end of PgfFont
     > # end of Pgf
     <ParaLine 
      <Font 
       <FTag `program'>
      > # end of Font
      <String `return tmp += n; }'>
     >
    > # end of Para
   > # end of CellContent
  > # end of Cell
  <Cell 
   <CellContent 
    <Notes 
    > # end of Notes
    <Para 
     <Unique 23191>
     <PgfTag `CellBody'>
     <ParaLine 
      <Font 
       <FTag `program'>
      > # end of Font
      <String `a +'>
      <String ` n == '>
      <String `n +'>
      <String ` '>
      <String `a'>
      <Font 
       <FTag `'>
      > # end of Font
      <String `.'>
     >
    > # end of Para
   > # end of CellContent
  > # end of Cell
 > # end of Row
 <Row 
  <RowMaxHeight  14.0">
  <RowHeight  0.27778">
  <Cell 
   <CellContent 
    <Notes 
    > # end of Notes
    <Para 
     <Unique 23336>
     <PgfTag `CellBody'>
     <Pgf 
      <PgfFont 
       <FTag `'>
       <FFamily `Courier'>
       <FVar `Regular'>
       <FWeight `Regular'>
       <FAngle `Regular'>
       <FPostScriptName `Courier'>
       <FSize  9.0 pt>
       <FUnderlining FNoUnderlining >
       <FUnderline No >
       <FDoubleUnderline No >
       <FNumericUnderline No >
       <FOverline No >
       <FStrike No >
       <FChangeBar No >
       <FOutline No >
       <FShadow No >
       <FPairKern No >
       <FCase FAsTyped >
       <FPosition FNormal >
       <FSupScript No >
       <FSubScript No >
       <FDX  0.0 pt>
       <FDY  0.0 pt>
       <FDW  0.0 pt>
       <FSeparation 0>
       <FColor `Black'>
      > # end of PgfFont
     > # end of Pgf
     <ParaLine 
      <Font 
       <FTag `program'>
      > # end of Font
      <String `r -'>
      <String `= n'>
     >
    > # end of Para
   > # end of CellContent
  > # end of Cell
  <Cell 
   <CellContent 
    <Notes 
    > # end of Notes
    <Para 
     <Unique 23338>
     <PgfTag `CellBody'>
     <Pgf 
      <PgfFont 
       <FTag `'>
       <FFamily `Courier'>
       <FVar `Regular'>
       <FWeight `Regular'>
       <FAngle `Regular'>
       <FPostScriptName `Courier'>
       <FSize  9.0 pt>
       <FUnderlining FNoUnderlining >
       <FUnderline No >
       <FDoubleUnderline No >
       <FNumericUnderline No >
       <FOverline No >
       <FStrike No >
       <FChangeBar No >
       <FOutline No >
       <FShadow No >
       <FPairKern No >
       <FCase FAsTyped >
       <FPosition FNormal >
       <FSupScript No >
       <FSubScript No >
       <FDX  0.0 pt>
       <FDY  0.0 pt>
       <FDW  0.0 pt>
       <FSeparation 0>
       <FColor `Black'>
      > # end of PgfFont
     > # end of Pgf
     <ParaLine 
      <Font 
       <FTag `program'>
      > # end of Font
      <String `X&'>
     >
    > # end of Para
   > # end of CellContent
  > # end of Cell
  <Cell 
   <CellContent 
    <Notes 
    > # end of Notes
    <Para 
     <Unique 23342>
     <PgfTag `CellBody'>
     <Pgf 
      <PgfFIndent  0.14167">
      <PgfFont 
       <FTag `'>
       <FFamily `Courier'>
       <FVar `Regular'>
       <FWeight `Regular'>
       <FAngle `Regular'>
       <FPostScriptName `Courier'>
       <FSize  9.0 pt>
       <FUnderlining FNoUnderlining >
       <FUnderline No >
       <FDoubleUnderline No >
       <FNumericUnderline No >
       <FOverline No >
       <FStrike No >
       <FChangeBar No >
       <FOutline No >
       <FShadow No >
       <FPairKern No >
       <FCase FAsTyped >
       <FPosition FNormal >
       <FSupScript No >
       <FSubScript No >
       <FDX  0.0 pt>
       <FDY  0.0 pt>
       <FDW  0.0 pt>
       <FSeparation 0>
       <FColor `Black'>
      > # end of PgfFont
     > # end of Pgf
     <ParaLine 
      <Font 
       <FTag `program'>
      > # end of Font
      <String `return '>
      <String `r +'>
      <String `= -n;'>
     >
    > # end of Para
   > # end of CellContent
  > # end of Cell
  <Cell 
   <CellContent 
    <Notes 
    > # end of Notes
    <Para 
     <Unique 23344>
     <PgfTag `CellBody'>
     <ParaLine 
     >
    > # end of Para
   > # end of CellContent
  > # end of Cell
 > # end of Row
 <Row 
  <RowMaxHeight  14.0">
  <RowHeight  0.41667">
  <Cell 
   <CellContent 
    <Notes 
    > # end of Notes
    <Para 
     <Unique 23346>
     <PgfTag `CellBody'>
     <Pgf 
      <PgfFont 
       <FTag `'>
       <FFamily `Courier'>
       <FVar `Regular'>
       <FWeight `Regular'>
       <FAngle `Regular'>
       <FPostScriptName `Courier'>
       <FSize  9.0 pt>
       <FUnderlining FNoUnderlining >
       <FUnderline No >
       <FDoubleUnderline No >
       <FNumericUnderline No >
       <FOverline No >
       <FStrike No >
       <FChangeBar No >
       <FOutline No >
       <FShadow No >
       <FPairKern No >
       <FCase FAsTyped >
       <FPosition FNormal >
       <FSupScript No >
       <FSubScript No >
       <FDX  0.0 pt>
       <FDY  0.0 pt>
       <FDW  0.0 pt>
       <FSeparation 0>
       <FColor `Black'>
      > # end of PgfFont
     > # end of Pgf
     <ParaLine 
      <Font 
       <FTag `program'>
      > # end of Font
      <String `a -'>
      <String ` n'>
     >
    > # end of Para
    <Para 
     <Unique 23347>
     <PgfTag `CellBody'>
     <Pgf 
      <PgfFont 
       <FTag `'>
       <FFamily `Courier'>
       <FVar `Regular'>
       <FWeight `Regular'>
       <FAngle `Regular'>
       <FPostScriptName `Courier'>
       <FSize  9.0 pt>
       <FUnderlining FNoUnderlining >
       <FUnderline No >
       <FDoubleUnderline No >
       <FNumericUnderline No >
       <FOverline No >
       <FStrike No >
       <FChangeBar No >
       <FOutline No >
       <FShadow No >
       <FPairKern No >
       <FCase FAsTyped >
       <FPosition FNormal >
       <FSupScript No >
       <FSubScript No >
       <FDX  0.0 pt>
       <FDY  0.0 pt>
       <FDW  0.0 pt>
       <FSeparation 0>
       <FColor `Black'>
      > # end of PgfFont
     > # end of Pgf
     <ParaLine 
     >
    > # end of Para
   > # end of CellContent
  > # end of Cell
  <Cell 
   <CellContent 
    <Notes 
    > # end of Notes
    <Para 
     <Unique 23349>
     <PgfTag `CellBody'>
     <Pgf 
      <PgfFont 
       <FTag `'>
       <FFamily `Courier'>
       <FVar `Regular'>
       <FWeight `Regular'>
       <FAngle `Regular'>
       <FPostScriptName `Courier'>
       <FSize  9.0 pt>
       <FUnderlining FNoUnderlining >
       <FUnderline No >
       <FDoubleUnderline No >
       <FNumericUnderline No >
       <FOverline No >
       <FStrike No >
       <FChangeBar No >
       <FOutline No >
       <FShadow No >
       <FPairKern No >
       <FCase FAsTyped >
       <FPosition FNormal >
       <FSupScript No >
       <FSubScript No >
       <FDX  0.0 pt>
       <FDY  0.0 pt>
       <FDW  0.0 pt>
       <FSeparation 0>
       <FColor `Black'>
      > # end of PgfFont
     > # end of Pgf
     <ParaLine 
      <Font 
       <FTag `program'>
      > # end of Font
      <String `X'>
     >
    > # end of Para
   > # end of CellContent
  > # end of Cell
  <Cell 
   <CellContent 
    <Notes 
    > # end of Notes
    <Para 
     <Unique 23351>
     <PgfTag `CellBody'>
     <Pgf 
      <PgfFont 
       <FTag `'>
       <FFamily `Courier'>
       <FVar `Regular'>
       <FWeight `Regular'>
       <FAngle `Regular'>
       <FPostScriptName `Courier'>
       <FSize  9.0 pt>
       <FUnderlining FNoUnderlining >
       <FUnderline No >
       <FDoubleUnderline No >
       <FNumericUnderline No >
       <FOverline No >
       <FStrike No >
       <FChangeBar No >
       <FOutline No >
       <FShadow No >
       <FPairKern No >
       <FCase FAsTyped >
       <FPosition FNormal >
       <FSupScript No >
       <FSubScript No >
       <FDX  0.0 pt>
       <FDY  0.0 pt>
       <FDW  0.0 pt>
       <FSeparation 0>
       <FColor `Black'>
      > # end of PgfFont
     > # end of Pgf
     <ParaLine 
      <Font 
       <FTag `program'>
      > # end of Font
      <String `{ X tmp = '>
      <String `a;'>
      <String ` '>
     >
    > # end of Para
    <Para 
     <Unique 23352>
     <PgfTag `CellBody'>
     <Pgf 
      <PgfFIndent  0.14167">
      <PgfFont 
       <FTag `'>
       <FFamily `Courier'>
       <FVar `Regular'>
       <FWeight `Regular'>
       <FAngle `Regular'>
       <FPostScriptName `Courier'>
       <FSize  9.0 pt>
       <FUnderlining FNoUnderlining >
       <FUnderline No >
       <FDoubleUnderline No >
       <FNumericUnderline No >
       <FOverline No >
       <FStrike No >
       <FChangeBar No >
       <FOutline No >
       <FShadow No >
       <FPairKern No >
       <FCase FAsTyped >
       <FPosition FNormal >
       <FSupScript No >
       <FSubScript No >
       <FDX  0.0 pt>
       <FDY  0.0 pt>
       <FDW  0.0 pt>
       <FSeparation 0>
       <FColor `Black'>
      > # end of PgfFont
     > # end of Pgf
     <ParaLine 
      <Font 
       <FTag `program'>
      > # end of Font
      <String `return tmp -= n; }'>
     >
    > # end of Para
   > # end of CellContent
  > # end of Cell
  <Cell 
   <CellContent 
    <Notes 
    > # end of Notes
    <Para 
     <Unique 23354>
     <PgfTag `CellBody'>
     <ParaLine 
     >
    > # end of Para
   > # end of CellContent
  > # end of Cell
 > # end of Row
 <Row 
  <RowMaxHeight  14.0">
  <RowHeight  0.59722">
  <Cell 
   <CellContent 
    <Notes 
    > # end of Notes
    <Para 
     <Unique 23193>
     <PgfTag `CellBody'>
     <Pgf 
      <PgfFont 
       <FTag `'>
       <FFamily `Courier'>
       <FVar `Regular'>
       <FWeight `Regular'>
       <FAngle `Regular'>
       <FPostScriptName `Courier'>
       <FSize  9.0 pt>
       <FUnderlining FNoUnderlining >
       <FUnderline No >
       <FDoubleUnderline No >
       <FNumericUnderline No >
       <FOverline No >
       <FStrike No >
       <FChangeBar No >
       <FOutline No >
       <FShadow No >
       <FPairKern No >
       <FCase FAsTyped >
       <FPosition FNormal >
       <FSupScript No >
       <FSubScript No >
       <FDX  0.0 pt>
       <FDY  0.0 pt>
       <FDW  0.0 pt>
       <FSeparation 0>
       <FColor `Black'>
      > # end of PgfFont
     > # end of Pgf
     <ParaLine 
      <Font 
       <FTag `program'>
      > # end of Font
      <String `b -'>
      <String ` a'>
     >
    > # end of Para
   > # end of CellContent
  > # end of Cell
  <Cell 
   <CellContent 
    <Notes 
    > # end of Notes
    <Para 
     <Unique 23195>
     <PgfTag `CellBody'>
     <Pgf 
      <PgfFont 
       <FTag `'>
       <FFamily `Courier'>
       <FVar `Regular'>
       <FWeight `Regular'>
       <FAngle `Regular'>
       <FPostScriptName `Courier'>
       <FSize  9.0 pt>
       <FUnderlining FNoUnderlining >
       <FUnderline No >
       <FDoubleUnderline No >
       <FNumericUnderline No >
       <FOverline No >
       <FStrike No >
       <FChangeBar No >
       <FOutline No >
       <FShadow No >
       <FPairKern No >
       <FCase FAsTyped >
       <FPosition FNormal >
       <FSupScript No >
       <FSubScript No >
       <FDX  0.0 pt>
       <FDY  0.0 pt>
       <FDW  0.0 pt>
       <FSeparation 0>
       <FColor `Black'>
      > # end of PgfFont
     > # end of Pgf
     <ParaLine 
      <Font 
       <FTag `program'>
      > # end of Font
      <String `Distance'>
     >
    > # end of Para
   > # end of CellContent
  > # end of Cell
  <Cell 
   <CellContent 
    <Notes 
    > # end of Notes
    <Para 
     <Unique 23201>
     <PgfTag `CellBody'>
     <Pgf 
      <PgfFIndent  0.14167">
      <PgfFont 
       <FTag `'>
       <FFamily `Courier'>
       <FVar `Regular'>
       <FWeight `Regular'>
       <FAngle `Regular'>
       <FPostScriptName `Courier'>
       <FSize  9.0 pt>
       <FUnderlining FNoUnderlining >
       <FUnderline No >
       <FDoubleUnderline No >
       <FNumericUnderline No >
       <FOverline No >
       <FStrike No >
       <FChangeBar No >
       <FOutline No >
       <FShadow No >
       <FPairKern No >
       <FCase FAsTyped >
       <FPosition FNormal >
       <FSupScript No >
       <FSubScript No >
       <FDX  0.0 pt>
       <FDY  0.0 pt>
       <FDW  0.0 pt>
       <FSeparation 0>
       <FColor `Black'>
      > # end of PgfFont
     > # end of Pgf
     <ParaLine 
      <Font 
       <FTag `program'>
      > # end of Font
     >
    > # end of Para
   > # end of CellContent
  > # end of Cell
  <Cell 
   <CellContent 
    <Notes 
    > # end of Notes
    <Para 
     <Unique 23203>
     <PgfTag `CellBody'>
     <ParaLine 
      <String `pre: there exists a valu'>
      <String `e'>
      <String ` '>
      <Font 
       <FTag `program'>
      > # end of Font
      <String `n'>
      <Font 
       <FTag `'>
      > # end of Font
      <String ` of '>
      <Font 
       <FTag `program'>
      > # end of Font
      <String `Distance'>
      <Font 
       <FTag `'>
      > # end of Font
      <String ` '>
     >
     <ParaLine 
      <String `such that '>
      <Font 
       <FTag `program'>
      > # end of Font
      <String `a + n '>
      <String `='>
      <String ` b'>
      <Font 
       <FTag `'>
      > # end of Font
      <String `.'>
     >
    > # end of Para
    <Para 
     <Unique 23204>
     <PgfTag `CellBody'>
     <Pgf 
      <PgfFont 
       <FTag `'>
       <FFamily `Courier'>
       <FVar `Regular'>
       <FWeight `Regular'>
       <FAngle `Regular'>
       <FPostScriptName `Courier'>
       <FSize  9.0 pt>
       <FUnderlining FNoUnderlining >
       <FUnderline No >
       <FDoubleUnderline No >
       <FNumericUnderline No >
       <FOverline No >
       <FStrike No >
       <FChangeBar No >
       <FOutline No >
       <FShadow No >
       <FPairKern No >
       <FCase FAsTyped >
       <FPosition FNormal >
       <FSupScript No >
       <FSubScript No >
       <FDX  0.0 pt>
       <FDY  0.0 pt>
       <FDW  0.0 pt>
       <FSeparation 0>
       <FColor `Black'>
      > # end of PgfFont
     > # end of Pgf
     <ParaLine 
      <Font 
       <FTag `program'>
      > # end of Font
      <String `b == a + (b - a)'>
      <String `.'>
      <Font 
       <FTag `'>
      > # end of Font
     >
    > # end of Para
   > # end of CellContent
  > # end of Cell
 > # end of Row
 <Row 
  <RowMaxHeight  14.0">
  <RowHeight  0.27778">
  <Cell 
   <CellContent 
    <Notes 
    > # end of Notes
    <Para 
     <Unique 23207>
     <PgfTag `CellBody'>
     <Pgf 
      <PgfFont 
       <FTag `'>
       <FFamily `Courier'>
       <FVar `Regular'>
       <FWeight `Regular'>
       <FAngle `Regular'>
       <FPostScriptName `Courier'>
       <FSize  9.0 pt>
       <FUnderlining FNoUnderlining >
       <FUnderline No >
       <FDoubleUnderline No >
       <FNumericUnderline No >
       <FOverline No >
       <FStrike No >
       <FChangeBar No >
       <FOutline No >
       <FShadow No >
       <FPairKern No >
       <FCase FAsTyped >
       <FPosition FNormal >
       <FSupScript No >
       <FSubScript No >
       <FDX  0.0 pt>
       <FDY  0.0 pt>
       <FDW  0.0 pt>
       <FSeparation 0>
       <FColor `Black'>
      > # end of PgfFont
     > # end of Pgf
     <ParaLine 
      <Font 
       <FTag `program'>
      > # end of Font
      <String `a[n]'>
     >
    > # end of Para
   > # end of CellContent
  > # end of Cell
  <Cell 
   <CellContent 
    <Notes 
    > # end of Notes
    <Para 
     <Unique 23209>
     <PgfTag `CellBody'>
     <ParaLine 
      <String `convertible to '>
      <Font 
       <FTag `program'>
      > # end of Font
      <String `T'>
     >
    > # end of Para
   > # end of CellContent
  > # end of Cell
  <Cell 
   <CellContent 
    <Notes 
    > # end of Notes
    <Para 
     <Unique 23211>
     <PgfTag `CellBody'>
     <Pgf 
      <PgfFont 
       <FTag `'>
       <FFamily `Courier'>
       <FVar `Regular'>
       <FWeight `Regular'>
       <FAngle `Regular'>
       <FPostScriptName `Courier'>
       <FSize  9.0 pt>
       <FUnderlining FNoUnderlining >
       <FUnderline No >
       <FDoubleUnderline No >
       <FNumericUnderline No >
       <FOverline No >
       <FStrike No >
       <FChangeBar No >
       <FOutline No >
       <FShadow No >
       <FPairKern No >
       <FCase FAsTyped >
       <FPosition FNormal >
       <FSupScript No >
       <FSubScript No >
       <FDX  0.0 pt>
       <FDY  0.0 pt>
       <FDW  0.0 pt>
       <FSeparation 0>
       <FColor `Black'>
      > # end of PgfFont
     > # end of Pgf
     <ParaLine 
      <Font 
       <FTag `program'>
      > # end of Font
      <String `*(a + n)'>
     >
    > # end of Para
   > # end of CellContent
  > # end of Cell
  <Cell 
   <CellContent 
    <Notes 
    > # end of Notes
    <Para 
     <Unique 23213>
     <PgfTag `CellBody'>
     <ParaLine 
     >
    > # end of Para
   > # end of CellContent
  > # end of Cell
 > # end of Row
 <Row 
  <RowMaxHeight  14.0">
  <RowHeight  0.27778">
  <Cell 
   <CellContent 
    <Notes 
    > # end of Notes
    <Para 
     <Unique 23215>
     <PgfTag `CellBody'>
     <Pgf 
      <PgfFont 
       <FTag `'>
       <FFamily `Courier'>
       <FVar `Regular'>
       <FWeight `Regular'>
       <FAngle `Regular'>
       <FPostScriptName `Courier'>
       <FSize  9.0 pt>
       <FUnderlining FNoUnderlining >
       <FUnderline No >
       <FDoubleUnderline No >
       <FNumericUnderline No >
       <FOverline No >
       <FStrike No >
       <FChangeBar No >
       <FOutline No >
       <FShadow No >
       <FPairKern No >
       <FCase FAsTyped >
       <FPosition FNormal >
       <FSupScript No >
       <FSubScript No >
       <FDX  0.0 pt>
       <FDY  0.0 pt>
       <FDW  0.0 pt>
       <FSeparation 0>
       <FColor `Black'>
      > # end of PgfFont
     > # end of Pgf
     <ParaLine 
      <String `a < b'>
     >
    > # end of Para
   > # end of CellContent
  > # end of Cell
  <Cell 
   <CellContent 
    <Notes 
    > # end of Notes
    <Para 
     <Unique 23217>
     <PgfTag `CellBody'>
     <ParaLine 
      <String `convertible to '>
      <Font 
       <FTag `program'>
      > # end of Font
      <String `bool'>
     >
    > # end of Para
   > # end of CellContent
  > # end of Cell
  <Cell 
   <CellContent 
    <Notes 
    > # end of Notes
    <Para 
     <Unique 23219>
     <PgfTag `CellBody'>
     <Pgf 
      <PgfFont 
       <FTag `'>
       <FFamily `Courier'>
       <FVar `Regular'>
       <FWeight `Regular'>
       <FAngle `Regular'>
       <FPostScriptName `Courier'>
       <FSize  9.0 pt>
       <FUnderlining FNoUnderlining >
       <FUnderline No >
       <FDoubleUnderline No >
       <FNumericUnderline No >
       <FOverline No >
       <FStrike No >
       <FChangeBar No >
       <FOutline No >
       <FShadow No >
       <FPairKern No >
       <FCase FAsTyped >
       <FPosition FNormal >
       <FSupScript No >
       <FSubScript No >
       <FDX  0.0 pt>
       <FDY  0.0 pt>
       <FDW  0.0 pt>
       <FSeparation 0>
       <FColor `Black'>
      > # end of PgfFont
     > # end of Pgf
     <ParaLine 
      <String `b - a \> 0'>
     >
    > # end of Para
   > # end of CellContent
  > # end of Cell
  <Cell 
   <CellContent 
    <Notes 
    > # end of Notes
    <Para 
     <Unique 23221>
     <PgfTag `CellBody'>
     <ParaLine 
      <Font 
       <FTag `program'>
      > # end of Font
      <String `< '>
      <Font 
       <FTag `'>
      > # end of Font
      <String `is a total ordering relation'>
     >
    > # end of Para
   > # end of CellContent
  > # end of Cell
 > # end of Row
 <Row 
  <RowMaxHeight  14.0">
  <RowHeight  0.27778">
  <Cell 
   <CellContent 
    <Notes 
    > # end of Notes
    <Para 
     <Unique 23223>
     <PgfTag `CellBody'>
     <Pgf 
      <PgfFont 
       <FTag `'>
       <FFamily `Courier'>
       <FVar `Regular'>
       <FWeight `Regular'>
       <FAngle `Regular'>
       <FPostScriptName `Courier'>
       <FSize  9.0 pt>
       <FUnderlining FNoUnderlining >
       <FUnderline No >
       <FDoubleUnderline No >
       <FNumericUnderline No >
       <FOverline No >
       <FStrike No >
       <FChangeBar No >
       <FOutline No >
       <FShadow No >
       <FPairKern No >
       <FCase FAsTyped >
       <FPosition FNormal >
       <FSupScript No >
       <FSubScript No >
       <FDX  0.0 pt>
       <FDY  0.0 pt>
       <FDW  0.0 pt>
       <FSeparation 0>
       <FColor `Black'>
      > # end of PgfFont
     > # end of Pgf
     <ParaLine 
      <String `a \> b'>
     >
    > # end of Para
   > # end of CellContent
  > # end of Cell
  <Cell 
   <CellContent 
    <Notes 
    > # end of Notes
    <Para 
     <Unique 23225>
     <PgfTag `CellBody'>
     <ParaLine 
      <String `convertible to '>
      <Font 
       <FTag `program'>
      > # end of Font
      <String `bool'>
     >
    > # end of Para
   > # end of CellContent
  > # end of Cell
  <Cell 
   <CellContent 
    <Notes 
    > # end of Notes
    <Para 
     <Unique 23227>
     <PgfTag `CellBody'>
     <Pgf 
      <PgfFont 
       <FTag `'>
       <FFamily `Courier'>
       <FVar `Regular'>
       <FWeight `Regular'>
       <FAngle `Regular'>
       <FPostScriptName `Courier'>
       <FSize  9.0 pt>
       <FUnderlining FNoUnderlining >
       <FUnderline No >
       <FDoubleUnderline No >
       <FNumericUnderline No >
       <FOverline No >
       <FStrike No >
       <FChangeBar No >
       <FOutline No >
       <FShadow No >
       <FPairKern No >
       <FCase FAsTyped >
       <FPosition FNormal >
       <FSupScript No >
       <FSubScript No >
       <FDX  0.0 pt>
       <FDY  0.0 pt>
       <FDW  0.0 pt>
       <FSeparation 0>
       <FColor `Black'>
      > # end of PgfFont
     > # end of Pgf
     <ParaLine 
      <String `b < a'>
     >
    > # end of Para
   > # end of CellContent
  > # end of Cell
  <Cell 
   <CellContent 
    <Notes 
    > # end of Notes
    <Para 
     <Unique 23229>
     <PgfTag `CellBody'>
     <Pgf 
      <PgfFont 
       <FTag `'>
       <FFamily `Courier'>
       <FVar `Regular'>
       <FWeight `Regular'>
       <FAngle `Regular'>
       <FPostScriptName `Courier'>
       <FSize  9.0 pt>
       <FUnderlining FNoUnderlining >
       <FUnderline No >
       <FDoubleUnderline No >
       <FNumericUnderline No >
       <FOverline No >
       <FStrike No >
       <FChangeBar No >
       <FOutline No >
       <FShadow No >
       <FPairKern No >
       <FCase FAsTyped >
       <FPosition FNormal >
       <FSupScript No >
       <FSubScript No >
       <FDX  0.0 pt>
       <FDY  0.0 pt>
       <FDW  0.0 pt>
       <FSeparation 0>
       <FColor `Black'>
      > # end of PgfFont
     > # end of Pgf
     <ParaLine 
      <Font 
       <FTag `program'>
      > # end of Font
      <String `\> '>
      <Font 
       <FTag `'>
       <FFamily `Times'>
       <FPostScriptName `Times-Roman'>
       <FSize  10.0 pt>
       <FPairKern Yes >
      > # end of Font
      <String `is a total ordering relation opposite to '>
      <Font 
       <FTag `program'>
      > # end of Font
      <String `<.'>
     >
    > # end of Para
   > # end of CellContent
  > # end of Cell
 > # end of Row
 <Row 
  <RowMaxHeight  14.0">
  <RowHeight  0.27778">
  <Cell 
   <CellContent 
    <Notes 
    > # end of Notes
    <Para 
     <Unique 23231>
     <PgfTag `CellBody'>
     <Pgf 
      <PgfFont 
       <FTag `'>
       <FFamily `Courier'>
       <FVar `Regular'>
       <FWeight `Regular'>
       <FAngle `Regular'>
       <FPostScriptName `Courier'>
       <FSize  9.0 pt>
       <FUnderlining FNoUnderlining >
       <FUnderline No >
       <FDoubleUnderline No >
       <FNumericUnderline No >
       <FOverline No >
       <FStrike No >
       <FChangeBar No >
       <FOutline No >
       <FShadow No >
       <FPairKern No >
       <FCase FAsTyped >
       <FPosition FNormal >
       <FSupScript No >
       <FSubScript No >
       <FDX  0.0 pt>
       <FDY  0.0 pt>
       <FDW  0.0 pt>
       <FSeparation 0>
       <FColor `Black'>
      > # end of PgfFont
     > # end of Pgf
     <ParaLine 
      <String `a \>= b'>
     >
    > # end of Para
   > # end of CellContent
  > # end of Cell
  <Cell 
   <CellContent 
    <Notes 
    > # end of Notes
    <Para 
     <Unique 23233>
     <PgfTag `CellBody'>
     <ParaLine 
      <String `convertible to '>
      <Font 
       <FTag `program'>
      > # end of Font
      <String `bool'>
     >
    > # end of Para
   > # end of CellContent
  > # end of Cell
  <Cell 
   <CellContent 
    <Notes 
    > # end of Notes
    <Para 
     <Unique 23235>
     <PgfTag `CellBody'>
     <Pgf 
      <PgfFont 
       <FTag `'>
       <FFamily `Courier'>
       <FVar `Regular'>
       <FWeight `Regular'>
       <FAngle `Regular'>
       <FPostScriptName `Courier'>
       <FSize  9.0 pt>
       <FUnderlining FNoUnderlining >
       <FUnderline No >
       <FDoubleUnderline No >
       <FNumericUnderline No >
       <FOverline No >
       <FStrike No >
       <FChangeBar No >
       <FOutline No >
       <FShadow No >
       <FPairKern No >
       <FCase FAsTyped >
       <FPosition FNormal >
       <FSupScript No >
       <FSubScript No >
       <FDX  0.0 pt>
       <FDY  0.0 pt>
       <FDW  0.0 pt>
       <FSeparation 0>
       <FColor `Black'>
      > # end of PgfFont
     > # end of Pgf
     <ParaLine 
      <String `!(a < b)'>
     >
    > # end of Para
   > # end of CellContent
  > # end of Cell
  <Cell 
   <CellContent 
    <Notes 
    > # end of Notes
    <Para 
     <Unique 23237>
     <PgfTag `CellBody'>
     <Pgf 
      <PgfFont 
       <FTag `'>
       <FFamily `Courier'>
       <FVar `Regular'>
       <FWeight `Regular'>
       <FAngle `Regular'>
       <FPostScriptName `Courier'>
       <FSize  9.0 pt>
       <FUnderlining FNoUnderlining >
       <FUnderline No >
       <FDoubleUnderline No >
       <FNumericUnderline No >
       <FOverline No >
       <FStrike No >
       <FChangeBar No >
       <FOutline No >
       <FShadow No >
       <FPairKern No >
       <FCase FAsTyped >
       <FPosition FNormal >
       <FSupScript No >
       <FSubScript No >
       <FDX  0.0 pt>
       <FDY  0.0 pt>
       <FDW  0.0 pt>
       <FSeparation 0>
       <FColor `Black'>
      > # end of PgfFont
     > # end of Pgf
     <ParaLine 
     >
    > # end of Para
   > # end of CellContent
  > # end of Cell
 > # end of Row
 <Row 
  <RowMaxHeight  14.0">
  <RowHeight  0.27778">
  <Cell 
   <CellContent 
    <Notes 
    > # end of Notes
    <Para 
     <Unique 23239>
     <PgfTag `CellBody'>
     <Pgf 
      <PgfFont 
       <FTag `'>
       <FFamily `Courier'>
       <FVar `Regular'>
       <FWeight `Regular'>
       <FAngle `Regular'>
       <FPostScriptName `Courier'>
       <FSize  9.0 pt>
       <FUnderlining FNoUnderlining >
       <FUnderline No >
       <FDoubleUnderline No >
       <FNumericUnderline No >
       <FOverline No >
       <FStrike No >
       <FChangeBar No >
       <FOutline No >
       <FShadow No >
       <FPairKern No >
       <FCase FAsTyped >
       <FPosition FNormal >
       <FSupScript No >
       <FSubScript No >
       <FDX  0.0 pt>
       <FDY  0.0 pt>
       <FDW  0.0 pt>
       <FSeparation 0>
       <FColor `Black'>
      > # end of PgfFont
     > # end of Pgf
     <ParaLine 
      <String `a <= b'>
     >
    > # end of Para
   > # end of CellContent
  > # end of Cell
  <Cell 
   <CellContent 
    <Notes 
    > # end of Notes
    <Para 
     <Unique 23241>
     <PgfTag `CellBody'>
     <ParaLine 
      <String `convertible to '>
      <Font 
       <FTag `program'>
      > # end of Font
      <String `bool'>
     >
    > # end of Para
   > # end of CellContent
  > # end of Cell
  <Cell 
   <CellContent 
    <Notes 
    > # end of Notes
    <Para 
     <Unique 23243>
     <PgfTag `CellBody'>
     <Pgf 
      <PgfFont 
       <FTag `'>
       <FFamily `Courier'>
       <FVar `Regular'>
       <FWeight `Regular'>
       <FAngle `Regular'>
       <FPostScriptName `Courier'>
       <FSize  9.0 pt>
       <FUnderlining FNoUnderlining >
       <FUnderline No >
       <FDoubleUnderline No >
       <FNumericUnderline No >
       <FOverline No >
       <FStrike No >
       <FChangeBar No >
       <FOutline No >
       <FShadow No >
       <FPairKern No >
       <FCase FAsTyped >
       <FPosition FNormal >
       <FSupScript No >
       <FSubScript No >
       <FDX  0.0 pt>
       <FDY  0.0 pt>
       <FDW  0.0 pt>
       <FSeparation 0>
       <FColor `Black'>
      > # end of PgfFont
     > # end of Pgf
     <ParaLine 
      <String `!(a \> b)'>
     >
    > # end of Para
   > # end of CellContent
  > # end of Cell
  <Cell 
   <CellContent 
    <Notes 
    > # end of Notes
    <Para 
     <Unique 23245>
     <PgfTag `CellBody'>
     <Pgf 
      <PgfFont 
       <FTag `'>
       <FFamily `Courier'>
       <FVar `Regular'>
       <FWeight `Regular'>
       <FAngle `Regular'>
       <FPostScriptName `Courier'>
       <FSize  9.0 pt>
       <FUnderlining FNoUnderlining >
       <FUnderline No >
       <FDoubleUnderline No >
       <FNumericUnderline No >
       <FOverline No >
       <FStrike No >
       <FChangeBar No >
       <FOutline No >
       <FShadow No >
       <FPairKern No >
       <FCase FAsTyped >
       <FPosition FNormal >
       <FSupScript No >
       <FSubScript No >
       <FDX  0.0 pt>
       <FDY  0.0 pt>
       <FDW  0.0 pt>
       <FSeparation 0>
       <FColor `Black'>
      > # end of PgfFont
     > # end of Pgf
     <ParaLine 
     >
    > # end of Para
   > # end of CellContent
  > # end of Cell
 > # end of Row
> # end of TblBody
> # end of Tbl
<Tbl 
<TblID 13>
<TblTag `Format A'>
<TblFormat 
 <TblColumn 
  <TblColumnNum 0>
  <TblColumnWidth  1.0">
  <TblColumnH 
   <Pgf 
    <PgfTag `CellHeading'>
    <PgfAlignment Center >
    <PgfFont 
     <FTag `'>
     <FFamily `Times'>
     <FVar `Regular'>
     <FWeight `Regular'>
     <FAngle `Regular'>
     <FPostScriptName `Times-Roman'>
     <FSize  12.0 pt>
     <FUnderlining FNoUnderlining >
     <FUnderline No >
     <FDoubleUnderline No >
     <FNumericUnderline No >
     <FOverline No >
     <FStrike No >
     <FChangeBar No >
     <FOutline No >
     <FShadow No >
     <FPairKern Yes >
     <FCase FAsTyped >
     <FPosition FNormal >
     <FSupScript No >
     <FSubScript No >
     <FDX  0.0 pt>
     <FDY  0.0 pt>
     <FDW  0.0 pt>
     <FSeparation 0>
     <FColor `Black'>
    > # end of PgfFont
    <PgfHyphenate No >
    <PgfCellAlignment Middle >
    <PgfCellMargins  0.0 pt 2.0 pt 0.0 pt 2.0 pt>
   > # end of Pgf
  > # end of TblColumnH
  <TblColumnBody 
   <PgfTag `CellBody'>
   <Pgf 
    <PgfFont 
     <FTag `'>
     <FFamily `Times'>
     <FVar `Regular'>
     <FWeight `Regular'>
     <FAngle `Regular'>
     <FPostScriptName `Times-Roman'>
     <FSize  12.0 pt>
     <FUnderlining FNoUnderlining >
     <FUnderline No >
     <FDoubleUnderline No >
     <FNumericUnderline No >
     <FOverline No >
     <FStrike No >
     <FChangeBar No >
     <FOutline No >
     <FShadow No >
     <FPairKern Yes >
     <FCase FAsTyped >
     <FPosition FNormal >
     <FSupScript No >
     <FSubScript No >
     <FDX  0.0 pt>
     <FDY  0.0 pt>
     <FDW  0.0 pt>
     <FSeparation 0>
     <FColor `Black'>
    > # end of PgfFont
   > # end of Pgf
  > # end of TblColumnBody
  <TblColumnF 
   <Pgf 
    <PgfTag `CellHeading'>
    <PgfAlignment Center >
    <PgfHyphenate No >
    <PgfCellAlignment Middle >
    <PgfCellMargins  0.0 pt 2.0 pt 0.0 pt 2.0 pt>
   > # end of Pgf
  > # end of TblColumnF
 > # end of TblColumn
 <TblColumn 
  <TblColumnNum 1>
  <TblColumnWidth  1.0">
  <TblColumnH 
  > # end of TblColumnH
  <TblColumnBody 
   <PgfTag `CellBody'>
   <Pgf 
    <PgfFont 
     <FTag `'>
     <FFamily `Times'>
     <FVar `Regular'>
     <FWeight `Regular'>
     <FAngle `Regular'>
     <FPostScriptName `Times-Roman'>
     <FSize  12.0 pt>
     <FUnderlining FNoUnderlining >
     <FUnderline No >
     <FDoubleUnderline No >
     <FNumericUnderline No >
     <FOverline No >
     <FStrike No >
     <FChangeBar No >
     <FOutline No >
     <FShadow No >
     <FPairKern Yes >
     <FCase FAsTyped >
     <FPosition FNormal >
     <FSupScript No >
     <FSubScript No >
     <FDX  0.0 pt>
     <FDY  0.0 pt>
     <FDW  0.0 pt>
     <FSeparation 0>
     <FColor `Black'>
    > # end of PgfFont
   > # end of Pgf
  > # end of TblColumnBody
  <TblColumnF 
   <Pgf 
    <PgfTag `CellHeading'>
    <PgfAlignment Center >
    <PgfHyphenate No >
    <PgfCellAlignment Middle >
    <PgfCellMargins  0.0 pt 2.0 pt 0.0 pt 2.0 pt>
   > # end of Pgf
  > # end of TblColumnF
 > # end of TblColumn
 <TblColumn 
  <TblColumnNum 2>
  <TblColumnWidth  1.0">
  <TblColumnH 
  > # end of TblColumnH
  <TblColumnBody 
   <PgfTag `CellBody'>
   <Pgf 
    <PgfFont 
     <FTag `'>
     <FFamily `Times'>
     <FVar `Regular'>
     <FWeight `Regular'>
     <FAngle `Regular'>
     <FPostScriptName `Times-Roman'>
     <FSize  12.0 pt>
     <FUnderlining FNoUnderlining >
     <FUnderline No >
     <FDoubleUnderline No >
     <FNumericUnderline No >
     <FOverline No >
     <FStrike No >
     <FChangeBar No >
     <FOutline No >
     <FShadow No >
     <FPairKern Yes >
     <FCase FAsTyped >
     <FPosition FNormal >
     <FSupScript No >
     <FSubScript No >
     <FDX  0.0 pt>
     <FDY  0.0 pt>
     <FDW  0.0 pt>
     <FSeparation 0>
     <FColor `Black'>
    > # end of PgfFont
   > # end of Pgf
  > # end of TblColumnBody
  <TblColumnF 
   <Pgf 
    <PgfTag `CellHeading'>
    <PgfAlignment Center >
    <PgfHyphenate No >
    <PgfCellAlignment Middle >
    <PgfCellMargins  0.0 pt 2.0 pt 0.0 pt 2.0 pt>
   > # end of Pgf
  > # end of TblColumnF
 > # end of TblColumn
 <TblColumn 
  <TblColumnNum 3>
  <TblColumnWidth  1.0">
  <TblColumnH 
  > # end of TblColumnH
  <TblColumnBody 
   <PgfTag `CellBody'>
   <Pgf 
    <PgfFont 
     <FTag `'>
     <FFamily `Times'>
     <FVar `Regular'>
     <FWeight `Regular'>
     <FAngle `Regular'>
     <FPostScriptName `Times-Roman'>
     <FSize  12.0 pt>
     <FUnderlining FNoUnderlining >
     <FUnderline No >
     <FDoubleUnderline No >
     <FNumericUnderline No >
     <FOverline No >
     <FStrike No >
     <FChangeBar No >
     <FOutline No >
     <FShadow No >
     <FPairKern Yes >
     <FCase FAsTyped >
     <FPosition FNormal >
     <FSupScript No >
     <FSubScript No >
     <FDX  0.0 pt>
     <FDY  0.0 pt>
     <FDW  0.0 pt>
     <FSeparation 0>
     <FColor `Black'>
    > # end of PgfFont
   > # end of Pgf
  > # end of TblColumnBody
  <TblColumnF 
   <Pgf 
    <PgfTag `CellHeading'>
    <PgfAlignment Center >
    <PgfHyphenate No >
    <PgfCellAlignment Middle >
    <PgfCellMargins  0.0 pt 2.0 pt 0.0 pt 2.0 pt>
   > # end of Pgf
  > # end of TblColumnF
 > # end of TblColumn
 <TblColumn 
  <TblColumnNum 4>
  <TblColumnWidth  1.0">
  <TblColumnH 
  > # end of TblColumnH
  <TblColumnBody 
   <PgfTag `CellBody'>
   <Pgf 
    <PgfFont 
     <FTag `'>
     <FFamily `Times'>
     <FVar `Regular'>
     <FWeight `Regular'>
     <FAngle `Regular'>
     <FPostScriptName `Times-Roman'>
     <FSize  12.0 pt>
     <FUnderlining FNoUnderlining >
     <FUnderline No >
     <FDoubleUnderline No >
     <FNumericUnderline No >
     <FOverline No >
     <FStrike No >
     <FChangeBar No >
     <FOutline No >
     <FShadow No >
     <FPairKern Yes >
     <FCase FAsTyped >
     <FPosition FNormal >
     <FSupScript No >
     <FSubScript No >
     <FDX  0.0 pt>
     <FDY  0.0 pt>
     <FDW  0.0 pt>
     <FSeparation 0>
     <FColor `Black'>
    > # end of PgfFont
   > # end of Pgf
  > # end of TblColumnBody
  <TblColumnF 
   <Pgf 
    <PgfTag `CellHeading'>
    <PgfAlignment Center >
    <PgfHyphenate No >
    <PgfCellAlignment Middle >
    <PgfCellMargins  0.0 pt 2.0 pt 0.0 pt 2.0 pt>
   > # end of Pgf
  > # end of TblColumnF
 > # end of TblColumn
 <TblInitNumBodyRows 8>
> # end of TblFormat
<TblNumColumns 4>
<Unique 39345>
<TblColumnWidth  1.4">
<TblColumnWidth  1.6">
<TblColumnWidth  1.9">
<TblColumnWidth  1.5">
<TblTitleContent 
 <Notes 
 > # end of Notes
 <Para 
  <Unique 39347>
  <Pgf 
   <PgfTag `TableTitle'>
   <PgfFont 
    <FTag `'>
    <FFamily `Times'>
    <FVar `Regular'>
    <FWeight `Bold'>
    <FAngle `Regular'>
    <FPostScriptName `Times-Bold'>
    <FSize  12.0 pt>
    <FUnderlining FNoUnderlining >
    <FUnderline No >
    <FDoubleUnderline No >
    <FNumericUnderline No >
    <FOverline No >
    <FStrike No >
    <FChangeBar No >
    <FOutline No >
    <FShadow No >
    <FPairKern Yes >
    <FCase FAsTyped >
    <FPosition FNormal >
    <FSupScript No >
    <FSubScript No >
    <FDX  0.0 pt>
    <FDY  0.0 pt>
    <FDW  0.0 pt>
    <FSeparation 0>
    <FColor `Black'>
   > # end of PgfFont
   <PgfAutoNum Yes >
   <PgfNumFormat `T:Table <n+\>: '>
   <PgfNumberFont `'>
   <PgfNumAtEnd No >
   <PgfCellAlignment Top >
   <PgfCellMargins  0.0 pt 0.0 pt 0.0 pt 0.0 pt>
  > # end of Pgf
  <PgfNumString `Table 11: '>
  <ParaLine 
   <String `Optional sequence operations'>
  >
 > # end of Para
> # end of TblTitleContent
<TblH 
 <Row 
  <RowMaxHeight  14.0">
  <RowHeight  0.33333">
  <Cell 
   <CellContent 
    <Notes 
    > # end of Notes
    <Para 
     <Unique 39355>
     <Pgf 
      <PgfTag `CellHeading'>
      <PgfFont 
       <FTag `'>
       <FFamily `Times'>
       <FVar `Regular'>
       <FWeight `Regular'>
       <FAngle `Regular'>
       <FPostScriptName `Times-Roman'>
       <FSize  10.0 pt>
       <FUnderlining FNoUnderlining >
       <FUnderline No >
       <FDoubleUnderline No >
       <FNumericUnderline No >
       <FOverline No >
       <FStrike No >
       <FChangeBar No >
       <FOutline No >
       <FShadow No >
       <FPairKern Yes >
       <FCase FAsTyped >
       <FPosition FNormal >
       <FSupScript No >
       <FSubScript No >
       <FDX  0.0 pt>
       <FDY  0.0 pt>
       <FDW  0.0 pt>
       <FSeparation 0>
       <FColor `Black'>
      > # end of PgfFont
      <PgfAutoNum No >
      <PgfCellAlignment Middle >
      <PgfCellMargins  0.0 pt 2.0 pt 0.0 pt 2.0 pt>
     > # end of Pgf
     <ParaLine 
      <String `expression'>
     >
    > # end of Para
   > # end of CellContent
  > # end of Cell
  <Cell 
   <CellContent 
    <Notes 
    > # end of Notes
    <Para 
     <Unique 39357>
     <ParaLine 
      <String `return type'>
     >
    > # end of Para
   > # end of CellContent
  > # end of Cell
  <Cell 
   <CellContent 
    <Notes 
    > # end of Notes
    <Para 
     <Unique 39359>
     <ParaLine 
      <String `operational semantics'>
     >
    > # end of Para
   > # end of CellContent
  > # end of Cell
  <Cell 
   <CellContent 
    <Notes 
    > # end of Notes
    <Para 
     <Unique 39361>
     <ParaLine 
      <String `container'>
     >
    > # end of Para
   > # end of CellContent
  > # end of Cell
 > # end of Row
> # end of TblH
<TblBody 
 <Row 
  <RowMaxHeight  14.0">
  <RowHeight  0.59722">
  <Cell 
   <CellContent 
    <Notes 
    > # end of Notes
    <Para 
     <Unique 39363>
     <PgfTag `CellBody'>
     <Pgf 
      <PgfFont 
       <FTag `'>
       <FFamily `Courier'>
       <FVar `Regular'>
       <FWeight `Regular'>
       <FAngle `Regular'>
       <FPostScriptName `Courier'>
       <FSize  9.0 pt>
       <FUnderlining FNoUnderlining >
       <FUnderline No >
       <FDoubleUnderline No >
       <FNumericUnderline No >
       <FOverline No >
       <FStrike No >
       <FChangeBar No >
       <FOutline No >
       <FShadow No >
       <FPairKern No >
       <FCase FAsTyped >
       <FPosition FNormal >
       <FSupScript No >
       <FSubScript No >
       <FDX  0.0 pt>
       <FDY  0.0 pt>
       <FDW  0.0 pt>
       <FSeparation 0>
       <FColor `Black'>
      > # end of PgfFont
     > # end of Pgf
     <ParaLine 
      <String `a.front()'>
     >
    > # end of Para
   > # end of CellContent
  > # end of Cell
  <Cell 
   <CellContent 
    <Notes 
    > # end of Notes
    <Para 
     <Unique 39365>
     <PgfTag `CellBody'>
     <Pgf 
      <PgfFont 
       <FTag `'>
       <FFamily `Courier'>
       <FVar `Regular'>
       <FWeight `Regular'>
       <FAngle `Regular'>
       <FPostScriptName `Courier'>
       <FSize  9.0 pt>
       <FUnderlining FNoUnderlining >
       <FUnderline No >
       <FDoubleUnderline No >
       <FNumericUnderline No >
       <FOverline No >
       <FStrike No >
       <FChangeBar No >
       <FOutline No >
       <FShadow No >
       <FPairKern No >
       <FCase FAsTyped >
       <FPosition FNormal >
       <FSupScript No >
       <FSubScript No >
       <FDX  0.0 pt>
       <FDY  0.0 pt>
       <FDW  0.0 pt>
       <FSeparation 0>
       <FColor `Black'>
      > # end of PgfFont
     > # end of Pgf
     <ParaLine 
      <Font 
       <FTag `program'>
      > # end of Font
      <String `reference;'>
     >
    > # end of Para
    <Para 
     <Unique 39366>
     <PgfTag `CellBody'>
     <ParaLine 
      <Font 
       <FTag `program'>
      > # end of Font
      <String `const'>
      <String `_reference'>
      <Font 
       <FTag `'>
      > # end of Font
      <String ` for '>
     >
     <ParaLine 
      <String `constant '>
      <Font 
       <FTag `program'>
      > # end of Font
      <String `a'>
     >
    > # end of Para
   > # end of CellContent
  > # end of Cell
  <Cell 
   <CellContent 
    <Notes 
    > # end of Notes
    <Para 
     <Unique 39368>
     <PgfTag `CellBody'>
     <Pgf 
      <PgfFont 
       <FTag `'>
       <FFamily `Courier'>
       <FVar `Regular'>
       <FWeight `Regular'>
       <FAngle `Regular'>
       <FPostScriptName `Courier'>
       <FSize  9.0 pt>
       <FUnderlining FNoUnderlining >
       <FUnderline No >
       <FDoubleUnderline No >
       <FNumericUnderline No >
       <FOverline No >
       <FStrike No >
       <FChangeBar No >
       <FOutline No >
       <FShadow No >
       <FPairKern No >
       <FCase FAsTyped >
       <FPosition FNormal >
       <FSupScript No >
       <FSubScript No >
       <FDX  0.0 pt>
       <FDY  0.0 pt>
       <FDW  0.0 pt>
       <FSeparation 0>
       <FColor `Black'>
      > # end of PgfFont
     > # end of Pgf
     <ParaLine 
      <Font 
       <FTag `program'>
      > # end of Font
      <String `*a.begin()'>
     >
    > # end of Para
   > # end of CellContent
  > # end of Cell
  <Cell 
   <CellContent 
    <Notes 
    > # end of Notes
    <Para 
     <Unique 39370>
     <PgfTag `CellBody'>
     <ParaLine 
      <Font 
       <FTag `program'>
      > # end of Font
      <String `vector'>
      <Font 
       <FTag `'>
      > # end of Font
      <String `, '>
      <Font 
       <FTag `program'>
      > # end of Font
      <String `list'>
      <Font 
       <FTag `'>
      > # end of Font
      <String `, '>
      <Font 
       <FTag `program'>
      > # end of Font
      <String `deque'>
     >
    > # end of Para
   > # end of CellContent
  > # end of Cell
 > # end of Row
 <Row 
  <RowMaxHeight  14.0">
  <RowHeight  0.59722">
  <Cell 
   <CellContent 
    <Notes 
    > # end of Notes
    <Para 
     <Unique 39372>
     <PgfTag `CellBody'>
     <Pgf 
      <PgfFont 
       <FTag `'>
       <FFamily `Courier'>
       <FVar `Regular'>
       <FWeight `Regular'>
       <FAngle `Regular'>
       <FPostScriptName `Courier'>
       <FSize  9.0 pt>
       <FUnderlining FNoUnderlining >
       <FUnderline No >
       <FDoubleUnderline No >
       <FNumericUnderline No >
       <FOverline No >
       <FStrike No >
       <FChangeBar No >
       <FOutline No >
       <FShadow No >
       <FPairKern No >
       <FCase FAsTyped >
       <FPosition FNormal >
       <FSupScript No >
       <FSubScript No >
       <FDX  0.0 pt>
       <FDY  0.0 pt>
       <FDW  0.0 pt>
       <FSeparation 0>
       <FColor `Black'>
      > # end of PgfFont
     > # end of Pgf
     <ParaLine 
      <Font 
       <FTag `program'>
      > # end of Font
      <String `a.back()'>
     >
    > # end of Para
   > # end of CellContent
  > # end of Cell
  <Cell 
   <CellContent 
    <Notes 
    > # end of Notes
    <Para 
     <Unique 39374>
     <PgfTag `CellBody'>
     <Pgf 
      <PgfFont 
       <FTag `'>
       <FFamily `Courier'>
       <FVar `Regular'>
       <FWeight `Regular'>
       <FAngle `Regular'>
       <FPostScriptName `Courier'>
       <FSize  9.0 pt>
       <FUnderlining FNoUnderlining >
       <FUnderline No >
       <FDoubleUnderline No >
       <FNumericUnderline No >
       <FOverline No >
       <FStrike No >
       <FChangeBar No >
       <FOutline No >
       <FShadow No >
       <FPairKern No >
       <FCase FAsTyped >
       <FPosition FNormal >
       <FSupScript No >
       <FSubScript No >
       <FDX  0.0 pt>
       <FDY  0.0 pt>
       <FDW  0.0 pt>
       <FSeparation 0>
       <FColor `Black'>
      > # end of PgfFont
     > # end of Pgf
     <ParaLine 
      <Font 
       <FTag `program'>
      > # end of Font
      <String `reference;'>
     >
    > # end of Para
    <Para 
     <Unique 39375>
     <PgfTag `CellBody'>
     <ParaLine 
      <Font 
       <FTag `program'>
      > # end of Font
      <String `const'>
      <String `_reference'>
      <Font 
       <FTag `'>
      > # end of Font
      <String ` for '>
     >
     <ParaLine 
      <String `constant '>
      <Font 
       <FTag `program'>
      > # end of Font
      <String `a'>
     >
    > # end of Para
   > # end of CellContent
  > # end of Cell
  <Cell 
   <CellContent 
    <Notes 
    > # end of Notes
    <Para 
     <Unique 39377>
     <PgfTag `CellBody'>
     <Pgf 
      <PgfFont 
       <FTag `'>
       <FFamily `Courier'>
       <FVar `Regular'>
       <FWeight `Regular'>
       <FAngle `Regular'>
       <FPostScriptName `Courier'>
       <FSize  9.0 pt>
       <FUnderlining FNoUnderlining >
       <FUnderline No >
       <FDoubleUnderline No >
       <FNumericUnderline No >
       <FOverline No >
       <FStrike No >
       <FChangeBar No >
       <FOutline No >
       <FShadow No >
       <FPairKern No >
       <FCase FAsTyped >
       <FPosition FNormal >
       <FSupScript No >
       <FSubScript No >
       <FDX  0.0 pt>
       <FDY  0.0 pt>
       <FDW  0.0 pt>
       <FSeparation 0>
       <FColor `Black'>
      > # end of PgfFont
     > # end of Pgf
     <ParaLine 
      <Font 
       <FTag `program'>
      > # end of Font
      <String `*a.'>
      <String `(--e'>
      <String `nd()'>
      <String `)'>
     >
    > # end of Para
   > # end of CellContent
  > # end of Cell
  <Cell 
   <CellContent 
    <Notes 
    > # end of Notes
    <Para 
     <Unique 39379>
     <PgfTag `CellBody'>
     <ParaLine 
      <Font 
       <FTag `program'>
      > # end of Font
      <String `vector'>
      <Font 
       <FTag `'>
      > # end of Font
      <String `, '>
      <Font 
       <FTag `program'>
      > # end of Font
      <String `list'>
      <Font 
       <FTag `'>
      > # end of Font
      <String `, '>
      <Font 
       <FTag `program'>
      > # end of Font
      <String `deque'>
     >
    > # end of Para
   > # end of CellContent
  > # end of Cell
 > # end of Row
 <Row 
  <RowMaxHeight  14.0">
  <RowHeight  0.27778">
  <Cell 
   <CellContent 
    <Notes 
    > # end of Notes
    <Para 
     <Unique 39381>
     <PgfTag `CellBody'>
     <Pgf 
      <PgfFont 
       <FTag `'>
       <FFamily `Courier'>
       <FVar `Regular'>
       <FWeight `Regular'>
       <FAngle `Regular'>
       <FPostScriptName `Courier'>
       <FSize  9.0 pt>
       <FUnderlining FNoUnderlining >
       <FUnderline No >
       <FDoubleUnderline No >
       <FNumericUnderline No >
       <FOverline No >
       <FStrike No >
       <FChangeBar No >
       <FOutline No >
       <FShadow No >
       <FPairKern No >
       <FCase FAsTyped >
       <FPosition FNormal >
       <FSupScript No >
       <FSubScript No >
       <FDX  0.0 pt>
       <FDY  0.0 pt>
       <FDW  0.0 pt>
       <FSeparation 0>
       <FColor `Black'>
      > # end of PgfFont
     > # end of Pgf
     <ParaLine 
      <String `a.push_front('>
      <String `t)'>
     >
    > # end of Para
   > # end of CellContent
  > # end of Cell
  <Cell 
   <CellContent 
    <Notes 
    > # end of Notes
    <Para 
     <Unique 39383>
     <PgfTag `CellBody'>
     <ParaLine 
      <Font 
       <FTag `program'>
      > # end of Font
      <String `void'>
     >
    > # end of Para
   > # end of CellContent
  > # end of Cell
  <Cell 
   <CellContent 
    <Notes 
    > # end of Notes
    <Para 
     <Unique 39385>
     <PgfTag `CellBody'>
     <Pgf 
      <PgfFont 
       <FTag `'>
       <FFamily `Courier'>
       <FVar `Regular'>
       <FWeight `Regular'>
       <FAngle `Regular'>
       <FPostScriptName `Courier'>
       <FSize  9.0 pt>
       <FUnderlining FNoUnderlining >
       <FUnderline No >
       <FDoubleUnderline No >
       <FNumericUnderline No >
       <FOverline No >
       <FStrike No >
       <FChangeBar No >
       <FOutline No >
       <FShadow No >
       <FPairKern No >
       <FCase FAsTyped >
       <FPosition FNormal >
       <FSupScript No >
       <FSubScript No >
       <FDX  0.0 pt>
       <FDY  0.0 pt>
       <FDW  0.0 pt>
       <FSeparation 0>
       <FColor `Black'>
      > # end of PgfFont
     > # end of Pgf
     <ParaLine 
      <Font 
       <FTag `program'>
      > # end of Font
      <String `a.insert(a.begin(), '>
      <String `t)'>
     >
    > # end of Para
   > # end of CellContent
  > # end of Cell
  <Cell 
   <CellContent 
    <Notes 
    > # end of Notes
    <Para 
     <Unique 39387>
     <PgfTag `CellBody'>
     <ParaLine 
      <Font 
       <FTag `program'>
      > # end of Font
      <String `list'>
      <Font 
       <FTag `'>
      > # end of Font
      <String `, '>
      <Font 
       <FTag `program'>
      > # end of Font
      <String `deque'>
     >
    > # end of Para
   > # end of CellContent
  > # end of Cell
 > # end of Row
 <Row 
  <RowMaxHeight  14.0">
  <RowHeight  0.27778">
  <Cell 
   <CellContent 
    <Notes 
    > # end of Notes
    <Para 
     <Unique 39389>
     <PgfTag `CellBody'>
     <Pgf 
      <PgfFont 
       <FTag `'>
       <FFamily `Courier'>
       <FVar `Regular'>
       <FWeight `Regular'>
       <FAngle `Regular'>
       <FPostScriptName `Courier'>
       <FSize  9.0 pt>
       <FUnderlining FNoUnderlining >
       <FUnderline No >
       <FDoubleUnderline No >
       <FNumericUnderline No >
       <FOverline No >
       <FStrike No >
       <FChangeBar No >
       <FOutline No >
       <FShadow No >
       <FPairKern No >
       <FCase FAsTyped >
       <FPosition FNormal >
       <FSupScript No >
       <FSubScript No >
       <FDX  0.0 pt>
       <FDY  0.0 pt>
       <FDW  0.0 pt>
       <FSeparation 0>
       <FColor `Black'>
      > # end of PgfFont
     > # end of Pgf
     <ParaLine 
      <String `a.push_back('>
      <String `t)'>
     >
    > # end of Para
   > # end of CellContent
  > # end of Cell
  <Cell 
   <CellContent 
    <Notes 
    > # end of Notes
    <Para 
     <Unique 39391>
     <PgfTag `CellBody'>
     <Pgf 
      <PgfFont 
       <FTag `'>
       <FFamily `Courier'>
       <FVar `Regular'>
       <FWeight `Regular'>
       <FAngle `Regular'>
       <FPostScriptName `Courier'>
       <FSize  9.0 pt>
       <FUnderlining FNoUnderlining >
       <FUnderline No >
       <FDoubleUnderline No >
       <FNumericUnderline No >
       <FOverline No >
       <FStrike No >
       <FChangeBar No >
       <FOutline No >
       <FShadow No >
       <FPairKern No >
       <FCase FAsTyped >
       <FPosition FNormal >
       <FSupScript No >
       <FSubScript No >
       <FDX  0.0 pt>
       <FDY  0.0 pt>
       <FDW  0.0 pt>
       <FSeparation 0>
       <FColor `Black'>
      > # end of PgfFont
     > # end of Pgf
     <ParaLine 
      <Font 
       <FTag `program'>
      > # end of Font
      <String `void'>
     >
    > # end of Para
   > # end of CellContent
  > # end of Cell
  <Cell 
   <CellContent 
    <Notes 
    > # end of Notes
    <Para 
     <Unique 39393>
     <PgfTag `CellBody'>
     <Pgf 
      <PgfFont 
       <FTag `'>
       <FFamily `Courier'>
       <FVar `Regular'>
       <FWeight `Regular'>
       <FAngle `Regular'>
       <FPostScriptName `Courier'>
       <FSize  9.0 pt>
       <FUnderlining FNoUnderlining >
       <FUnderline No >
       <FDoubleUnderline No >
       <FNumericUnderline No >
       <FOverline No >
       <FStrike No >
       <FChangeBar No >
       <FOutline No >
       <FShadow No >
       <FPairKern No >
       <FCase FAsTyped >
       <FPosition FNormal >
       <FSupScript No >
       <FSubScript No >
       <FDX  0.0 pt>
       <FDY  0.0 pt>
       <FDW  0.0 pt>
       <FSeparation 0>
       <FColor `Black'>
      > # end of PgfFont
     > # end of Pgf
     <ParaLine 
      <Font 
       <FTag `program'>
      > # end of Font
      <String `a.insert(a.end(), '>
      <String `t)'>
     >
    > # end of Para
   > # end of CellContent
  > # end of Cell
  <Cell 
   <CellContent 
    <Notes 
    > # end of Notes
    <Para 
     <Unique 39395>
     <PgfTag `CellBody'>
     <ParaLine 
      <Font 
       <FTag `program'>
      > # end of Font
      <String `vector'>
      <Font 
       <FTag `'>
      > # end of Font
      <String `, '>
      <Font 
       <FTag `program'>
      > # end of Font
      <String `list'>
      <Font 
       <FTag `'>
      > # end of Font
      <String `, '>
      <Font 
       <FTag `program'>
      > # end of Font
      <String `deque'>
     >
    > # end of Para
   > # end of CellContent
  > # end of Cell
 > # end of Row
 <Row 
  <RowMaxHeight  14.0">
  <RowHeight  0.27778">
  <Cell 
   <CellContent 
    <Notes 
    > # end of Notes
    <Para 
     <Unique 39397>
     <PgfTag `CellBody'>
     <Pgf 
      <PgfFont 
       <FTag `'>
       <FFamily `Courier'>
       <FVar `Regular'>
       <FWeight `Regular'>
       <FAngle `Regular'>
       <FPostScriptName `Courier'>
       <FSize  9.0 pt>
       <FUnderlining FNoUnderlining >
       <FUnderline No >
       <FDoubleUnderline No >
       <FNumericUnderline No >
       <FOverline No >
       <FStrike No >
       <FChangeBar No >
       <FOutline No >
       <FShadow No >
       <FPairKern No >
       <FCase FAsTyped >
       <FPosition FNormal >
       <FSupScript No >
       <FSubScript No >
       <FDX  0.0 pt>
       <FDY  0.0 pt>
       <FDW  0.0 pt>
       <FSeparation 0>
       <FColor `Black'>
      > # end of PgfFont
     > # end of Pgf
     <ParaLine 
      <String `a.pop_front()'>
     >
    > # end of Para
   > # end of CellContent
  > # end of Cell
  <Cell 
   <CellContent 
    <Notes 
    > # end of Notes
    <Para 
     <Unique 39399>
     <PgfTag `CellBody'>
     <Pgf 
      <PgfFont 
       <FTag `'>
       <FFamily `Courier'>
       <FVar `Regular'>
       <FWeight `Regular'>
       <FAngle `Regular'>
       <FPostScriptName `Courier'>
       <FSize  9.0 pt>
       <FUnderlining FNoUnderlining >
       <FUnderline No >
       <FDoubleUnderline No >
       <FNumericUnderline No >
       <FOverline No >
       <FStrike No >
       <FChangeBar No >
       <FOutline No >
       <FShadow No >
       <FPairKern No >
       <FCase FAsTyped >
       <FPosition FNormal >
       <FSupScript No >
       <FSubScript No >
       <FDX  0.0 pt>
       <FDY  0.0 pt>
       <FDW  0.0 pt>
       <FSeparation 0>
       <FColor `Black'>
      > # end of PgfFont
     > # end of Pgf
     <ParaLine 
      <String `void'>
     >
    > # end of Para
   > # end of CellContent
  > # end of Cell
  <Cell 
   <CellContent 
    <Notes 
    > # end of Notes
    <Para 
     <Unique 39401>
     <PgfTag `CellBody'>
     <Pgf 
      <PgfFont 
       <FTag `'>
       <FFamily `Courier'>
       <FVar `Regular'>
       <FWeight `Regular'>
       <FAngle `Regular'>
       <FPostScriptName `Courier'>
       <FSize  9.0 pt>
       <FUnderlining FNoUnderlining >
       <FUnderline No >
       <FDoubleUnderline No >
       <FNumericUnderline No >
       <FOverline No >
       <FStrike No >
       <FChangeBar No >
       <FOutline No >
       <FShadow No >
       <FPairKern No >
       <FCase FAsTyped >
       <FPosition FNormal >
       <FSupScript No >
       <FSubScript No >
       <FDX  0.0 pt>
       <FDY  0.0 pt>
       <FDW  0.0 pt>
       <FSeparation 0>
       <FColor `Black'>
      > # end of PgfFont
     > # end of Pgf
     <ParaLine 
      <Font 
       <FTag `program'>
      > # end of Font
      <String `a.erase(a.begin())'>
     >
    > # end of Para
   > # end of CellContent
  > # end of Cell
  <Cell 
   <CellContent 
    <Notes 
    > # end of Notes
    <Para 
     <Unique 39403>
     <PgfTag `CellBody'>
     <ParaLine 
      <Font 
       <FTag `program'>
      > # end of Font
      <String `list'>
      <Font 
       <FTag `'>
      > # end of Font
      <String `, '>
      <Font 
       <FTag `program'>
      > # end of Font
      <String `deque'>
     >
    > # end of Para
   > # end of CellContent
  > # end of Cell
 > # end of Row
 <Row 
  <RowMaxHeight  14.0">
  <RowHeight  0.27778">
  <Cell 
   <CellContent 
    <Notes 
    > # end of Notes
    <Para 
     <Unique 39405>
     <PgfTag `CellBody'>
     <Pgf 
      <PgfFont 
       <FTag `'>
       <FFamily `Courier'>
       <FVar `Regular'>
       <FWeight `Regular'>
       <FAngle `Regular'>
       <FPostScriptName `Courier'>
       <FSize  9.0 pt>
       <FUnderlining FNoUnderlining >
       <FUnderline No >
       <FDoubleUnderline No >
       <FNumericUnderline No >
       <FOverline No >
       <FStrike No >
       <FChangeBar No >
       <FOutline No >
       <FShadow No >
       <FPairKern No >
       <FCase FAsTyped >
       <FPosition FNormal >
       <FSupScript No >
       <FSubScript No >
       <FDX  0.0 pt>
       <FDY  0.0 pt>
       <FDW  0.0 pt>
       <FSeparation 0>
       <FColor `Black'>
      > # end of PgfFont
     > # end of Pgf
     <ParaLine 
      <String `a.pop_back()'>
     >
    > # end of Para
   > # end of CellContent
  > # end of Cell
  <Cell 
   <CellContent 
    <Notes 
    > # end of Notes
    <Para 
     <Unique 39407>
     <PgfTag `CellBody'>
     <Pgf 
      <PgfFont 
       <FTag `'>
       <FFamily `Courier'>
       <FVar `Regular'>
       <FWeight `Regular'>
       <FAngle `Regular'>
       <FPostScriptName `Courier'>
       <FSize  9.0 pt>
       <FUnderlining FNoUnderlining >
       <FUnderline No >
       <FDoubleUnderline No >
       <FNumericUnderline No >
       <FOverline No >
       <FStrike No >
       <FChangeBar No >
       <FOutline No >
       <FShadow No >
       <FPairKern No >
       <FCase FAsTyped >
       <FPosition FNormal >
       <FSupScript No >
       <FSubScript No >
       <FDX  0.0 pt>
       <FDY  0.0 pt>
       <FDW  0.0 pt>
       <FSeparation 0>
       <FColor `Black'>
      > # end of PgfFont
     > # end of Pgf
     <ParaLine 
      <String `void'>
     >
    > # end of Para
   > # end of CellContent
  > # end of Cell
  <Cell 
   <CellContent 
    <Notes 
    > # end of Notes
    <Para 
     <Unique 39409>
     <PgfTag `CellBody'>
     <Pgf 
      <PgfFont 
       <FTag `'>
       <FFamily `Courier'>
       <FVar `Regular'>
       <FWeight `Regular'>
       <FAngle `Regular'>
       <FPostScriptName `Courier'>
       <FSize  9.0 pt>
       <FUnderlining FNoUnderlining >
       <FUnderline No >
       <FDoubleUnderline No >
       <FNumericUnderline No >
       <FOverline No >
       <FStrike No >
       <FChangeBar No >
       <FOutline No >
       <FShadow No >
       <FPairKern No >
       <FCase FAsTyped >
       <FPosition FNormal >
       <FSupScript No >
       <FSubScript No >
       <FDX  0.0 pt>
       <FDY  0.0 pt>
       <FDW  0.0 pt>
       <FSeparation 0>
       <FColor `Black'>
      > # end of PgfFont
     > # end of Pgf
     <ParaLine 
      <Font 
       <FTag `program'>
      > # end of Font
      <String `a.erase(--a.end())'>
     >
    > # end of Para
   > # end of CellContent
  > # end of Cell
  <Cell 
   <CellContent 
    <Notes 
    > # end of Notes
    <Para 
     <Unique 39411>
     <PgfTag `CellBody'>
     <ParaLine 
      <Font 
       <FTag `program'>
      > # end of Font
      <String `vector'>
      <Font 
       <FTag `'>
      > # end of Font
      <String `, '>
      <Font 
       <FTag `program'>
      > # end of Font
      <String `list'>
      <Font 
       <FTag `'>
      > # end of Font
      <String `, '>
      <Font 
       <FTag `program'>
      > # end of Font
      <String `deque'>
     >
    > # end of Para
   > # end of CellContent
  > # end of Cell
 > # end of Row
 <Row 
  <RowMaxHeight  14.0">
  <RowHeight  0.59722">
  <Cell 
   <CellContent 
    <Notes 
    > # end of Notes
    <Para 
     <Unique 39413>
     <PgfTag `CellBody'>
     <Pgf 
      <PgfFont 
       <FTag `'>
       <FFamily `Courier'>
       <FVar `Regular'>
       <FWeight `Regular'>
       <FAngle `Regular'>
       <FPostScriptName `Courier'>
       <FSize  9.0 pt>
       <FUnderlining FNoUnderlining >
       <FUnderline No >
       <FDoubleUnderline No >
       <FNumericUnderline No >
       <FOverline No >
       <FStrike No >
       <FChangeBar No >
       <FOutline No >
       <FShadow No >
       <FPairKern No >
       <FCase FAsTyped >
       <FPosition FNormal >
       <FSupScript No >
       <FSubScript No >
       <FDX  0.0 pt>
       <FDY  0.0 pt>
       <FDW  0.0 pt>
       <FSeparation 0>
       <FColor `Black'>
      > # end of PgfFont
     > # end of Pgf
     <ParaLine 
      <String `a[n]'>
     >
    > # end of Para
   > # end of CellContent
  > # end of Cell
  <Cell 
   <CellContent 
    <Notes 
    > # end of Notes
    <Para 
     <Unique 39415>
     <PgfTag `CellBody'>
     <Pgf 
      <PgfFont 
       <FTag `'>
       <FFamily `Courier'>
       <FVar `Regular'>
       <FWeight `Regular'>
       <FAngle `Regular'>
       <FPostScriptName `Courier'>
       <FSize  9.0 pt>
       <FUnderlining FNoUnderlining >
       <FUnderline No >
       <FDoubleUnderline No >
       <FNumericUnderline No >
       <FOverline No >
       <FStrike No >
       <FChangeBar No >
       <FOutline No >
       <FShadow No >
       <FPairKern No >
       <FCase FAsTyped >
       <FPosition FNormal >
       <FSupScript No >
       <FSubScript No >
       <FDX  0.0 pt>
       <FDY  0.0 pt>
       <FDW  0.0 pt>
       <FSeparation 0>
       <FColor `Black'>
      > # end of PgfFont
     > # end of Pgf
     <ParaLine 
      <Font 
       <FTag `program'>
      > # end of Font
      <String `reference;'>
     >
    > # end of Para
    <Para 
     <Unique 39416>
     <PgfTag `CellBody'>
     <ParaLine 
      <Font 
       <FTag `program'>
      > # end of Font
      <String `const'>
      <String `_reference'>
      <Font 
       <FTag `'>
      > # end of Font
      <String ` f'>
      <String `or '>
     >
     <ParaLine 
      <String `constant '>
      <Font 
       <FTag `program'>
      > # end of Font
      <String `a'>
     >
    > # end of Para
   > # end of CellContent
  > # end of Cell
  <Cell 
   <CellContent 
    <Notes 
    > # end of Notes
    <Para 
     <Unique 39418>
     <PgfTag `CellBody'>
     <Pgf 
      <PgfFont 
       <FTag `'>
       <FFamily `Courier'>
       <FVar `Regular'>
       <FWeight `Regular'>
       <FAngle `Regular'>
       <FPostScriptName `Courier'>
       <FSize  9.0 pt>
       <FUnderlining FNoUnderlining >
       <FUnderline No >
       <FDoubleUnderline No >
       <FNumericUnderline No >
       <FOverline No >
       <FStrike No >
       <FChangeBar No >
       <FOutline No >
       <FShadow No >
       <FPairKern No >
       <FCase FAsTyped >
       <FPosition FNormal >
       <FSupScript No >
       <FSubScript No >
       <FDX  0.0 pt>
       <FDY  0.0 pt>
       <FDW  0.0 pt>
       <FSeparation 0>
       <FColor `Black'>
      > # end of PgfFont
     > # end of Pgf
     <ParaLine 
      <Font 
       <FTag `program'>
      > # end of Font
      <String `*(a.begin() + n)'>
     >
    > # end of Para
   > # end of CellContent
  > # end of Cell
  <Cell 
   <CellContent 
    <Notes 
    > # end of Notes
    <Para 
     <Unique 39420>
     <PgfTag `CellBody'>
     <ParaLine 
      <Font 
       <FTag `program'>
      > # end of Font
      <String `vector'>
      <Font 
       <FTag `'>
      > # end of Font
      <String `, '>
      <Font 
       <FTag `program'>
      > # end of Font
      <String `deque'>
     >
    > # end of Para
   > # end of CellContent
  > # end of Cell
 > # end of Row
> # end of TblBody
> # end of Tbl
<Tbl 
<TblID 14>
<TblTag `Format A'>
<TblFormat 
 <TblColumn 
  <TblColumnNum 0>
  <TblColumnWidth  1.0">
  <TblColumnH 
   <Pgf 
    <PgfTag `CellHeading'>
    <PgfAlignment Center >
    <PgfFont 
     <FTag `'>
     <FFamily `Times'>
     <FVar `Regular'>
     <FWeight `Regular'>
     <FAngle `Regular'>
     <FPostScriptName `Times-Roman'>
     <FSize  12.0 pt>
     <FUnderlining FNoUnderlining >
     <FUnderline No >
     <FDoubleUnderline No >
     <FNumericUnderline No >
     <FOverline No >
     <FStrike No >
     <FChangeBar No >
     <FOutline No >
     <FShadow No >
     <FPairKern Yes >
     <FCase FAsTyped >
     <FPosition FNormal >
     <FSupScript No >
     <FSubScript No >
     <FDX  0.0 pt>
     <FDY  0.0 pt>
     <FDW  0.0 pt>
     <FSeparation 0>
     <FColor `Black'>
    > # end of PgfFont
    <PgfHyphenate No >
    <PgfCellAlignment Middle >
    <PgfCellMargins  0.0 pt 2.0 pt 0.0 pt 2.0 pt>
   > # end of Pgf
  > # end of TblColumnH
  <TblColumnBody 
   <PgfTag `CellBody'>
   <Pgf 
    <PgfFont 
     <FTag `'>
     <FFamily `Times'>
     <FVar `Regular'>
     <FWeight `Regular'>
     <FAngle `Regular'>
     <FPostScriptName `Times-Roman'>
     <FSize  12.0 pt>
     <FUnderlining FNoUnderlining >
     <FUnderline No >
     <FDoubleUnderline No >
     <FNumericUnderline No >
     <FOverline No >
     <FStrike No >
     <FChangeBar No >
     <FOutline No >
     <FShadow No >
     <FPairKern Yes >
     <FCase FAsTyped >
     <FPosition FNormal >
     <FSupScript No >
     <FSubScript No >
     <FDX  0.0 pt>
     <FDY  0.0 pt>
     <FDW  0.0 pt>
     <FSeparation 0>
     <FColor `Black'>
    > # end of PgfFont
   > # end of Pgf
  > # end of TblColumnBody
  <TblColumnF 
   <Pgf 
    <PgfTag `CellHeading'>
    <PgfAlignment Center >
    <PgfHyphenate No >
    <PgfCellAlignment Middle >
    <PgfCellMargins  0.0 pt 2.0 pt 0.0 pt 2.0 pt>
   > # end of Pgf
  > # end of TblColumnF
 > # end of TblColumn
 <TblColumn 
  <TblColumnNum 1>
  <TblColumnWidth  1.0">
  <TblColumnH 
  > # end of TblColumnH
  <TblColumnBody 
   <PgfTag `CellBody'>
   <Pgf 
    <PgfFont 
     <FTag `'>
     <FFamily `Times'>
     <FVar `Regular'>
     <FWeight `Regular'>
     <FAngle `Regular'>
     <FPostScriptName `Times-Roman'>
     <FSize  12.0 pt>
     <FUnderlining FNoUnderlining >
     <FUnderline No >
     <FDoubleUnderline No >
     <FNumericUnderline No >
     <FOverline No >
     <FStrike No >
     <FChangeBar No >
     <FOutline No >
     <FShadow No >
     <FPairKern Yes >
     <FCase FAsTyped >
     <FPosition FNormal >
     <FSupScript No >
     <FSubScript No >
     <FDX  0.0 pt>
     <FDY  0.0 pt>
     <FDW  0.0 pt>
     <FSeparation 0>
     <FColor `Black'>
    > # end of PgfFont
   > # end of Pgf
  > # end of TblColumnBody
  <TblColumnF 
   <Pgf 
    <PgfTag `CellHeading'>
    <PgfAlignment Center >
    <PgfHyphenate No >
    <PgfCellAlignment Middle >
    <PgfCellMargins  0.0 pt 2.0 pt 0.0 pt 2.0 pt>
   > # end of Pgf
  > # end of TblColumnF
 > # end of TblColumn
 <TblColumn 
  <TblColumnNum 2>
  <TblColumnWidth  1.0">
  <TblColumnH 
  > # end of TblColumnH
  <TblColumnBody 
   <PgfTag `CellBody'>
   <Pgf 
    <PgfFont 
     <FTag `'>
     <FFamily `Times'>
     <FVar `Regular'>
     <FWeight `Regular'>
     <FAngle `Regular'>
     <FPostScriptName `Times-Roman'>
     <FSize  12.0 pt>
     <FUnderlining FNoUnderlining >
     <FUnderline No >
     <FDoubleUnderline No >
     <FNumericUnderline No >
     <FOverline No >
     <FStrike No >
     <FChangeBar No >
     <FOutline No >
     <FShadow No >
     <FPairKern Yes >
     <FCase FAsTyped >
     <FPosition FNormal >
     <FSupScript No >
     <FSubScript No >
     <FDX  0.0 pt>
     <FDY  0.0 pt>
     <FDW  0.0 pt>
     <FSeparation 0>
     <FColor `Black'>
    > # end of PgfFont
   > # end of Pgf
  > # end of TblColumnBody
  <TblColumnF 
   <Pgf 
    <PgfTag `CellHeading'>
    <PgfAlignment Center >
    <PgfHyphenate No >
    <PgfCellAlignment Middle >
    <PgfCellMargins  0.0 pt 2.0 pt 0.0 pt 2.0 pt>
   > # end of Pgf
  > # end of TblColumnF
 > # end of TblColumn
 <TblColumn 
  <TblColumnNum 3>
  <TblColumnWidth  1.0">
  <TblColumnH 
  > # end of TblColumnH
  <TblColumnBody 
   <PgfTag `CellBody'>
   <Pgf 
    <PgfFont 
     <FTag `'>
     <FFamily `Times'>
     <FVar `Regular'>
     <FWeight `Regular'>
     <FAngle `Regular'>
     <FPostScriptName `Times-Roman'>
     <FSize  12.0 pt>
     <FUnderlining FNoUnderlining >
     <FUnderline No >
     <FDoubleUnderline No >
     <FNumericUnderline No >
     <FOverline No >
     <FStrike No >
     <FChangeBar No >
     <FOutline No >
     <FShadow No >
     <FPairKern Yes >
     <FCase FAsTyped >
     <FPosition FNormal >
     <FSupScript No >
     <FSubScript No >
     <FDX  0.0 pt>
     <FDY  0.0 pt>
     <FDW  0.0 pt>
     <FSeparation 0>
     <FColor `Black'>
    > # end of PgfFont
   > # end of Pgf
  > # end of TblColumnBody
  <TblColumnF 
   <Pgf 
    <PgfTag `CellHeading'>
    <PgfAlignment Center >
    <PgfHyphenate No >
    <PgfCellAlignment Middle >
    <PgfCellMargins  0.0 pt 2.0 pt 0.0 pt 2.0 pt>
   > # end of Pgf
  > # end of TblColumnF
 > # end of TblColumn
 <TblColumn 
  <TblColumnNum 4>
  <TblColumnWidth  1.0">
  <TblColumnH 
  > # end of TblColumnH
  <TblColumnBody 
   <PgfTag `CellBody'>
   <Pgf 
    <PgfFont 
     <FTag `'>
     <FFamily `Times'>
     <FVar `Regular'>
     <FWeight `Regular'>
     <FAngle `Regular'>
     <FPostScriptName `Times-Roman'>
     <FSize  12.0 pt>
     <FUnderlining FNoUnderlining >
     <FUnderline No >
     <FDoubleUnderline No >
     <FNumericUnderline No >
     <FOverline No >
     <FStrike No >
     <FChangeBar No >
     <FOutline No >
     <FShadow No >
     <FPairKern Yes >
     <FCase FAsTyped >
     <FPosition FNormal >
     <FSupScript No >
     <FSubScript No >
     <FDX  0.0 pt>
     <FDY  0.0 pt>
     <FDW  0.0 pt>
     <FSeparation 0>
     <FColor `Black'>
    > # end of PgfFont
   > # end of Pgf
  > # end of TblColumnBody
  <TblColumnF 
   <Pgf 
    <PgfTag `CellHeading'>
    <PgfAlignment Center >
    <PgfHyphenate No >
    <PgfCellAlignment Middle >
    <PgfCellMargins  0.0 pt 2.0 pt 0.0 pt 2.0 pt>
   > # end of Pgf
  > # end of TblColumnF
 > # end of TblColumn
 <TblCellMargins  4.0 pt 6.0 pt 4.0 pt 4.0 pt>
 <TblInitNumBodyRows 8>
> # end of TblFormat
<TblNumColumns 5>
<Unique 17125>
<TblColumnWidth  1.1">
<TblColumnWidth  1.5">
<TblColumnWidth  1.4">
<TblColumnWidth  1.9">
<TblColumnWidth  0.6">
<TblTitleContent 
 <Notes 
 > # end of Notes
 <Para 
  <Unique 5301>
  <Pgf 
   <PgfTag `TableTitle'>
   <PgfFont 
    <FTag `'>
    <FFamily `Times'>
    <FVar `Regular'>
    <FWeight `Bold'>
    <FAngle `Regular'>
    <FPostScriptName `Times-Bold'>
    <FSize  12.0 pt>
    <FUnderlining FNoUnderlining >
    <FUnderline No >
    <FDoubleUnderline No >
    <FNumericUnderline No >
    <FOverline No >
    <FStrike No >
    <FChangeBar No >
    <FOutline No >
    <FShadow No >
    <FPairKern Yes >
    <FCase FAsTyped >
    <FPosition FNormal >
    <FSupScript No >
    <FSubScript No >
    <FDX  0.0 pt>
    <FDY  0.0 pt>
    <FDW  0.0 pt>
    <FSeparation 0>
    <FColor `Black'>
   > # end of PgfFont
   <PgfAutoNum Yes >
   <PgfNumFormat `T:Table <n+\>: '>
   <PgfNumberFont `'>
   <PgfNumAtEnd No >
   <PgfCellAlignment Top >
   <PgfCellMargins  0.0 pt 0.0 pt 0.0 pt 0.0 pt>
  > # end of Pgf
  <PgfNumString `Table 8: '>
  <ParaLine 
   <String `Container requirements'>
  >
 > # end of Para
> # end of TblTitleContent
<TblH 
 <Row 
  <RowMaxHeight  14.0">
  <RowHeight  0.5">
  <Cell 
   <CellContent 
    <Notes 
    > # end of Notes
    <Para 
     <Unique 5311>
     <Pgf 
      <PgfTag `CellHeading'>
      <PgfFont 
       <FTag `'>
       <FFamily `Times'>
       <FVar `Regular'>
       <FWeight `Regular'>
       <FAngle `Regular'>
       <FPostScriptName `Times-Roman'>
       <FSize  10.0 pt>
       <FUnderlining FNoUnderlining >
       <FUnderline No >
       <FDoubleUnderline No >
       <FNumericUnderline No >
       <FOverline No >
       <FStrike No >
       <FChangeBar No >
       <FOutline No >
       <FShadow No >
       <FPairKern Yes >
       <FCase FAsTyped >
       <FPosition FNormal >
       <FSupScript No >
       <FSubScript No >
       <FDX  0.0 pt>
       <FDY  0.0 pt>
       <FDW  0.0 pt>
       <FSeparation 0>
       <FColor `Black'>
      > # end of PgfFont
      <PgfAutoNum No >
      <PgfCellAlignment Middle >
      <PgfCellMargins  0.0 pt 2.0 pt 0.0 pt 2.0 pt>
     > # end of Pgf
     <ParaLine 
      <String `expression'>
     >
    > # end of Para
   > # end of CellContent
  > # end of Cell
  <Cell 
   <CellContent 
    <Notes 
    > # end of Notes
    <Para 
     <Unique 5313>
     <ParaLine 
      <String `return type'>
     >
    > # end of Para
   > # end of CellContent
  > # end of Cell
  <Cell 
   <CellContent 
    <Notes 
    > # end of Notes
    <Para 
     <Unique 5315>
     <ParaLine 
      <String `operational semantics'>
     >
    > # end of Para
   > # end of CellContent
  > # end of Cell
  <Cell 
   <CellContent 
    <Notes 
    > # end of Notes
    <Para 
     <Unique 5317>
     <ParaLine 
      <String `assertion/note'>
     >
    > # end of Para
    <Para 
     <Unique 5318>
     <ParaLine 
      <String `pre/post-condition'>
     >
    > # end of Para
   > # end of CellContent
  > # end of Cell
  <Cell 
   <CellContent 
    <Notes 
    > # end of Notes
    <Para 
     <Unique 5320>
     <ParaLine 
      <String `complex'>
     >
     <ParaLine 
      <String `ity'>
     >
    > # end of Para
   > # end of CellContent
  > # end of Cell
 > # end of Row
> # end of TblH
<TblBody 
 <Row 
  <RowMaxHeight  14.0">
  <RowHeight  0.44444">
  <Cell 
   <CellContent 
    <Notes 
    > # end of Notes
    <Para 
     <Unique 5322>
     <PgfTag `CellBody'>
     <Pgf 
      <PgfFont 
       <FTag `'>
       <FFamily `Courier'>
       <FVar `Regular'>
       <FWeight `Regular'>
       <FAngle `Regular'>
       <FPostScriptName `Courier'>
       <FSize  9.0 pt>
       <FUnderlining FNoUnderlining >
       <FUnderline No >
       <FDoubleUnderline No >
       <FNumericUnderline No >
       <FOverline No >
       <FStrike No >
       <FChangeBar No >
       <FOutline No >
       <FShadow No >
       <FPairKern No >
       <FCase FAsTyped >
       <FPosition FNormal >
       <FSupScript No >
       <FSubScript No >
       <FDX  0.0 pt>
       <FDY  0.0 pt>
       <FDW  0.0 pt>
       <FSeparation 0>
       <FColor `Black'>
      > # end of PgfFont
     > # end of Pgf
     <ParaLine 
      <String `X::value_type'>
     >
    > # end of Para
   > # end of CellContent
  > # end of Cell
  <Cell 
   <CellContent 
    <Notes 
    > # end of Notes
    <Para 
     <Unique 5324>
     <PgfTag `CellBody'>
     <Pgf 
      <PgfFont 
       <FTag `'>
       <FFamily `Courier'>
       <FVar `Regular'>
       <FWeight `Regular'>
       <FAngle `Regular'>
       <FPostScriptName `Courier'>
       <FSize  9.0 pt>
       <FUnderlining FNoUnderlining >
       <FUnderline No >
       <FDoubleUnderline No >
       <FNumericUnderline No >
       <FOverline No >
       <FStrike No >
       <FChangeBar No >
       <FOutline No >
       <FShadow No >
       <FPairKern No >
       <FCase FAsTyped >
       <FPosition FNormal >
       <FSupScript No >
       <FSubScript No >
       <FDX  0.0 pt>
       <FDY  0.0 pt>
       <FDW  0.0 pt>
       <FSeparation 0>
       <FColor `Black'>
      > # end of PgfFont
     > # end of Pgf
     <ParaLine 
      <Font 
       <FTag `program'>
      > # end of Font
      <String `T'>
     >
    > # end of Para
   > # end of CellContent
  > # end of Cell
  <Cell 
   <CellContent 
    <Notes 
    > # end of Notes
    <Para 
     <Unique 5326>
     <PgfTag `CellBody'>
     <ParaLine 
     >
    > # end of Para
   > # end of CellContent
  > # end of Cell
  <Cell 
   <CellContent 
    <Notes 
    > # end of Notes
    <Para 
     <Unique 5328>
     <PgfTag `CellBody'>
     <ParaLine 
     >
    > # end of Para
   > # end of CellContent
  > # end of Cell
  <Cell 
   <CellContent 
    <Notes 
    > # end of Notes
    <Para 
     <Unique 5330>
     <PgfTag `CellBody'>
     <ParaLine 
      <String `compile '>
     >
     <ParaLine 
      <String `time'>
     >
    > # end of Para
   > # end of CellContent
  > # end of Cell
 > # end of Row
 <Row 
  <RowMaxHeight  14.0">
  <RowHeight  0.44444">
  <Cell 
   <CellContent 
    <Notes 
    > # end of Notes
    <Para 
     <Unique 5332>
     <PgfTag `CellBody'>
     <Pgf 
      <PgfFont 
       <FTag `'>
       <FFamily `Courier'>
       <FVar `Regular'>
       <FWeight `Regular'>
       <FAngle `Regular'>
       <FPostScriptName `Courier'>
       <FSize  9.0 pt>
       <FUnderlining FNoUnderlining >
       <FUnderline No >
       <FDoubleUnderline No >
       <FNumericUnderline No >
       <FOverline No >
       <FStrike No >
       <FChangeBar No >
       <FOutline No >
       <FShadow No >
       <FPairKern No >
       <FCase FAsTyped >
       <FPosition FNormal >
       <FSupScript No >
       <FSubScript No >
       <FDX  0.0 pt>
       <FDY  0.0 pt>
       <FDW  0.0 pt>
       <FSeparation 0>
       <FColor `Black'>
      > # end of PgfFont
     > # end of Pgf
     <ParaLine 
      <String `X::reference'>
     >
    > # end of Para
   > # end of CellContent
  > # end of Cell
  <Cell 
   <CellContent 
    <Notes 
    > # end of Notes
    <Para 
     <Unique 5334>
     <PgfTag `CellBody'>
     <ParaLine 
     >
    > # end of Para
   > # end of CellContent
  > # end of Cell
  <Cell 
   <CellContent 
    <Notes 
    > # end of Notes
    <Para 
     <Unique 5336>
     <PgfTag `CellBody'>
     <ParaLine 
     >
    > # end of Para
   > # end of CellContent
  > # end of Cell
  <Cell 
   <CellContent 
    <Notes 
    > # end of Notes
    <Para 
     <Unique 5338>
     <PgfTag `CellBody'>
     <ParaLine 
     >
    > # end of Para
   > # end of CellContent
  > # end of Cell
  <Cell 
   <CellContent 
    <Notes 
    > # end of Notes
    <Para 
     <Unique 5340>
     <PgfTag `CellBody'>
     <ParaLine 
      <String `compile '>
     >
     <ParaLine 
      <String `time'>
     >
    > # end of Para
   > # end of CellContent
  > # end of Cell
 > # end of Row
 <Row 
  <RowMaxHeight  14.0">
  <RowHeight  0.44444">
  <Cell 
   <CellContent 
    <Notes 
    > # end of Notes
    <Para 
     <Unique 5342>
     <PgfTag `CellBody'>
     <Pgf 
      <PgfFont 
       <FTag `'>
       <FFamily `Courier'>
       <FVar `Regular'>
       <FWeight `Regular'>
       <FAngle `Regular'>
       <FPostScriptName `Courier'>
       <FSize  9.0 pt>
       <FUnderlining FNoUnderlining >
       <FUnderline No >
       <FDoubleUnderline No >
       <FNumericUnderline No >
       <FOverline No >
       <FStrike No >
       <FChangeBar No >
       <FOutline No >
       <FShadow No >
       <FPairKern No >
       <FCase FAsTyped >
       <FPosition FNormal >
       <FSupScript No >
       <FSubScript No >
       <FDX  0.0 pt>
       <FDY  0.0 pt>
       <FDW  0.0 pt>
       <FSeparation 0>
       <FColor `Black'>
      > # end of PgfFont
     > # end of Pgf
     <ParaLine 
      <String `X::const_refe'>
     >
     <ParaLine 
      <String `rence'>
     >
    > # end of Para
   > # end of CellContent
  > # end of Cell
  <Cell 
   <CellContent 
    <Notes 
    > # end of Notes
    <Para 
     <Unique 5344>
     <PgfTag `CellBody'>
     <ParaLine 
     >
    > # end of Para
   > # end of CellContent
  > # end of Cell
  <Cell 
   <CellContent 
    <Notes 
    > # end of Notes
    <Para 
     <Unique 5346>
     <PgfTag `CellBody'>
     <ParaLine 
     >
    > # end of Para
   > # end of CellContent
  > # end of Cell
  <Cell 
   <CellContent 
    <Notes 
    > # end of Notes
    <Para 
     <Unique 5348>
     <PgfTag `CellBody'>
     <Pgf 
      <PgfFont 
       <FTag `'>
       <FFamily `Courier'>
       <FVar `Regular'>
       <FWeight `Regular'>
       <FAngle `Regular'>
       <FPostScriptName `Courier'>
       <FSize  9.0 pt>
       <FUnderlining FNoUnderlining >
       <FUnderline No >
       <FDoubleUnderline No >
       <FNumericUnderline No >
       <FOverline No >
       <FStrike No >
       <FChangeBar No >
       <FOutline No >
       <FShadow No >
       <FPairKern No >
       <FCase FAsTyped >
       <FPosition FNormal >
       <FSupScript No >
       <FSubScript No >
       <FDX  0.0 pt>
       <FDY  0.0 pt>
       <FDW  0.0 pt>
       <FSeparation 0>
       <FColor `Black'>
      > # end of PgfFont
     > # end of Pgf
     <ParaLine 
      <Font 
       <FTag `program'>
      > # end of Font
     >
    > # end of Para
   > # end of CellContent
  > # end of Cell
  <Cell 
   <CellContent 
    <Notes 
    > # end of Notes
    <Para 
     <Unique 5350>
     <PgfTag `CellBody'>
     <ParaLine 
      <String `compile '>
      <Char HardReturn >
     >
     <ParaLine 
      <String `time'>
     >
    > # end of Para
   > # end of CellContent
  > # end of Cell
 > # end of Row
 <Row 
  <RowMaxHeight  14.0">
  <RowHeight  0.44444">
  <Cell 
   <CellContent 
    <Notes 
    > # end of Notes
    <Para 
     <Unique 6370>
     <PgfTag `CellBody'>
     <Pgf 
      <PgfFont 
       <FTag `'>
       <FFamily `Courier'>
       <FVar `Regular'>
       <FWeight `Regular'>
       <FAngle `Regular'>
       <FPostScriptName `Courier'>
       <FSize  9.0 pt>
       <FUnderlining FNoUnderlining >
       <FUnderline No >
       <FDoubleUnderline No >
       <FNumericUnderline No >
       <FOverline No >
       <FStrike No >
       <FChangeBar No >
       <FOutline No >
       <FShadow No >
       <FPairKern No >
       <FCase FAsTyped >
       <FPosition FNormal >
       <FSupScript No >
       <FSubScript No >
       <FDX  0.0 pt>
       <FDY  0.0 pt>
       <FDW  0.0 pt>
       <FSeparation 0>
       <FColor `Black'>
      > # end of PgfFont
     > # end of Pgf
     <ParaLine 
      <String `X::pointer'>
     >
    > # end of Para
   > # end of CellContent
  > # end of Cell
  <Cell 
   <CellContent 
    <Notes 
    > # end of Notes
    <Para 
     <Unique 6372>
     <PgfTag `CellBody'>
     <ParaLine 
      <String `a pointer type pointing '>
     >
     <ParaLine 
      <String `to '>
      <Font 
       <FTag `program'>
      > # end of Font
      <String `X::reference'>
     >
    > # end of Para
   > # end of CellContent
  > # end of Cell
  <Cell 
   <CellContent 
    <Notes 
    > # end of Notes
    <Para 
     <Unique 6374>
     <PgfTag `CellBody'>
     <ParaLine 
     >
    > # end of Para
   > # end of CellContent
  > # end of Cell
  <Cell 
   <CellContent 
    <Notes 
    > # end of Notes
    <Para 
     <Unique 6376>
     <PgfTag `CellBody'>
     <ParaLine 
      <String `pointer to '>
      <Font 
       <FTag `program'>
      > # end of Font
      <String `T'>
      <Font 
       <FTag `'>
      > # end of Font
      <String ` in the memory '>
     >
     <ParaLine 
      <String `model used by the container'>
     >
    > # end of Para
   > # end of CellContent
  > # end of Cell
  <Cell 
   <CellContent 
    <Notes 
    > # end of Notes
    <Para 
     <Unique 6378>
     <PgfTag `CellBody'>
     <ParaLine 
      <String `compile '>
     >
     <ParaLine 
      <String `time'>
     >
    > # end of Para
   > # end of CellContent
  > # end of Cell
 > # end of Row
 <Row 
  <Conditional 
  > # end of Conditional
  <RowMaxHeight  14.0">
  <RowHeight  0.44444">
  <Cell 
   <CellContent 
    <Notes 
    > # end of Notes
    <Para 
     <Unique 5623>
     <PgfTag `CellBody'>
     <Pgf 
      <PgfFont 
       <FTag `'>
       <FFamily `Courier'>
       <FVar `Regular'>
       <FWeight `Regular'>
       <FAngle `Regular'>
       <FPostScriptName `Courier'>
       <FSize  9.0 pt>
       <FUnderlining FNoUnderlining >
       <FUnderline No >
       <FDoubleUnderline No >
       <FNumericUnderline No >
       <FOverline No >
       <FStrike No >
       <FChangeBar No >
       <FOutline No >
       <FShadow No >
       <FPairKern No >
       <FCase FAsTyped >
       <FPosition FNormal >
       <FSupScript No >
       <FSubScript No >
       <FDX  0.0 pt>
       <FDY  0.0 pt>
       <FDW  0.0 pt>
       <FSeparation 0>
       <FColor `Black'>
      > # end of PgfFont
     > # end of Pgf
     <ParaLine 
      <String `X:'>
      <String `:i'>
      <String `terator'>
     >
    > # end of Para
   > # end of CellContent
  > # end of Cell
  <Cell 
   <CellContent 
    <Notes 
    > # end of Notes
    <Para 
     <Unique 5625>
     <PgfTag `CellBody'>
     <ParaLine 
      <String `iterator type pointing to '>
     >
     <ParaLine 
      <Font 
       <FTag `program'>
      > # end of Font
      <String `X::reference'>
     >
    > # end of Para
   > # end of CellContent
  > # end of Cell
  <Cell 
   <CellContent 
    <Notes 
    > # end of Notes
    <Para 
     <Unique 5627>
     <PgfTag `CellBody'>
     <ParaLine 
     >
    > # end of Para
   > # end of CellContent
  > # end of Cell
  <Cell 
   <CellContent 
    <Notes 
    > # end of Notes
    <Para 
     <Unique 5629>
     <PgfTag `CellBody'>
     <ParaLine 
      <String `an i'>
      <String `terator '>
      <String `of any iterator '>
      <String `cate'>
      <Char SoftHyphen >
     >
     <ParaLine 
      <String `gory except output iterator.'>
     >
    > # end of Para
   > # end of CellContent
  > # end of Cell
  <Cell 
   <CellContent 
    <Notes 
    > # end of Notes
    <Para 
     <Unique 5631>
     <PgfTag `CellBody'>
     <ParaLine 
      <String `compile '>
     >
     <ParaLine 
      <String `time'>
     >
    > # end of Para
   > # end of CellContent
  > # end of Cell
 > # end of Row
 <Row 
  <RowMaxHeight  14.0">
  <RowHeight  0.61111">
  <Cell 
   <CellContent 
    <Notes 
    > # end of Notes
    <Para 
     <Unique 5362>
     <PgfTag `CellBody'>
     <Pgf 
      <PgfFont 
       <FTag `'>
       <FFamily `Courier'>
       <FVar `Regular'>
       <FWeight `Regular'>
       <FAngle `Regular'>
       <FPostScriptName `Courier'>
       <FSize  9.0 pt>
       <FUnderlining FNoUnderlining >
       <FUnderline No >
       <FDoubleUnderline No >
       <FNumericUnderline No >
       <FOverline No >
       <FStrike No >
       <FChangeBar No >
       <FOutline No >
       <FShadow No >
       <FPairKern No >
       <FCase FAsTyped >
       <FPosition FNormal >
       <FSupScript No >
       <FSubScript No >
       <FDX  0.0 pt>
       <FDY  0.0 pt>
       <FDW  0.0 pt>
       <FSeparation 0>
       <FColor `Black'>
      > # end of PgfFont
     > # end of Pgf
     <ParaLine 
      <String `X::const_iter'>
     >
     <ParaLine 
      <String `ator'>
     >
    > # end of Para
   > # end of CellContent
  > # end of Cell
  <Cell 
   <CellContent 
    <Notes 
    > # end of Notes
    <Para 
     <Unique 5364>
     <PgfTag `CellBody'>
     <ParaLine 
      <String `iterator type pointing to '>
      <Char HardReturn >
     >
     <ParaLine 
      <Font 
       <FTag `program'>
      > # end of Font
      <String `X::const_reference'>
     >
    > # end of Para
   > # end of CellContent
  > # end of Cell
  <Cell 
   <CellContent 
    <Notes 
    > # end of Notes
    <Para 
     <Unique 5366>
     <PgfTag `CellBody'>
     <ParaLine 
     >
    > # end of Para
   > # end of CellContent
  > # end of Cell
  <Cell 
   <CellContent 
    <Notes 
    > # end of Notes
    <Para 
     <Unique 5368>
     <PgfTag `CellBody'>
     <ParaLine 
      <String `a constant iterator of any itera'>
      <Char SoftHyphen >
     >
     <ParaLine 
      <String `tor category except output itera'>
      <Char SoftHyphen >
     >
     <ParaLine 
      <String `tor.'>
     >
    > # end of Para
   > # end of CellContent
  > # end of Cell
  <Cell 
   <CellContent 
    <Notes 
    > # end of Notes
    <Para 
     <Unique 5370>
     <PgfTag `CellBody'>
     <ParaLine 
      <String `compile '>
      <Char HardReturn >
     >
     <ParaLine 
      <String `time'>
     >
    > # end of Para
   > # end of CellContent
  > # end of Cell
 > # end of Row
 <Row 
  <RowMaxHeight  14.0">
  <RowHeight  0.61111">
  <Cell 
   <CellContent 
    <Notes 
    > # end of Notes
    <Para 
     <Unique 5392>
     <PgfTag `CellBody'>
     <Pgf 
      <PgfFont 
       <FTag `'>
       <FFamily `Courier'>
       <FVar `Regular'>
       <FWeight `Regular'>
       <FAngle `Regular'>
       <FPostScriptName `Courier'>
       <FSize  9.0 pt>
       <FUnderlining FNoUnderlining >
       <FUnderline No >
       <FDoubleUnderline No >
       <FNumericUnderline No >
       <FOverline No >
       <FStrike No >
       <FChangeBar No >
       <FOutline No >
       <FShadow No >
       <FPairKern No >
       <FCase FAsTyped >
       <FPosition FNormal >
       <FSupScript No >
       <FSubScript No >
       <FDX  0.0 pt>
       <FDY  0.0 pt>
       <FDW  0.0 pt>
       <FSeparation 0>
       <FColor `Black'>
      > # end of PgfFont
     > # end of Pgf
     <ParaLine 
      <String `X:'>
      <String `:d'>
      <String `ifference'>
     >
     <ParaLine 
      <String `_type'>
     >
    > # end of Para
   > # end of CellContent
  > # end of Cell
  <Cell 
   <CellContent 
    <Notes 
    > # end of Notes
    <Para 
     <Unique 5394>
     <PgfTag `CellBody'>
     <ParaLine 
      <String `signed integral type'>
     >
    > # end of Para
   > # end of CellContent
  > # end of Cell
  <Cell 
   <CellContent 
    <Notes 
    > # end of Notes
    <Para 
     <Unique 5396>
     <PgfTag `CellBody'>
     <Pgf 
      <PgfFont 
       <FTag `'>
       <FFamily `Courier'>
       <FVar `Regular'>
       <FWeight `Regular'>
       <FAngle `Regular'>
       <FPostScriptName `Courier'>
       <FSize  9.0 pt>
       <FUnderlining FNoUnderlining >
       <FUnderline No >
       <FDoubleUnderline No >
       <FNumericUnderline No >
       <FOverline No >
       <FStrike No >
       <FChangeBar No >
       <FOutline No >
       <FShadow No >
       <FPairKern No >
       <FCase FAsTyped >
       <FPosition FNormal >
       <FSupScript No >
       <FSubScript No >
       <FDX  0.0 pt>
       <FDY  0.0 pt>
       <FDW  0.0 pt>
       <FSeparation 0>
       <FColor `Black'>
      > # end of PgfFont
     > # end of Pgf
     <ParaLine 
     >
    > # end of Para
   > # end of CellContent
  > # end of Cell
  <Cell 
   <CellContent 
    <Notes 
    > # end of Notes
    <Para 
     <Unique 5398>
     <PgfTag `CellBody'>
     <ParaLine 
      <String `is identical to the distance type '>
     >
     <ParaLine 
      <String `of '>
      <Font 
       <FTag `program'>
      > # end of Font
      <String `X::iterator'>
      <Font 
       <FTag `'>
      > # end of Font
      <String ` and '>
     >
     <ParaLine 
      <Font 
       <FTag `program'>
      > # end of Font
      <String `X::const_iterator'>
     >
    > # end of Para
   > # end of CellContent
  > # end of Cell
  <Cell 
   <CellContent 
    <Notes 
    > # end of Notes
    <Para 
     <Unique 5400>
     <PgfTag `CellBody'>
     <ParaLine 
      <String `compile '>
     >
     <ParaLine 
      <String `time'>
     >
    > # end of Para
   > # end of CellContent
  > # end of Cell
 > # end of Row
 <Row 
  <RowMaxHeight  14.0">
  <RowHeight  0.61111">
  <Cell 
   <CellContent 
    <Notes 
    > # end of Notes
    <Para 
     <Unique 5402>
     <PgfTag `CellBody'>
     <Pgf 
      <PgfFont 
       <FTag `'>
       <FFamily `Courier'>
       <FVar `Regular'>
       <FWeight `Regular'>
       <FAngle `Regular'>
       <FPostScriptName `Courier'>
       <FSize  9.0 pt>
       <FUnderlining FNoUnderlining >
       <FUnderline No >
       <FDoubleUnderline No >
       <FNumericUnderline No >
       <FOverline No >
       <FStrike No >
       <FChangeBar No >
       <FOutline No >
       <FShadow No >
       <FPairKern No >
       <FCase FAsTyped >
       <FPosition FNormal >
       <FSupScript No >
       <FSubScript No >
       <FDX  0.0 pt>
       <FDY  0.0 pt>
       <FDW  0.0 pt>
       <FSeparation 0>
       <FColor `Black'>
      > # end of PgfFont
     > # end of Pgf
     <ParaLine 
      <String `X::'>
     >
    > # end of Para
    <Para 
     <Unique 5403>
     <PgfTag `CellBody'>
     <Pgf 
      <PgfFont 
       <FTag `'>
       <FFamily `Courier'>
       <FVar `Regular'>
       <FWeight `Regular'>
       <FAngle `Regular'>
       <FPostScriptName `Courier'>
       <FSize  9.0 pt>
       <FUnderlining FNoUnderlining >
       <FUnderline No >
       <FDoubleUnderline No >
       <FNumericUnderline No >
       <FOverline No >
       <FStrike No >
       <FChangeBar No >
       <FOutline No >
       <FShadow No >
       <FPairKern No >
       <FCase FAsTyped >
       <FPosition FNormal >
       <FSupScript No >
       <FSubScript No >
       <FDX  0.0 pt>
       <FDY  0.0 pt>
       <FDW  0.0 pt>
       <FSeparation 0>
       <FColor `Black'>
      > # end of PgfFont
     > # end of Pgf
     <ParaLine 
      <String `size_type'>
     >
    > # end of Para
   > # end of CellContent
  > # end of Cell
  <Cell 
   <CellContent 
    <Notes 
    > # end of Notes
    <Para 
     <Unique 5405>
     <PgfTag `CellBody'>
     <ParaLine 
      <String `unsigned integral type'>
     >
    > # end of Para
   > # end of CellContent
  > # end of Cell
  <Cell 
   <CellContent 
    <Notes 
    > # end of Notes
    <Para 
     <Unique 5407>
     <PgfTag `CellBody'>
     <Pgf 
      <PgfFont 
       <FTag `'>
       <FFamily `Courier'>
       <FVar `Regular'>
       <FWeight `Regular'>
       <FAngle `Regular'>
       <FPostScriptName `Courier'>
       <FSize  9.0 pt>
       <FUnderlining FNoUnderlining >
       <FUnderline No >
       <FDoubleUnderline No >
       <FNumericUnderline No >
       <FOverline No >
       <FStrike No >
       <FChangeBar No >
       <FOutline No >
       <FShadow No >
       <FPairKern No >
       <FCase FAsTyped >
       <FPosition FNormal >
       <FSupScript No >
       <FSubScript No >
       <FDX  0.0 pt>
       <FDY  0.0 pt>
       <FDW  0.0 pt>
       <FSeparation 0>
       <FColor `Black'>
      > # end of PgfFont
     > # end of Pgf
     <ParaLine 
     >
    > # end of Para
   > # end of CellContent
  > # end of Cell
  <Cell 
   <CellContent 
    <Notes 
    > # end of Notes
    <Para 
     <Unique 5409>
     <PgfTag `CellBody'>
     <ParaLine 
      <Font 
       <FTag `program'>
      > # end of Font
      <String `size_type'>
      <Font 
       <FTag `'>
      > # end of Font
      <String ` can represent any '>
     >
     <ParaLine 
      <String `non-negative value of '>
     >
     <ParaLine 
      <Font 
       <FTag `program'>
      > # end of Font
      <String `difference_type'>
     >
    > # end of Para
   > # end of CellContent
  > # end of Cell
  <Cell 
   <CellContent 
    <Notes 
    > # end of Notes
    <Para 
     <Unique 5411>
     <PgfTag `CellBody'>
     <ParaLine 
      <String `compile '>
     >
     <ParaLine 
      <String `time'>
     >
    > # end of Para
   > # end of CellContent
  > # end of Cell
 > # end of Row
 <Row 
  <RowMaxHeight  14.0">
  <RowHeight  0.27778">
  <Cell 
   <CellContent 
    <Notes 
    > # end of Notes
    <Para 
     <Unique 5413>
     <PgfTag `CellBody'>
     <Pgf 
      <PgfFont 
       <FTag `'>
       <FFamily `Courier'>
       <FVar `Regular'>
       <FWeight `Regular'>
       <FAngle `Regular'>
       <FPostScriptName `Courier'>
       <FSize  9.0 pt>
       <FUnderlining FNoUnderlining >
       <FUnderline No >
       <FDoubleUnderline No >
       <FNumericUnderline No >
       <FOverline No >
       <FStrike No >
       <FChangeBar No >
       <FOutline No >
       <FShadow No >
       <FPairKern No >
       <FCase FAsTyped >
       <FPosition FNormal >
       <FSupScript No >
       <FSubScript No >
       <FDX  0.0 pt>
       <FDY  0.0 pt>
       <FDW  0.0 pt>
       <FSeparation 0>
       <FColor `Black'>
      > # end of PgfFont
     > # end of Pgf
     <ParaLine 
      <Font 
       <FTag `program'>
      > # end of Font
      <String `X u;'>
     >
    > # end of Para
   > # end of CellContent
  > # end of Cell
  <Cell 
   <CellContent 
    <Notes 
    > # end of Notes
    <Para 
     <Unique 5415>
     <PgfTag `CellBody'>
     <ParaLine 
     >
    > # end of Para
   > # end of CellContent
  > # end of Cell
  <Cell 
   <CellContent 
    <Notes 
    > # end of Notes
    <Para 
     <Unique 5417>
     <PgfTag `CellBody'>
     <ParaLine 
     >
    > # end of Para
   > # end of CellContent
  > # end of Cell
  <Cell 
   <CellContent 
    <Notes 
    > # end of Notes
    <Para 
     <Unique 5419>
     <PgfTag `CellBody'>
     <ParaLine 
      <String `post: '>
      <Font 
       <FTag `program'>
      > # end of Font
      <String `u.size() == 0.'>
     >
    > # end of Para
   > # end of CellContent
  > # end of Cell
  <Cell 
   <CellContent 
    <Notes 
    > # end of Notes
    <Para 
     <Unique 5421>
     <PgfTag `CellBody'>
     <ParaLine 
      <String `constant'>
     >
    > # end of Para
   > # end of CellContent
  > # end of Cell
 > # end of Row
 <Row 
  <RowMaxHeight  14.0">
  <RowHeight  0.27778">
  <Cell 
   <CellContent 
    <Notes 
    > # end of Notes
    <Para 
     <Unique 5423>
     <PgfTag `CellBody'>
     <Pgf 
      <PgfFont 
       <FTag `'>
       <FFamily `Courier'>
       <FVar `Regular'>
       <FWeight `Regular'>
       <FAngle `Regular'>
       <FPostScriptName `Courier'>
       <FSize  9.0 pt>
       <FUnderlining FNoUnderlining >
       <FUnderline No >
       <FDoubleUnderline No >
       <FNumericUnderline No >
       <FOverline No >
       <FStrike No >
       <FChangeBar No >
       <FOutline No >
       <FShadow No >
       <FPairKern No >
       <FCase FAsTyped >
       <FPosition FNormal >
       <FSupScript No >
       <FSubScript No >
       <FDX  0.0 pt>
       <FDY  0.0 pt>
       <FDW  0.0 pt>
       <FSeparation 0>
       <FColor `Black'>
      > # end of PgfFont
     > # end of Pgf
     <ParaLine 
      <Font 
       <FTag `program'>
      > # end of Font
      <String `X()'>
     >
    > # end of Para
   > # end of CellContent
  > # end of Cell
  <Cell 
   <CellContent 
    <Notes 
    > # end of Notes
    <Para 
     <Unique 5425>
     <PgfTag `CellBody'>
     <Pgf 
      <PgfFont 
       <FTag `'>
       <FFamily `Courier'>
       <FVar `Regular'>
       <FWeight `Regular'>
       <FAngle `Regular'>
       <FPostScriptName `Courier'>
       <FSize  9.0 pt>
       <FUnderlining FNoUnderlining >
       <FUnderline No >
       <FDoubleUnderline No >
       <FNumericUnderline No >
       <FOverline No >
       <FStrike No >
       <FChangeBar No >
       <FOutline No >
       <FShadow No >
       <FPairKern No >
       <FCase FAsTyped >
       <FPosition FNormal >
       <FSupScript No >
       <FSubScript No >
       <FDX  0.0 pt>
       <FDY  0.0 pt>
       <FDW  0.0 pt>
       <FSeparation 0>
       <FColor `Black'>
      > # end of PgfFont
     > # end of Pgf
     <ParaLine 
     >
    > # end of Para
   > # end of CellContent
  > # end of Cell
  <Cell 
   <CellContent 
    <Notes 
    > # end of Notes
    <Para 
     <Unique 5427>
     <PgfTag `CellBody'>
     <ParaLine 
     >
    > # end of Para
   > # end of CellContent
  > # end of Cell
  <Cell 
   <CellContent 
    <Notes 
    > # end of Notes
    <Para 
     <Unique 5429>
     <PgfTag `CellBody'>
     <ParaLine 
      <Font 
       <FTag `program'>
      > # end of Font
      <String `X()'>
      <Font 
       <FTag `'>
      > # end of Font
      <String `.'>
      <Font 
       <FTag `program'>
      > # end of Font
      <String `size() == 0'>
      <Font 
       <FTag `'>
      > # end of Font
      <String `.'>
     >
    > # end of Para
   > # end of CellContent
  > # end of Cell
  <Cell 
   <CellContent 
    <Notes 
    > # end of Notes
    <Para 
     <Unique 5431>
     <PgfTag `CellBody'>
     <ParaLine 
      <String `constant'>
     >
    > # end of Para
   > # end of CellContent
  > # end of Cell
 > # end of Row
 <Row 
  <RowMaxHeight  14.0">
  <RowHeight  0.27778">
  <Cell 
   <CellContent 
    <Notes 
    > # end of Notes
    <Para 
     <Unique 5433>
     <PgfTag `CellBody'>
     <Pgf 
      <PgfFont 
       <FTag `'>
       <FFamily `Courier'>
       <FVar `Regular'>
       <FWeight `Regular'>
       <FAngle `Regular'>
       <FPostScriptName `Courier'>
       <FSize  9.0 pt>
       <FUnderlining FNoUnderlining >
       <FUnderline No >
       <FDoubleUnderline No >
       <FNumericUnderline No >
       <FOverline No >
       <FStrike No >
       <FChangeBar No >
       <FOutline No >
       <FShadow No >
       <FPairKern No >
       <FCase FAsTyped >
       <FPosition FNormal >
       <FSupScript No >
       <FSubScript No >
       <FDX  0.0 pt>
       <FDY  0.0 pt>
       <FDW  0.0 pt>
       <FSeparation 0>
       <FColor `Black'>
      > # end of PgfFont
     > # end of Pgf
     <ParaLine 
      <Font 
       <FTag `program'>
      > # end of Font
      <String `X(a)'>
     >
    > # end of Para
   > # end of CellContent
  > # end of Cell
  <Cell 
   <CellContent 
    <Notes 
    > # end of Notes
    <Para 
     <Unique 5435>
     <PgfTag `CellBody'>
     <Pgf 
      <PgfFont 
       <FTag `'>
       <FFamily `Courier'>
       <FVar `Regular'>
       <FWeight `Regular'>
       <FAngle `Regular'>
       <FPostScriptName `Courier'>
       <FSize  9.0 pt>
       <FUnderlining FNoUnderlining >
       <FUnderline No >
       <FDoubleUnderline No >
       <FNumericUnderline No >
       <FOverline No >
       <FStrike No >
       <FChangeBar No >
       <FOutline No >
       <FShadow No >
       <FPairKern No >
       <FCase FAsTyped >
       <FPosition FNormal >
       <FSupScript No >
       <FSubScript No >
       <FDX  0.0 pt>
       <FDY  0.0 pt>
       <FDW  0.0 pt>
       <FSeparation 0>
       <FColor `Black'>
      > # end of PgfFont
     > # end of Pgf
     <ParaLine 
     >
    > # end of Para
   > # end of CellContent
  > # end of Cell
  <Cell 
   <CellContent 
    <Notes 
    > # end of Notes
    <Para 
     <Unique 5437>
     <PgfTag `CellBody'>
     <ParaLine 
     >
    > # end of Para
   > # end of CellContent
  > # end of Cell
  <Cell 
   <CellContent 
    <Notes 
    > # end of Notes
    <Para 
     <Unique 5439>
     <PgfTag `CellBody'>
     <Pgf 
      <PgfFont 
       <FTag `'>
       <FFamily `Courier'>
       <FVar `Regular'>
       <FWeight `Regular'>
       <FAngle `Regular'>
       <FPostScriptName `Courier'>
       <FSize  9.0 pt>
       <FUnderlining FNoUnderlining >
       <FUnderline No >
       <FDoubleUnderline No >
       <FNumericUnderline No >
       <FOverline No >
       <FStrike No >
       <FChangeBar No >
       <FOutline No >
       <FShadow No >
       <FPairKern No >
       <FCase FAsTyped >
       <FPosition FNormal >
       <FSupScript No >
       <FSubScript No >
       <FDX  0.0 pt>
       <FDY  0.0 pt>
       <FDW  0.0 pt>
       <FSeparation 0>
       <FColor `Black'>
      > # end of PgfFont
     > # end of Pgf
     <ParaLine 
      <Font 
       <FTag `program'>
      > # end of Font
      <String `a == X(a)'>
      <Font 
       <FTag `'>
      > # end of Font
      <String `.'>
     >
    > # end of Para
   > # end of CellContent
  > # end of Cell
  <Cell 
   <CellContent 
    <Notes 
    > # end of Notes
    <Para 
     <Unique 5441>
     <PgfTag `CellBody'>
     <ParaLine 
      <String `linear '>
     >
    > # end of Para
   > # end of CellContent
  > # end of Cell
 > # end of Row
 <Row 
  <RowMaxHeight  14.0">
  <RowHeight  0.41667">
  <Cell 
   <CellContent 
    <Notes 
    > # end of Notes
    <Para 
     <Unique 5443>
     <PgfTag `CellBody'>
     <Pgf 
      <PgfFont 
       <FTag `'>
       <FFamily `Courier'>
       <FVar `Regular'>
       <FWeight `Regular'>
       <FAngle `Regular'>
       <FPostScriptName `Courier'>
       <FSize  9.0 pt>
       <FUnderlining FNoUnderlining >
       <FUnderline No >
       <FDoubleUnderline No >
       <FNumericUnderline No >
       <FOverline No >
       <FStrike No >
       <FChangeBar No >
       <FOutline No >
       <FShadow No >
       <FPairKern No >
       <FCase FAsTyped >
       <FPosition FNormal >
       <FSupScript No >
       <FSubScript No >
       <FDX  0.0 pt>
       <FDY  0.0 pt>
       <FDW  0.0 pt>
       <FSeparation 0>
       <FColor `Black'>
      > # end of PgfFont
     > # end of Pgf
     <ParaLine 
      <Font 
       <FTag `program'>
      > # end of Font
      <String `X u(a);'>
     >
    > # end of Para
    <Para 
     <Unique 5444>
     <PgfTag `CellBody'>
     <Pgf 
      <PgfFont 
       <FTag `'>
       <FFamily `Courier'>
       <FVar `Regular'>
       <FWeight `Regular'>
       <FAngle `Regular'>
       <FPostScriptName `Courier'>
       <FSize  9.0 pt>
       <FUnderlining FNoUnderlining >
       <FUnderline No >
       <FDoubleUnderline No >
       <FNumericUnderline No >
       <FOverline No >
       <FStrike No >
       <FChangeBar No >
       <FOutline No >
       <FShadow No >
       <FPairKern No >
       <FCase FAsTyped >
       <FPosition FNormal >
       <FSupScript No >
       <FSubScript No >
       <FDX  0.0 pt>
       <FDY  0.0 pt>
       <FDW  0.0 pt>
       <FSeparation 0>
       <FColor `Black'>
      > # end of PgfFont
     > # end of Pgf
     <ParaLine 
      <Font 
       <FTag `program'>
      > # end of Font
      <String `X u = a;'>
     >
    > # end of Para
   > # end of CellContent
  > # end of Cell
  <Cell 
   <CellContent 
    <Notes 
    > # end of Notes
    <Para 
     <Unique 5446>
     <PgfTag `CellBody'>
     <ParaLine 
     >
    > # end of Para
   > # end of CellContent
  > # end of Cell
  <Cell 
   <CellContent 
    <Notes 
    > # end of Notes
    <Para 
     <Unique 5448>
     <PgfTag `CellBody'>
     <Pgf 
      <PgfFont 
       <FTag `'>
       <FFamily `Courier'>
       <FVar `Regular'>
       <FWeight `Regular'>
       <FAngle `Regular'>
       <FPostScriptName `Courier'>
       <FSize  9.0 pt>
       <FUnderlining FNoUnderlining >
       <FUnderline No >
       <FDoubleUnderline No >
       <FNumericUnderline No >
       <FOverline No >
       <FStrike No >
       <FChangeBar No >
       <FOutline No >
       <FShadow No >
       <FPairKern No >
       <FCase FAsTyped >
       <FPosition FNormal >
       <FSupScript No >
       <FSubScript No >
       <FDX  0.0 pt>
       <FDY  0.0 pt>
       <FDW  0.0 pt>
       <FSeparation 0>
       <FColor `Black'>
      > # end of PgfFont
     > # end of Pgf
     <ParaLine 
      <Font 
       <FTag `program'>
      > # end of Font
      <String `X u; u = a;'>
     >
    > # end of Para
   > # end of CellContent
  > # end of Cell
  <Cell 
   <CellContent 
    <Notes 
    > # end of Notes
    <Para 
     <Unique 5450>
     <PgfTag `CellBody'>
     <ParaLine 
      <String `post: '>
      <Font 
       <FTag `program'>
      > # end of Font
      <String `u == a.'>
     >
    > # end of Para
   > # end of CellContent
  > # end of Cell
  <Cell 
   <CellContent 
    <Notes 
    > # end of Notes
    <Para 
     <Unique 5452>
     <PgfTag `CellBody'>
     <ParaLine 
      <String `linear'>
     >
    > # end of Para
   > # end of CellContent
  > # end of Cell
 > # end of Row
 <Row 
  <RowMaxHeight  14.0">
  <RowHeight  0.77778">
  <Cell 
   <CellContent 
    <Notes 
    > # end of Notes
    <Para 
     <Unique 5454>
     <PgfTag `CellBody'>
     <Pgf 
      <PgfFont 
       <FTag `'>
       <FFamily `Courier'>
       <FVar `Regular'>
       <FWeight `Regular'>
       <FAngle `Regular'>
       <FPostScriptName `Courier'>
       <FSize  9.0 pt>
       <FUnderlining FNoUnderlining >
       <FUnderline No >
       <FDoubleUnderline No >
       <FNumericUnderline No >
       <FOverline No >
       <FStrike No >
       <FChangeBar No >
       <FOutline No >
       <FShadow No >
       <FPairKern No >
       <FCase FAsTyped >
       <FPosition FNormal >
       <FSupScript No >
       <FSubScript No >
       <FDX  0.0 pt>
       <FDY  0.0 pt>
       <FDW  0.0 pt>
       <FSeparation 0>
       <FColor `Black'>
      > # end of PgfFont
     > # end of Pgf
     <ParaLine 
      <String `(&a)-\>'>
      <String `~'>
      <String `X()'>
     >
    > # end of Para
   > # end of CellContent
  > # end of Cell
  <Cell 
   <CellContent 
    <Notes 
    > # end of Notes
    <Para 
     <Unique 5456>
     <PgfTag `CellBody'>
     <ParaLine 
      <String `result is not used'>
     >
    > # end of Para
   > # end of CellContent
  > # end of Cell
  <Cell 
   <CellContent 
    <Notes 
    > # end of Notes
    <Para 
     <Unique 5458>
     <PgfTag `CellBody'>
     <Pgf 
      <PgfFont 
       <FTag `'>
       <FFamily `Courier'>
       <FVar `Regular'>
       <FWeight `Regular'>
       <FAngle `Regular'>
       <FPostScriptName `Courier'>
       <FSize  9.0 pt>
       <FUnderlining FNoUnderlining >
       <FUnderline No >
       <FDoubleUnderline No >
       <FNumericUnderline No >
       <FOverline No >
       <FStrike No >
       <FChangeBar No >
       <FOutline No >
       <FShadow No >
       <FPairKern No >
       <FCase FAsTyped >
       <FPosition FNormal >
       <FSupScript No >
       <FSubScript No >
       <FDX  0.0 pt>
       <FDY  0.0 pt>
       <FDW  0.0 pt>
       <FSeparation 0>
       <FColor `Black'>
      > # end of PgfFont
     > # end of Pgf
     <ParaLine 
     >
    > # end of Para
   > # end of CellContent
  > # end of Cell
  <Cell 
   <CellContent 
    <Notes 
    > # end of Notes
    <Para 
     <Unique 5460>
     <PgfTag `CellBody'>
     <ParaLine 
      <String `post: '>
      <Font 
       <FTag `program'>
      > # end of Font
      <String `a.size() == 0'>
      <Font 
       <FTag `'>
      > # end of Font
      <String `.'>
     >
    > # end of Para
    <Para 
     <Unique 5461>
     <PgfTag `CellBody'>
     <ParaLine 
      <String `note: the destructor is applied to '>
     >
     <ParaLine 
      <String `every element of '>
      <Font 
       <FTag `program'>
      > # end of Font
      <String `a'>
      <Font 
       <FTag `'>
      > # end of Font
      <String ` and all the '>
     >
     <ParaLine 
      <String `memory is returned.'>
     >
    > # end of Para
   > # end of CellContent
  > # end of Cell
  <Cell 
   <CellContent 
    <Notes 
    > # end of Notes
    <Para 
     <Unique 5463>
     <PgfTag `CellBody'>
     <ParaLine 
      <String `linear'>
     >
    > # end of Para
   > # end of CellContent
  > # end of Cell
 > # end of Row
 <Row 
  <RowMaxHeight  14.0">
  <RowHeight  0.61111">
  <Cell 
   <CellContent 
    <Notes 
    > # end of Notes
    <Para 
     <Unique 5465>
     <PgfTag `CellBody'>
     <Pgf 
      <PgfFont 
       <FTag `'>
       <FFamily `Courier'>
       <FVar `Regular'>
       <FWeight `Regular'>
       <FAngle `Regular'>
       <FPostScriptName `Courier'>
       <FSize  9.0 pt>
       <FUnderlining FNoUnderlining >
       <FUnderline No >
       <FDoubleUnderline No >
       <FNumericUnderline No >
       <FOverline No >
       <FStrike No >
       <FChangeBar No >
       <FOutline No >
       <FShadow No >
       <FPairKern No >
       <FCase FAsTyped >
       <FPosition FNormal >
       <FSupScript No >
       <FSubScript No >
       <FDX  0.0 pt>
       <FDY  0.0 pt>
       <FDW  0.0 pt>
       <FSeparation 0>
       <FColor `Black'>
      > # end of PgfFont
     > # end of Pgf
     <ParaLine 
      <String `a.begin()'>
     >
    > # end of Para
   > # end of CellContent
  > # end of Cell
  <Cell 
   <CellContent 
    <Notes 
    > # end of Notes
    <Para 
     <Unique 5467>
     <PgfTag `CellBody'>
     <ParaLine 
      <Font 
       <FTag `program'>
      > # end of Font
      <String `iterator; '>
     >
     <ParaLine 
      <String `const_iterator '>
      <Font 
       <FTag `'>
      > # end of Font
      <String `for '>
     >
     <ParaLine 
      <String `constant '>
      <Font 
       <FTag `program'>
      > # end of Font
      <String `a'>
     >
    > # end of Para
   > # end of CellContent
  > # end of Cell
  <Cell 
   <CellContent 
    <Notes 
    > # end of Notes
    <Para 
     <Unique 5469>
     <PgfTag `CellBody'>
     <Pgf 
      <PgfFont 
       <FTag `'>
       <FFamily `Courier'>
       <FVar `Regular'>
       <FWeight `Regular'>
       <FAngle `Regular'>
       <FPostScriptName `Courier'>
       <FSize  9.0 pt>
       <FUnderlining FNoUnderlining >
       <FUnderline No >
       <FDoubleUnderline No >
       <FNumericUnderline No >
       <FOverline No >
       <FStrike No >
       <FChangeBar No >
       <FOutline No >
       <FShadow No >
       <FPairKern No >
       <FCase FAsTyped >
       <FPosition FNormal >
       <FSupScript No >
       <FSubScript No >
       <FDX  0.0 pt>
       <FDY  0.0 pt>
       <FDW  0.0 pt>
       <FSeparation 0>
       <FColor `Black'>
      > # end of PgfFont
     > # end of Pgf
     <ParaLine 
     >
    > # end of Para
   > # end of CellContent
  > # end of Cell
  <Cell 
   <CellContent 
    <Notes 
    > # end of Notes
    <Para 
     <Unique 5471>
     <PgfTag `CellBody'>
     <ParaLine 
     >
    > # end of Para
   > # end of CellContent
  > # end of Cell
  <Cell 
   <CellContent 
    <Notes 
    > # end of Notes
    <Para 
     <Unique 5473>
     <PgfTag `CellBody'>
     <ParaLine 
      <String `constant'>
     >
    > # end of Para
   > # end of CellContent
  > # end of Cell
 > # end of Row
 <Row 
  <RowMaxHeight  14.0">
  <RowHeight  0.61111">
  <Cell 
   <CellContent 
    <Notes 
    > # end of Notes
    <Para 
     <Unique 5475>
     <PgfTag `CellBody'>
     <Pgf 
      <PgfFont 
       <FTag `'>
       <FFamily `Courier'>
       <FVar `Regular'>
       <FWeight `Regular'>
       <FAngle `Regular'>
       <FPostScriptName `Courier'>
       <FSize  9.0 pt>
       <FUnderlining FNoUnderlining >
       <FUnderline No >
       <FDoubleUnderline No >
       <FNumericUnderline No >
       <FOverline No >
       <FStrike No >
       <FChangeBar No >
       <FOutline No >
       <FShadow No >
       <FPairKern No >
       <FCase FAsTyped >
       <FPosition FNormal >
       <FSupScript No >
       <FSubScript No >
       <FDX  0.0 pt>
       <FDY  0.0 pt>
       <FDW  0.0 pt>
       <FSeparation 0>
       <FColor `Black'>
      > # end of PgfFont
     > # end of Pgf
     <ParaLine 
      <String `a.end()'>
     >
    > # end of Para
   > # end of CellContent
  > # end of Cell
  <Cell 
   <CellContent 
    <Notes 
    > # end of Notes
    <Para 
     <Unique 5477>
     <PgfTag `CellBody'>
     <ParaLine 
      <Font 
       <FTag `program'>
      > # end of Font
      <String `iterator; '>
     >
     <ParaLine 
      <String `const_iterator '>
      <Font 
       <FTag `'>
      > # end of Font
      <String `for '>
     >
     <ParaLine 
      <String `constant '>
      <Font 
       <FTag `program'>
      > # end of Font
      <String `a'>
     >
    > # end of Para
   > # end of CellContent
  > # end of Cell
  <Cell 
   <CellContent 
    <Notes 
    > # end of Notes
    <Para 
     <Unique 5479>
     <PgfTag `CellBody'>
     <Pgf 
      <PgfFont 
       <FTag `'>
       <FFamily `Courier'>
       <FVar `Regular'>
       <FWeight `Regular'>
       <FAngle `Regular'>
       <FPostScriptName `Courier'>
       <FSize  9.0 pt>
       <FUnderlining FNoUnderlining >
       <FUnderline No >
       <FDoubleUnderline No >
       <FNumericUnderline No >
       <FOverline No >
       <FStrike No >
       <FChangeBar No >
       <FOutline No >
       <FShadow No >
       <FPairKern No >
       <FCase FAsTyped >
       <FPosition FNormal >
       <FSupScript No >
       <FSubScript No >
       <FDX  0.0 pt>
       <FDY  0.0 pt>
       <FDW  0.0 pt>
       <FSeparation 0>
       <FColor `Black'>
      > # end of PgfFont
     > # end of Pgf
     <ParaLine 
     >
    > # end of Para
   > # end of CellContent
  > # end of Cell
  <Cell 
   <CellContent 
    <Notes 
    > # end of Notes
    <Para 
     <Unique 5481>
     <PgfTag `CellBody'>
     <ParaLine 
     >
    > # end of Para
   > # end of CellContent
  > # end of Cell
  <Cell 
   <CellContent 
    <Notes 
    > # end of Notes
    <Para 
     <Unique 5483>
     <PgfTag `CellBody'>
     <ParaLine 
      <String `constant'>
     >
    > # end of Para
   > # end of CellContent
  > # end of Cell
 > # end of Row
 <Row 
  <RowMaxHeight  14.0">
  <RowHeight  0.875">
  <Cell 
   <CellContent 
    <Notes 
    > # end of Notes
    <Para 
     <Unique 5507>
     <PgfTag `CellBody'>
     <Pgf 
      <PgfFont 
       <FTag `'>
       <FFamily `Courier'>
       <FVar `Regular'>
       <FWeight `Regular'>
       <FAngle `Regular'>
       <FPostScriptName `Courier'>
       <FSize  9.0 pt>
       <FUnderlining FNoUnderlining >
       <FUnderline No >
       <FDoubleUnderline No >
       <FNumericUnderline No >
       <FOverline No >
       <FStrike No >
       <FChangeBar No >
       <FOutline No >
       <FShadow No >
       <FPairKern No >
       <FCase FAsTyped >
       <FPosition FNormal >
       <FSupScript No >
       <FSubScript No >
       <FDX  0.0 pt>
       <FDY  0.0 pt>
       <FDW  0.0 pt>
       <FSeparation 0>
       <FColor `Black'>
      > # end of PgfFont
     > # end of Pgf
     <ParaLine 
      <Font 
       <FTag `program'>
      > # end of Font
      <String `a == b'>
     >
    > # end of Para
   > # end of CellContent
  > # end of Cell
  <Cell 
   <CellContent 
    <Notes 
    > # end of Notes
    <Para 
     <Unique 5509>
     <PgfTag `CellBody'>
     <ParaLine 
      <String `convertible to '>
      <Font 
       <FTag `program'>
      > # end of Font
      <String `bool'>
     >
    > # end of Para
   > # end of CellContent
  > # end of Cell
  <Cell 
   <CellContent 
    <Notes 
    > # end of Notes
    <Para 
     <Unique 5511>
     <PgfTag `CellBody'>
     <Pgf 
      <PgfFont 
       <FTag `'>
       <FFamily `Courier'>
       <FVar `Regular'>
       <FWeight `Regular'>
       <FAngle `Regular'>
       <FPostScriptName `Courier'>
       <FSize  9.0 pt>
       <FUnderlining FNoUnderlining >
       <FUnderline No >
       <FDoubleUnderline No >
       <FNumericUnderline No >
       <FOverline No >
       <FStrike No >
       <FChangeBar No >
       <FOutline No >
       <FShadow No >
       <FPairKern No >
       <FCase FAsTyped >
       <FPosition FNormal >
       <FSupScript No >
       <FSubScript No >
       <FDX  0.0 pt>
       <FDY  0.0 pt>
       <FDW  0.0 pt>
       <FSeparation 0>
       <FColor `Black'>
      > # end of PgfFont
     > # end of Pgf
     <ParaLine 
      <Font 
       <FTag `program'>
      > # end of Font
      <String `a.size() == '>
     >
     <ParaLine 
      <String `b.size() && '>
     >
     <ParaLine 
      <String `equal(a.begin(), '>
     >
     <ParaLine 
      <String `a.end(), '>
     >
     <ParaLine 
      <String `b.begin())'>
     >
    > # end of Para
   > # end of CellContent
  > # end of Cell
  <Cell 
   <CellContent 
    <Notes 
    > # end of Notes
    <Para 
     <Unique 5513>
     <PgfTag `CellBody'>
     <ParaLine 
      <Font 
       <FTag `program'>
      > # end of Font
      <String `=='>
      <Font 
       <FTag `'>
      > # end of Font
      <String ` is an equivalence relation.'>
     >
    > # end of Para
    <Para 
     <Unique 5514>
     <PgfTag `CellBody'>
     <ParaLine 
      <String `note: '>
      <Font 
       <FTag `program'>
      > # end of Font
      <String `equal'>
      <Font 
       <FTag `'>
      > # end of Font
      <String ` is defined in the '>
     >
     <ParaLine 
      <String `algorithms section.'>
     >
    > # end of Para
   > # end of CellContent
  > # end of Cell
  <Cell 
   <CellContent 
    <Notes 
    > # end of Notes
    <Para 
     <Unique 5516>
     <PgfTag `CellBody'>
     <ParaLine 
      <String `linear'>
     >
    > # end of Para
   > # end of CellContent
  > # end of Cell
 > # end of Row
 <Row 
  <RowMaxHeight  14.0">
  <RowHeight  0.27778">
  <Cell 
   <CellContent 
    <Notes 
    > # end of Notes
    <Para 
     <Unique 5518>
     <PgfTag `CellBody'>
     <Pgf 
      <PgfFont 
       <FTag `'>
       <FFamily `Courier'>
       <FVar `Regular'>
       <FWeight `Regular'>
       <FAngle `Regular'>
       <FPostScriptName `Courier'>
       <FSize  9.0 pt>
       <FUnderlining FNoUnderlining >
       <FUnderline No >
       <FDoubleUnderline No >
       <FNumericUnderline No >
       <FOverline No >
       <FStrike No >
       <FChangeBar No >
       <FOutline No >
       <FShadow No >
       <FPairKern No >
       <FCase FAsTyped >
       <FPosition FNormal >
       <FSupScript No >
       <FSubScript No >
       <FDX  0.0 pt>
       <FDY  0.0 pt>
       <FDW  0.0 pt>
       <FSeparation 0>
       <FColor `Black'>
      > # end of PgfFont
     > # end of Pgf
     <ParaLine 
      <Font 
       <FTag `program'>
      > # end of Font
      <String `a != b'>
     >
    > # end of Para
   > # end of CellContent
  > # end of Cell
  <Cell 
   <CellContent 
    <Notes 
    > # end of Notes
    <Para 
     <Unique 5520>
     <PgfTag `CellBody'>
     <ParaLine 
      <String `convertible to '>
      <Font 
       <FTag `program'>
      > # end of Font
      <String `bool'>
     >
    > # end of Para
   > # end of CellContent
  > # end of Cell
  <Cell 
   <CellContent 
    <Notes 
    > # end of Notes
    <Para 
     <Unique 5522>
     <PgfTag `CellBody'>
     <Pgf 
      <PgfFont 
       <FTag `'>
       <FFamily `Courier'>
       <FVar `Regular'>
       <FWeight `Regular'>
       <FAngle `Regular'>
       <FPostScriptName `Courier'>
       <FSize  9.0 pt>
       <FUnderlining FNoUnderlining >
       <FUnderline No >
       <FDoubleUnderline No >
       <FNumericUnderline No >
       <FOverline No >
       <FStrike No >
       <FChangeBar No >
       <FOutline No >
       <FShadow No >
       <FPairKern No >
       <FCase FAsTyped >
       <FPosition FNormal >
       <FSupScript No >
       <FSubScript No >
       <FDX  0.0 pt>
       <FDY  0.0 pt>
       <FDW  0.0 pt>
       <FSeparation 0>
       <FColor `Black'>
      > # end of PgfFont
     > # end of Pgf
     <ParaLine 
      <Font 
       <FTag `program'>
      > # end of Font
      <String `!(a == b)'>
     >
    > # end of Para
   > # end of CellContent
  > # end of Cell
  <Cell 
   <CellContent 
    <Notes 
    > # end of Notes
    <Para 
     <Unique 5524>
     <PgfTag `CellBody'>
     <ParaLine 
     >
    > # end of Para
   > # end of CellContent
  > # end of Cell
  <Cell 
   <CellContent 
    <Notes 
    > # end of Notes
    <Para 
     <Unique 5526>
     <PgfTag `CellBody'>
     <ParaLine 
      <String `linear'>
     >
    > # end of Para
   > # end of CellContent
  > # end of Cell
 > # end of Row
 <Row 
  <RowMaxHeight  14.0">
  <RowHeight  0.72222">
  <Cell 
   <CellContent 
    <Notes 
    > # end of Notes
    <Para 
     <Unique 5528>
     <PgfTag `CellBody'>
     <Pgf 
      <PgfFont 
       <FTag `'>
       <FFamily `Courier'>
       <FVar `Regular'>
       <FWeight `Regular'>
       <FAngle `Regular'>
       <FPostScriptName `Courier'>
       <FSize  9.0 pt>
       <FUnderlining FNoUnderlining >
       <FUnderline No >
       <FDoubleUnderline No >
       <FNumericUnderline No >
       <FOverline No >
       <FStrike No >
       <FChangeBar No >
       <FOutline No >
       <FShadow No >
       <FPairKern No >
       <FCase FAsTyped >
       <FPosition FNormal >
       <FSupScript No >
       <FSubScript No >
       <FDX  0.0 pt>
       <FDY  0.0 pt>
       <FDW  0.0 pt>
       <FSeparation 0>
       <FColor `Black'>
      > # end of PgfFont
     > # end of Pgf
     <ParaLine 
      <Font 
       <FTag `program'>
      > # end of Font
      <String `r = a'>
     >
    > # end of Para
   > # end of CellContent
  > # end of Cell
  <Cell 
   <CellContent 
    <Notes 
    > # end of Notes
    <Para 
     <Unique 5530>
     <PgfTag `CellBody'>
     <ParaLine 
      <Font 
       <FTag `program'>
      > # end of Font
      <String `X&'>
     >
    > # end of Para
   > # end of CellContent
  > # end of Cell
  <Cell 
   <CellContent 
    <Notes 
    > # end of Notes
    <Para 
     <Unique 5532>
     <PgfTag `CellBody'>
     <Pgf 
      <PgfFont 
       <FTag `'>
       <FFamily `Courier'>
       <FVar `Regular'>
       <FWeight `Regular'>
       <FAngle `Regular'>
       <FPostScriptName `Courier'>
       <FSize  9.0 pt>
       <FUnderlining FNoUnderlining >
       <FUnderline No >
       <FDoubleUnderline No >
       <FNumericUnderline No >
       <FOverline No >
       <FStrike No >
       <FChangeBar No >
       <FOutline No >
       <FShadow No >
       <FPairKern No >
       <FCase FAsTyped >
       <FPosition FNormal >
       <FSupScript No >
       <FSubScript No >
       <FDX  0.0 pt>
       <FDY  0.0 pt>
       <FDW  0.0 pt>
       <FSeparation 0>
       <FColor `Black'>
      > # end of PgfFont
     > # end of Pgf
     <ParaLine 
      <Font 
       <FTag `program'>
      > # end of Font
      <String `if (&r != &a) {'>
     >
    > # end of Para
    <Para 
     <Unique 5533>
     <PgfTag `CellBody'>
     <Pgf 
      <PgfFIndent  0.21944">
      <PgfFont 
       <FTag `'>
       <FFamily `Courier'>
       <FVar `Regular'>
       <FWeight `Regular'>
       <FAngle `Regular'>
       <FPostScriptName `Courier'>
       <FSize  9.0 pt>
       <FUnderlining FNoUnderlining >
       <FUnderline No >
       <FDoubleUnderline No >
       <FNumericUnderline No >
       <FOverline No >
       <FStrike No >
       <FChangeBar No >
       <FOutline No >
       <FShadow No >
       <FPairKern No >
       <FCase FAsTyped >
       <FPosition FNormal >
       <FSupScript No >
       <FSubScript No >
       <FDX  0.0 pt>
       <FDY  0.0 pt>
       <FDW  0.0 pt>
       <FSeparation 0>
       <FColor `Black'>
      > # end of PgfFont
     > # end of Pgf
     <ParaLine 
      <String `(&r)-\>X::~X();'>
     >
    > # end of Para
    <Para 
     <Unique 5534>
     <PgfTag `CellBody'>
     <Pgf 
      <PgfFIndent  0.21944">
      <PgfFont 
       <FTag `'>
       <FFamily `Courier'>
       <FVar `Regular'>
       <FWeight `Regular'>
       <FAngle `Regular'>
       <FPostScriptName `Courier'>
       <FSize  9.0 pt>
       <FUnderlining FNoUnderlining >
       <FUnderline No >
       <FDoubleUnderline No >
       <FNumericUnderline No >
       <FOverline No >
       <FStrike No >
       <FChangeBar No >
       <FOutline No >
       <FShadow No >
       <FPairKern No >
       <FCase FAsTyped >
       <FPosition FNormal >
       <FSupScript No >
       <FSubScript No >
       <FDX  0.0 pt>
       <FDY  0.0 pt>
       <FDW  0.0 pt>
       <FSeparation 0>
       <FColor `Black'>
      > # end of PgfFont
     > # end of Pgf
     <ParaLine 
      <String `new (&r) X(a); '>
     >
    > # end of Para
    <Para 
     <Unique 5535>
     <PgfTag `CellBody'>
     <Pgf 
      <PgfFIndent  0.21944">
      <PgfFont 
       <FTag `'>
       <FFamily `Courier'>
       <FVar `Regular'>
       <FWeight `Regular'>
       <FAngle `Regular'>
       <FPostScriptName `Courier'>
       <FSize  9.0 pt>
       <FUnderlining FNoUnderlining >
       <FUnderline No >
       <FDoubleUnderline No >
       <FNumericUnderline No >
       <FOverline No >
       <FStrike No >
       <FChangeBar No >
       <FOutline No >
       <FShadow No >
       <FPairKern No >
       <FCase FAsTyped >
       <FPosition FNormal >
       <FSupScript No >
       <FSubScript No >
       <FDX  0.0 pt>
       <FDY  0.0 pt>
       <FDW  0.0 pt>
       <FSeparation 0>
       <FColor `Black'>
      > # end of PgfFont
     > # end of Pgf
     <ParaLine 
      <String `return r; }'>
     >
    > # end of Para
   > # end of CellContent
  > # end of Cell
  <Cell 
   <CellContent 
    <Notes 
    > # end of Notes
    <Para 
     <Unique 5537>
     <PgfTag `CellBody'>
     <ParaLine 
      <String `post: '>
      <Font 
       <FTag `program'>
      > # end of Font
      <String `r == a.'>
     >
    > # end of Para
   > # end of CellContent
  > # end of Cell
  <Cell 
   <CellContent 
    <Notes 
    > # end of Notes
    <Para 
     <Unique 5539>
     <PgfTag `CellBody'>
     <ParaLine 
      <String `linear'>
     >
    > # end of Para
   > # end of CellContent
  > # end of Cell
 > # end of Row
 <Row 
  <RowMaxHeight  14.0">
  <RowHeight  0.875">
  <Cell 
   <CellContent 
    <Notes 
    > # end of Notes
    <Para 
     <Unique 5541>
     <PgfTag `CellBody'>
     <Pgf 
      <PgfFont 
       <FTag `'>
       <FFamily `Courier'>
       <FVar `Regular'>
       <FWeight `Regular'>
       <FAngle `Regular'>
       <FPostScriptName `Courier'>
       <FSize  9.0 pt>
       <FUnderlining FNoUnderlining >
       <FUnderline No >
       <FDoubleUnderline No >
       <FNumericUnderline No >
       <FOverline No >
       <FStrike No >
       <FChangeBar No >
       <FOutline No >
       <FShadow No >
       <FPairKern No >
       <FCase FAsTyped >
       <FPosition FNormal >
       <FSupScript No >
       <FSubScript No >
       <FDX  0.0 pt>
       <FDY  0.0 pt>
       <FDW  0.0 pt>
       <FSeparation 0>
       <FColor `Black'>
      > # end of PgfFont
     > # end of Pgf
     <ParaLine 
      <Font 
       <FTag `program'>
      > # end of Font
      <String `a.size()'>
     >
    > # end of Para
   > # end of CellContent
  > # end of Cell
  <Cell 
   <CellContent 
    <Notes 
    > # end of Notes
    <Para 
     <Unique 5543>
     <PgfTag `CellBody'>
     <Pgf 
      <PgfFont 
       <FTag `'>
       <FFamily `Courier'>
       <FVar `Regular'>
       <FWeight `Regular'>
       <FAngle `Regular'>
       <FPostScriptName `Courier'>
       <FSize  9.0 pt>
       <FUnderlining FNoUnderlining >
       <FUnderline No >
       <FDoubleUnderline No >
       <FNumericUnderline No >
       <FOverline No >
       <FStrike No >
       <FChangeBar No >
       <FOutline No >
       <FShadow No >
       <FPairKern No >
       <FCase FAsTyped >
       <FPosition FNormal >
       <FSupScript No >
       <FSubScript No >
       <FDX  0.0 pt>
       <FDY  0.0 pt>
       <FDW  0.0 pt>
       <FSeparation 0>
       <FColor `Black'>
      > # end of PgfFont
     > # end of Pgf
     <ParaLine 
      <Font 
       <FTag `program'>
      > # end of Font
      <String `size_type'>
     >
    > # end of Para
   > # end of CellContent
  > # end of Cell
  <Cell 
   <CellContent 
    <Notes 
    > # end of Notes
    <Para 
     <Unique 5545>
     <PgfTag `CellBody'>
     <Pgf 
      <PgfFont 
       <FTag `'>
       <FFamily `Courier'>
       <FVar `Regular'>
       <FWeight `Regular'>
       <FAngle `Regular'>
       <FPostScriptName `Courier'>
       <FSize  9.0 pt>
       <FUnderlining FNoUnderlining >
       <FUnderline No >
       <FDoubleUnderline No >
       <FNumericUnderline No >
       <FOverline No >
       <FStrike No >
       <FChangeBar No >
       <FOutline No >
       <FShadow No >
       <FPairKern No >
       <FCase FAsTyped >
       <FPosition FNormal >
       <FSupScript No >
       <FSubScript No >
       <FDX  0.0 pt>
       <FDY  0.0 pt>
       <FDW  0.0 pt>
       <FSeparation 0>
       <FColor `Black'>
      > # end of PgfFont
     > # end of Pgf
     <ParaLine 
      <Font 
       <FTag `program'>
      > # end of Font
      <String `size_type n = 0;'>
     >
    > # end of Para
    <Para 
     <Unique 8834>
     <PgfTag `CellBody'>
     <Pgf 
      <PgfFont 
       <FTag `'>
       <FFamily `Courier'>
       <FVar `Regular'>
       <FWeight `Regular'>
       <FAngle `Regular'>
       <FPostScriptName `Courier'>
       <FSize  9.0 pt>
       <FUnderlining FNoUnderlining >
       <FUnderline No >
       <FDoubleUnderline No >
       <FNumericUnderline No >
       <FOverline No >
       <FStrike No >
       <FChangeBar No >
       <FOutline No >
       <FShadow No >
       <FPairKern No >
       <FCase FAsTyped >
       <FPosition FNormal >
       <FSupScript No >
       <FSubScript No >
       <FDX  0.0 pt>
       <FDY  0.0 pt>
       <FDW  0.0 pt>
       <FSeparation 0>
       <FColor `Black'>
      > # end of PgfFont
     > # end of Pgf
     <ParaLine 
      <Font 
       <FTag `program'>
      > # end of Font
      <String `distance'>
     >
    > # end of Para
    <Para 
     <Unique 8833>
     <PgfTag `CellBody'>
     <Pgf 
      <PgfFont 
       <FTag `'>
       <FFamily `Courier'>
       <FVar `Regular'>
       <FWeight `Regular'>
       <FAngle `Regular'>
       <FPostScriptName `Courier'>
       <FSize  9.0 pt>
       <FUnderlining FNoUnderlining >
       <FUnderline No >
       <FDoubleUnderline No >
       <FNumericUnderline No >
       <FOverline No >
       <FStrike No >
       <FChangeBar No >
       <FOutline No >
       <FShadow No >
       <FPairKern No >
       <FCase FAsTyped >
       <FPosition FNormal >
       <FSupScript No >
       <FSubScript No >
       <FDX  0.0 pt>
       <FDY  0.0 pt>
       <FDW  0.0 pt>
       <FSeparation 0>
       <FColor `Black'>
      > # end of PgfFont
     > # end of Pgf
     <ParaLine 
      <Font 
       <FTag `program'>
      > # end of Font
      <String `('>
      <String `a.'>
      <String `begin('>
      <String `)'>
      <String `,'>
      <String ` '>
     >
     <ParaLine 
      <String `a'>
      <String `.'>
      <String `end('>
      <String `)'>
      <String `, n);'>
     >
    > # end of Para
    <Para 
     <Unique 8835>
     <PgfTag `CellBody'>
     <Pgf 
      <PgfFont 
       <FTag `'>
       <FFamily `Courier'>
       <FVar `Regular'>
       <FWeight `Regular'>
       <FAngle `Regular'>
       <FPostScriptName `Courier'>
       <FSize  9.0 pt>
       <FUnderlining FNoUnderlining >
       <FUnderline No >
       <FDoubleUnderline No >
       <FNumericUnderline No >
       <FOverline No >
       <FStrike No >
       <FChangeBar No >
       <FOutline No >
       <FShadow No >
       <FPairKern No >
       <FCase FAsTyped >
       <FPosition FNormal >
       <FSupScript No >
       <FSubScript No >
       <FDX  0.0 pt>
       <FDY  0.0 pt>
       <FDW  0.0 pt>
       <FSeparation 0>
       <FColor `Black'>
      > # end of PgfFont
     > # end of Pgf
     <ParaLine 
      <String `return n;'>
     >
    > # end of Para
   > # end of CellContent
  > # end of Cell
  <Cell 
   <CellContent 
    <Notes 
    > # end of Notes
    <Para 
     <Unique 5547>
     <PgfTag `CellBody'>
     <ParaLine 
     >
    > # end of Para
   > # end of CellContent
  > # end of Cell
  <Cell 
   <CellContent 
    <Notes 
    > # end of Notes
    <Para 
     <Unique 5549>
     <PgfTag `CellBody'>
     <ParaLine 
      <String `constant'>
     >
    > # end of Para
   > # end of CellContent
  > # end of Cell
 > # end of Row
 <Row 
  <RowMaxHeight  14.0">
  <RowHeight  0.44444">
  <Cell 
   <CellContent 
    <Notes 
    > # end of Notes
    <Para 
     <Unique 5551>
     <PgfTag `CellBody'>
     <Pgf 
      <PgfFont 
       <FTag `'>
       <FFamily `Courier'>
       <FVar `Regular'>
       <FWeight `Regular'>
       <FAngle `Regular'>
       <FPostScriptName `Courier'>
       <FSize  9.0 pt>
       <FUnderlining FNoUnderlining >
       <FUnderline No >
       <FDoubleUnderline No >
       <FNumericUnderline No >
       <FOverline No >
       <FStrike No >
       <FChangeBar No >
       <FOutline No >
       <FShadow No >
       <FPairKern No >
       <FCase FAsTyped >
       <FPosition FNormal >
       <FSupScript No >
       <FSubScript No >
       <FDX  0.0 pt>
       <FDY  0.0 pt>
       <FDW  0.0 pt>
       <FSeparation 0>
       <FColor `Black'>
      > # end of PgfFont
     > # end of Pgf
     <ParaLine 
      <String `a.max_size()'>
     >
    > # end of Para
   > # end of CellContent
  > # end of Cell
  <Cell 
   <CellContent 
    <Notes 
    > # end of Notes
    <Para 
     <Unique 5553>
     <PgfTag `CellBody'>
     <Pgf 
      <PgfFont 
       <FTag `'>
       <FFamily `Courier'>
       <FVar `Regular'>
       <FWeight `Regular'>
       <FAngle `Regular'>
       <FPostScriptName `Courier'>
       <FSize  9.0 pt>
       <FUnderlining FNoUnderlining >
       <FUnderline No >
       <FDoubleUnderline No >
       <FNumericUnderline No >
       <FOverline No >
       <FStrike No >
       <FChangeBar No >
       <FOutline No >
       <FShadow No >
       <FPairKern No >
       <FCase FAsTyped >
       <FPosition FNormal >
       <FSupScript No >
       <FSubScript No >
       <FDX  0.0 pt>
       <FDY  0.0 pt>
       <FDW  0.0 pt>
       <FSeparation 0>
       <FColor `Black'>
      > # end of PgfFont
     > # end of Pgf
     <ParaLine 
      <String `size_type'>
     >
    > # end of Para
   > # end of CellContent
  > # end of Cell
  <Cell 
   <CellContent 
    <Notes 
    > # end of Notes
    <Para 
     <Unique 5555>
     <PgfTag `CellBody'>
     <Pgf 
      <PgfFont 
       <FTag `'>
       <FFamily `Courier'>
       <FVar `Regular'>
       <FWeight `Regular'>
       <FAngle `Regular'>
       <FPostScriptName `Courier'>
       <FSize  9.0 pt>
       <FUnderlining FNoUnderlining >
       <FUnderline No >
       <FDoubleUnderline No >
       <FNumericUnderline No >
       <FOverline No >
       <FStrike No >
       <FChangeBar No >
       <FOutline No >
       <FShadow No >
       <FPairKern No >
       <FCase FAsTyped >
       <FPosition FNormal >
       <FSupScript No >
       <FSubScript No >
       <FDX  0.0 pt>
       <FDY  0.0 pt>
       <FDW  0.0 pt>
       <FSeparation 0>
       <FColor `Black'>
      > # end of PgfFont
     > # end of Pgf
     <ParaLine 
     >
    > # end of Para
   > # end of CellContent
  > # end of Cell
  <Cell 
   <CellContent 
    <Notes 
    > # end of Notes
    <Para 
     <Unique 5557>
     <PgfTag `CellBody'>
     <ParaLine 
      <Font 
       <FTag `program'>
      > # end of Font
      <String `size()'>
      <Font 
       <FTag `'>
      > # end of Font
      <String ` of the largest possible '>
     >
     <ParaLine 
      <String `container.'>
     >
    > # end of Para
   > # end of CellContent
  > # end of Cell
  <Cell 
   <CellContent 
    <Notes 
    > # end of Notes
    <Para 
     <Unique 5559>
     <PgfTag `CellBody'>
     <ParaLine 
      <String `constant'>
     >
    > # end of Para
   > # end of CellContent
  > # end of Cell
 > # end of Row
 <Row 
  <RowMaxHeight  14.0">
  <RowHeight  0.27778">
  <Cell 
   <CellContent 
    <Notes 
    > # end of Notes
    <Para 
     <Unique 5561>
     <PgfTag `CellBody'>
     <Pgf 
      <PgfFont 
       <FTag `'>
       <FFamily `Courier'>
       <FVar `Regular'>
       <FWeight `Regular'>
       <FAngle `Regular'>
       <FPostScriptName `Courier'>
       <FSize  9.0 pt>
       <FUnderlining FNoUnderlining >
       <FUnderline No >
       <FDoubleUnderline No >
       <FNumericUnderline No >
       <FOverline No >
       <FStrike No >
       <FChangeBar No >
       <FOutline No >
       <FShadow No >
       <FPairKern No >
       <FCase FAsTyped >
       <FPosition FNormal >
       <FSupScript No >
       <FSubScript No >
       <FDX  0.0 pt>
       <FDY  0.0 pt>
       <FDW  0.0 pt>
       <FSeparation 0>
       <FColor `Black'>
      > # end of PgfFont
     > # end of Pgf
     <ParaLine 
      <Font 
       <FTag `program'>
      > # end of Font
      <String `a.empty()'>
     >
    > # end of Para
   > # end of CellContent
  > # end of Cell
  <Cell 
   <CellContent 
    <Notes 
    > # end of Notes
    <Para 
     <Unique 5563>
     <PgfTag `CellBody'>
     <ParaLine 
      <String `convertible to '>
      <Font 
       <FTag `program'>
      > # end of Font
      <String `bool'>
     >
    > # end of Para
   > # end of CellContent
  > # end of Cell
  <Cell 
   <CellContent 
    <Notes 
    > # end of Notes
    <Para 
     <Unique 5565>
     <PgfTag `CellBody'>
     <Pgf 
      <PgfFont 
       <FTag `'>
       <FFamily `Courier'>
       <FVar `Regular'>
       <FWeight `Regular'>
       <FAngle `Regular'>
       <FPostScriptName `Courier'>
       <FSize  9.0 pt>
       <FUnderlining FNoUnderlining >
       <FUnderline No >
       <FDoubleUnderline No >
       <FNumericUnderline No >
       <FOverline No >
       <FStrike No >
       <FChangeBar No >
       <FOutline No >
       <FShadow No >
       <FPairKern No >
       <FCase FAsTyped >
       <FPosition FNormal >
       <FSupScript No >
       <FSubScript No >
       <FDX  0.0 pt>
       <FDY  0.0 pt>
       <FDW  0.0 pt>
       <FSeparation 0>
       <FColor `Black'>
      > # end of PgfFont
     > # end of Pgf
     <ParaLine 
      <Font 
       <FTag `program'>
      > # end of Font
      <String `a.size() == 0'>
     >
    > # end of Para
   > # end of CellContent
  > # end of Cell
  <Cell 
   <CellContent 
    <Notes 
    > # end of Notes
    <Para 
     <Unique 5567>
     <PgfTag `program'>
     <ParaLine 
     >
    > # end of Para
   > # end of CellContent
  > # end of Cell
  <Cell 
   <CellContent 
    <Notes 
    > # end of Notes
    <Para 
     <Unique 5569>
     <PgfTag `CellBody'>
     <ParaLine 
      <String `constant'>
     >
    > # end of Para
   > # end of CellContent
  > # end of Cell
 > # end of Row
 <Row 
  <RowMaxHeight  14.0">
  <RowHeight  0.94444">
  <Cell 
   <CellContent 
    <Notes 
    > # end of Notes
    <Para 
     <Unique 5571>
     <PgfTag `CellBody'>
     <Pgf 
      <PgfFont 
       <FTag `'>
       <FFamily `Courier'>
       <FVar `Regular'>
       <FWeight `Regular'>
       <FAngle `Regular'>
       <FPostScriptName `Courier'>
       <FSize  9.0 pt>
       <FUnderlining FNoUnderlining >
       <FUnderline No >
       <FDoubleUnderline No >
       <FNumericUnderline No >
       <FOverline No >
       <FStrike No >
       <FChangeBar No >
       <FOutline No >
       <FShadow No >
       <FPairKern No >
       <FCase FAsTyped >
       <FPosition FNormal >
       <FSupScript No >
       <FSubScript No >
       <FDX  0.0 pt>
       <FDY  0.0 pt>
       <FDW  0.0 pt>
       <FSeparation 0>
       <FColor `Black'>
      > # end of PgfFont
     > # end of Pgf
     <ParaLine 
      <Font 
       <FTag `program'>
      > # end of Font
      <String `a < b'>
     >
    > # end of Para
   > # end of CellContent
  > # end of Cell
  <Cell 
   <CellContent 
    <Notes 
    > # end of Notes
    <Para 
     <Unique 5573>
     <PgfTag `CellBody'>
     <Pgf 
      <PgfFont 
       <FTag `'>
       <FFamily `Courier'>
       <FVar `Regular'>
       <FWeight `Regular'>
       <FAngle `Regular'>
       <FPostScriptName `Courier'>
       <FSize  9.0 pt>
       <FUnderlining FNoUnderlining >
       <FUnderline No >
       <FDoubleUnderline No >
       <FNumericUnderline No >
       <FOverline No >
       <FStrike No >
       <FChangeBar No >
       <FOutline No >
       <FShadow No >
       <FPairKern No >
       <FCase FAsTyped >
       <FPosition FNormal >
       <FSupScript No >
       <FSubScript No >
       <FDX  0.0 pt>
       <FDY  0.0 pt>
       <FDW  0.0 pt>
       <FSeparation 0>
       <FColor `Black'>
      > # end of PgfFont
     > # end of Pgf
     <ParaLine 
      <Font 
       <FTag `'>
       <FFamily `Times'>
       <FPostScriptName `Times-Roman'>
       <FSize  10.0 pt>
       <FPairKern Yes >
      > # end of Font
      <String `convertible to '>
      <Font 
       <FTag `program'>
      > # end of Font
      <String `bool'>
     >
    > # end of Para
   > # end of CellContent
  > # end of Cell
  <Cell 
   <CellContent 
    <Notes 
    > # end of Notes
    <Para 
     <Unique 5575>
     <PgfTag `CellBody'>
     <ParaLine 
      <Font 
       <FTag `program'>
      > # end of Font
      <String `lexicographical_c'>
     >
     <ParaLine 
      <String `ompare(a.begin(),'>
     >
     <ParaLine 
      <String `a'>
      <String `.end(), '>
     >
     <ParaLine 
      <String `b.begin(), '>
     >
     <ParaLine 
      <String `b.end())'>
     >
    > # end of Para
   > # end of CellContent
  > # end of Cell
  <Cell 
   <CellContent 
    <Notes 
    > # end of Notes
    <Para 
     <Unique 5577>
     <PgfTag `CellBody'>
     <ParaLine 
      <String `pre: '>
      <Font 
       <FTag `program'>
      > # end of Font
      <String `<'>
      <Font 
       <FTag `'>
      > # end of Font
      <String ` is defined for values of '>
      <Font 
       <FTag `program'>
      > # end of Font
      <String `T'>
      <Font 
       <FTag `'>
      > # end of Font
      <String `.'>
     >
    > # end of Para
    <Para 
     <Unique 5578>
     <PgfTag `CellBody'>
     <ParaLine 
      <Font 
       <FTag `program'>
      > # end of Font
      <String `<'>
      <Font 
       <FTag `'>
      > # end of Font
      <String ` is a total ordering relation. '>
     >
    > # end of Para
    <Para 
     <Unique 5579>
     <PgfTag `CellBody'>
     <ParaLine 
      <Font 
       <FTag `program'>
      > # end of Font
      <String `lexicographical_compare'>
      <Font 
       <FTag `'>
      > # end of Font
      <String ` '>
     >
     <ParaLine 
      <String `is defined in the algorithms sec'>
      <Char SoftHyphen >
     >
     <ParaLine 
      <String `tion.'>
     >
    > # end of Para
   > # end of CellContent
  > # end of Cell
  <Cell 
   <CellContent 
    <Notes 
    > # end of Notes
    <Para 
     <Unique 5581>
     <PgfTag `CellBody'>
     <ParaLine 
      <String `linear'>
     >
    > # end of Para
   > # end of CellContent
  > # end of Cell
 > # end of Row
 <Row 
  <RowMaxHeight  14.0">
  <RowHeight  0.27778">
  <Cell 
   <CellContent 
    <Notes 
    > # end of Notes
    <Para 
     <Unique 5583>
     <PgfTag `CellBody'>
     <Pgf 
      <PgfFont 
       <FTag `'>
       <FFamily `Courier'>
       <FVar `Regular'>
       <FWeight `Regular'>
       <FAngle `Regular'>
       <FPostScriptName `Courier'>
       <FSize  9.0 pt>
       <FUnderlining FNoUnderlining >
       <FUnderline No >
       <FDoubleUnderline No >
       <FNumericUnderline No >
       <FOverline No >
       <FStrike No >
       <FChangeBar No >
       <FOutline No >
       <FShadow No >
       <FPairKern No >
       <FCase FAsTyped >
       <FPosition FNormal >
       <FSupScript No >
       <FSubScript No >
       <FDX  0.0 pt>
       <FDY  0.0 pt>
       <FDW  0.0 pt>
       <FSeparation 0>
       <FColor `Black'>
      > # end of PgfFont
     > # end of Pgf
     <ParaLine 
      <Font 
       <FTag `program'>
      > # end of Font
      <String `a \> b'>
     >
    > # end of Para
   > # end of CellContent
  > # end of Cell
  <Cell 
   <CellContent 
    <Notes 
    > # end of Notes
    <Para 
     <Unique 5585>
     <PgfTag `CellBody'>
     <Pgf 
      <PgfFont 
       <FTag `'>
       <FFamily `Courier'>
       <FVar `Regular'>
       <FWeight `Regular'>
       <FAngle `Regular'>
       <FPostScriptName `Courier'>
       <FSize  9.0 pt>
       <FUnderlining FNoUnderlining >
       <FUnderline No >
       <FDoubleUnderline No >
       <FNumericUnderline No >
       <FOverline No >
       <FStrike No >
       <FChangeBar No >
       <FOutline No >
       <FShadow No >
       <FPairKern No >
       <FCase FAsTyped >
       <FPosition FNormal >
       <FSupScript No >
       <FSubScript No >
       <FDX  0.0 pt>
       <FDY  0.0 pt>
       <FDW  0.0 pt>
       <FSeparation 0>
       <FColor `Black'>
      > # end of PgfFont
     > # end of Pgf
     <ParaLine 
      <Font 
       <FTag `'>
       <FFamily `Times'>
       <FPostScriptName `Times-Roman'>
       <FSize  10.0 pt>
       <FPairKern Yes >
      > # end of Font
      <String `convertible to '>
      <Font 
       <FTag `program'>
      > # end of Font
      <String `bool'>
     >
    > # end of Para
   > # end of CellContent
  > # end of Cell
  <Cell 
   <CellContent 
    <Notes 
    > # end of Notes
    <Para 
     <Unique 5587>
     <PgfTag `CellBody'>
     <ParaLine 
      <Font 
       <FTag `program'>
      > # end of Font
      <String `b < a'>
     >
    > # end of Para
   > # end of CellContent
  > # end of Cell
  <Cell 
   <CellContent 
    <Notes 
    > # end of Notes
    <Para 
     <Unique 5589>
     <PgfTag `CellBody'>
     <ParaLine 
     >
    > # end of Para
   > # end of CellContent
  > # end of Cell
  <Cell 
   <CellContent 
    <Notes 
    > # end of Notes
    <Para 
     <Unique 5591>
     <PgfTag `CellBody'>
     <ParaLine 
      <String `linear'>
     >
    > # end of Para
   > # end of CellContent
  > # end of Cell
 > # end of Row
 <Row 
  <RowMaxHeight  14.0">
  <RowHeight  0.27778">
  <Cell 
   <CellContent 
    <Notes 
    > # end of Notes
    <Para 
     <Unique 5593>
     <PgfTag `CellBody'>
     <Pgf 
      <PgfFont 
       <FTag `'>
       <FFamily `Courier'>
       <FVar `Regular'>
       <FWeight `Regular'>
       <FAngle `Regular'>
       <FPostScriptName `Courier'>
       <FSize  9.0 pt>
       <FUnderlining FNoUnderlining >
       <FUnderline No >
       <FDoubleUnderline No >
       <FNumericUnderline No >
       <FOverline No >
       <FStrike No >
       <FChangeBar No >
       <FOutline No >
       <FShadow No >
       <FPairKern No >
       <FCase FAsTyped >
       <FPosition FNormal >
       <FSupScript No >
       <FSubScript No >
       <FDX  0.0 pt>
       <FDY  0.0 pt>
       <FDW  0.0 pt>
       <FSeparation 0>
       <FColor `Black'>
      > # end of PgfFont
     > # end of Pgf
     <ParaLine 
      <Font 
       <FTag `program'>
      > # end of Font
      <String `a <= b'>
     >
    > # end of Para
   > # end of CellContent
  > # end of Cell
  <Cell 
   <CellContent 
    <Notes 
    > # end of Notes
    <Para 
     <Unique 5595>
     <PgfTag `CellBody'>
     <Pgf 
      <PgfFont 
       <FTag `'>
       <FFamily `Courier'>
       <FVar `Regular'>
       <FWeight `Regular'>
       <FAngle `Regular'>
       <FPostScriptName `Courier'>
       <FSize  9.0 pt>
       <FUnderlining FNoUnderlining >
       <FUnderline No >
       <FDoubleUnderline No >
       <FNumericUnderline No >
       <FOverline No >
       <FStrike No >
       <FChangeBar No >
       <FOutline No >
       <FShadow No >
       <FPairKern No >
       <FCase FAsTyped >
       <FPosition FNormal >
       <FSupScript No >
       <FSubScript No >
       <FDX  0.0 pt>
       <FDY  0.0 pt>
       <FDW  0.0 pt>
       <FSeparation 0>
       <FColor `Black'>
      > # end of PgfFont
     > # end of Pgf
     <ParaLine 
      <Font 
       <FTag `'>
       <FFamily `Times'>
       <FPostScriptName `Times-Roman'>
       <FSize  10.0 pt>
       <FPairKern Yes >
      > # end of Font
      <String `convertible to '>
      <Font 
       <FTag `program'>
      > # end of Font
      <String `bool'>
     >
    > # end of Para
   > # end of CellContent
  > # end of Cell
  <Cell 
   <CellContent 
    <Notes 
    > # end of Notes
    <Para 
     <Unique 5597>
     <PgfTag `CellBody'>
     <ParaLine 
      <Font 
       <FTag `program'>
      > # end of Font
      <String `!(a \> b)'>
     >
    > # end of Para
   > # end of CellContent
  > # end of Cell
  <Cell 
   <CellContent 
    <Notes 
    > # end of Notes
    <Para 
     <Unique 5599>
     <PgfTag `CellBody'>
     <ParaLine 
     >
    > # end of Para
   > # end of CellContent
  > # end of Cell
  <Cell 
   <CellContent 
    <Notes 
    > # end of Notes
    <Para 
     <Unique 5601>
     <PgfTag `CellBody'>
     <ParaLine 
      <String `linear'>
     >
    > # end of Para
   > # end of CellContent
  > # end of Cell
 > # end of Row
 <Row 
  <RowMaxHeight  14.0">
  <RowHeight  0.27778">
  <Cell 
   <CellContent 
    <Notes 
    > # end of Notes
    <Para 
     <Unique 5603>
     <PgfTag `CellBody'>
     <Pgf 
      <PgfFont 
       <FTag `'>
       <FFamily `Courier'>
       <FVar `Regular'>
       <FWeight `Regular'>
       <FAngle `Regular'>
       <FPostScriptName `Courier'>
       <FSize  9.0 pt>
       <FUnderlining FNoUnderlining >
       <FUnderline No >
       <FDoubleUnderline No >
       <FNumericUnderline No >
       <FOverline No >
       <FStrike No >
       <FChangeBar No >
       <FOutline No >
       <FShadow No >
       <FPairKern No >
       <FCase FAsTyped >
       <FPosition FNormal >
       <FSupScript No >
       <FSubScript No >
       <FDX  0.0 pt>
       <FDY  0.0 pt>
       <FDW  0.0 pt>
       <FSeparation 0>
       <FColor `Black'>
      > # end of PgfFont
     > # end of Pgf
     <ParaLine 
      <Font 
       <FTag `program'>
      > # end of Font
      <String `a \>= b'>
     >
    > # end of Para
   > # end of CellContent
  > # end of Cell
  <Cell 
   <CellContent 
    <Notes 
    > # end of Notes
    <Para 
     <Unique 5605>
     <PgfTag `CellBody'>
     <ParaLine 
      <String `convertible to '>
      <Font 
       <FTag `program'>
      > # end of Font
      <String `bool'>
     >
    > # end of Para
   > # end of CellContent
  > # end of Cell
  <Cell 
   <CellContent 
    <Notes 
    > # end of Notes
    <Para 
     <Unique 5607>
     <PgfTag `CellBody'>
     <Pgf 
      <PgfFont 
       <FTag `'>
       <FFamily `Courier'>
       <FVar `Regular'>
       <FWeight `Regular'>
       <FAngle `Regular'>
       <FPostScriptName `Courier'>
       <FSize  9.0 pt>
       <FUnderlining FNoUnderlining >
       <FUnderline No >
       <FDoubleUnderline No >
       <FNumericUnderline No >
       <FOverline No >
       <FStrike No >
       <FChangeBar No >
       <FOutline No >
       <FShadow No >
       <FPairKern No >
       <FCase FAsTyped >
       <FPosition FNormal >
       <FSupScript No >
       <FSubScript No >
       <FDX  0.0 pt>
       <FDY  0.0 pt>
       <FDW  0.0 pt>
       <FSeparation 0>
       <FColor `Black'>
      > # end of PgfFont
     > # end of Pgf
     <ParaLine 
      <Font 
       <FTag `program'>
      > # end of Font
      <String `!(a < b)'>
     >
    > # end of Para
   > # end of CellContent
  > # end of Cell
  <Cell 
   <CellContent 
    <Notes 
    > # end of Notes
    <Para 
     <Unique 5609>
     <PgfTag `CellBody'>
     <ParaLine 
     >
    > # end of Para
   > # end of CellContent
  > # end of Cell
  <Cell 
   <CellContent 
    <Notes 
    > # end of Notes
    <Para 
     <Unique 5611>
     <PgfTag `CellBody'>
     <ParaLine 
      <String `linear'>
     >
    > # end of Para
   > # end of CellContent
  > # end of Cell
 > # end of Row
 <Row 
  <RowMaxHeight  14.0">
  <RowHeight  0.27778">
  <Cell 
   <CellContent 
    <Notes 
    > # end of Notes
    <Para 
     <Unique 5613>
     <PgfTag `CellBody'>
     <Pgf 
      <PgfFont 
       <FTag `'>
       <FFamily `Courier'>
       <FVar `Regular'>
       <FWeight `Regular'>
       <FAngle `Regular'>
       <FPostScriptName `Courier'>
       <FSize  9.0 pt>
       <FUnderlining FNoUnderlining >
       <FUnderline No >
       <FDoubleUnderline No >
       <FNumericUnderline No >
       <FOverline No >
       <FStrike No >
       <FChangeBar No >
       <FOutline No >
       <FShadow No >
       <FPairKern No >
       <FCase FAsTyped >
       <FPosition FNormal >
       <FSupScript No >
       <FSubScript No >
       <FDX  0.0 pt>
       <FDY  0.0 pt>
       <FDW  0.0 pt>
       <FSeparation 0>
       <FColor `Black'>
      > # end of PgfFont
     > # end of Pgf
     <ParaLine 
      <String `a.swap(b)'>
     >
    > # end of Para
   > # end of CellContent
  > # end of Cell
  <Cell 
   <CellContent 
    <Notes 
    > # end of Notes
    <Para 
     <Unique 5615>
     <PgfTag `CellBody'>
     <Pgf 
      <PgfFont 
       <FTag `'>
       <FFamily `Courier'>
       <FVar `Regular'>
       <FWeight `Regular'>
       <FAngle `Regular'>
       <FPostScriptName `Courier'>
       <FSize  9.0 pt>
       <FUnderlining FNoUnderlining >
       <FUnderline No >
       <FDoubleUnderline No >
       <FNumericUnderline No >
       <FOverline No >
       <FStrike No >
       <FChangeBar No >
       <FOutline No >
       <FShadow No >
       <FPairKern No >
       <FCase FAsTyped >
       <FPosition FNormal >
       <FSupScript No >
       <FSubScript No >
       <FDX  0.0 pt>
       <FDY  0.0 pt>
       <FDW  0.0 pt>
       <FSeparation 0>
       <FColor `Black'>
      > # end of PgfFont
     > # end of Pgf
     <ParaLine 
      <Font 
       <FTag `program'>
      > # end of Font
      <String `void'>
     >
    > # end of Para
   > # end of CellContent
  > # end of Cell
  <Cell 
   <CellContent 
    <Notes 
    > # end of Notes
    <Para 
     <Unique 5617>
     <PgfTag `CellBody'>
     <Pgf 
      <PgfFont 
       <FTag `'>
       <FFamily `Courier'>
       <FVar `Regular'>
       <FWeight `Regular'>
       <FAngle `Regular'>
       <FPostScriptName `Courier'>
       <FSize  9.0 pt>
       <FUnderlining FNoUnderlining >
       <FUnderline No >
       <FDoubleUnderline No >
       <FNumericUnderline No >
       <FOverline No >
       <FStrike No >
       <FChangeBar No >
       <FOutline No >
       <FShadow No >
       <FPairKern No >
       <FCase FAsTyped >
       <FPosition FNormal >
       <FSupScript No >
       <FSubScript No >
       <FDX  0.0 pt>
       <FDY  0.0 pt>
       <FDW  0.0 pt>
       <FSeparation 0>
       <FColor `Black'>
      > # end of PgfFont
     > # end of Pgf
     <ParaLine 
      <String `swap(a,b)'>
     >
    > # end of Para
   > # end of CellContent
  > # end of Cell
  <Cell 
   <CellContent 
    <Notes 
    > # end of Notes
    <Para 
     <Unique 5619>
     <PgfTag `CellBody'>
     <ParaLine 
     >
    > # end of Para
   > # end of CellContent
  > # end of Cell
  <Cell 
   <CellContent 
    <Notes 
    > # end of Notes
    <Para 
     <Unique 5621>
     <PgfTag `CellBody'>
     <ParaLine 
      <String `constant'>
     >
    > # end of Para
   > # end of CellContent
  > # end of Cell
 > # end of Row
> # end of TblBody
> # end of Tbl
<Tbl 
<TblID 15>
<TblTag `Format A'>
<TblFormat 
 <TblColumn 
  <TblColumnNum 0>
  <TblColumnWidth  1.0">
  <TblColumnH 
   <Pgf 
    <PgfTag `CellHeading'>
    <PgfAlignment Center >
    <PgfFont 
     <FTag `'>
     <FFamily `Times'>
     <FVar `Regular'>
     <FWeight `Regular'>
     <FAngle `Regular'>
     <FPostScriptName `Times-Roman'>
     <FSize  12.0 pt>
     <FUnderlining FNoUnderlining >
     <FUnderline No >
     <FDoubleUnderline No >
     <FNumericUnderline No >
     <FOverline No >
     <FStrike No >
     <FChangeBar No >
     <FOutline No >
     <FShadow No >
     <FPairKern Yes >
     <FCase FAsTyped >
     <FPosition FNormal >
     <FSupScript No >
     <FSubScript No >
     <FDX  0.0 pt>
     <FDY  0.0 pt>
     <FDW  0.0 pt>
     <FSeparation 0>
     <FColor `Black'>
    > # end of PgfFont
    <PgfHyphenate No >
    <PgfCellAlignment Middle >
    <PgfCellMargins  0.0 pt 2.0 pt 0.0 pt 2.0 pt>
   > # end of Pgf
  > # end of TblColumnH
  <TblColumnBody 
   <PgfTag `CellBody'>
   <Pgf 
    <PgfFont 
     <FTag `'>
     <FFamily `Times'>
     <FVar `Regular'>
     <FWeight `Regular'>
     <FAngle `Regular'>
     <FPostScriptName `Times-Roman'>
     <FSize  12.0 pt>
     <FUnderlining FNoUnderlining >
     <FUnderline No >
     <FDoubleUnderline No >
     <FNumericUnderline No >
     <FOverline No >
     <FStrike No >
     <FChangeBar No >
     <FOutline No >
     <FShadow No >
     <FPairKern Yes >
     <FCase FAsTyped >
     <FPosition FNormal >
     <FSupScript No >
     <FSubScript No >
     <FDX  0.0 pt>
     <FDY  0.0 pt>
     <FDW  0.0 pt>
     <FSeparation 0>
     <FColor `Black'>
    > # end of PgfFont
   > # end of Pgf
  > # end of TblColumnBody
  <TblColumnF 
   <Pgf 
    <PgfTag `CellHeading'>
    <PgfAlignment Center >
    <PgfHyphenate No >
    <PgfCellAlignment Middle >
    <PgfCellMargins  0.0 pt 2.0 pt 0.0 pt 2.0 pt>
   > # end of Pgf
  > # end of TblColumnF
 > # end of TblColumn
 <TblColumn 
  <TblColumnNum 1>
  <TblColumnWidth  1.0">
  <TblColumnH 
  > # end of TblColumnH
  <TblColumnBody 
   <PgfTag `CellBody'>
   <Pgf 
    <PgfFont 
     <FTag `'>
     <FFamily `Times'>
     <FVar `Regular'>
     <FWeight `Regular'>
     <FAngle `Regular'>
     <FPostScriptName `Times-Roman'>
     <FSize  12.0 pt>
     <FUnderlining FNoUnderlining >
     <FUnderline No >
     <FDoubleUnderline No >
     <FNumericUnderline No >
     <FOverline No >
     <FStrike No >
     <FChangeBar No >
     <FOutline No >
     <FShadow No >
     <FPairKern Yes >
     <FCase FAsTyped >
     <FPosition FNormal >
     <FSupScript No >
     <FSubScript No >
     <FDX  0.0 pt>
     <FDY  0.0 pt>
     <FDW  0.0 pt>
     <FSeparation 0>
     <FColor `Black'>
    > # end of PgfFont
   > # end of Pgf
  > # end of TblColumnBody
  <TblColumnF 
   <Pgf 
    <PgfTag `CellHeading'>
    <PgfAlignment Center >
    <PgfHyphenate No >
    <PgfCellAlignment Middle >
    <PgfCellMargins  0.0 pt 2.0 pt 0.0 pt 2.0 pt>
   > # end of Pgf
  > # end of TblColumnF
 > # end of TblColumn
 <TblColumn 
  <TblColumnNum 2>
  <TblColumnWidth  1.0">
  <TblColumnH 
  > # end of TblColumnH
  <TblColumnBody 
   <PgfTag `CellBody'>
   <Pgf 
    <PgfFont 
     <FTag `'>
     <FFamily `Times'>
     <FVar `Regular'>
     <FWeight `Regular'>
     <FAngle `Regular'>
     <FPostScriptName `Times-Roman'>
     <FSize  12.0 pt>
     <FUnderlining FNoUnderlining >
     <FUnderline No >
     <FDoubleUnderline No >
     <FNumericUnderline No >
     <FOverline No >
     <FStrike No >
     <FChangeBar No >
     <FOutline No >
     <FShadow No >
     <FPairKern Yes >
     <FCase FAsTyped >
     <FPosition FNormal >
     <FSupScript No >
     <FSubScript No >
     <FDX  0.0 pt>
     <FDY  0.0 pt>
     <FDW  0.0 pt>
     <FSeparation 0>
     <FColor `Black'>
    > # end of PgfFont
   > # end of Pgf
  > # end of TblColumnBody
  <TblColumnF 
   <Pgf 
    <PgfTag `CellHeading'>
    <PgfAlignment Center >
    <PgfHyphenate No >
    <PgfCellAlignment Middle >
    <PgfCellMargins  0.0 pt 2.0 pt 0.0 pt 2.0 pt>
   > # end of Pgf
  > # end of TblColumnF
 > # end of TblColumn
 <TblColumn 
  <TblColumnNum 3>
  <TblColumnWidth  1.0">
  <TblColumnH 
  > # end of TblColumnH
  <TblColumnBody 
   <PgfTag `CellBody'>
   <Pgf 
    <PgfFont 
     <FTag `'>
     <FFamily `Times'>
     <FVar `Regular'>
     <FWeight `Regular'>
     <FAngle `Regular'>
     <FPostScriptName `Times-Roman'>
     <FSize  12.0 pt>
     <FUnderlining FNoUnderlining >
     <FUnderline No >
     <FDoubleUnderline No >
     <FNumericUnderline No >
     <FOverline No >
     <FStrike No >
     <FChangeBar No >
     <FOutline No >
     <FShadow No >
     <FPairKern Yes >
     <FCase FAsTyped >
     <FPosition FNormal >
     <FSupScript No >
     <FSubScript No >
     <FDX  0.0 pt>
     <FDY  0.0 pt>
     <FDW  0.0 pt>
     <FSeparation 0>
     <FColor `Black'>
    > # end of PgfFont
   > # end of Pgf
  > # end of TblColumnBody
  <TblColumnF 
   <Pgf 
    <PgfTag `CellHeading'>
    <PgfAlignment Center >
    <PgfHyphenate No >
    <PgfCellAlignment Middle >
    <PgfCellMargins  0.0 pt 2.0 pt 0.0 pt 2.0 pt>
   > # end of Pgf
  > # end of TblColumnF
 > # end of TblColumn
 <TblColumn 
  <TblColumnNum 4>
  <TblColumnWidth  1.0">
  <TblColumnH 
  > # end of TblColumnH
  <TblColumnBody 
   <PgfTag `CellBody'>
   <Pgf 
    <PgfFont 
     <FTag `'>
     <FFamily `Times'>
     <FVar `Regular'>
     <FWeight `Regular'>
     <FAngle `Regular'>
     <FPostScriptName `Times-Roman'>
     <FSize  12.0 pt>
     <FUnderlining FNoUnderlining >
     <FUnderline No >
     <FDoubleUnderline No >
     <FNumericUnderline No >
     <FOverline No >
     <FStrike No >
     <FChangeBar No >
     <FOutline No >
     <FShadow No >
     <FPairKern Yes >
     <FCase FAsTyped >
     <FPosition FNormal >
     <FSupScript No >
     <FSubScript No >
     <FDX  0.0 pt>
     <FDY  0.0 pt>
     <FDW  0.0 pt>
     <FSeparation 0>
     <FColor `Black'>
    > # end of PgfFont
   > # end of Pgf
  > # end of TblColumnBody
  <TblColumnF 
   <Pgf 
    <PgfTag `CellHeading'>
    <PgfAlignment Center >
    <PgfHyphenate No >
    <PgfCellAlignment Middle >
    <PgfCellMargins  0.0 pt 2.0 pt 0.0 pt 2.0 pt>
   > # end of Pgf
  > # end of TblColumnF
 > # end of TblColumn
 <TblInitNumBodyRows 8>
> # end of TblFormat
<TblNumColumns 3>
<Unique 35067>
<TblColumnWidth  1.6">
<TblColumnWidth  1.2">
<TblColumnWidth  3.2">
<TblTitleContent 
 <Notes 
 > # end of Notes
 <Para 
  <Unique 35069>
  <Pgf 
   <PgfTag `TableTitle'>
   <PgfFont 
    <FTag `'>
    <FFamily `Times'>
    <FVar `Regular'>
    <FWeight `Bold'>
    <FAngle `Regular'>
    <FPostScriptName `Times-Bold'>
    <FSize  12.0 pt>
    <FUnderlining FNoUnderlining >
    <FUnderline No >
    <FDoubleUnderline No >
    <FNumericUnderline No >
    <FOverline No >
    <FStrike No >
    <FChangeBar No >
    <FOutline No >
    <FShadow No >
    <FPairKern Yes >
    <FCase FAsTyped >
    <FPosition FNormal >
    <FSupScript No >
    <FSubScript No >
    <FDX  0.0 pt>
    <FDY  0.0 pt>
    <FDW  0.0 pt>
    <FSeparation 0>
    <FColor `Black'>
   > # end of PgfFont
   <PgfAutoNum Yes >
   <PgfNumFormat `T:Table <n+\>: '>
   <PgfNumberFont `'>
   <PgfNumAtEnd No >
   <PgfCellAlignment Top >
   <PgfCellMargins  0.0 pt 0.0 pt 0.0 pt 0.0 pt>
  > # end of Pgf
  <PgfNumString `Table 10: '>
  <ParaLine 
   <String `Sequence requirements (in addition to container)'>
  >
 > # end of Para
> # end of TblTitleContent
<TblH 
 <Row 
  <RowMaxHeight  14.0">
  <RowHeight  0.5">
  <Cell 
   <CellContent 
    <Notes 
    > # end of Notes
    <Para 
     <Unique 35075>
     <Pgf 
      <PgfTag `CellHeading'>
      <PgfFont 
       <FTag `'>
       <FFamily `Times'>
       <FVar `Regular'>
       <FWeight `Regular'>
       <FAngle `Regular'>
       <FPostScriptName `Times-Roman'>
       <FSize  10.0 pt>
       <FUnderlining FNoUnderlining >
       <FUnderline No >
       <FDoubleUnderline No >
       <FNumericUnderline No >
       <FOverline No >
       <FStrike No >
       <FChangeBar No >
       <FOutline No >
       <FShadow No >
       <FPairKern Yes >
       <FCase FAsTyped >
       <FPosition FNormal >
       <FSupScript No >
       <FSubScript No >
       <FDX  0.0 pt>
       <FDY  0.0 pt>
       <FDW  0.0 pt>
       <FSeparation 0>
       <FColor `Black'>
      > # end of PgfFont
      <PgfAutoNum No >
      <PgfCellAlignment Middle >
      <PgfCellMargins  0.0 pt 2.0 pt 0.0 pt 2.0 pt>
     > # end of Pgf
     <ParaLine 
      <String `expression'>
     >
    > # end of Para
   > # end of CellContent
  > # end of Cell
  <Cell 
   <CellContent 
    <Notes 
    > # end of Notes
    <Para 
     <Unique 35077>
     <ParaLine 
      <String `return type'>
     >
    > # end of Para
   > # end of CellContent
  > # end of Cell
  <Cell 
   <CellContent 
    <Notes 
    > # end of Notes
    <Para 
     <Unique 35079>
     <ParaLine 
      <String `assertion/note'>
     >
    > # end of Para
    <Para 
     <Unique 35080>
     <ParaLine 
      <String `pre/post-condition'>
     >
    > # end of Para
   > # end of CellContent
  > # end of Cell
 > # end of Row
> # end of TblH
<TblBody 
 <Row 
  <RowMaxHeight  14.0">
  <RowHeight  0.44444">
  <Cell 
   <CellContent 
    <Notes 
    > # end of Notes
    <Para 
     <Unique 35082>
     <PgfTag `CellBody'>
     <Pgf 
      <PgfFont 
       <FTag `'>
       <FFamily `Courier'>
       <FVar `Regular'>
       <FWeight `Regular'>
       <FAngle `Regular'>
       <FPostScriptName `Courier'>
       <FSize  9.0 pt>
       <FUnderlining FNoUnderlining >
       <FUnderline No >
       <FDoubleUnderline No >
       <FNumericUnderline No >
       <FOverline No >
       <FStrike No >
       <FChangeBar No >
       <FOutline No >
       <FShadow No >
       <FPairKern No >
       <FCase FAsTyped >
       <FPosition FNormal >
       <FSupScript No >
       <FSubScript No >
       <FDX  0.0 pt>
       <FDY  0.0 pt>
       <FDW  0.0 pt>
       <FSeparation 0>
       <FColor `Black'>
      > # end of PgfFont
     > # end of Pgf
     <ParaLine 
      <String `X(n, t)'>
     >
    > # end of Para
    <Para 
     <Unique 35083>
     <PgfTag `CellBody'>
     <Pgf 
      <PgfFont 
       <FTag `'>
       <FFamily `Courier'>
       <FVar `Regular'>
       <FWeight `Regular'>
       <FAngle `Regular'>
       <FPostScriptName `Courier'>
       <FSize  9.0 pt>
       <FUnderlining FNoUnderlining >
       <FUnderline No >
       <FDoubleUnderline No >
       <FNumericUnderline No >
       <FOverline No >
       <FStrike No >
       <FChangeBar No >
       <FOutline No >
       <FShadow No >
       <FPairKern No >
       <FCase FAsTyped >
       <FPosition FNormal >
       <FSupScript No >
       <FSubScript No >
       <FDX  0.0 pt>
       <FDY  0.0 pt>
       <FDW  0.0 pt>
       <FSeparation 0>
       <FColor `Black'>
      > # end of PgfFont
     > # end of Pgf
     <ParaLine 
      <String `X a(n, t);'>
     >
    > # end of Para
   > # end of CellContent
  > # end of Cell
  <Cell 
   <CellContent 
    <Notes 
    > # end of Notes
    <Para 
     <Unique 35085>
     <PgfTag `CellBody'>
     <Pgf 
      <PgfFont 
       <FTag `'>
       <FFamily `Courier'>
       <FVar `Regular'>
       <FWeight `Regular'>
       <FAngle `Regular'>
       <FPostScriptName `Courier'>
       <FSize  9.0 pt>
       <FUnderlining FNoUnderlining >
       <FUnderline No >
       <FDoubleUnderline No >
       <FNumericUnderline No >
       <FOverline No >
       <FStrike No >
       <FChangeBar No >
       <FOutline No >
       <FShadow No >
       <FPairKern No >
       <FCase FAsTyped >
       <FPosition FNormal >
       <FSupScript No >
       <FSubScript No >
       <FDX  0.0 pt>
       <FDY  0.0 pt>
       <FDW  0.0 pt>
       <FSeparation 0>
       <FColor `Black'>
      > # end of PgfFont
     > # end of Pgf
     <ParaLine 
     >
    > # end of Para
   > # end of CellContent
  > # end of Cell
  <Cell 
   <CellContent 
    <Notes 
    > # end of Notes
    <Para 
     <Unique 35087>
     <PgfTag `CellBody'>
     <ParaLine 
      <String `post: '>
      <Font 
       <FTag `program'>
      > # end of Font
      <String `size() == n'>
      <Font 
       <FTag `'>
      > # end of Font
      <String `.'>
     >
    > # end of Para
    <Para 
     <Unique 35088>
     <PgfTag `CellBody'>
     <ParaLine 
      <String `constructs a sequence with '>
      <Font 
       <FTag `program'>
      > # end of Font
      <String `n'>
      <Font 
       <FTag `'>
      > # end of Font
      <String ` copies of '>
      <Font 
       <FTag `program'>
      > # end of Font
      <String `t'>
      <Font 
       <FTag `'>
      > # end of Font
      <String `.'>
     >
    > # end of Para
   > # end of CellContent
  > # end of Cell
 > # end of Row
 <Row 
  <RowMaxHeight  14.0">
  <RowHeight  0.44444">
  <Cell 
   <CellContent 
    <Notes 
    > # end of Notes
    <Para 
     <Unique 35090>
     <PgfTag `CellBody'>
     <Pgf 
      <PgfFont 
       <FTag `'>
       <FFamily `Courier'>
       <FVar `Regular'>
       <FWeight `Regular'>
       <FAngle `Regular'>
       <FPostScriptName `Courier'>
       <FSize  9.0 pt>
       <FUnderlining FNoUnderlining >
       <FUnderline No >
       <FDoubleUnderline No >
       <FNumericUnderline No >
       <FOverline No >
       <FStrike No >
       <FChangeBar No >
       <FOutline No >
       <FShadow No >
       <FPairKern No >
       <FCase FAsTyped >
       <FPosition FNormal >
       <FSupScript No >
       <FSubScript No >
       <FDX  0.0 pt>
       <FDY  0.0 pt>
       <FDW  0.0 pt>
       <FSeparation 0>
       <FColor `Black'>
      > # end of PgfFont
     > # end of Pgf
     <ParaLine 
      <Font 
       <FTag `program'>
      > # end of Font
      <String `X(i, j)'>
     >
    > # end of Para
    <Para 
     <Unique 35091>
     <PgfTag `CellBody'>
     <Pgf 
      <PgfFont 
       <FTag `'>
       <FFamily `Courier'>
       <FVar `Regular'>
       <FWeight `Regular'>
       <FAngle `Regular'>
       <FPostScriptName `Courier'>
       <FSize  9.0 pt>
       <FUnderlining FNoUnderlining >
       <FUnderline No >
       <FDoubleUnderline No >
       <FNumericUnderline No >
       <FOverline No >
       <FStrike No >
       <FChangeBar No >
       <FOutline No >
       <FShadow No >
       <FPairKern No >
       <FCase FAsTyped >
       <FPosition FNormal >
       <FSupScript No >
       <FSubScript No >
       <FDX  0.0 pt>
       <FDY  0.0 pt>
       <FDW  0.0 pt>
       <FSeparation 0>
       <FColor `Black'>
      > # end of PgfFont
     > # end of Pgf
     <ParaLine 
      <Font 
       <FTag `program'>
      > # end of Font
      <String `X a(i, j);'>
     >
    > # end of Para
   > # end of CellContent
  > # end of Cell
  <Cell 
   <CellContent 
    <Notes 
    > # end of Notes
    <Para 
     <Unique 35093>
     <PgfTag `CellBody'>
     <Pgf 
      <PgfFont 
       <FTag `'>
       <FFamily `Courier'>
       <FVar `Regular'>
       <FWeight `Regular'>
       <FAngle `Regular'>
       <FPostScriptName `Courier'>
       <FSize  9.0 pt>
       <FUnderlining FNoUnderlining >
       <FUnderline No >
       <FDoubleUnderline No >
       <FNumericUnderline No >
       <FOverline No >
       <FStrike No >
       <FChangeBar No >
       <FOutline No >
       <FShadow No >
       <FPairKern No >
       <FCase FAsTyped >
       <FPosition FNormal >
       <FSupScript No >
       <FSubScript No >
       <FDX  0.0 pt>
       <FDY  0.0 pt>
       <FDW  0.0 pt>
       <FSeparation 0>
       <FColor `Black'>
      > # end of PgfFont
     > # end of Pgf
     <ParaLine 
     >
    > # end of Para
   > # end of CellContent
  > # end of Cell
  <Cell 
   <CellContent 
    <Notes 
    > # end of Notes
    <Para 
     <Unique 35095>
     <PgfTag `CellBody'>
     <ParaLine 
      <String `post: '>
      <Font 
       <FTag `program'>
      > # end of Font
      <String `size()'>
      <Font 
       <FTag `'>
      > # end of Font
      <String ` == distance between '>
      <Font 
       <FTag `program'>
      > # end of Font
      <String `i'>
      <Font 
       <FTag `'>
      > # end of Font
      <String ` and '>
      <Font 
       <FTag `program'>
      > # end of Font
      <String `j'>
      <Font 
       <FTag `'>
      > # end of Font
      <String `.'>
     >
    > # end of Para
    <Para 
     <Unique 35096>
     <PgfTag `CellBody'>
     <ParaLine 
      <String `constructs a sequence equal to the range '>
      <Font 
       <FTag `program'>
      > # end of Font
      <String `[i, j)'>
      <Font 
       <FTag `'>
      > # end of Font
      <String `.'>
     >
    > # end of Para
   > # end of CellContent
  > # end of Cell
 > # end of Row
 <Row 
  <RowMaxHeight  14.0">
  <RowHeight  0.44444">
  <Cell 
   <CellContent 
    <Notes 
    > # end of Notes
    <Para 
     <Unique 35098>
     <PgfTag `CellBody'>
     <Pgf 
      <PgfFont 
       <FTag `'>
       <FFamily `Courier'>
       <FVar `Regular'>
       <FWeight `Regular'>
       <FAngle `Regular'>
       <FPostScriptName `Courier'>
       <FSize  9.0 pt>
       <FUnderlining FNoUnderlining >
       <FUnderline No >
       <FDoubleUnderline No >
       <FNumericUnderline No >
       <FOverline No >
       <FStrike No >
       <FChangeBar No >
       <FOutline No >
       <FShadow No >
       <FPairKern No >
       <FCase FAsTyped >
       <FPosition FNormal >
       <FSupScript No >
       <FSubScript No >
       <FDX  0.0 pt>
       <FDY  0.0 pt>
       <FDW  0.0 pt>
       <FSeparation 0>
       <FColor `Black'>
      > # end of PgfFont
     > # end of Pgf
     <ParaLine 
      <String `a.insert(p, t)'>
     >
    > # end of Para
   > # end of CellContent
  > # end of Cell
  <Cell 
   <CellContent 
    <Notes 
    > # end of Notes
    <Para 
     <Unique 35100>
     <PgfTag `CellBody'>
     <Pgf 
      <PgfFont 
       <FTag `'>
       <FFamily `Courier'>
       <FVar `Regular'>
       <FWeight `Regular'>
       <FAngle `Regular'>
       <FPostScriptName `Courier'>
       <FSize  9.0 pt>
       <FUnderlining FNoUnderlining >
       <FUnderline No >
       <FDoubleUnderline No >
       <FNumericUnderline No >
       <FOverline No >
       <FStrike No >
       <FChangeBar No >
       <FOutline No >
       <FShadow No >
       <FPairKern No >
       <FCase FAsTyped >
       <FPosition FNormal >
       <FSupScript No >
       <FSubScript No >
       <FDX  0.0 pt>
       <FDY  0.0 pt>
       <FDW  0.0 pt>
       <FSeparation 0>
       <FColor `Black'>
      > # end of PgfFont
     > # end of Pgf
     <ParaLine 
      <Font 
       <FTag `program'>
      > # end of Font
      <String `iterator'>
     >
    > # end of Para
   > # end of CellContent
  > # end of Cell
  <Cell 
   <CellContent 
    <Notes 
    > # end of Notes
    <Para 
     <Unique 35102>
     <PgfTag `CellBody'>
     <ParaLine 
      <String `inserts a copy of '>
      <Font 
       <FTag `program'>
      > # end of Font
      <String `t'>
      <Font 
       <FTag `'>
      > # end of Font
      <String ` before '>
      <Font 
       <FTag `program'>
      > # end of Font
      <String `p.'>
     >
    > # end of Para
    <Para 
     <Unique 4874>
     <PgfTag `CellBody'>
     <ParaLine 
      <String `the return value points to the inserted copy.'>
     >
    > # end of Para
   > # end of CellContent
  > # end of Cell
 > # end of Row
 <Row 
  <RowMaxHeight  14.0">
  <RowHeight  0.27778">
  <Cell 
   <CellContent 
    <Notes 
    > # end of Notes
    <Para 
     <Unique 35104>
     <PgfTag `CellBody'>
     <Pgf 
      <PgfFont 
       <FTag `'>
       <FFamily `Courier'>
       <FVar `Regular'>
       <FWeight `Regular'>
       <FAngle `Regular'>
       <FPostScriptName `Courier'>
       <FSize  9.0 pt>
       <FUnderlining FNoUnderlining >
       <FUnderline No >
       <FDoubleUnderline No >
       <FNumericUnderline No >
       <FOverline No >
       <FStrike No >
       <FChangeBar No >
       <FOutline No >
       <FShadow No >
       <FPairKern No >
       <FCase FAsTyped >
       <FPosition FNormal >
       <FSupScript No >
       <FSubScript No >
       <FDX  0.0 pt>
       <FDY  0.0 pt>
       <FDW  0.0 pt>
       <FSeparation 0>
       <FColor `Black'>
      > # end of PgfFont
     > # end of Pgf
     <ParaLine 
      <String `a.insert(p, n, t)'>
     >
    > # end of Para
   > # end of CellContent
  > # end of Cell
  <Cell 
   <CellContent 
    <Notes 
    > # end of Notes
    <Para 
     <Unique 40466>
     <PgfTag `CellBody'>
     <ParaLine 
      <String `result is not used'>
     >
    > # end of Para
   > # end of CellContent
  > # end of Cell
  <Cell 
   <CellContent 
    <Notes 
    > # end of Notes
    <Para 
     <Unique 35108>
     <PgfTag `CellBody'>
     <ParaLine 
      <String `inserts '>
      <Font 
       <FTag `program'>
      > # end of Font
      <String `n'>
      <Font 
       <FTag `'>
      > # end of Font
      <String ` copies of '>
      <Font 
       <FTag `program'>
      > # end of Font
      <String `t'>
      <Font 
       <FTag `'>
      > # end of Font
      <String ` before '>
      <Font 
       <FTag `program'>
      > # end of Font
      <String `p'>
      <Font 
       <FTag `'>
      > # end of Font
      <String `.'>
     >
    > # end of Para
   > # end of CellContent
  > # end of Cell
 > # end of Row
 <Row 
  <RowMaxHeight  14.0">
  <RowHeight  0.27778">
  <Cell 
   <CellContent 
    <Notes 
    > # end of Notes
    <Para 
     <Unique 35110>
     <PgfTag `CellBody'>
     <Pgf 
      <PgfFont 
       <FTag `'>
       <FFamily `Courier'>
       <FVar `Regular'>
       <FWeight `Regular'>
       <FAngle `Regular'>
       <FPostScriptName `Courier'>
       <FSize  9.0 pt>
       <FUnderlining FNoUnderlining >
       <FUnderline No >
       <FDoubleUnderline No >
       <FNumericUnderline No >
       <FOverline No >
       <FStrike No >
       <FChangeBar No >
       <FOutline No >
       <FShadow No >
       <FPairKern No >
       <FCase FAsTyped >
       <FPosition FNormal >
       <FSupScript No >
       <FSubScript No >
       <FDX  0.0 pt>
       <FDY  0.0 pt>
       <FDW  0.0 pt>
       <FSeparation 0>
       <FColor `Black'>
      > # end of PgfFont
     > # end of Pgf
     <ParaLine 
      <String `a.insert(p, i, j)'>
     >
    > # end of Para
   > # end of CellContent
  > # end of Cell
  <Cell 
   <CellContent 
    <Notes 
    > # end of Notes
    <Para 
     <Unique 40475>
     <PgfTag `CellBody'>
     <ParaLine 
      <String `result is not used'>
     >
    > # end of Para
   > # end of CellContent
  > # end of Cell
  <Cell 
   <CellContent 
    <Notes 
    > # end of Notes
    <Para 
     <Unique 35114>
     <PgfTag `CellBody'>
     <ParaLine 
      <String `inserts copies of elements in '>
      <Font 
       <FTag `program'>
      > # end of Font
      <String `[i, j)'>
      <Font 
       <FTag `'>
      > # end of Font
      <String ` before '>
      <Font 
       <FTag `program'>
      > # end of Font
      <String `p'>
      <Font 
       <FTag `'>
      > # end of Font
      <String `.'>
     >
    > # end of Para
   > # end of CellContent
  > # end of Cell
 > # end of Row
 <Row 
  <RowMaxHeight  14.0">
  <RowHeight  0.27778">
  <Cell 
   <CellContent 
    <Notes 
    > # end of Notes
    <Para 
     <Unique 35116>
     <PgfTag `CellBody'>
     <Pgf 
      <PgfFont 
       <FTag `'>
       <FFamily `Courier'>
       <FVar `Regular'>
       <FWeight `Regular'>
       <FAngle `Regular'>
       <FPostScriptName `Courier'>
       <FSize  9.0 pt>
       <FUnderlining FNoUnderlining >
       <FUnderline No >
       <FDoubleUnderline No >
       <FNumericUnderline No >
       <FOverline No >
       <FStrike No >
       <FChangeBar No >
       <FOutline No >
       <FShadow No >
       <FPairKern No >
       <FCase FAsTyped >
       <FPosition FNormal >
       <FSupScript No >
       <FSubScript No >
       <FDX  0.0 pt>
       <FDY  0.0 pt>
       <FDW  0.0 pt>
       <FSeparation 0>
       <FColor `Black'>
      > # end of PgfFont
     > # end of Pgf
     <ParaLine 
      <String `a.erase(q)'>
     >
    > # end of Para
   > # end of CellContent
  > # end of Cell
  <Cell 
   <CellContent 
    <Notes 
    > # end of Notes
    <Para 
     <Unique 40479>
     <PgfTag `CellBody'>
     <ParaLine 
      <String `result is not used'>
     >
    > # end of Para
   > # end of CellContent
  > # end of Cell
  <Cell 
   <CellContent 
    <Notes 
    > # end of Notes
    <Para 
     <Unique 35120>
     <PgfTag `CellBody'>
     <ParaLine 
      <String `erases the element pointed to by '>
      <Font 
       <FTag `program'>
      > # end of Font
      <String `q'>
      <Font 
       <FTag `'>
      > # end of Font
      <String `.'>
     >
    > # end of Para
   > # end of CellContent
  > # end of Cell
 > # end of Row
 <Row 
  <RowMaxHeight  14.0">
  <RowHeight  0.27778">
  <Cell 
   <CellContent 
    <Notes 
    > # end of Notes
    <Para 
     <Unique 35122>
     <PgfTag `CellBody'>
     <Pgf 
      <PgfFont 
       <FTag `'>
       <FFamily `Courier'>
       <FVar `Regular'>
       <FWeight `Regular'>
       <FAngle `Regular'>
       <FPostScriptName `Courier'>
       <FSize  9.0 pt>
       <FUnderlining FNoUnderlining >
       <FUnderline No >
       <FDoubleUnderline No >
       <FNumericUnderline No >
       <FOverline No >
       <FStrike No >
       <FChangeBar No >
       <FOutline No >
       <FShadow No >
       <FPairKern No >
       <FCase FAsTyped >
       <FPosition FNormal >
       <FSupScript No >
       <FSubScript No >
       <FDX  0.0 pt>
       <FDY  0.0 pt>
       <FDW  0.0 pt>
       <FSeparation 0>
       <FColor `Black'>
      > # end of PgfFont
     > # end of Pgf
     <ParaLine 
      <String `a.erase(q1, q2)'>
     >
    > # end of Para
   > # end of CellContent
  > # end of Cell
  <Cell 
   <CellContent 
    <Notes 
    > # end of Notes
    <Para 
     <Unique 40483>
     <PgfTag `CellBody'>
     <ParaLine 
      <String `result is not used'>
     >
    > # end of Para
   > # end of CellContent
  > # end of Cell
  <Cell 
   <CellContent 
    <Notes 
    > # end of Notes
    <Para 
     <Unique 35126>
     <PgfTag `CellBody'>
     <ParaLine 
      <String `erases the elements in the range '>
      <Font 
       <FTag `program'>
      > # end of Font
      <String `[q1, q2)'>
      <Font 
       <FTag `'>
      > # end of Font
      <String `.'>
     >
    > # end of Para
   > # end of CellContent
  > # end of Cell
 > # end of Row
> # end of TblBody
> # end of Tbl
<Tbl 
<TblID 16>
<TblTag `Format B'>
<TblNumColumns 7>
<Unique 38857>
<TblColumnWidth  1.1">
<TblColumnWidth  0.7">
<TblColumnWidth  1.0">
<TblColumnWidth  0.7">
<TblColumnWidth  0.7">
<TblColumnWidth  0.7">
<TblColumnWidth  0.6">
<TblTitleContent 
 <Notes 
 > # end of Notes
 <Para 
  <Unique 38859>
  <Pgf 
   <PgfTag `TableTitle'>
   <PgfAlignment Center >
   <PgfFont 
    <FTag `'>
    <FFamily `Times'>
    <FVar `Regular'>
    <FWeight `Bold'>
    <FAngle `Regular'>
    <FPostScriptName `Times-Bold'>
    <FSize  12.0 pt>
    <FUnderlining FNoUnderlining >
    <FUnderline No >
    <FDoubleUnderline No >
    <FNumericUnderline No >
    <FOverline No >
    <FStrike No >
    <FChangeBar No >
    <FOutline No >
    <FShadow No >
    <FPairKern Yes >
    <FCase FAsTyped >
    <FPosition FNormal >
    <FSupScript No >
    <FSubScript No >
    <FDX  0.0 pt>
    <FDY  0.0 pt>
    <FDW  0.0 pt>
    <FSeparation 0>
    <FColor `Black'>
   > # end of PgfFont
   <PgfAutoNum Yes >
   <PgfNumFormat `T:Table <n+\>: '>
   <PgfNumberFont `'>
   <PgfNumAtEnd No >
   <PgfHyphenate No >
  > # end of Pgf
  <PgfNumString `Table 1: '>
  <ParaLine 
   <String `Relations among iterator categories'>
  >
 > # end of Para
> # end of TblTitleContent
<TblBody 
 <Row 
  <RowMaxHeight  14.0">
  <RowHeight  0.61111">
  <Cell 
   <CellLRuling `Thin'>
   <CellBRuling `Thin'>
   <CellRRuling `None'>
   <CellTRuling `Thin'>
   <CellContent 
    <Notes 
    > # end of Notes
    <Para 
     <Unique 38874>
     <PgfTag `CellBody'>
     <Pgf 
      <PgfAlignment Center >
      <PgfCellAlignment Middle >
     > # end of Pgf
     <ParaLine 
      <String `Random access'>
     >
    > # end of Para
   > # end of CellContent
  > # end of Cell
  <Cell 
   <CellLRuling `None'>
   <CellBRuling `Thin'>
   <CellRRuling `None'>
   <CellTRuling `Thin'>
   <CellContent 
    <Notes 
    > # end of Notes
    <Para 
     <Unique 38876>
     <PgfTag `CellBody'>
     <Pgf 
      <PgfCellAlignment Middle >
     > # end of Pgf
     <ParaLine 
     >
    > # end of Para
    <Para 
     <Unique 38877>
     <PgfTag `CellBody'>
     <Pgf 
      <PgfCellAlignment Middle >
     > # end of Pgf
     <ParaLine 
     >
    > # end of Para
   > # end of CellContent
  > # end of Cell
  <Cell 
   <CellLRuling `None'>
   <CellBRuling `Thin'>
   <CellRRuling `None'>
   <CellTRuling `Thin'>
   <CellContent 
    <Notes 
    > # end of Notes
    <Para 
     <Unique 38880>
     <PgfTag `CellBody'>
     <Pgf 
      <PgfCellAlignment Middle >
     > # end of Pgf
     <ParaLine 
      <String `Bidirectional'>
     >
    > # end of Para
   > # end of CellContent
  > # end of Cell
  <Cell 
   <CellLRuling `None'>
   <CellBRuling `Thin'>
   <CellRRuling `None'>
   <CellTRuling `Thin'>
   <CellContent 
    <Notes 
    > # end of Notes
    <Para 
     <Unique 38882>
     <PgfTag `CellBody'>
     <Pgf 
      <PgfCellAlignment Middle >
     > # end of Pgf
     <ParaLine 
     >
    > # end of Para
    <Para 
     <Unique 38883>
     <PgfTag `CellBody'>
     <Pgf 
      <PgfCellAlignment Middle >
     > # end of Pgf
     <ParaLine 
     >
    > # end of Para
   > # end of CellContent
  > # end of Cell
  <Cell 
   <CellLRuling `None'>
   <CellBRuling `Thin'>
   <CellRRuling `None'>
   <CellTRuling `Thin'>
   <CellContent 
    <Notes 
    > # end of Notes
    <Para 
     <Unique 38886>
     <PgfTag `CellBody'>
     <Pgf 
      <PgfCellAlignment Middle >
     > # end of Pgf
     <ParaLine 
      <String `Forward'>
     >
    > # end of Para
   > # end of CellContent
  > # end of Cell
  <Cell 
   <CellLRuling `None'>
   <CellBRuling `Thin'>
   <CellRRuling `None'>
   <CellTRuling `Thin'>
   <CellContent 
    <Notes 
    > # end of Notes
    <Para 
     <Unique 38888>
     <PgfTag `CellBody'>
     <Pgf 
      <PgfCellAlignment Middle >
     > # end of Pgf
     <ParaLine 
     >
    > # end of Para
    <Para 
     <Unique 38889>
     <PgfTag `CellBody'>
     <Pgf 
      <PgfCellAlignment Middle >
     > # end of Pgf
     <ParaLine 
     >
    > # end of Para
   > # end of CellContent
  > # end of Cell
  <Cell 
   <CellLRuling `None'>
   <CellBRuling `Thin'>
   <CellRRuling `Thin'>
   <CellTRuling `Thin'>
   <CellContent 
    <Notes 
    > # end of Notes
    <Para 
     <Unique 38891>
     <PgfTag `CellBody'>
     <Pgf 
      <PgfCellAlignment Middle >
     > # end of Pgf
     <ParaLine 
      <String `Input'>
     >
    > # end of Para
    <Para 
     <Unique 38892>
     <PgfTag `CellBody'>
     <Pgf 
      <PgfCellAlignment Middle >
     > # end of Pgf
     <ParaLine 
     >
    > # end of Para
    <Para 
     <Unique 38893>
     <PgfTag `CellBody'>
     <Pgf 
      <PgfCellAlignment Middle >
     > # end of Pgf
     <ParaLine 
      <String `Output'>
     >
    > # end of Para
   > # end of CellContent
  > # end of Cell
 > # end of Row
> # end of TblBody
> # end of Tbl
<Tbl 
<TblID 17>
<TblTag `Format A'>
<TblFormat 
 <TblColumn 
  <TblColumnNum 0>
  <TblColumnWidth  1.0">
  <TblColumnH 
   <Pgf 
    <PgfTag `CellHeading'>
    <PgfAlignment Center >
    <PgfFont 
     <FTag `'>
     <FFamily `Times'>
     <FVar `Regular'>
     <FWeight `Regular'>
     <FAngle `Regular'>
     <FPostScriptName `Times-Roman'>
     <FSize  12.0 pt>
     <FUnderlining FNoUnderlining >
     <FUnderline No >
     <FDoubleUnderline No >
     <FNumericUnderline No >
     <FOverline No >
     <FStrike No >
     <FChangeBar No >
     <FOutline No >
     <FShadow No >
     <FPairKern Yes >
     <FCase FAsTyped >
     <FPosition FNormal >
     <FSupScript No >
     <FSubScript No >
     <FDX  0.0 pt>
     <FDY  0.0 pt>
     <FDW  0.0 pt>
     <FSeparation 0>
     <FColor `Black'>
    > # end of PgfFont
    <PgfHyphenate No >
    <PgfCellMargins  0.0 pt 2.0 pt 0.0 pt 2.0 pt>
   > # end of Pgf
  > # end of TblColumnH
  <TblColumnBody 
   <PgfTag `CellBody'>
   <Pgf 
    <PgfFont 
     <FTag `'>
     <FFamily `Times'>
     <FVar `Regular'>
     <FWeight `Regular'>
     <FAngle `Regular'>
     <FPostScriptName `Times-Roman'>
     <FSize  12.0 pt>
     <FUnderlining FNoUnderlining >
     <FUnderline No >
     <FDoubleUnderline No >
     <FNumericUnderline No >
     <FOverline No >
     <FStrike No >
     <FChangeBar No >
     <FOutline No >
     <FShadow No >
     <FPairKern Yes >
     <FCase FAsTyped >
     <FPosition FNormal >
     <FSupScript No >
     <FSubScript No >
     <FDX  0.0 pt>
     <FDY  0.0 pt>
     <FDW  0.0 pt>
     <FSeparation 0>
     <FColor `Black'>
    > # end of PgfFont
   > # end of Pgf
  > # end of TblColumnBody
  <TblColumnF 
   <Pgf 
    <PgfTag `CellHeading'>
    <PgfAlignment Center >
    <PgfHyphenate No >
    <PgfCellAlignment Middle >
    <PgfCellMargins  0.0 pt 2.0 pt 0.0 pt 2.0 pt>
   > # end of Pgf
  > # end of TblColumnF
 > # end of TblColumn
 <TblColumn 
  <TblColumnNum 1>
  <TblColumnWidth  1.0">
  <TblColumnH 
  > # end of TblColumnH
  <TblColumnBody 
   <PgfTag `CellBody'>
   <Pgf 
    <PgfFont 
     <FTag `'>
     <FFamily `Times'>
     <FVar `Regular'>
     <FWeight `Regular'>
     <FAngle `Regular'>
     <FPostScriptName `Times-Roman'>
     <FSize  12.0 pt>
     <FUnderlining FNoUnderlining >
     <FUnderline No >
     <FDoubleUnderline No >
     <FNumericUnderline No >
     <FOverline No >
     <FStrike No >
     <FChangeBar No >
     <FOutline No >
     <FShadow No >
     <FPairKern Yes >
     <FCase FAsTyped >
     <FPosition FNormal >
     <FSupScript No >
     <FSubScript No >
     <FDX  0.0 pt>
     <FDY  0.0 pt>
     <FDW  0.0 pt>
     <FSeparation 0>
     <FColor `Black'>
    > # end of PgfFont
   > # end of Pgf
  > # end of TblColumnBody
  <TblColumnF 
   <Pgf 
    <PgfTag `CellHeading'>
    <PgfAlignment Center >
    <PgfHyphenate No >
    <PgfCellAlignment Middle >
    <PgfCellMargins  0.0 pt 2.0 pt 0.0 pt 2.0 pt>
   > # end of Pgf
  > # end of TblColumnF
 > # end of TblColumn
 <TblColumn 
  <TblColumnNum 2>
  <TblColumnWidth  1.0">
  <TblColumnH 
  > # end of TblColumnH
  <TblColumnBody 
   <PgfTag `CellBody'>
   <Pgf 
    <PgfFont 
     <FTag `'>
     <FFamily `Times'>
     <FVar `Regular'>
     <FWeight `Regular'>
     <FAngle `Regular'>
     <FPostScriptName `Times-Roman'>
     <FSize  12.0 pt>
     <FUnderlining FNoUnderlining >
     <FUnderline No >
     <FDoubleUnderline No >
     <FNumericUnderline No >
     <FOverline No >
     <FStrike No >
     <FChangeBar No >
     <FOutline No >
     <FShadow No >
     <FPairKern Yes >
     <FCase FAsTyped >
     <FPosition FNormal >
     <FSupScript No >
     <FSubScript No >
     <FDX  0.0 pt>
     <FDY  0.0 pt>
     <FDW  0.0 pt>
     <FSeparation 0>
     <FColor `Black'>
    > # end of PgfFont
   > # end of Pgf
  > # end of TblColumnBody
  <TblColumnF 
   <Pgf 
    <PgfTag `CellHeading'>
    <PgfAlignment Center >
    <PgfHyphenate No >
    <PgfCellAlignment Middle >
    <PgfCellMargins  0.0 pt 2.0 pt 0.0 pt 2.0 pt>
   > # end of Pgf
  > # end of TblColumnF
 > # end of TblColumn
 <TblColumn 
  <TblColumnNum 3>
  <TblColumnWidth  1.0">
  <TblColumnH 
  > # end of TblColumnH
  <TblColumnBody 
   <PgfTag `CellBody'>
   <Pgf 
    <PgfFont 
     <FTag `'>
     <FFamily `Times'>
     <FVar `Regular'>
     <FWeight `Regular'>
     <FAngle `Regular'>
     <FPostScriptName `Times-Roman'>
     <FSize  12.0 pt>
     <FUnderlining FNoUnderlining >
     <FUnderline No >
     <FDoubleUnderline No >
     <FNumericUnderline No >
     <FOverline No >
     <FStrike No >
     <FChangeBar No >
     <FOutline No >
     <FShadow No >
     <FPairKern Yes >
     <FCase FAsTyped >
     <FPosition FNormal >
     <FSupScript No >
     <FSubScript No >
     <FDX  0.0 pt>
     <FDY  0.0 pt>
     <FDW  0.0 pt>
     <FSeparation 0>
     <FColor `Black'>
    > # end of PgfFont
   > # end of Pgf
  > # end of TblColumnBody
  <TblColumnF 
   <Pgf 
    <PgfTag `CellHeading'>
    <PgfAlignment Center >
    <PgfHyphenate No >
    <PgfCellAlignment Middle >
    <PgfCellMargins  0.0 pt 2.0 pt 0.0 pt 2.0 pt>
   > # end of Pgf
  > # end of TblColumnF
 > # end of TblColumn
 <TblColumn 
  <TblColumnNum 4>
  <TblColumnWidth  1.0">
  <TblColumnH 
  > # end of TblColumnH
  <TblColumnBody 
   <PgfTag `CellBody'>
   <Pgf 
    <PgfFont 
     <FTag `'>
     <FFamily `Times'>
     <FVar `Regular'>
     <FWeight `Regular'>
     <FAngle `Regular'>
     <FPostScriptName `Times-Roman'>
     <FSize  12.0 pt>
     <FUnderlining FNoUnderlining >
     <FUnderline No >
     <FDoubleUnderline No >
     <FNumericUnderline No >
     <FOverline No >
     <FStrike No >
     <FChangeBar No >
     <FOutline No >
     <FShadow No >
     <FPairKern Yes >
     <FCase FAsTyped >
     <FPosition FNormal >
     <FSupScript No >
     <FSubScript No >
     <FDX  0.0 pt>
     <FDY  0.0 pt>
     <FDW  0.0 pt>
     <FSeparation 0>
     <FColor `Black'>
    > # end of PgfFont
   > # end of Pgf
  > # end of TblColumnBody
  <TblColumnF 
   <Pgf 
    <PgfTag `CellHeading'>
    <PgfAlignment Center >
    <PgfHyphenate No >
    <PgfCellAlignment Middle >
    <PgfCellMargins  0.0 pt 2.0 pt 0.0 pt 2.0 pt>
   > # end of Pgf
  > # end of TblColumnF
 > # end of TblColumn
 <TblSpBefore  0.0 pt>
 <TblInitNumBodyRows 8>
> # end of TblFormat
<TblNumColumns 4>
<Unique 10251>
<TblColumnWidth  0.8">
<TblColumnWidth  1.3">
<TblColumnWidth  1.4">
<TblColumnWidth  2.6">
<TblTitleContent 
 <Notes 
 > # end of Notes
 <Para 
  <Unique 10253>
  <Pgf 
   <PgfTag `TableTitle'>
   <PgfFont 
    <FTag `'>
    <FFamily `Times'>
    <FVar `Regular'>
    <FWeight `Bold'>
    <FAngle `Regular'>
    <FPostScriptName `Times-Bold'>
    <FSize  12.0 pt>
    <FUnderlining FNoUnderlining >
    <FUnderline No >
    <FDoubleUnderline No >
    <FNumericUnderline No >
    <FOverline No >
    <FStrike No >
    <FChangeBar No >
    <FOutline No >
    <FShadow No >
    <FPairKern Yes >
    <FCase FAsTyped >
    <FPosition FNormal >
    <FSupScript No >
    <FSubScript No >
    <FDX  0.0 pt>
    <FDY  0.0 pt>
    <FDW  0.0 pt>
    <FSeparation 0>
    <FColor `Black'>
   > # end of PgfFont
   <PgfAutoNum Yes >
   <PgfNumFormat `T:Table <n+\>: '>
   <PgfNumberFont `'>
   <PgfNumAtEnd No >
   <PgfCellAlignment Top >
   <PgfCellMargins  0.0 pt 0.0 pt 0.0 pt 0.0 pt>
  > # end of Pgf
  <PgfNumString `Table 4: '>
  <ParaLine 
   <String `Forward iterator requirements'>
  >
 > # end of Para
> # end of TblTitleContent
<TblH 
 <Row 
  <RowMaxHeight  14.0">
  <RowHeight  0.5">
  <Cell 
   <CellContent 
    <Notes 
    > # end of Notes
    <Para 
     <Unique 10261>
     <Pgf 
      <PgfTag `CellHeading'>
      <PgfFont 
       <FTag `'>
       <FFamily `Times'>
       <FVar `Regular'>
       <FWeight `Regular'>
       <FAngle `Regular'>
       <FPostScriptName `Times-Roman'>
       <FSize  10.0 pt>
       <FUnderlining FNoUnderlining >
       <FUnderline No >
       <FDoubleUnderline No >
       <FNumericUnderline No >
       <FOverline No >
       <FStrike No >
       <FChangeBar No >
       <FOutline No >
       <FShadow No >
       <FPairKern Yes >
       <FCase FAsTyped >
       <FPosition FNormal >
       <FSupScript No >
       <FSubScript No >
       <FDX  0.0 pt>
       <FDY  0.0 pt>
       <FDW  0.0 pt>
       <FSeparation 0>
       <FColor `Black'>
      > # end of PgfFont
      <PgfAutoNum No >
      <PgfCellAlignment Middle >
      <PgfCellMargins  0.0 pt 2.0 pt 0.0 pt 2.0 pt>
     > # end of Pgf
     <ParaLine 
      <String `expression'>
     >
    > # end of Para
   > # end of CellContent
  > # end of Cell
  <Cell 
   <CellContent 
    <Notes 
    > # end of Notes
    <Para 
     <Unique 10263>
     <ParaLine 
      <String `return type'>
     >
    > # end of Para
   > # end of CellContent
  > # end of Cell
  <Cell 
   <CellContent 
    <Notes 
    > # end of Notes
    <Para 
     <Unique 10265>
     <ParaLine 
      <String `operational semantics'>
     >
    > # end of Para
   > # end of CellContent
  > # end of Cell
  <Cell 
   <CellContent 
    <Notes 
    > # end of Notes
    <Para 
     <Unique 10267>
     <ParaLine 
      <String `assertion/note'>
     >
    > # end of Para
    <Para 
     <Unique 10268>
     <ParaLine 
      <String `pre/post-condition'>
     >
    > # end of Para
   > # end of CellContent
  > # end of Cell
 > # end of Row
> # end of TblH
<TblBody 
 <Row 
  <RowMaxHeight  14.0">
  <RowHeight  0.44444">
  <Cell 
   <CellContent 
    <Notes 
    > # end of Notes
    <Para 
     <Unique 10270>
     <PgfTag `CellBody'>
     <Pgf 
      <PgfFont 
       <FTag `'>
       <FFamily `Courier'>
       <FVar `Regular'>
       <FWeight `Regular'>
       <FAngle `Regular'>
       <FPostScriptName `Courier'>
       <FSize  9.0 pt>
       <FUnderlining FNoUnderlining >
       <FUnderline No >
       <FDoubleUnderline No >
       <FNumericUnderline No >
       <FOverline No >
       <FStrike No >
       <FChangeBar No >
       <FOutline No >
       <FShadow No >
       <FPairKern No >
       <FCase FAsTyped >
       <FPosition FNormal >
       <FSupScript No >
       <FSubScript No >
       <FDX  0.0 pt>
       <FDY  0.0 pt>
       <FDW  0.0 pt>
       <FSeparation 0>
       <FColor `Black'>
      > # end of PgfFont
     > # end of Pgf
     <ParaLine 
      <Font 
       <FTag `program'>
      > # end of Font
      <String `X u;'>
     >
    > # end of Para
   > # end of CellContent
  > # end of Cell
  <Cell 
   <CellContent 
    <Notes 
    > # end of Notes
    <Para 
     <Unique 10272>
     <PgfTag `CellBody'>
     <ParaLine 
     >
    > # end of Para
   > # end of CellContent
  > # end of Cell
  <Cell 
   <CellContent 
    <Notes 
    > # end of Notes
    <Para 
     <Unique 10274>
     <PgfTag `CellBody'>
     <ParaLine 
     >
    > # end of Para
   > # end of CellContent
  > # end of Cell
  <Cell 
   <CellContent 
    <Notes 
    > # end of Notes
    <Para 
     <Unique 10276>
     <PgfTag `CellBody'>
     <ParaLine 
      <String `note: '>
      <Font 
       <FTag `program'>
      > # end of Font
      <String `u'>
      <Font 
       <FTag `'>
      > # end of Font
      <String ` might have a singular value. '>
     >
    > # end of Para
    <Para 
     <Unique 10277>
     <PgfTag `CellBody'>
     <ParaLine 
      <String `note: a destructor is assumed.'>
     >
    > # end of Para
   > # end of CellContent
  > # end of Cell
 > # end of Row
 <Row 
  <RowMaxHeight  14.0">
  <RowHeight  0.27778">
  <Cell 
   <CellContent 
    <Notes 
    > # end of Notes
    <Para 
     <Unique 10279>
     <PgfTag `CellBody'>
     <Pgf 
      <PgfFont 
       <FTag `'>
       <FFamily `Courier'>
       <FVar `Regular'>
       <FWeight `Regular'>
       <FAngle `Regular'>
       <FPostScriptName `Courier'>
       <FSize  9.0 pt>
       <FUnderlining FNoUnderlining >
       <FUnderline No >
       <FDoubleUnderline No >
       <FNumericUnderline No >
       <FOverline No >
       <FStrike No >
       <FChangeBar No >
       <FOutline No >
       <FShadow No >
       <FPairKern No >
       <FCase FAsTyped >
       <FPosition FNormal >
       <FSupScript No >
       <FSubScript No >
       <FDX  0.0 pt>
       <FDY  0.0 pt>
       <FDW  0.0 pt>
       <FSeparation 0>
       <FColor `Black'>
      > # end of PgfFont
     > # end of Pgf
     <ParaLine 
      <Font 
       <FTag `program'>
      > # end of Font
      <String `X()'>
     >
    > # end of Para
   > # end of CellContent
  > # end of Cell
  <Cell 
   <CellContent 
    <Notes 
    > # end of Notes
    <Para 
     <Unique 10281>
     <PgfTag `CellBody'>
     <Pgf 
      <PgfFont 
       <FTag `'>
       <FFamily `Courier'>
       <FVar `Regular'>
       <FWeight `Regular'>
       <FAngle `Regular'>
       <FPostScriptName `Courier'>
       <FSize  9.0 pt>
       <FUnderlining FNoUnderlining >
       <FUnderline No >
       <FDoubleUnderline No >
       <FNumericUnderline No >
       <FOverline No >
       <FStrike No >
       <FChangeBar No >
       <FOutline No >
       <FShadow No >
       <FPairKern No >
       <FCase FAsTyped >
       <FPosition FNormal >
       <FSupScript No >
       <FSubScript No >
       <FDX  0.0 pt>
       <FDY  0.0 pt>
       <FDW  0.0 pt>
       <FSeparation 0>
       <FColor `Black'>
      > # end of PgfFont
     > # end of Pgf
     <ParaLine 
     >
    > # end of Para
   > # end of CellContent
  > # end of Cell
  <Cell 
   <CellContent 
    <Notes 
    > # end of Notes
    <Para 
     <Unique 10283>
     <PgfTag `CellBody'>
     <ParaLine 
     >
    > # end of Para
   > # end of CellContent
  > # end of Cell
  <Cell 
   <CellContent 
    <Notes 
    > # end of Notes
    <Para 
     <Unique 10285>
     <PgfTag `CellBody'>
     <ParaLine 
      <String `note: '>
      <Font 
       <FTag `program'>
      > # end of Font
      <String `X()'>
      <Font 
       <FTag `'>
      > # end of Font
      <String ` might be singular.'>
     >
    > # end of Para
   > # end of CellContent
  > # end of Cell
 > # end of Row
 <Row 
  <RowMaxHeight  14.0">
  <RowHeight  0.27778">
  <Cell 
   <CellContent 
    <Notes 
    > # end of Notes
    <Para 
     <Unique 10287>
     <PgfTag `CellBody'>
     <Pgf 
      <PgfFont 
       <FTag `'>
       <FFamily `Courier'>
       <FVar `Regular'>
       <FWeight `Regular'>
       <FAngle `Regular'>
       <FPostScriptName `Courier'>
       <FSize  9.0 pt>
       <FUnderlining FNoUnderlining >
       <FUnderline No >
       <FDoubleUnderline No >
       <FNumericUnderline No >
       <FOverline No >
       <FStrike No >
       <FChangeBar No >
       <FOutline No >
       <FShadow No >
       <FPairKern No >
       <FCase FAsTyped >
       <FPosition FNormal >
       <FSupScript No >
       <FSubScript No >
       <FDX  0.0 pt>
       <FDY  0.0 pt>
       <FDW  0.0 pt>
       <FSeparation 0>
       <FColor `Black'>
      > # end of PgfFont
     > # end of Pgf
     <ParaLine 
      <Font 
       <FTag `program'>
      > # end of Font
      <String `X(a)'>
     >
    > # end of Para
   > # end of CellContent
  > # end of Cell
  <Cell 
   <CellContent 
    <Notes 
    > # end of Notes
    <Para 
     <Unique 10289>
     <PgfTag `CellBody'>
     <Pgf 
      <PgfFont 
       <FTag `'>
       <FFamily `Courier'>
       <FVar `Regular'>
       <FWeight `Regular'>
       <FAngle `Regular'>
       <FPostScriptName `Courier'>
       <FSize  9.0 pt>
       <FUnderlining FNoUnderlining >
       <FUnderline No >
       <FDoubleUnderline No >
       <FNumericUnderline No >
       <FOverline No >
       <FStrike No >
       <FChangeBar No >
       <FOutline No >
       <FShadow No >
       <FPairKern No >
       <FCase FAsTyped >
       <FPosition FNormal >
       <FSupScript No >
       <FSubScript No >
       <FDX  0.0 pt>
       <FDY  0.0 pt>
       <FDW  0.0 pt>
       <FSeparation 0>
       <FColor `Black'>
      > # end of PgfFont
     > # end of Pgf
     <ParaLine 
     >
    > # end of Para
   > # end of CellContent
  > # end of Cell
  <Cell 
   <CellContent 
    <Notes 
    > # end of Notes
    <Para 
     <Unique 10291>
     <PgfTag `CellBody'>
     <ParaLine 
     >
    > # end of Para
   > # end of CellContent
  > # end of Cell
  <Cell 
   <CellContent 
    <Notes 
    > # end of Notes
    <Para 
     <Unique 10293>
     <PgfTag `CellBody'>
     <Pgf 
      <PgfFont 
       <FTag `'>
       <FFamily `Courier'>
       <FVar `Regular'>
       <FWeight `Regular'>
       <FAngle `Regular'>
       <FPostScriptName `Courier'>
       <FSize  9.0 pt>
       <FUnderlining FNoUnderlining >
       <FUnderline No >
       <FDoubleUnderline No >
       <FNumericUnderline No >
       <FOverline No >
       <FStrike No >
       <FChangeBar No >
       <FOutline No >
       <FShadow No >
       <FPairKern No >
       <FCase FAsTyped >
       <FPosition FNormal >
       <FSupScript No >
       <FSubScript No >
       <FDX  0.0 pt>
       <FDY  0.0 pt>
       <FDW  0.0 pt>
       <FSeparation 0>
       <FColor `Black'>
      > # end of PgfFont
     > # end of Pgf
     <ParaLine 
      <Font 
       <FTag `program'>
      > # end of Font
      <String `a == X(a)'>
      <Font 
       <FTag `'>
      > # end of Font
      <String `.'>
     >
    > # end of Para
   > # end of CellContent
  > # end of Cell
 > # end of Row
 <Row 
  <RowMaxHeight  14.0">
  <RowHeight  0.41667">
  <Cell 
   <CellContent 
    <Notes 
    > # end of Notes
    <Para 
     <Unique 10295>
     <PgfTag `CellBody'>
     <Pgf 
      <PgfFont 
       <FTag `'>
       <FFamily `Courier'>
       <FVar `Regular'>
       <FWeight `Regular'>
       <FAngle `Regular'>
       <FPostScriptName `Courier'>
       <FSize  9.0 pt>
       <FUnderlining FNoUnderlining >
       <FUnderline No >
       <FDoubleUnderline No >
       <FNumericUnderline No >
       <FOverline No >
       <FStrike No >
       <FChangeBar No >
       <FOutline No >
       <FShadow No >
       <FPairKern No >
       <FCase FAsTyped >
       <FPosition FNormal >
       <FSupScript No >
       <FSubScript No >
       <FDX  0.0 pt>
       <FDY  0.0 pt>
       <FDW  0.0 pt>
       <FSeparation 0>
       <FColor `Black'>
      > # end of PgfFont
     > # end of Pgf
     <ParaLine 
      <Font 
       <FTag `program'>
      > # end of Font
      <String `X u(a);'>
     >
    > # end of Para
    <Para 
     <Unique 10296>
     <PgfTag `CellBody'>
     <Pgf 
      <PgfFont 
       <FTag `'>
       <FFamily `Courier'>
       <FVar `Regular'>
       <FWeight `Regular'>
       <FAngle `Regular'>
       <FPostScriptName `Courier'>
       <FSize  9.0 pt>
       <FUnderlining FNoUnderlining >
       <FUnderline No >
       <FDoubleUnderline No >
       <FNumericUnderline No >
       <FOverline No >
       <FStrike No >
       <FChangeBar No >
       <FOutline No >
       <FShadow No >
       <FPairKern No >
       <FCase FAsTyped >
       <FPosition FNormal >
       <FSupScript No >
       <FSubScript No >
       <FDX  0.0 pt>
       <FDY  0.0 pt>
       <FDW  0.0 pt>
       <FSeparation 0>
       <FColor `Black'>
      > # end of PgfFont
     > # end of Pgf
     <ParaLine 
      <Font 
       <FTag `program'>
      > # end of Font
      <String `X u = a;'>
     >
    > # end of Para
   > # end of CellContent
  > # end of Cell
  <Cell 
   <CellContent 
    <Notes 
    > # end of Notes
    <Para 
     <Unique 10298>
     <PgfTag `CellBody'>
     <ParaLine 
     >
    > # end of Para
   > # end of CellContent
  > # end of Cell
  <Cell 
   <CellContent 
    <Notes 
    > # end of Notes
    <Para 
     <Unique 10300>
     <PgfTag `CellBody'>
     <Pgf 
      <PgfFont 
       <FTag `'>
       <FFamily `Courier'>
       <FVar `Regular'>
       <FWeight `Regular'>
       <FAngle `Regular'>
       <FPostScriptName `Courier'>
       <FSize  9.0 pt>
       <FUnderlining FNoUnderlining >
       <FUnderline No >
       <FDoubleUnderline No >
       <FNumericUnderline No >
       <FOverline No >
       <FStrike No >
       <FChangeBar No >
       <FOutline No >
       <FShadow No >
       <FPairKern No >
       <FCase FAsTyped >
       <FPosition FNormal >
       <FSupScript No >
       <FSubScript No >
       <FDX  0.0 pt>
       <FDY  0.0 pt>
       <FDW  0.0 pt>
       <FSeparation 0>
       <FColor `Black'>
      > # end of PgfFont
     > # end of Pgf
     <ParaLine 
      <Font 
       <FTag `program'>
      > # end of Font
      <String `X u; u = a;'>
     >
    > # end of Para
   > # end of CellContent
  > # end of Cell
  <Cell 
   <CellContent 
    <Notes 
    > # end of Notes
    <Para 
     <Unique 10302>
     <PgfTag `CellBody'>
     <ParaLine 
      <String `post: '>
      <Font 
       <FTag `program'>
      > # end of Font
      <String `u == a.'>
     >
    > # end of Para
   > # end of CellContent
  > # end of Cell
 > # end of Row
 <Row 
  <RowMaxHeight  14.0">
  <RowHeight  0.27778">
  <Cell 
   <CellContent 
    <Notes 
    > # end of Notes
    <Para 
     <Unique 10304>
     <PgfTag `CellBody'>
     <Pgf 
      <PgfFont 
       <FTag `'>
       <FFamily `Courier'>
       <FVar `Regular'>
       <FWeight `Regular'>
       <FAngle `Regular'>
       <FPostScriptName `Courier'>
       <FSize  9.0 pt>
       <FUnderlining FNoUnderlining >
       <FUnderline No >
       <FDoubleUnderline No >
       <FNumericUnderline No >
       <FOverline No >
       <FStrike No >
       <FChangeBar No >
       <FOutline No >
       <FShadow No >
       <FPairKern No >
       <FCase FAsTyped >
       <FPosition FNormal >
       <FSupScript No >
       <FSubScript No >
       <FDX  0.0 pt>
       <FDY  0.0 pt>
       <FDW  0.0 pt>
       <FSeparation 0>
       <FColor `Black'>
      > # end of PgfFont
     > # end of Pgf
     <ParaLine 
      <Font 
       <FTag `program'>
      > # end of Font
      <String `a == b'>
     >
    > # end of Para
   > # end of CellContent
  > # end of Cell
  <Cell 
   <CellContent 
    <Notes 
    > # end of Notes
    <Para 
     <Unique 10306>
     <PgfTag `CellBody'>
     <ParaLine 
      <String `convertible to '>
      <Font 
       <FTag `program'>
      > # end of Font
      <String `bool'>
     >
    > # end of Para
   > # end of CellContent
  > # end of Cell
  <Cell 
   <CellContent 
    <Notes 
    > # end of Notes
    <Para 
     <Unique 10308>
     <PgfTag `CellBody'>
     <Pgf 
      <PgfFont 
       <FTag `'>
       <FFamily `Courier'>
       <FVar `Regular'>
       <FWeight `Regular'>
       <FAngle `Regular'>
       <FPostScriptName `Courier'>
       <FSize  9.0 pt>
       <FUnderlining FNoUnderlining >
       <FUnderline No >
       <FDoubleUnderline No >
       <FNumericUnderline No >
       <FOverline No >
       <FStrike No >
       <FChangeBar No >
       <FOutline No >
       <FShadow No >
       <FPairKern No >
       <FCase FAsTyped >
       <FPosition FNormal >
       <FSupScript No >
       <FSubScript No >
       <FDX  0.0 pt>
       <FDY  0.0 pt>
       <FDW  0.0 pt>
       <FSeparation 0>
       <FColor `Black'>
      > # end of PgfFont
     > # end of Pgf
     <ParaLine 
     >
    > # end of Para
   > # end of CellContent
  > # end of Cell
  <Cell 
   <CellContent 
    <Notes 
    > # end of Notes
    <Para 
     <Unique 10310>
     <PgfTag `CellBody'>
     <ParaLine 
      <Font 
       <FTag `program'>
      > # end of Font
      <String `=='>
      <Font 
       <FTag `'>
      > # end of Font
      <String ` is an equivalence relation.'>
     >
    > # end of Para
   > # end of CellContent
  > # end of Cell
 > # end of Row
 <Row 
  <RowMaxHeight  14.0">
  <RowHeight  0.27778">
  <Cell 
   <CellContent 
    <Notes 
    > # end of Notes
    <Para 
     <Unique 10312>
     <PgfTag `CellBody'>
     <Pgf 
      <PgfFont 
       <FTag `'>
       <FFamily `Courier'>
       <FVar `Regular'>
       <FWeight `Regular'>
       <FAngle `Regular'>
       <FPostScriptName `Courier'>
       <FSize  9.0 pt>
       <FUnderlining FNoUnderlining >
       <FUnderline No >
       <FDoubleUnderline No >
       <FNumericUnderline No >
       <FOverline No >
       <FStrike No >
       <FChangeBar No >
       <FOutline No >
       <FShadow No >
       <FPairKern No >
       <FCase FAsTyped >
       <FPosition FNormal >
       <FSupScript No >
       <FSubScript No >
       <FDX  0.0 pt>
       <FDY  0.0 pt>
       <FDW  0.0 pt>
       <FSeparation 0>
       <FColor `Black'>
      > # end of PgfFont
     > # end of Pgf
     <ParaLine 
      <Font 
       <FTag `program'>
      > # end of Font
      <String `a != b'>
     >
    > # end of Para
   > # end of CellContent
  > # end of Cell
  <Cell 
   <CellContent 
    <Notes 
    > # end of Notes
    <Para 
     <Unique 10314>
     <PgfTag `CellBody'>
     <ParaLine 
      <String `convertible to '>
      <Font 
       <FTag `program'>
      > # end of Font
      <String `bool'>
     >
    > # end of Para
   > # end of CellContent
  > # end of Cell
  <Cell 
   <CellContent 
    <Notes 
    > # end of Notes
    <Para 
     <Unique 10316>
     <PgfTag `CellBody'>
     <Pgf 
      <PgfFont 
       <FTag `'>
       <FFamily `Courier'>
       <FVar `Regular'>
       <FWeight `Regular'>
       <FAngle `Regular'>
       <FPostScriptName `Courier'>
       <FSize  9.0 pt>
       <FUnderlining FNoUnderlining >
       <FUnderline No >
       <FDoubleUnderline No >
       <FNumericUnderline No >
       <FOverline No >
       <FStrike No >
       <FChangeBar No >
       <FOutline No >
       <FShadow No >
       <FPairKern No >
       <FCase FAsTyped >
       <FPosition FNormal >
       <FSupScript No >
       <FSubScript No >
       <FDX  0.0 pt>
       <FDY  0.0 pt>
       <FDW  0.0 pt>
       <FSeparation 0>
       <FColor `Black'>
      > # end of PgfFont
     > # end of Pgf
     <ParaLine 
      <Font 
       <FTag `program'>
      > # end of Font
      <String `!(a == b)'>
     >
    > # end of Para
   > # end of CellContent
  > # end of Cell
  <Cell 
   <CellContent 
    <Notes 
    > # end of Notes
    <Para 
     <Unique 10318>
     <PgfTag `CellBody'>
     <ParaLine 
     >
    > # end of Para
   > # end of CellContent
  > # end of Cell
 > # end of Row
 <Row 
  <RowMaxHeight  14.0">
  <RowHeight  0.27778">
  <Cell 
   <CellContent 
    <Notes 
    > # end of Notes
    <Para 
     <Unique 10320>
     <PgfTag `CellBody'>
     <Pgf 
      <PgfFont 
       <FTag `'>
       <FFamily `Courier'>
       <FVar `Regular'>
       <FWeight `Regular'>
       <FAngle `Regular'>
       <FPostScriptName `Courier'>
       <FSize  9.0 pt>
       <FUnderlining FNoUnderlining >
       <FUnderline No >
       <FDoubleUnderline No >
       <FNumericUnderline No >
       <FOverline No >
       <FStrike No >
       <FChangeBar No >
       <FOutline No >
       <FShadow No >
       <FPairKern No >
       <FCase FAsTyped >
       <FPosition FNormal >
       <FSupScript No >
       <FSubScript No >
       <FDX  0.0 pt>
       <FDY  0.0 pt>
       <FDW  0.0 pt>
       <FSeparation 0>
       <FColor `Black'>
      > # end of PgfFont
     > # end of Pgf
     <ParaLine 
      <Font 
       <FTag `program'>
      > # end of Font
      <String `r = a'>
     >
    > # end of Para
   > # end of CellContent
  > # end of Cell
  <Cell 
   <CellContent 
    <Notes 
    > # end of Notes
    <Para 
     <Unique 10322>
     <PgfTag `CellBody'>
     <ParaLine 
      <Font 
       <FTag `program'>
      > # end of Font
      <String `X&'>
     >
    > # end of Para
   > # end of CellContent
  > # end of Cell
  <Cell 
   <CellContent 
    <Notes 
    > # end of Notes
    <Para 
     <Unique 10324>
     <PgfTag `CellBody'>
     <Pgf 
      <PgfFont 
       <FTag `'>
       <FFamily `Courier'>
       <FVar `Regular'>
       <FWeight `Regular'>
       <FAngle `Regular'>
       <FPostScriptName `Courier'>
       <FSize  9.0 pt>
       <FUnderlining FNoUnderlining >
       <FUnderline No >
       <FDoubleUnderline No >
       <FNumericUnderline No >
       <FOverline No >
       <FStrike No >
       <FChangeBar No >
       <FOutline No >
       <FShadow No >
       <FPairKern No >
       <FCase FAsTyped >
       <FPosition FNormal >
       <FSupScript No >
       <FSubScript No >
       <FDX  0.0 pt>
       <FDY  0.0 pt>
       <FDW  0.0 pt>
       <FSeparation 0>
       <FColor `Black'>
      > # end of PgfFont
     > # end of Pgf
     <ParaLine 
     >
    > # end of Para
   > # end of CellContent
  > # end of Cell
  <Cell 
   <CellContent 
    <Notes 
    > # end of Notes
    <Para 
     <Unique 10326>
     <PgfTag `CellBody'>
     <ParaLine 
      <String `post: '>
      <Font 
       <FTag `program'>
      > # end of Font
      <String `r == a.'>
     >
    > # end of Para
   > # end of CellContent
  > # end of Cell
 > # end of Row
 <Row 
  <RowMaxHeight  14.0">
  <RowHeight  0.61111">
  <Cell 
   <CellContent 
    <Notes 
    > # end of Notes
    <Para 
     <Unique 10328>
     <PgfTag `CellBody'>
     <Pgf 
      <PgfFont 
       <FTag `'>
       <FFamily `Courier'>
       <FVar `Regular'>
       <FWeight `Regular'>
       <FAngle `Regular'>
       <FPostScriptName `Courier'>
       <FSize  9.0 pt>
       <FUnderlining FNoUnderlining >
       <FUnderline No >
       <FDoubleUnderline No >
       <FNumericUnderline No >
       <FOverline No >
       <FStrike No >
       <FChangeBar No >
       <FOutline No >
       <FShadow No >
       <FPairKern No >
       <FCase FAsTyped >
       <FPosition FNormal >
       <FSupScript No >
       <FSubScript No >
       <FDX  0.0 pt>
       <FDY  0.0 pt>
       <FDW  0.0 pt>
       <FSeparation 0>
       <FColor `Black'>
      > # end of PgfFont
     > # end of Pgf
     <ParaLine 
      <Font 
       <FTag `program'>
      > # end of Font
      <String `*a'>
     >
    > # end of Para
   > # end of CellContent
  > # end of Cell
  <Cell 
   <CellContent 
    <Notes 
    > # end of Notes
    <Para 
     <Unique 10330>
     <PgfTag `CellBody'>
     <ParaLine 
      <String `convertible to '>
      <Font 
       <FTag `program'>
      > # end of Font
      <String `T'>
     >
    > # end of Para
    <Para 
     <Unique 10331>
     <PgfTag `CellBody'>
     <ParaLine 
     >
    > # end of Para
   > # end of CellContent
  > # end of Cell
  <Cell 
   <CellContent 
    <Notes 
    > # end of Notes
    <Para 
     <Unique 10333>
     <PgfTag `CellBody'>
     <Pgf 
      <PgfFont 
       <FTag `'>
       <FFamily `Courier'>
       <FVar `Regular'>
       <FWeight `Regular'>
       <FAngle `Regular'>
       <FPostScriptName `Courier'>
       <FSize  9.0 pt>
       <FUnderlining FNoUnderlining >
       <FUnderline No >
       <FDoubleUnderline No >
       <FNumericUnderline No >
       <FOverline No >
       <FStrike No >
       <FChangeBar No >
       <FOutline No >
       <FShadow No >
       <FPairKern No >
       <FCase FAsTyped >
       <FPosition FNormal >
       <FSupScript No >
       <FSubScript No >
       <FDX  0.0 pt>
       <FDY  0.0 pt>
       <FDW  0.0 pt>
       <FSeparation 0>
       <FColor `Black'>
      > # end of PgfFont
     > # end of Pgf
     <ParaLine 
     >
    > # end of Para
   > # end of CellContent
  > # end of Cell
  <Cell 
   <CellContent 
    <Notes 
    > # end of Notes
    <Para 
     <Unique 10335>
     <PgfTag `CellBody'>
     <ParaLine 
      <String `pre: '>
      <Font 
       <FTag `program'>
      > # end of Font
      <String `a'>
      <Font 
       <FTag `'>
      > # end of Font
      <String ` is dereferenceable.'>
     >
    > # end of Para
    <Para 
     <Unique 10336>
     <PgfTag `CellBody'>
     <ParaLine 
      <Font 
       <FTag `program'>
      > # end of Font
      <String `a == b'>
      <Font 
       <FTag `'>
      > # end of Font
      <String ` implies '>
      <Font 
       <FTag `program'>
      > # end of Font
      <String `*a == *b'>
      <Font 
       <FTag `'>
      > # end of Font
      <String `.'>
     >
    > # end of Para
    <Para 
     <Unique 10337>
     <PgfTag `CellBody'>
     <ParaLine 
      <String `If '>
      <Font 
       <FTag `program'>
      > # end of Font
      <String `X'>
      <Font 
       <FTag `'>
      > # end of Font
      <String ` is mutable, '>
      <Font 
       <FTag `program'>
      > # end of Font
      <String `*a = t'>
      <Font 
       <FTag `'>
      > # end of Font
      <String ` is valid.'>
     >
    > # end of Para
   > # end of CellContent
  > # end of Cell
 > # end of Row
 <Row 
  <RowMaxHeight  14.0">
  <RowHeight  1.09722">
  <Cell 
   <CellContent 
    <Notes 
    > # end of Notes
    <Para 
     <Unique 10339>
     <PgfTag `CellBody'>
     <Pgf 
      <PgfFont 
       <FTag `'>
       <FFamily `Courier'>
       <FVar `Regular'>
       <FWeight `Regular'>
       <FAngle `Regular'>
       <FPostScriptName `Courier'>
       <FSize  9.0 pt>
       <FUnderlining FNoUnderlining >
       <FUnderline No >
       <FDoubleUnderline No >
       <FNumericUnderline No >
       <FOverline No >
       <FStrike No >
       <FChangeBar No >
       <FOutline No >
       <FShadow No >
       <FPairKern No >
       <FCase FAsTyped >
       <FPosition FNormal >
       <FSupScript No >
       <FSubScript No >
       <FDX  0.0 pt>
       <FDY  0.0 pt>
       <FDW  0.0 pt>
       <FSeparation 0>
       <FColor `Black'>
      > # end of PgfFont
     > # end of Pgf
     <ParaLine 
      <Font 
       <FTag `program'>
      > # end of Font
      <String `++'>
      <String `r'>
     >
    > # end of Para
   > # end of CellContent
  > # end of Cell
  <Cell 
   <CellContent 
    <Notes 
    > # end of Notes
    <Para 
     <Unique 10341>
     <PgfTag `CellBody'>
     <Pgf 
      <PgfFont 
       <FTag `'>
       <FFamily `Courier'>
       <FVar `Regular'>
       <FWeight `Regular'>
       <FAngle `Regular'>
       <FPostScriptName `Courier'>
       <FSize  9.0 pt>
       <FUnderlining FNoUnderlining >
       <FUnderline No >
       <FDoubleUnderline No >
       <FNumericUnderline No >
       <FOverline No >
       <FStrike No >
       <FChangeBar No >
       <FOutline No >
       <FShadow No >
       <FPairKern No >
       <FCase FAsTyped >
       <FPosition FNormal >
       <FSupScript No >
       <FSubScript No >
       <FDX  0.0 pt>
       <FDY  0.0 pt>
       <FDW  0.0 pt>
       <FSeparation 0>
       <FColor `Black'>
      > # end of PgfFont
     > # end of Pgf
     <ParaLine 
      <Font 
       <FTag `program'>
      > # end of Font
      <String `X&'>
     >
    > # end of Para
   > # end of CellContent
  > # end of Cell
  <Cell 
   <CellContent 
    <Notes 
    > # end of Notes
    <Para 
     <Unique 10343>
     <PgfTag `CellBody'>
     <Pgf 
      <PgfFont 
       <FTag `'>
       <FFamily `Courier'>
       <FVar `Regular'>
       <FWeight `Regular'>
       <FAngle `Regular'>
       <FPostScriptName `Courier'>
       <FSize  9.0 pt>
       <FUnderlining FNoUnderlining >
       <FUnderline No >
       <FDoubleUnderline No >
       <FNumericUnderline No >
       <FOverline No >
       <FStrike No >
       <FChangeBar No >
       <FOutline No >
       <FShadow No >
       <FPairKern No >
       <FCase FAsTyped >
       <FPosition FNormal >
       <FSupScript No >
       <FSubScript No >
       <FDX  0.0 pt>
       <FDY  0.0 pt>
       <FDW  0.0 pt>
       <FSeparation 0>
       <FColor `Black'>
      > # end of PgfFont
     > # end of Pgf
     <ParaLine 
     >
    > # end of Para
   > # end of CellContent
  > # end of Cell
  <Cell 
   <CellContent 
    <Notes 
    > # end of Notes
    <Para 
     <Unique 10345>
     <PgfTag `CellBody'>
     <ParaLine 
      <String `pre: '>
      <Font 
       <FTag `program'>
      > # end of Font
      <String `r'>
      <Font 
       <FTag `'>
      > # end of Font
      <String ` i'>
      <String `s dereferenceable.'>
     >
    > # end of Para
    <Para 
     <Unique 10346>
     <PgfTag `CellBody'>
     <ParaLine 
      <String `post: '>
      <Font 
       <FTag `program'>
      > # end of Font
      <String `r'>
      <Font 
       <FTag `'>
      > # end of Font
      <String ` i'>
      <String `s dereferenceable or '>
      <Font 
       <FTag `program'>
      > # end of Font
      <String `r'>
      <Font 
       <FTag `'>
      > # end of Font
      <String ` i'>
      <String `s past-the-'>
     >
     <ParaLine 
      <String `end.'>
     >
    > # end of Para
    <Para 
     <Unique 10347>
     <PgfTag `CellBody'>
     <ParaLine 
      <Font 
       <FTag `program'>
      > # end of Font
      <String `r ='>
      <String `= '>
      <String `s'>
      <Font 
       <FTag `'>
      > # end of Font
      <String ` a'>
      <String `nd '>
      <Font 
       <FTag `program'>
      > # end of Font
      <String `r'>
      <Font 
       <FTag `'>
      > # end of Font
      <String ` i'>
      <String `s dereferenceable implies '>
     >
     <ParaLine 
      <Font 
       <FTag `program'>
      > # end of Font
      <String `++'>
      <String `r ='>
      <String `= ++'>
      <String `s'>
      <Font 
       <FTag `'>
      > # end of Font
      <String `.'>
     >
    > # end of Para
    <Para 
     <Unique 10348>
     <PgfTag `CellBody'>
     <Pgf 
      <PgfFont 
       <FTag `'>
       <FFamily `Courier'>
       <FVar `Regular'>
       <FWeight `Regular'>
       <FAngle `Regular'>
       <FPostScriptName `Courier'>
       <FSize  9.0 pt>
       <FUnderlining FNoUnderlining >
       <FUnderline No >
       <FDoubleUnderline No >
       <FNumericUnderline No >
       <FOverline No >
       <FStrike No >
       <FChangeBar No >
       <FOutline No >
       <FShadow No >
       <FPairKern No >
       <FCase FAsTyped >
       <FPosition FNormal >
       <FSupScript No >
       <FSubScript No >
       <FDX  0.0 pt>
       <FDY  0.0 pt>
       <FDW  0.0 pt>
       <FSeparation 0>
       <FColor `Black'>
      > # end of PgfFont
     > # end of Pgf
     <ParaLine 
      <Font 
       <FTag `program'>
      > # end of Font
      <String `&'>
      <String `r ='>
      <String `= &++'>
      <String `r.'>
     >
    > # end of Para
   > # end of CellContent
  > # end of Cell
 > # end of Row
 <Row 
  <RowMaxHeight  14.0">
  <RowHeight  0.56944">
  <Cell 
   <CellContent 
    <Notes 
    > # end of Notes
    <Para 
     <Unique 10350>
     <PgfTag `CellBody'>
     <Pgf 
      <PgfFont 
       <FTag `'>
       <FFamily `Courier'>
       <FVar `Regular'>
       <FWeight `Regular'>
       <FAngle `Regular'>
       <FPostScriptName `Courier'>
       <FSize  9.0 pt>
       <FUnderlining FNoUnderlining >
       <FUnderline No >
       <FDoubleUnderline No >
       <FNumericUnderline No >
       <FOverline No >
       <FStrike No >
       <FChangeBar No >
       <FOutline No >
       <FShadow No >
       <FPairKern No >
       <FCase FAsTyped >
       <FPosition FNormal >
       <FSupScript No >
       <FSubScript No >
       <FDX  0.0 pt>
       <FDY  0.0 pt>
       <FDW  0.0 pt>
       <FSeparation 0>
       <FColor `Black'>
      > # end of PgfFont
     > # end of Pgf
     <ParaLine 
      <Font 
       <FTag `program'>
      > # end of Font
      <String `r+'>
      <String `+'>
     >
    > # end of Para
   > # end of CellContent
  > # end of Cell
  <Cell 
   <CellContent 
    <Notes 
    > # end of Notes
    <Para 
     <Unique 10352>
     <PgfTag `CellBody'>
     <Pgf 
      <PgfFont 
       <FTag `'>
       <FFamily `Courier'>
       <FVar `Regular'>
       <FWeight `Regular'>
       <FAngle `Regular'>
       <FPostScriptName `Courier'>
       <FSize  9.0 pt>
       <FUnderlining FNoUnderlining >
       <FUnderline No >
       <FDoubleUnderline No >
       <FNumericUnderline No >
       <FOverline No >
       <FStrike No >
       <FChangeBar No >
       <FOutline No >
       <FShadow No >
       <FPairKern No >
       <FCase FAsTyped >
       <FPosition FNormal >
       <FSupScript No >
       <FSubScript No >
       <FDX  0.0 pt>
       <FDY  0.0 pt>
       <FDW  0.0 pt>
       <FSeparation 0>
       <FColor `Black'>
      > # end of PgfFont
     > # end of Pgf
     <ParaLine 
      <Font 
       <FTag `program'>
      > # end of Font
      <String `X'>
     >
    > # end of Para
   > # end of CellContent
  > # end of Cell
  <Cell 
   <CellContent 
    <Notes 
    > # end of Notes
    <Para 
     <Unique 10354>
     <PgfTag `CellBody'>
     <Pgf 
      <PgfFont 
       <FTag `'>
       <FFamily `Courier'>
       <FVar `Regular'>
       <FWeight `Regular'>
       <FAngle `Regular'>
       <FPostScriptName `Courier'>
       <FSize  9.0 pt>
       <FUnderlining FNoUnderlining >
       <FUnderline No >
       <FDoubleUnderline No >
       <FNumericUnderline No >
       <FOverline No >
       <FStrike No >
       <FChangeBar No >
       <FOutline No >
       <FShadow No >
       <FPairKern No >
       <FCase FAsTyped >
       <FPosition FNormal >
       <FSupScript No >
       <FSubScript No >
       <FDX  0.0 pt>
       <FDY  0.0 pt>
       <FDW  0.0 pt>
       <FSeparation 0>
       <FColor `Black'>
      > # end of PgfFont
     > # end of Pgf
     <ParaLine 
      <Font 
       <FTag `program'>
      > # end of Font
      <String `{ X tmp = '>
      <String `r;'>
     >
    > # end of Para
    <Para 
     <Unique 10355>
     <PgfTag `CellBody'>
     <Pgf 
      <PgfFIndent  0.14167">
      <PgfFont 
       <FTag `'>
       <FFamily `Courier'>
       <FVar `Regular'>
       <FWeight `Regular'>
       <FAngle `Regular'>
       <FPostScriptName `Courier'>
       <FSize  9.0 pt>
       <FUnderlining FNoUnderlining >
       <FUnderline No >
       <FDoubleUnderline No >
       <FNumericUnderline No >
       <FOverline No >
       <FStrike No >
       <FChangeBar No >
       <FOutline No >
       <FShadow No >
       <FPairKern No >
       <FCase FAsTyped >
       <FPosition FNormal >
       <FSupScript No >
       <FSubScript No >
       <FDX  0.0 pt>
       <FDY  0.0 pt>
       <FDW  0.0 pt>
       <FSeparation 0>
       <FColor `Black'>
      > # end of PgfFont
     > # end of Pgf
     <ParaLine 
      <Font 
       <FTag `program'>
      > # end of Font
      <String `++'>
      <String `r;'>
     >
    > # end of Para
    <Para 
     <Unique 10356>
     <PgfTag `CellBody'>
     <Pgf 
      <PgfFIndent  0.14167">
      <PgfFont 
       <FTag `'>
       <FFamily `Courier'>
       <FVar `Regular'>
       <FWeight `Regular'>
       <FAngle `Regular'>
       <FPostScriptName `Courier'>
       <FSize  9.0 pt>
       <FUnderlining FNoUnderlining >
       <FUnderline No >
       <FDoubleUnderline No >
       <FNumericUnderline No >
       <FOverline No >
       <FStrike No >
       <FChangeBar No >
       <FOutline No >
       <FShadow No >
       <FPairKern No >
       <FCase FAsTyped >
       <FPosition FNormal >
       <FSupScript No >
       <FSubScript No >
       <FDX  0.0 pt>
       <FDY  0.0 pt>
       <FDW  0.0 pt>
       <FSeparation 0>
       <FColor `Black'>
      > # end of PgfFont
     > # end of Pgf
     <ParaLine 
      <Font 
       <FTag `program'>
      > # end of Font
      <String `return tmp; }'>
     >
    > # end of Para
   > # end of CellContent
  > # end of Cell
  <Cell 
   <CellContent 
    <Notes 
    > # end of Notes
    <Para 
     <Unique 10358>
     <PgfTag `CellBody'>
     <ParaLine 
     >
    > # end of Para
   > # end of CellContent
  > # end of Cell
 > # end of Row
> # end of TblBody
> # end of Tbl
<Tbl 
<TblID 18>
<TblTag `Format A'>
<TblFormat 
 <TblColumn 
  <TblColumnNum 0>
  <TblColumnWidth  1.0">
  <TblColumnH 
   <Pgf 
    <PgfTag `CellHeading'>
    <PgfAlignment Center >
    <PgfFont 
     <FTag `'>
     <FFamily `Times'>
     <FVar `Regular'>
     <FWeight `Regular'>
     <FAngle `Regular'>
     <FPostScriptName `Times-Roman'>
     <FSize  12.0 pt>
     <FUnderlining FNoUnderlining >
     <FUnderline No >
     <FDoubleUnderline No >
     <FNumericUnderline No >
     <FOverline No >
     <FStrike No >
     <FChangeBar No >
     <FOutline No >
     <FShadow No >
     <FPairKern Yes >
     <FCase FAsTyped >
     <FPosition FNormal >
     <FSupScript No >
     <FSubScript No >
     <FDX  0.0 pt>
     <FDY  0.0 pt>
     <FDW  0.0 pt>
     <FSeparation 0>
     <FColor `Black'>
    > # end of PgfFont
    <PgfHyphenate No >
    <PgfCellAlignment Middle >
    <PgfCellMargins  0.0 pt 2.0 pt 0.0 pt 2.0 pt>
   > # end of Pgf
  > # end of TblColumnH
  <TblColumnBody 
   <PgfTag `CellBody'>
   <Pgf 
    <PgfFont 
     <FTag `'>
     <FFamily `Times'>
     <FVar `Regular'>
     <FWeight `Regular'>
     <FAngle `Regular'>
     <FPostScriptName `Times-Roman'>
     <FSize  12.0 pt>
     <FUnderlining FNoUnderlining >
     <FUnderline No >
     <FDoubleUnderline No >
     <FNumericUnderline No >
     <FOverline No >
     <FStrike No >
     <FChangeBar No >
     <FOutline No >
     <FShadow No >
     <FPairKern Yes >
     <FCase FAsTyped >
     <FPosition FNormal >
     <FSupScript No >
     <FSubScript No >
     <FDX  0.0 pt>
     <FDY  0.0 pt>
     <FDW  0.0 pt>
     <FSeparation 0>
     <FColor `Black'>
    > # end of PgfFont
   > # end of Pgf
  > # end of TblColumnBody
  <TblColumnF 
   <Pgf 
    <PgfTag `CellHeading'>
    <PgfAlignment Center >
    <PgfHyphenate No >
    <PgfCellAlignment Middle >
    <PgfCellMargins  0.0 pt 2.0 pt 0.0 pt 2.0 pt>
   > # end of Pgf
  > # end of TblColumnF
 > # end of TblColumn
 <TblColumn 
  <TblColumnNum 1>
  <TblColumnWidth  1.0">
  <TblColumnH 
  > # end of TblColumnH
  <TblColumnBody 
   <PgfTag `CellBody'>
   <Pgf 
    <PgfFont 
     <FTag `'>
     <FFamily `Times'>
     <FVar `Regular'>
     <FWeight `Regular'>
     <FAngle `Regular'>
     <FPostScriptName `Times-Roman'>
     <FSize  12.0 pt>
     <FUnderlining FNoUnderlining >
     <FUnderline No >
     <FDoubleUnderline No >
     <FNumericUnderline No >
     <FOverline No >
     <FStrike No >
     <FChangeBar No >
     <FOutline No >
     <FShadow No >
     <FPairKern Yes >
     <FCase FAsTyped >
     <FPosition FNormal >
     <FSupScript No >
     <FSubScript No >
     <FDX  0.0 pt>
     <FDY  0.0 pt>
     <FDW  0.0 pt>
     <FSeparation 0>
     <FColor `Black'>
    > # end of PgfFont
   > # end of Pgf
  > # end of TblColumnBody
  <TblColumnF 
   <Pgf 
    <PgfTag `CellHeading'>
    <PgfAlignment Center >
    <PgfHyphenate No >
    <PgfCellAlignment Middle >
    <PgfCellMargins  0.0 pt 2.0 pt 0.0 pt 2.0 pt>
   > # end of Pgf
  > # end of TblColumnF
 > # end of TblColumn
 <TblColumn 
  <TblColumnNum 2>
  <TblColumnWidth  1.0">
  <TblColumnH 
  > # end of TblColumnH
  <TblColumnBody 
   <PgfTag `CellBody'>
   <Pgf 
    <PgfFont 
     <FTag `'>
     <FFamily `Times'>
     <FVar `Regular'>
     <FWeight `Regular'>
     <FAngle `Regular'>
     <FPostScriptName `Times-Roman'>
     <FSize  12.0 pt>
     <FUnderlining FNoUnderlining >
     <FUnderline No >
     <FDoubleUnderline No >
     <FNumericUnderline No >
     <FOverline No >
     <FStrike No >
     <FChangeBar No >
     <FOutline No >
     <FShadow No >
     <FPairKern Yes >
     <FCase FAsTyped >
     <FPosition FNormal >
     <FSupScript No >
     <FSubScript No >
     <FDX  0.0 pt>
     <FDY  0.0 pt>
     <FDW  0.0 pt>
     <FSeparation 0>
     <FColor `Black'>
    > # end of PgfFont
   > # end of Pgf
  > # end of TblColumnBody
  <TblColumnF 
   <Pgf 
    <PgfTag `CellHeading'>
    <PgfAlignment Center >
    <PgfHyphenate No >
    <PgfCellAlignment Middle >
    <PgfCellMargins  0.0 pt 2.0 pt 0.0 pt 2.0 pt>
   > # end of Pgf
  > # end of TblColumnF
 > # end of TblColumn
 <TblColumn 
  <TblColumnNum 3>
  <TblColumnWidth  1.0">
  <TblColumnH 
  > # end of TblColumnH
  <TblColumnBody 
   <PgfTag `CellBody'>
   <Pgf 
    <PgfFont 
     <FTag `'>
     <FFamily `Times'>
     <FVar `Regular'>
     <FWeight `Regular'>
     <FAngle `Regular'>
     <FPostScriptName `Times-Roman'>
     <FSize  12.0 pt>
     <FUnderlining FNoUnderlining >
     <FUnderline No >
     <FDoubleUnderline No >
     <FNumericUnderline No >
     <FOverline No >
     <FStrike No >
     <FChangeBar No >
     <FOutline No >
     <FShadow No >
     <FPairKern Yes >
     <FCase FAsTyped >
     <FPosition FNormal >
     <FSupScript No >
     <FSubScript No >
     <FDX  0.0 pt>
     <FDY  0.0 pt>
     <FDW  0.0 pt>
     <FSeparation 0>
     <FColor `Black'>
    > # end of PgfFont
   > # end of Pgf
  > # end of TblColumnBody
  <TblColumnF 
   <Pgf 
    <PgfTag `CellHeading'>
    <PgfAlignment Center >
    <PgfHyphenate No >
    <PgfCellAlignment Middle >
    <PgfCellMargins  0.0 pt 2.0 pt 0.0 pt 2.0 pt>
   > # end of Pgf
  > # end of TblColumnF
 > # end of TblColumn
 <TblColumn 
  <TblColumnNum 4>
  <TblColumnWidth  1.0">
  <TblColumnH 
  > # end of TblColumnH
  <TblColumnBody 
   <PgfTag `CellBody'>
   <Pgf 
    <PgfFont 
     <FTag `'>
     <FFamily `Times'>
     <FVar `Regular'>
     <FWeight `Regular'>
     <FAngle `Regular'>
     <FPostScriptName `Times-Roman'>
     <FSize  12.0 pt>
     <FUnderlining FNoUnderlining >
     <FUnderline No >
     <FDoubleUnderline No >
     <FNumericUnderline No >
     <FOverline No >
     <FStrike No >
     <FChangeBar No >
     <FOutline No >
     <FShadow No >
     <FPairKern Yes >
     <FCase FAsTyped >
     <FPosition FNormal >
     <FSupScript No >
     <FSubScript No >
     <FDX  0.0 pt>
     <FDY  0.0 pt>
     <FDW  0.0 pt>
     <FSeparation 0>
     <FColor `Black'>
    > # end of PgfFont
   > # end of Pgf
  > # end of TblColumnBody
  <TblColumnF 
   <Pgf 
    <PgfTag `CellHeading'>
    <PgfAlignment Center >
    <PgfHyphenate No >
    <PgfCellAlignment Middle >
    <PgfCellMargins  0.0 pt 2.0 pt 0.0 pt 2.0 pt>
   > # end of Pgf
  > # end of TblColumnF
 > # end of TblColumn
 <TblInitNumBodyRows 8>
> # end of TblFormat
<TblNumColumns 4>
<Unique 35541>
<TblColumnWidth  1.4">
<TblColumnWidth  1.3">
<TblColumnWidth  2.5">
<TblColumnWidth  1.3">
<TblTitleContent 
 <Notes 
 > # end of Notes
 <Para 
  <Unique 39772>
  <Pgf 
   <PgfTag `TableTitle'>
   <PgfFont 
    <FTag `'>
    <FFamily `Times'>
    <FVar `Regular'>
    <FWeight `Bold'>
    <FAngle `Regular'>
    <FPostScriptName `Times-Bold'>
    <FSize  12.0 pt>
    <FUnderlining FNoUnderlining >
    <FUnderline No >
    <FDoubleUnderline No >
    <FNumericUnderline No >
    <FOverline No >
    <FStrike No >
    <FChangeBar No >
    <FOutline No >
    <FShadow No >
    <FPairKern Yes >
    <FCase FAsTyped >
    <FPosition FNormal >
    <FSupScript No >
    <FSubScript No >
    <FDX  0.0 pt>
    <FDY  0.0 pt>
    <FDW  0.0 pt>
    <FSeparation 0>
    <FColor `Black'>
   > # end of PgfFont
   <PgfAutoNum Yes >
   <PgfNumFormat `T:Table <n+\>: '>
   <PgfNumberFont `'>
   <PgfNumAtEnd No >
   <PgfCellAlignment Top >
   <PgfCellMargins  0.0 pt 0.0 pt 0.0 pt 0.0 pt>
  > # end of Pgf
  <PgfNumString `Table 12: '>
  <ParaLine 
   <String `Associative container requirements (in addition to container)'>
  >
 > # end of Para
> # end of TblTitleContent
<TblH 
 <Row 
  <RowMaxHeight  14.0">
  <RowHeight  0.5">
  <Cell 
   <CellContent 
    <Notes 
    > # end of Notes
    <Para 
     <Unique 39780>
     <Pgf 
      <PgfTag `CellHeading'>
      <PgfFont 
       <FTag `'>
       <FFamily `Times'>
       <FVar `Regular'>
       <FWeight `Regular'>
       <FAngle `Regular'>
       <FPostScriptName `Times-Roman'>
       <FSize  10.0 pt>
       <FUnderlining FNoUnderlining >
       <FUnderline No >
       <FDoubleUnderline No >
       <FNumericUnderline No >
       <FOverline No >
       <FStrike No >
       <FChangeBar No >
       <FOutline No >
       <FShadow No >
       <FPairKern Yes >
       <FCase FAsTyped >
       <FPosition FNormal >
       <FSupScript No >
       <FSubScript No >
       <FDX  0.0 pt>
       <FDY  0.0 pt>
       <FDW  0.0 pt>
       <FSeparation 0>
       <FColor `Black'>
      > # end of PgfFont
      <PgfAutoNum No >
      <PgfCellAlignment Middle >
      <PgfCellMargins  0.0 pt 2.0 pt 0.0 pt 2.0 pt>
     > # end of Pgf
     <ParaLine 
      <String `expression'>
     >
    > # end of Para
   > # end of CellContent
  > # end of Cell
  <Cell 
   <CellContent 
    <Notes 
    > # end of Notes
    <Para 
     <Unique 39782>
     <ParaLine 
      <String `return type'>
     >
    > # end of Para
   > # end of CellContent
  > # end of Cell
  <Cell 
   <CellContent 
    <Notes 
    > # end of Notes
    <Para 
     <Unique 39784>
     <ParaLine 
      <String `assertion/note'>
     >
    > # end of Para
    <Para 
     <Unique 39785>
     <ParaLine 
      <String `pre/post-condition'>
     >
    > # end of Para
   > # end of CellContent
  > # end of Cell
  <Cell 
   <CellContent 
    <Notes 
    > # end of Notes
    <Para 
     <Unique 39787>
     <ParaLine 
      <String `complexity'>
     >
    > # end of Para
   > # end of CellContent
  > # end of Cell
 > # end of Row
> # end of TblH
<TblBody 
 <Row 
  <RowMaxHeight  14.0">
  <RowHeight  0.27778">
  <Cell 
   <CellContent 
    <Notes 
    > # end of Notes
    <Para 
     <Unique 39789>
     <PgfTag `CellBody'>
     <Pgf 
      <PgfFont 
       <FTag `'>
       <FFamily `Courier'>
       <FVar `Regular'>
       <FWeight `Regular'>
       <FAngle `Regular'>
       <FPostScriptName `Courier'>
       <FSize  9.0 pt>
       <FUnderlining FNoUnderlining >
       <FUnderline No >
       <FDoubleUnderline No >
       <FNumericUnderline No >
       <FOverline No >
       <FStrike No >
       <FChangeBar No >
       <FOutline No >
       <FShadow No >
       <FPairKern No >
       <FCase FAsTyped >
       <FPosition FNormal >
       <FSupScript No >
       <FSubScript No >
       <FDX  0.0 pt>
       <FDY  0.0 pt>
       <FDW  0.0 pt>
       <FSeparation 0>
       <FColor `Black'>
      > # end of PgfFont
     > # end of Pgf
     <ParaLine 
      <String `X::key_type'>
     >
    > # end of Para
   > # end of CellContent
  > # end of Cell
  <Cell 
   <CellContent 
    <Notes 
    > # end of Notes
    <Para 
     <Unique 39791>
     <PgfTag `CellBody'>
     <Pgf 
      <PgfFont 
       <FTag `'>
       <FFamily `Courier'>
       <FVar `Regular'>
       <FWeight `Regular'>
       <FAngle `Regular'>
       <FPostScriptName `Courier'>
       <FSize  9.0 pt>
       <FUnderlining FNoUnderlining >
       <FUnderline No >
       <FDoubleUnderline No >
       <FNumericUnderline No >
       <FOverline No >
       <FStrike No >
       <FChangeBar No >
       <FOutline No >
       <FShadow No >
       <FPairKern No >
       <FCase FAsTyped >
       <FPosition FNormal >
       <FSupScript No >
       <FSubScript No >
       <FDX  0.0 pt>
       <FDY  0.0 pt>
       <FDW  0.0 pt>
       <FSeparation 0>
       <FColor `Black'>
      > # end of PgfFont
     > # end of Pgf
     <ParaLine 
      <Font 
       <FTag `program'>
      > # end of Font
      <String `Key'>
     >
    > # end of Para
   > # end of CellContent
  > # end of Cell
  <Cell 
   <CellContent 
    <Notes 
    > # end of Notes
    <Para 
     <Unique 39793>
     <PgfTag `CellBody'>
     <ParaLine 
     >
    > # end of Para
   > # end of CellContent
  > # end of Cell
  <Cell 
   <CellContent 
    <Notes 
    > # end of Notes
    <Para 
     <Unique 39795>
     <PgfTag `CellBody'>
     <ParaLine 
      <String `compile time'>
     >
    > # end of Para
   > # end of CellContent
  > # end of Cell
 > # end of Row
 <Row 
  <RowMaxHeight  14.0">
  <RowHeight  0.27778">
  <Cell 
   <CellContent 
    <Notes 
    > # end of Notes
    <Para 
     <Unique 39797>
     <PgfTag `CellBody'>
     <Pgf 
      <PgfFont 
       <FTag `'>
       <FFamily `Courier'>
       <FVar `Regular'>
       <FWeight `Regular'>
       <FAngle `Regular'>
       <FPostScriptName `Courier'>
       <FSize  9.0 pt>
       <FUnderlining FNoUnderlining >
       <FUnderline No >
       <FDoubleUnderline No >
       <FNumericUnderline No >
       <FOverline No >
       <FStrike No >
       <FChangeBar No >
       <FOutline No >
       <FShadow No >
       <FPairKern No >
       <FCase FAsTyped >
       <FPosition FNormal >
       <FSupScript No >
       <FSubScript No >
       <FDX  0.0 pt>
       <FDY  0.0 pt>
       <FDW  0.0 pt>
       <FSeparation 0>
       <FColor `Black'>
      > # end of PgfFont
     > # end of Pgf
     <ParaLine 
      <String `X::key_compare'>
     >
    > # end of Para
   > # end of CellContent
  > # end of Cell
  <Cell 
   <CellContent 
    <Notes 
    > # end of Notes
    <Para 
     <Unique 39799>
     <PgfTag `CellBody'>
     <Pgf 
      <PgfFont 
       <FTag `'>
       <FFamily `Courier'>
       <FVar `Regular'>
       <FWeight `Regular'>
       <FAngle `Regular'>
       <FPostScriptName `Courier'>
       <FSize  9.0 pt>
       <FUnderlining FNoUnderlining >
       <FUnderline No >
       <FDoubleUnderline No >
       <FNumericUnderline No >
       <FOverline No >
       <FStrike No >
       <FChangeBar No >
       <FOutline No >
       <FShadow No >
       <FPairKern No >
       <FCase FAsTyped >
       <FPosition FNormal >
       <FSupScript No >
       <FSubScript No >
       <FDX  0.0 pt>
       <FDY  0.0 pt>
       <FDW  0.0 pt>
       <FSeparation 0>
       <FColor `Black'>
      > # end of PgfFont
     > # end of Pgf
     <ParaLine 
      <Font 
       <FTag `program'>
      > # end of Font
      <String `Compare'>
     >
    > # end of Para
   > # end of CellContent
  > # end of Cell
  <Cell 
   <CellContent 
    <Notes 
    > # end of Notes
    <Para 
     <Unique 39801>
     <PgfTag `CellBody'>
     <ParaLine 
      <String `defaults to '>
      <Font 
       <FTag `program'>
      > # end of Font
      <String `less<key_type\>.'>
     >
    > # end of Para
   > # end of CellContent
  > # end of Cell
  <Cell 
   <CellContent 
    <Notes 
    > # end of Notes
    <Para 
     <Unique 39803>
     <PgfTag `CellBody'>
     <ParaLine 
      <String `compile time'>
     >
    > # end of Para
   > # end of CellContent
  > # end of Cell
 > # end of Row
 <Row 
  <RowMaxHeight  14.0">
  <RowHeight  0.94444">
  <Cell 
   <CellContent 
    <Notes 
    > # end of Notes
    <Para 
     <Unique 39805>
     <PgfTag `CellBody'>
     <Pgf 
      <PgfFont 
       <FTag `'>
       <FFamily `Courier'>
       <FVar `Regular'>
       <FWeight `Regular'>
       <FAngle `Regular'>
       <FPostScriptName `Courier'>
       <FSize  9.0 pt>
       <FUnderlining FNoUnderlining >
       <FUnderline No >
       <FDoubleUnderline No >
       <FNumericUnderline No >
       <FOverline No >
       <FStrike No >
       <FChangeBar No >
       <FOutline No >
       <FShadow No >
       <FPairKern No >
       <FCase FAsTyped >
       <FPosition FNormal >
       <FSupScript No >
       <FSubScript No >
       <FDX  0.0 pt>
       <FDY  0.0 pt>
       <FDW  0.0 pt>
       <FSeparation 0>
       <FColor `Black'>
      > # end of PgfFont
     > # end of Pgf
     <ParaLine 
      <String `X::value_compare'>
     >
    > # end of Para
   > # end of CellContent
  > # end of Cell
  <Cell 
   <CellContent 
    <Notes 
    > # end of Notes
    <Para 
     <Unique 39807>
     <PgfTag `CellBody'>
     <ParaLine 
      <String `a binary predicate '>
     >
     <ParaLine 
      <String `type'>
     >
    > # end of Para
   > # end of CellContent
  > # end of Cell
  <Cell 
   <CellContent 
    <Notes 
    > # end of Notes
    <Para 
     <Unique 39809>
     <PgfTag `CellBody'>
     <ParaLine 
      <String `is the same as '>
      <Font 
       <FTag `program'>
      > # end of Font
      <String `key_compare'>
      <Font 
       <FTag `'>
      > # end of Font
      <String ` for '>
      <Font 
       <FTag `program'>
      > # end of Font
      <String `set'>
      <Font 
       <FTag `'>
      > # end of Font
      <String ` and '>
     >
     <ParaLine 
      <Font 
       <FTag `program'>
      > # end of Font
      <String `multiset'>
      <Font 
       <FTag `'>
      > # end of Font
      <String `;'>
     >
    > # end of Para
    <Para 
     <Unique 39810>
     <PgfTag `CellBody'>
     <ParaLine 
      <String `is an ordering relation on pairs induced by '>
     >
     <ParaLine 
      <String `the first component (i.e. '>
      <Font 
       <FTag `program'>
      > # end of Font
      <String `Key'>
      <Font 
       <FTag `'>
      > # end of Font
      <String `) for '>
      <Font 
       <FTag `program'>
      > # end of Font
      <String `map'>
      <Font 
       <FTag `'>
      > # end of Font
      <String ` and '>
     >
     <ParaLine 
      <Font 
       <FTag `program'>
      > # end of Font
      <String `multimap.'>
     >
    > # end of Para
   > # end of CellContent
  > # end of Cell
  <Cell 
   <CellContent 
    <Notes 
    > # end of Notes
    <Para 
     <Unique 39812>
     <PgfTag `CellBody'>
     <ParaLine 
      <String `compile time'>
     >
    > # end of Para
   > # end of CellContent
  > # end of Cell
 > # end of Row
 <Row 
  <RowMaxHeight  14.0">
  <RowHeight  0.44444">
  <Cell 
   <CellContent 
    <Notes 
    > # end of Notes
    <Para 
     <Unique 39814>
     <PgfTag `CellBody'>
     <Pgf 
      <PgfFont 
       <FTag `'>
       <FFamily `Courier'>
       <FVar `Regular'>
       <FWeight `Regular'>
       <FAngle `Regular'>
       <FPostScriptName `Courier'>
       <FSize  9.0 pt>
       <FUnderlining FNoUnderlining >
       <FUnderline No >
       <FDoubleUnderline No >
       <FNumericUnderline No >
       <FOverline No >
       <FStrike No >
       <FChangeBar No >
       <FOutline No >
       <FShadow No >
       <FPairKern No >
       <FCase FAsTyped >
       <FPosition FNormal >
       <FSupScript No >
       <FSubScript No >
       <FDX  0.0 pt>
       <FDY  0.0 pt>
       <FDW  0.0 pt>
       <FSeparation 0>
       <FColor `Black'>
      > # end of PgfFont
     > # end of Pgf
     <ParaLine 
      <String `X(c)'>
     >
    > # end of Para
    <Para 
     <Unique 39815>
     <PgfTag `CellBody'>
     <Pgf 
      <PgfFont 
       <FTag `'>
       <FFamily `Courier'>
       <FVar `Regular'>
       <FWeight `Regular'>
       <FAngle `Regular'>
       <FPostScriptName `Courier'>
       <FSize  9.0 pt>
       <FUnderlining FNoUnderlining >
       <FUnderline No >
       <FDoubleUnderline No >
       <FNumericUnderline No >
       <FOverline No >
       <FStrike No >
       <FChangeBar No >
       <FOutline No >
       <FShadow No >
       <FPairKern No >
       <FCase FAsTyped >
       <FPosition FNormal >
       <FSupScript No >
       <FSubScript No >
       <FDX  0.0 pt>
       <FDY  0.0 pt>
       <FDW  0.0 pt>
       <FSeparation 0>
       <FColor `Black'>
      > # end of PgfFont
     > # end of Pgf
     <ParaLine 
      <String `X a(c);'>
     >
    > # end of Para
   > # end of CellContent
  > # end of Cell
  <Cell 
   <CellContent 
    <Notes 
    > # end of Notes
    <Para 
     <Unique 39817>
     <PgfTag `CellBody'>
     <Pgf 
      <PgfFont 
       <FTag `'>
       <FFamily `Courier'>
       <FVar `Regular'>
       <FWeight `Regular'>
       <FAngle `Regular'>
       <FPostScriptName `Courier'>
       <FSize  9.0 pt>
       <FUnderlining FNoUnderlining >
       <FUnderline No >
       <FDoubleUnderline No >
       <FNumericUnderline No >
       <FOverline No >
       <FStrike No >
       <FChangeBar No >
       <FOutline No >
       <FShadow No >
       <FPairKern No >
       <FCase FAsTyped >
       <FPosition FNormal >
       <FSupScript No >
       <FSubScript No >
       <FDX  0.0 pt>
       <FDY  0.0 pt>
       <FDW  0.0 pt>
       <FSeparation 0>
       <FColor `Black'>
      > # end of PgfFont
     > # end of Pgf
     <ParaLine 
     >
    > # end of Para
   > # end of CellContent
  > # end of Cell
  <Cell 
   <CellContent 
    <Notes 
    > # end of Notes
    <Para 
     <Unique 39819>
     <PgfTag `CellBody'>
     <ParaLine 
      <String `constructs an empty container;'>
     >
    > # end of Para
    <Para 
     <Unique 39820>
     <PgfTag `CellBody'>
     <ParaLine 
      <String `uses '>
      <Font 
       <FTag `program'>
      > # end of Font
      <String `c'>
      <Font 
       <FTag `'>
      > # end of Font
      <String ` as a comparison object.'>
     >
    > # end of Para
   > # end of CellContent
  > # end of Cell
  <Cell 
   <CellContent 
    <Notes 
    > # end of Notes
    <Para 
     <Unique 39822>
     <PgfTag `CellBody'>
     <ParaLine 
      <String `constant'>
     >
    > # end of Para
   > # end of CellContent
  > # end of Cell
 > # end of Row
 <Row 
  <RowMaxHeight  14.0">
  <RowHeight  0.44444">
  <Cell 
   <CellContent 
    <Notes 
    > # end of Notes
    <Para 
     <Unique 39824>
     <PgfTag `CellBody'>
     <Pgf 
      <PgfFont 
       <FTag `'>
       <FFamily `Courier'>
       <FVar `Regular'>
       <FWeight `Regular'>
       <FAngle `Regular'>
       <FPostScriptName `Courier'>
       <FSize  9.0 pt>
       <FUnderlining FNoUnderlining >
       <FUnderline No >
       <FDoubleUnderline No >
       <FNumericUnderline No >
       <FOverline No >
       <FStrike No >
       <FChangeBar No >
       <FOutline No >
       <FShadow No >
       <FPairKern No >
       <FCase FAsTyped >
       <FPosition FNormal >
       <FSupScript No >
       <FSubScript No >
       <FDX  0.0 pt>
       <FDY  0.0 pt>
       <FDW  0.0 pt>
       <FSeparation 0>
       <FColor `Black'>
      > # end of PgfFont
     > # end of Pgf
     <ParaLine 
      <String `X()'>
     >
    > # end of Para
    <Para 
     <Unique 39825>
     <PgfTag `CellBody'>
     <Pgf 
      <PgfFont 
       <FTag `'>
       <FFamily `Courier'>
       <FVar `Regular'>
       <FWeight `Regular'>
       <FAngle `Regular'>
       <FPostScriptName `Courier'>
       <FSize  9.0 pt>
       <FUnderlining FNoUnderlining >
       <FUnderline No >
       <FDoubleUnderline No >
       <FNumericUnderline No >
       <FOverline No >
       <FStrike No >
       <FChangeBar No >
       <FOutline No >
       <FShadow No >
       <FPairKern No >
       <FCase FAsTyped >
       <FPosition FNormal >
       <FSupScript No >
       <FSubScript No >
       <FDX  0.0 pt>
       <FDY  0.0 pt>
       <FDW  0.0 pt>
       <FSeparation 0>
       <FColor `Black'>
      > # end of PgfFont
     > # end of Pgf
     <ParaLine 
      <String `X a;'>
     >
    > # end of Para
   > # end of CellContent
  > # end of Cell
  <Cell 
   <CellContent 
    <Notes 
    > # end of Notes
    <Para 
     <Unique 39827>
     <PgfTag `CellBody'>
     <Pgf 
      <PgfFont 
       <FTag `'>
       <FFamily `Courier'>
       <FVar `Regular'>
       <FWeight `Regular'>
       <FAngle `Regular'>
       <FPostScriptName `Courier'>
       <FSize  9.0 pt>
       <FUnderlining FNoUnderlining >
       <FUnderline No >
       <FDoubleUnderline No >
       <FNumericUnderline No >
       <FOverline No >
       <FStrike No >
       <FChangeBar No >
       <FOutline No >
       <FShadow No >
       <FPairKern No >
       <FCase FAsTyped >
       <FPosition FNormal >
       <FSupScript No >
       <FSubScript No >
       <FDX  0.0 pt>
       <FDY  0.0 pt>
       <FDW  0.0 pt>
       <FSeparation 0>
       <FColor `Black'>
      > # end of PgfFont
     > # end of Pgf
     <ParaLine 
     >
    > # end of Para
   > # end of CellContent
  > # end of Cell
  <Cell 
   <CellContent 
    <Notes 
    > # end of Notes
    <Para 
     <Unique 39829>
     <PgfTag `CellBody'>
     <ParaLine 
      <String `constructs an empty container; '>
     >
    > # end of Para
    <Para 
     <Unique 39830>
     <PgfTag `CellBody'>
     <ParaLine 
      <String `uses '>
      <Font 
       <FTag `program'>
      > # end of Font
      <String `Compare()'>
      <Font 
       <FTag `'>
      > # end of Font
      <String ` as a comparison object.'>
     >
    > # end of Para
   > # end of CellContent
  > # end of Cell
  <Cell 
   <CellContent 
    <Notes 
    > # end of Notes
    <Para 
     <Unique 39832>
     <PgfTag `CellBody'>
     <ParaLine 
      <String `constant'>
     >
    > # end of Para
   > # end of CellContent
  > # end of Cell
 > # end of Row
 <Row 
  <RowMaxHeight  14.0">
  <RowHeight  1.11111">
  <Cell 
   <CellContent 
    <Notes 
    > # end of Notes
    <Para 
     <Unique 39834>
     <PgfTag `CellBody'>
     <Pgf 
      <PgfFont 
       <FTag `'>
       <FFamily `Courier'>
       <FVar `Regular'>
       <FWeight `Regular'>
       <FAngle `Regular'>
       <FPostScriptName `Courier'>
       <FSize  9.0 pt>
       <FUnderlining FNoUnderlining >
       <FUnderline No >
       <FDoubleUnderline No >
       <FNumericUnderline No >
       <FOverline No >
       <FStrike No >
       <FChangeBar No >
       <FOutline No >
       <FShadow No >
       <FPairKern No >
       <FCase FAsTyped >
       <FPosition FNormal >
       <FSupScript No >
       <FSubScript No >
       <FDX  0.0 pt>
       <FDY  0.0 pt>
       <FDW  0.0 pt>
       <FSeparation 0>
       <FColor `Black'>
      > # end of PgfFont
     > # end of Pgf
     <ParaLine 
      <String `X(i, j, c)'>
     >
    > # end of Para
    <Para 
     <Unique 39835>
     <PgfTag `CellBody'>
     <Pgf 
      <PgfFont 
       <FTag `'>
       <FFamily `Courier'>
       <FVar `Regular'>
       <FWeight `Regular'>
       <FAngle `Regular'>
       <FPostScriptName `Courier'>
       <FSize  9.0 pt>
       <FUnderlining FNoUnderlining >
       <FUnderline No >
       <FDoubleUnderline No >
       <FNumericUnderline No >
       <FOverline No >
       <FStrike No >
       <FChangeBar No >
       <FOutline No >
       <FShadow No >
       <FPairKern No >
       <FCase FAsTyped >
       <FPosition FNormal >
       <FSupScript No >
       <FSubScript No >
       <FDX  0.0 pt>
       <FDY  0.0 pt>
       <FDW  0.0 pt>
       <FSeparation 0>
       <FColor `Black'>
      > # end of PgfFont
     > # end of Pgf
     <ParaLine 
      <String `X a(i, j, c);'>
     >
    > # end of Para
   > # end of CellContent
  > # end of Cell
  <Cell 
   <CellContent 
    <Notes 
    > # end of Notes
    <Para 
     <Unique 39837>
     <PgfTag `CellBody'>
     <Pgf 
      <PgfFont 
       <FTag `'>
       <FFamily `Courier'>
       <FVar `Regular'>
       <FWeight `Regular'>
       <FAngle `Regular'>
       <FPostScriptName `Courier'>
       <FSize  9.0 pt>
       <FUnderlining FNoUnderlining >
       <FUnderline No >
       <FDoubleUnderline No >
       <FNumericUnderline No >
       <FOverline No >
       <FStrike No >
       <FChangeBar No >
       <FOutline No >
       <FShadow No >
       <FPairKern No >
       <FCase FAsTyped >
       <FPosition FNormal >
       <FSupScript No >
       <FSubScript No >
       <FDX  0.0 pt>
       <FDY  0.0 pt>
       <FDW  0.0 pt>
       <FSeparation 0>
       <FColor `Black'>
      > # end of PgfFont
     > # end of Pgf
     <ParaLine 
     >
    > # end of Para
   > # end of CellContent
  > # end of Cell
  <Cell 
   <CellContent 
    <Notes 
    > # end of Notes
    <Para 
     <Unique 39839>
     <PgfTag `CellBody'>
     <ParaLine 
      <String `constructs an empty container and inserts '>
     >
     <ParaLine 
      <String `elements from the range '>
      <Font 
       <FTag `program'>
      > # end of Font
      <String `[i, j)'>
      <Font 
       <FTag `'>
      > # end of Font
      <String ` into it;'>
     >
    > # end of Para
    <Para 
     <Unique 39840>
     <PgfTag `CellBody'>
     <ParaLine 
      <String `uses '>
      <Font 
       <FTag `program'>
      > # end of Font
      <String `c'>
      <Font 
       <FTag `'>
      > # end of Font
      <String ` as a comparison object.'>
     >
    > # end of Para
   > # end of CellContent
  > # end of Cell
  <Cell 
   <CellContent 
    <Notes 
    > # end of Notes
    <Para 
     <Unique 39842>
     <PgfTag `CellBody'>
     <ParaLine 
      <Font 
       <FTag `program'>
      > # end of Font
      <String `NlogN'>
      <Font 
       <FTag `'>
      > # end of Font
      <String ` in general '>
     >
     <ParaLine 
      <String `('>
      <Font 
       <FTag `program'>
      > # end of Font
      <String `N'>
      <Font 
       <FTag `'>
      > # end of Font
      <String ` is the distance '>
     >
     <ParaLine 
      <String `from '>
      <Font 
       <FTag `program'>
      > # end of Font
      <String `i'>
      <Font 
       <FTag `'>
      > # end of Font
      <String ` to '>
      <Font 
       <FTag `program'>
      > # end of Font
      <String `j'>
      <Font 
       <FTag `'>
      > # end of Font
      <String `);'>
     >
    > # end of Para
    <Para 
     <Unique 39843>
     <PgfTag `CellBody'>
     <ParaLine 
      <String `linear if '>
      <Font 
       <FTag `program'>
      > # end of Font
      <String `[i, j)'>
      <Font 
       <FTag `'>
      > # end of Font
      <String ` is '>
     >
     <ParaLine 
      <String `sorted with '>
     >
     <ParaLine 
      <Font 
       <FTag `program'>
      > # end of Font
      <String `value_comp()'>
     >
    > # end of Para
   > # end of CellContent
  > # end of Cell
 > # end of Row
 <Row 
  <RowMaxHeight  14.0">
  <RowHeight  0.44444">
  <Cell 
   <CellContent 
    <Notes 
    > # end of Notes
    <Para 
     <Unique 39845>
     <PgfTag `CellBody'>
     <Pgf 
      <PgfFont 
       <FTag `'>
       <FFamily `Courier'>
       <FVar `Regular'>
       <FWeight `Regular'>
       <FAngle `Regular'>
       <FPostScriptName `Courier'>
       <FSize  9.0 pt>
       <FUnderlining FNoUnderlining >
       <FUnderline No >
       <FDoubleUnderline No >
       <FNumericUnderline No >
       <FOverline No >
       <FStrike No >
       <FChangeBar No >
       <FOutline No >
       <FShadow No >
       <FPairKern No >
       <FCase FAsTyped >
       <FPosition FNormal >
       <FSupScript No >
       <FSubScript No >
       <FDX  0.0 pt>
       <FDY  0.0 pt>
       <FDW  0.0 pt>
       <FSeparation 0>
       <FColor `Black'>
      > # end of PgfFont
     > # end of Pgf
     <ParaLine 
      <Font 
       <FTag `program'>
      > # end of Font
      <String `X(i, j)'>
     >
    > # end of Para
    <Para 
     <Unique 39846>
     <PgfTag `CellBody'>
     <Pgf 
      <PgfFont 
       <FTag `'>
       <FFamily `Courier'>
       <FVar `Regular'>
       <FWeight `Regular'>
       <FAngle `Regular'>
       <FPostScriptName `Courier'>
       <FSize  9.0 pt>
       <FUnderlining FNoUnderlining >
       <FUnderline No >
       <FDoubleUnderline No >
       <FNumericUnderline No >
       <FOverline No >
       <FStrike No >
       <FChangeBar No >
       <FOutline No >
       <FShadow No >
       <FPairKern No >
       <FCase FAsTyped >
       <FPosition FNormal >
       <FSupScript No >
       <FSubScript No >
       <FDX  0.0 pt>
       <FDY  0.0 pt>
       <FDW  0.0 pt>
       <FSeparation 0>
       <FColor `Black'>
      > # end of PgfFont
     > # end of Pgf
     <ParaLine 
      <Font 
       <FTag `program'>
      > # end of Font
      <String `X a(i, j);'>
     >
    > # end of Para
   > # end of CellContent
  > # end of Cell
  <Cell 
   <CellContent 
    <Notes 
    > # end of Notes
    <Para 
     <Unique 39848>
     <PgfTag `CellBody'>
     <Pgf 
      <PgfFont 
       <FTag `'>
       <FFamily `Courier'>
       <FVar `Regular'>
       <FWeight `Regular'>
       <FAngle `Regular'>
       <FPostScriptName `Courier'>
       <FSize  9.0 pt>
       <FUnderlining FNoUnderlining >
       <FUnderline No >
       <FDoubleUnderline No >
       <FNumericUnderline No >
       <FOverline No >
       <FStrike No >
       <FChangeBar No >
       <FOutline No >
       <FShadow No >
       <FPairKern No >
       <FCase FAsTyped >
       <FPosition FNormal >
       <FSupScript No >
       <FSubScript No >
       <FDX  0.0 pt>
       <FDY  0.0 pt>
       <FDW  0.0 pt>
       <FSeparation 0>
       <FColor `Black'>
      > # end of PgfFont
     > # end of Pgf
     <ParaLine 
     >
    > # end of Para
   > # end of CellContent
  > # end of Cell
  <Cell 
   <CellContent 
    <Notes 
    > # end of Notes
    <Para 
     <Unique 39850>
     <PgfTag `CellBody'>
     <ParaLine 
      <String `same as above, but uses '>
      <Font 
       <FTag `program'>
      > # end of Font
      <String `Compare()'>
      <Font 
       <FTag `'>
      > # end of Font
      <String ` as a '>
     >
     <ParaLine 
      <String `comparison object.'>
     >
    > # end of Para
   > # end of CellContent
  > # end of Cell
  <Cell 
   <CellContent 
    <Notes 
    > # end of Notes
    <Para 
     <Unique 39852>
     <PgfTag `CellBody'>
     <ParaLine 
      <String `same as above'>
     >
    > # end of Para
   > # end of CellContent
  > # end of Cell
 > # end of Row
 <Row 
  <RowMaxHeight  14.0">
  <RowHeight  0.44444">
  <Cell 
   <CellContent 
    <Notes 
    > # end of Notes
    <Para 
     <Unique 39854>
     <PgfTag `CellBody'>
     <Pgf 
      <PgfFont 
       <FTag `'>
       <FFamily `Courier'>
       <FVar `Regular'>
       <FWeight `Regular'>
       <FAngle `Regular'>
       <FPostScriptName `Courier'>
       <FSize  9.0 pt>
       <FUnderlining FNoUnderlining >
       <FUnderline No >
       <FDoubleUnderline No >
       <FNumericUnderline No >
       <FOverline No >
       <FStrike No >
       <FChangeBar No >
       <FOutline No >
       <FShadow No >
       <FPairKern No >
       <FCase FAsTyped >
       <FPosition FNormal >
       <FSupScript No >
       <FSubScript No >
       <FDX  0.0 pt>
       <FDY  0.0 pt>
       <FDW  0.0 pt>
       <FSeparation 0>
       <FColor `Black'>
      > # end of PgfFont
     > # end of Pgf
     <ParaLine 
      <String `a.key_comp()'>
     >
    > # end of Para
   > # end of CellContent
  > # end of Cell
  <Cell 
   <CellContent 
    <Notes 
    > # end of Notes
    <Para 
     <Unique 39856>
     <PgfTag `CellBody'>
     <Pgf 
      <PgfFont 
       <FTag `'>
       <FFamily `Courier'>
       <FVar `Regular'>
       <FWeight `Regular'>
       <FAngle `Regular'>
       <FPostScriptName `Courier'>
       <FSize  9.0 pt>
       <FUnderlining FNoUnderlining >
       <FUnderline No >
       <FDoubleUnderline No >
       <FNumericUnderline No >
       <FOverline No >
       <FStrike No >
       <FChangeBar No >
       <FOutline No >
       <FShadow No >
       <FPairKern No >
       <FCase FAsTyped >
       <FPosition FNormal >
       <FSupScript No >
       <FSubScript No >
       <FDX  0.0 pt>
       <FDY  0.0 pt>
       <FDW  0.0 pt>
       <FSeparation 0>
       <FColor `Black'>
      > # end of PgfFont
     > # end of Pgf
     <ParaLine 
      <String `X::key_compare'>
     >
    > # end of Para
   > # end of CellContent
  > # end of Cell
  <Cell 
   <CellContent 
    <Notes 
    > # end of Notes
    <Para 
     <Unique 39858>
     <PgfTag `CellBody'>
     <ParaLine 
      <String `returns the comparison object out of '>
     >
     <ParaLine 
      <String `which '>
      <Font 
       <FTag `program'>
      > # end of Font
      <String `a'>
      <Font 
       <FTag `'>
      > # end of Font
      <String ` was constructed.'>
     >
    > # end of Para
   > # end of CellContent
  > # end of Cell
  <Cell 
   <CellContent 
    <Notes 
    > # end of Notes
    <Para 
     <Unique 39860>
     <PgfTag `CellBody'>
     <ParaLine 
      <String `constant'>
     >
    > # end of Para
   > # end of CellContent
  > # end of Cell
 > # end of Row
 <Row 
  <RowMaxHeight  14.0">
  <RowHeight  0.44444">
  <Cell 
   <CellContent 
    <Notes 
    > # end of Notes
    <Para 
     <Unique 39862>
     <PgfTag `CellBody'>
     <Pgf 
      <PgfFont 
       <FTag `'>
       <FFamily `Courier'>
       <FVar `Regular'>
       <FWeight `Regular'>
       <FAngle `Regular'>
       <FPostScriptName `Courier'>
       <FSize  9.0 pt>
       <FUnderlining FNoUnderlining >
       <FUnderline No >
       <FDoubleUnderline No >
       <FNumericUnderline No >
       <FOverline No >
       <FStrike No >
       <FChangeBar No >
       <FOutline No >
       <FShadow No >
       <FPairKern No >
       <FCase FAsTyped >
       <FPosition FNormal >
       <FSupScript No >
       <FSubScript No >
       <FDX  0.0 pt>
       <FDY  0.0 pt>
       <FDW  0.0 pt>
       <FSeparation 0>
       <FColor `Black'>
      > # end of PgfFont
     > # end of Pgf
     <ParaLine 
      <String `a.value_comp()'>
     >
    > # end of Para
   > # end of CellContent
  > # end of Cell
  <Cell 
   <CellContent 
    <Notes 
    > # end of Notes
    <Para 
     <Unique 39864>
     <PgfTag `CellBody'>
     <Pgf 
      <PgfFont 
       <FTag `'>
       <FFamily `Courier'>
       <FVar `Regular'>
       <FWeight `Regular'>
       <FAngle `Regular'>
       <FPostScriptName `Courier'>
       <FSize  9.0 pt>
       <FUnderlining FNoUnderlining >
       <FUnderline No >
       <FDoubleUnderline No >
       <FNumericUnderline No >
       <FOverline No >
       <FStrike No >
       <FChangeBar No >
       <FOutline No >
       <FShadow No >
       <FPairKern No >
       <FCase FAsTyped >
       <FPosition FNormal >
       <FSupScript No >
       <FSubScript No >
       <FDX  0.0 pt>
       <FDY  0.0 pt>
       <FDW  0.0 pt>
       <FSeparation 0>
       <FColor `Black'>
      > # end of PgfFont
     > # end of Pgf
     <ParaLine 
      <String `X::value_compar'>
     >
     <ParaLine 
      <String `e'>
     >
    > # end of Para
   > # end of CellContent
  > # end of Cell
  <Cell 
   <CellContent 
    <Notes 
    > # end of Notes
    <Para 
     <Unique 39866>
     <PgfTag `CellBody'>
     <ParaLine 
      <String `returns an object of '>
      <Font 
       <FTag `program'>
      > # end of Font
      <String `value_compare'>
      <Font 
       <FTag `'>
      > # end of Font
      <String ` '>
     >
     <ParaLine 
      <String `constructed out of the comparison object.'>
     >
    > # end of Para
   > # end of CellContent
  > # end of Cell
  <Cell 
   <CellContent 
    <Notes 
    > # end of Notes
    <Para 
     <Unique 39868>
     <PgfTag `CellBody'>
     <ParaLine 
      <String `constant'>
     >
    > # end of Para
   > # end of CellContent
  > # end of Cell
 > # end of Row
 <Row 
  <RowMaxHeight  14.0">
  <RowHeight  1.27778">
  <Cell 
   <CellBRuling `Thin'>
   <CellContent 
    <Notes 
    > # end of Notes
    <Para 
     <Unique 39870>
     <PgfTag `CellBody'>
     <Pgf 
      <PgfFont 
       <FTag `'>
       <FFamily `Courier'>
       <FVar `Regular'>
       <FWeight `Regular'>
       <FAngle `Regular'>
       <FPostScriptName `Courier'>
       <FSize  9.0 pt>
       <FUnderlining FNoUnderlining >
       <FUnderline No >
       <FDoubleUnderline No >
       <FNumericUnderline No >
       <FOverline No >
       <FStrike No >
       <FChangeBar No >
       <FOutline No >
       <FShadow No >
       <FPairKern No >
       <FCase FAsTyped >
       <FPosition FNormal >
       <FSupScript No >
       <FSubScript No >
       <FDX  0.0 pt>
       <FDY  0.0 pt>
       <FDW  0.0 pt>
       <FSeparation 0>
       <FColor `Black'>
      > # end of PgfFont
     > # end of Pgf
     <ParaLine 
      <Font 
       <FTag `program'>
      > # end of Font
      <String `a_uniq.insert(t)'>
     >
    > # end of Para
   > # end of CellContent
  > # end of Cell
  <Cell 
   <CellContent 
    <Notes 
    > # end of Notes
    <Para 
     <Unique 39872>
     <PgfTag `CellBody'>
     <ParaLine 
      <Font 
       <FTag `program'>
      > # end of Font
      <String `pair<iterator, '>
     >
     <ParaLine 
      <String `bool\>'>
     >
    > # end of Para
   > # end of CellContent
  > # end of Cell
  <Cell 
   <CellContent 
    <Notes 
    > # end of Notes
    <Para 
     <Unique 39874>
     <PgfTag `CellBody'>
     <ParaLine 
      <String `inserts '>
      <Font 
       <FTag `program'>
      > # end of Font
      <String `t'>
      <Font 
       <FTag `'>
      > # end of Font
      <String ` if and only if there is no element '>
     >
     <ParaLine 
      <String `in the container with key equal to the key '>
     >
     <ParaLine 
      <String `of '>
      <Font 
       <FTag `program'>
      > # end of Font
      <String `t'>
      <Font 
       <FTag `'>
      > # end of Font
      <String `. The '>
      <Font 
       <FTag `program'>
      > # end of Font
      <String `bool'>
      <Font 
       <FTag `'>
      > # end of Font
      <String ` component of the returned '>
     >
     <ParaLine 
      <String `pair indicates whether the insertion takes '>
     >
     <ParaLine 
      <String `place and the '>
      <Font 
       <FTag `program'>
      > # end of Font
      <String `iterator'>
      <Font 
       <FTag `'>
      > # end of Font
      <String ` component of '>
     >
     <ParaLine 
      <String `the pair points to the element with key '>
     >
     <ParaLine 
      <String `equal to the key of '>
      <Font 
       <FTag `program'>
      > # end of Font
      <String `t'>
      <Font 
       <FTag `'>
      > # end of Font
      <String `.'>
     >
    > # end of Para
   > # end of CellContent
  > # end of Cell
  <Cell 
   <CellContent 
    <Notes 
    > # end of Notes
    <Para 
     <Unique 39876>
     <PgfTag `CellBody'>
     <ParaLine 
      <String `logarithmic'>
     >
    > # end of Para
   > # end of CellContent
  > # end of Cell
 > # end of Row
 <Row 
  <RowMaxHeight  14.0">
  <RowHeight  0.44444">
  <Cell 
   <CellTRuling `Thin'>
   <CellContent 
    <Notes 
    > # end of Notes
    <Para 
     <Unique 39878>
     <PgfTag `CellBody'>
     <Pgf 
      <PgfFont 
       <FTag `'>
       <FFamily `Courier'>
       <FVar `Regular'>
       <FWeight `Regular'>
       <FAngle `Regular'>
       <FPostScriptName `Courier'>
       <FSize  9.0 pt>
       <FUnderlining FNoUnderlining >
       <FUnderline No >
       <FDoubleUnderline No >
       <FNumericUnderline No >
       <FOverline No >
       <FStrike No >
       <FChangeBar No >
       <FOutline No >
       <FShadow No >
       <FPairKern No >
       <FCase FAsTyped >
       <FPosition FNormal >
       <FSupScript No >
       <FSubScript No >
       <FDX  0.0 pt>
       <FDY  0.0 pt>
       <FDW  0.0 pt>
       <FSeparation 0>
       <FColor `Black'>
      > # end of PgfFont
     > # end of Pgf
     <ParaLine 
      <String `a_eq.insert(t)'>
     >
    > # end of Para
   > # end of CellContent
  > # end of Cell
  <Cell 
   <CellContent 
    <Notes 
    > # end of Notes
    <Para 
     <Unique 39880>
     <PgfTag `CellBody'>
     <ParaLine 
      <Font 
       <FTag `program'>
      > # end of Font
      <String `iterator'>
     >
    > # end of Para
   > # end of CellContent
  > # end of Cell
  <Cell 
   <CellContent 
    <Notes 
    > # end of Notes
    <Para 
     <Unique 39882>
     <PgfTag `CellBody'>
     <ParaLine 
      <String `inserts '>
      <Font 
       <FTag `program'>
      > # end of Font
      <String `t'>
      <Font 
       <FTag `'>
      > # end of Font
      <String ` and returns the iterator pointing '>
     >
     <ParaLine 
      <String `to the newly inserted element.'>
     >
    > # end of Para
   > # end of CellContent
  > # end of Cell
  <Cell 
   <CellContent 
    <Notes 
    > # end of Notes
    <Para 
     <Unique 39884>
     <PgfTag `CellBody'>
     <ParaLine 
      <String `logarithmic'>
     >
    > # end of Para
   > # end of CellContent
  > # end of Cell
 > # end of Row
 <Row 
  <RowMaxHeight  14.0">
  <RowHeight  1.44444">
  <Cell 
   <CellContent 
    <Notes 
    > # end of Notes
    <Para 
     <Unique 39886>
     <PgfTag `CellBody'>
     <Pgf 
      <PgfFont 
       <FTag `'>
       <FFamily `Courier'>
       <FVar `Regular'>
       <FWeight `Regular'>
       <FAngle `Regular'>
       <FPostScriptName `Courier'>
       <FSize  9.0 pt>
       <FUnderlining FNoUnderlining >
       <FUnderline No >
       <FDoubleUnderline No >
       <FNumericUnderline No >
       <FOverline No >
       <FStrike No >
       <FChangeBar No >
       <FOutline No >
       <FShadow No >
       <FPairKern No >
       <FCase FAsTyped >
       <FPosition FNormal >
       <FSupScript No >
       <FSubScript No >
       <FDX  0.0 pt>
       <FDY  0.0 pt>
       <FDW  0.0 pt>
       <FSeparation 0>
       <FColor `Black'>
      > # end of PgfFont
     > # end of Pgf
     <ParaLine 
      <String `a.insert(p, t)'>
     >
    > # end of Para
   > # end of CellContent
  > # end of Cell
  <Cell 
   <CellContent 
    <Notes 
    > # end of Notes
    <Para 
     <Unique 39888>
     <PgfTag `CellBody'>
     <Pgf 
      <PgfFont 
       <FTag `'>
       <FFamily `Courier'>
       <FVar `Regular'>
       <FWeight `Regular'>
       <FAngle `Regular'>
       <FPostScriptName `Courier'>
       <FSize  9.0 pt>
       <FUnderlining FNoUnderlining >
       <FUnderline No >
       <FDoubleUnderline No >
       <FNumericUnderline No >
       <FOverline No >
       <FStrike No >
       <FChangeBar No >
       <FOutline No >
       <FShadow No >
       <FPairKern No >
       <FCase FAsTyped >
       <FPosition FNormal >
       <FSupScript No >
       <FSubScript No >
       <FDX  0.0 pt>
       <FDY  0.0 pt>
       <FDW  0.0 pt>
       <FSeparation 0>
       <FColor `Black'>
      > # end of PgfFont
     > # end of Pgf
     <ParaLine 
      <Font 
       <FTag `program'>
      > # end of Font
      <String `iterator'>
     >
    > # end of Para
   > # end of CellContent
  > # end of Cell
  <Cell 
   <CellContent 
    <Notes 
    > # end of Notes
    <Para 
     <Unique 39890>
     <PgfTag `CellBody'>
     <ParaLine 
      <String `inserts '>
      <Font 
       <FTag `program'>
      > # end of Font
      <String `t'>
      <Font 
       <FTag `'>
      > # end of Font
      <String ` if and only if there is no element '>
     >
     <ParaLine 
      <String `with key equal to the key of '>
      <Font 
       <FTag `program'>
      > # end of Font
      <String `t'>
      <Font 
       <FTag `'>
      > # end of Font
      <String ` in contain'>
      <Char SoftHyphen >
     >
     <ParaLine 
      <String `ers with unique keys; always inserts '>
      <Font 
       <FTag `program'>
      > # end of Font
      <String `t'>
      <Font 
       <FTag `'>
      > # end of Font
      <String ` in '>
     >
     <ParaLine 
      <String `containers with equal keys.'>
     >
    > # end of Para
    <Para 
     <Unique 39891>
     <PgfTag `CellBody'>
     <ParaLine 
      <String `always returns the iterator pointing to the '>
     >
     <ParaLine 
      <String `element with key equal to the key of '>
      <Font 
       <FTag `program'>
      > # end of Font
      <String `t'>
      <Font 
       <FTag `'>
      > # end of Font
      <String `.'>
     >
    > # end of Para
    <Para 
     <Unique 39892>
     <PgfTag `CellBody'>
     <ParaLine 
      <String `iterator '>
      <Font 
       <FTag `program'>
      > # end of Font
      <String `p'>
      <Font 
       <FTag `'>
      > # end of Font
      <String ` is a hint pointing to where the '>
     >
     <ParaLine 
      <String `insert should start to search.'>
     >
    > # end of Para
   > # end of CellContent
  > # end of Cell
  <Cell 
   <CellContent 
    <Notes 
    > # end of Notes
    <Para 
     <Unique 39894>
     <PgfTag `CellBody'>
     <ParaLine 
      <String `logarithmic in gen'>
      <Char SoftHyphen >
     >
     <ParaLine 
      <String `eral, but amortized '>
     >
     <ParaLine 
      <String `constant if '>
      <Font 
       <FTag `program'>
      > # end of Font
      <String `t'>
      <Font 
       <FTag `'>
      > # end of Font
      <String ` is '>
     >
     <ParaLine 
      <String `inserted right '>
     >
     <ParaLine 
      <String `before '>
      <Font 
       <FTag `program'>
      > # end of Font
      <String `p'>
      <Font 
       <FTag `'>
      > # end of Font
      <String `.'>
     >
    > # end of Para
   > # end of CellContent
  > # end of Cell
 > # end of Row
 <Row 
  <RowMaxHeight  14.0">
  <RowHeight  1.27778">
  <Cell 
   <CellContent 
    <Notes 
    > # end of Notes
    <Para 
     <Unique 39896>
     <PgfTag `CellBody'>
     <Pgf 
      <PgfFont 
       <FTag `'>
       <FFamily `Courier'>
       <FVar `Regular'>
       <FWeight `Regular'>
       <FAngle `Regular'>
       <FPostScriptName `Courier'>
       <FSize  9.0 pt>
       <FUnderlining FNoUnderlining >
       <FUnderline No >
       <FDoubleUnderline No >
       <FNumericUnderline No >
       <FOverline No >
       <FStrike No >
       <FChangeBar No >
       <FOutline No >
       <FShadow No >
       <FPairKern No >
       <FCase FAsTyped >
       <FPosition FNormal >
       <FSupScript No >
       <FSubScript No >
       <FDX  0.0 pt>
       <FDY  0.0 pt>
       <FDW  0.0 pt>
       <FSeparation 0>
       <FColor `Black'>
      > # end of PgfFont
     > # end of Pgf
     <ParaLine 
      <String `a.insert(i, j)'>
     >
    > # end of Para
   > # end of CellContent
  > # end of Cell
  <Cell 
   <CellContent 
    <Notes 
    > # end of Notes
    <Para 
     <Unique 40493>
     <PgfTag `CellBody'>
     <ParaLine 
      <String `result is not used'>
     >
    > # end of Para
    <Para 
     <Unique 39898>
     <PgfTag `CellBody'>
     <Pgf 
      <PgfFont 
       <FTag `'>
       <FFamily `Courier'>
       <FVar `Regular'>
       <FWeight `Regular'>
       <FAngle `Regular'>
       <FPostScriptName `Courier'>
       <FSize  9.0 pt>
       <FUnderlining FNoUnderlining >
       <FUnderline No >
       <FDoubleUnderline No >
       <FNumericUnderline No >
       <FOverline No >
       <FStrike No >
       <FChangeBar No >
       <FOutline No >
       <FShadow No >
       <FPairKern No >
       <FCase FAsTyped >
       <FPosition FNormal >
       <FSupScript No >
       <FSubScript No >
       <FDX  0.0 pt>
       <FDY  0.0 pt>
       <FDW  0.0 pt>
       <FSeparation 0>
       <FColor `Black'>
      > # end of PgfFont
     > # end of Pgf
     <ParaLine 
     >
    > # end of Para
   > # end of CellContent
  > # end of Cell
  <Cell 
   <CellContent 
    <Notes 
    > # end of Notes
    <Para 
     <Unique 39900>
     <PgfTag `CellBody'>
     <ParaLine 
      <String `inserts the elements from the range '>
      <Font 
       <FTag `program'>
      > # end of Font
      <String `[i, '>
     >
     <ParaLine 
      <String `j)'>
      <Font 
       <FTag `'>
      > # end of Font
      <String ` into the container.'>
     >
    > # end of Para
   > # end of CellContent
  > # end of Cell
  <Cell 
   <CellContent 
    <Notes 
    > # end of Notes
    <Para 
     <Unique 39902>
     <PgfTag `CellBody'>
     <ParaLine 
      <Font 
       <FTag `program'>
      > # end of Font
      <String `Nlog(size()+N)'>
      <Font 
       <FTag `'>
      > # end of Font
      <String ` '>
     >
     <ParaLine 
      <String `('>
      <Font 
       <FTag `program'>
      > # end of Font
      <String `N'>
      <Font 
       <FTag `'>
      > # end of Font
      <String ` is the distance '>
     >
     <ParaLine 
      <String `from '>
      <Font 
       <FTag `program'>
      > # end of Font
      <String `i'>
      <Font 
       <FTag `'>
      > # end of Font
      <String ` to '>
      <Font 
       <FTag `program'>
      > # end of Font
      <String `j'>
      <Font 
       <FTag `'>
      > # end of Font
      <String `) in gen'>
      <Char SoftHyphen >
     >
     <ParaLine 
      <String `eral; linear if '>
      <Font 
       <FTag `program'>
      > # end of Font
      <String `[i, '>
     >
     <ParaLine 
      <String `j)'>
      <Font 
       <FTag `'>
      > # end of Font
      <String ` is sorted accord'>
      <Char SoftHyphen >
     >
     <ParaLine 
      <String `ing to '>
     >
     <ParaLine 
      <Font 
       <FTag `program'>
      > # end of Font
      <String `value_comp()'>
     >
    > # end of Para
   > # end of CellContent
  > # end of Cell
 > # end of Row
 <Row 
  <RowMaxHeight  14.0">
  <RowHeight  0.61111">
  <Cell 
   <CellContent 
    <Notes 
    > # end of Notes
    <Para 
     <Unique 39904>
     <PgfTag `CellBody'>
     <Pgf 
      <PgfFont 
       <FTag `'>
       <FFamily `Courier'>
       <FVar `Regular'>
       <FWeight `Regular'>
       <FAngle `Regular'>
       <FPostScriptName `Courier'>
       <FSize  9.0 pt>
       <FUnderlining FNoUnderlining >
       <FUnderline No >
       <FDoubleUnderline No >
       <FNumericUnderline No >
       <FOverline No >
       <FStrike No >
       <FChangeBar No >
       <FOutline No >
       <FShadow No >
       <FPairKern No >
       <FCase FAsTyped >
       <FPosition FNormal >
       <FSupScript No >
       <FSubScript No >
       <FDX  0.0 pt>
       <FDY  0.0 pt>
       <FDW  0.0 pt>
       <FSeparation 0>
       <FColor `Black'>
      > # end of PgfFont
     > # end of Pgf
     <ParaLine 
      <String `a.erase(k)'>
     >
    > # end of Para
   > # end of CellContent
  > # end of Cell
  <Cell 
   <CellContent 
    <Notes 
    > # end of Notes
    <Para 
     <Unique 39906>
     <PgfTag `CellBody'>
     <Pgf 
      <PgfFont 
       <FTag `'>
       <FFamily `Courier'>
       <FVar `Regular'>
       <FWeight `Regular'>
       <FAngle `Regular'>
       <FPostScriptName `Courier'>
       <FSize  9.0 pt>
       <FUnderlining FNoUnderlining >
       <FUnderline No >
       <FDoubleUnderline No >
       <FNumericUnderline No >
       <FOverline No >
       <FStrike No >
       <FChangeBar No >
       <FOutline No >
       <FShadow No >
       <FPairKern No >
       <FCase FAsTyped >
       <FPosition FNormal >
       <FSupScript No >
       <FSubScript No >
       <FDX  0.0 pt>
       <FDY  0.0 pt>
       <FDW  0.0 pt>
       <FSeparation 0>
       <FColor `Black'>
      > # end of PgfFont
     > # end of Pgf
     <ParaLine 
      <String `size_type'>
     >
    > # end of Para
   > # end of CellContent
  > # end of Cell
  <Cell 
   <CellContent 
    <Notes 
    > # end of Notes
    <Para 
     <Unique 39908>
     <PgfTag `CellBody'>
     <ParaLine 
      <String `erases all the elements in the container '>
     >
     <ParaLine 
      <String `with key equal to '>
      <Font 
       <FTag `program'>
      > # end of Font
      <String `k'>
      <Font 
       <FTag `'>
      > # end of Font
      <String `.'>
     >
    > # end of Para
    <Para 
     <Unique 39909>
     <PgfTag `CellBody'>
     <ParaLine 
      <String `returns the number of erased elements.'>
     >
    > # end of Para
   > # end of CellContent
  > # end of Cell
  <Cell 
   <CellContent 
    <Notes 
    > # end of Notes
    <Para 
     <Unique 39911>
     <PgfTag `CellBody'>
     <Pgf 
      <PgfFont 
       <FTag `'>
       <FFamily `Courier'>
       <FVar `Regular'>
       <FWeight `Regular'>
       <FAngle `Regular'>
       <FPostScriptName `Courier'>
       <FSize  9.0 pt>
       <FUnderlining FNoUnderlining >
       <FUnderline No >
       <FDoubleUnderline No >
       <FNumericUnderline No >
       <FOverline No >
       <FStrike No >
       <FChangeBar No >
       <FOutline No >
       <FShadow No >
       <FPairKern No >
       <FCase FAsTyped >
       <FPosition FNormal >
       <FSupScript No >
       <FSubScript No >
       <FDX  0.0 pt>
       <FDY  0.0 pt>
       <FDW  0.0 pt>
       <FSeparation 0>
       <FColor `Black'>
      > # end of PgfFont
     > # end of Pgf
     <ParaLine 
      <Font 
       <FTag `program'>
      > # end of Font
      <String `log(size()) + '>
     >
     <ParaLine 
      <String `count(k)'>
     >
    > # end of Para
   > # end of CellContent
  > # end of Cell
 > # end of Row
 <Row 
  <RowMaxHeight  14.0">
  <RowHeight  0.27778">
  <Cell 
   <CellContent 
    <Notes 
    > # end of Notes
    <Para 
     <Unique 39913>
     <PgfTag `CellBody'>
     <Pgf 
      <PgfFont 
       <FTag `'>
       <FFamily `Courier'>
       <FVar `Regular'>
       <FWeight `Regular'>
       <FAngle `Regular'>
       <FPostScriptName `Courier'>
       <FSize  9.0 pt>
       <FUnderlining FNoUnderlining >
       <FUnderline No >
       <FDoubleUnderline No >
       <FNumericUnderline No >
       <FOverline No >
       <FStrike No >
       <FChangeBar No >
       <FOutline No >
       <FShadow No >
       <FPairKern No >
       <FCase FAsTyped >
       <FPosition FNormal >
       <FSupScript No >
       <FSubScript No >
       <FDX  0.0 pt>
       <FDY  0.0 pt>
       <FDW  0.0 pt>
       <FSeparation 0>
       <FColor `Black'>
      > # end of PgfFont
     > # end of Pgf
     <ParaLine 
      <String `a.erase(q)'>
     >
    > # end of Para
   > # end of CellContent
  > # end of Cell
  <Cell 
   <CellContent 
    <Notes 
    > # end of Notes
    <Para 
     <Unique 39915>
     <PgfTag `CellBody'>
     <Pgf 
      <PgfFont 
       <FTag `'>
       <FFamily `Courier'>
       <FVar `Regular'>
       <FWeight `Regular'>
       <FAngle `Regular'>
       <FPostScriptName `Courier'>
       <FSize  9.0 pt>
       <FUnderlining FNoUnderlining >
       <FUnderline No >
       <FDoubleUnderline No >
       <FNumericUnderline No >
       <FOverline No >
       <FStrike No >
       <FChangeBar No >
       <FOutline No >
       <FShadow No >
       <FPairKern No >
       <FCase FAsTyped >
       <FPosition FNormal >
       <FSupScript No >
       <FSubScript No >
       <FDX  0.0 pt>
       <FDY  0.0 pt>
       <FDW  0.0 pt>
       <FSeparation 0>
       <FColor `Black'>
      > # end of PgfFont
     > # end of Pgf
     <ParaLine 
      <Font 
       <FTag `'>
       <FFamily `Times'>
       <FPostScriptName `Times-Roman'>
       <FSize  10.0 pt>
       <FPairKern Yes >
      > # end of Font
      <String `result is not used'>
     >
    > # end of Para
   > # end of CellContent
  > # end of Cell
  <Cell 
   <CellContent 
    <Notes 
    > # end of Notes
    <Para 
     <Unique 39917>
     <PgfTag `CellBody'>
     <ParaLine 
      <String `erases the element pointed to by '>
      <Font 
       <FTag `program'>
      > # end of Font
      <String `q'>
      <Font 
       <FTag `'>
      > # end of Font
      <String `.'>
     >
    > # end of Para
   > # end of CellContent
  > # end of Cell
  <Cell 
   <CellContent 
    <Notes 
    > # end of Notes
    <Para 
     <Unique 39919>
     <PgfTag `CellBody'>
     <ParaLine 
      <String `amortized constant'>
     >
    > # end of Para
   > # end of CellContent
  > # end of Cell
 > # end of Row
 <Row 
  <RowMaxHeight  14.0">
  <RowHeight  0.61111">
  <Cell 
   <CellContent 
    <Notes 
    > # end of Notes
    <Para 
     <Unique 39921>
     <PgfTag `CellBody'>
     <Pgf 
      <PgfFont 
       <FTag `'>
       <FFamily `Courier'>
       <FVar `Regular'>
       <FWeight `Regular'>
       <FAngle `Regular'>
       <FPostScriptName `Courier'>
       <FSize  9.0 pt>
       <FUnderlining FNoUnderlining >
       <FUnderline No >
       <FDoubleUnderline No >
       <FNumericUnderline No >
       <FOverline No >
       <FStrike No >
       <FChangeBar No >
       <FOutline No >
       <FShadow No >
       <FPairKern No >
       <FCase FAsTyped >
       <FPosition FNormal >
       <FSupScript No >
       <FSubScript No >
       <FDX  0.0 pt>
       <FDY  0.0 pt>
       <FDW  0.0 pt>
       <FSeparation 0>
       <FColor `Black'>
      > # end of PgfFont
     > # end of Pgf
     <ParaLine 
      <String `a.erase(q1, q2)'>
     >
    > # end of Para
   > # end of CellContent
  > # end of Cell
  <Cell 
   <CellContent 
    <Notes 
    > # end of Notes
    <Para 
     <Unique 39923>
     <PgfTag `CellBody'>
     <Pgf 
      <PgfFont 
       <FTag `'>
       <FFamily `Courier'>
       <FVar `Regular'>
       <FWeight `Regular'>
       <FAngle `Regular'>
       <FPostScriptName `Courier'>
       <FSize  9.0 pt>
       <FUnderlining FNoUnderlining >
       <FUnderline No >
       <FDoubleUnderline No >
       <FNumericUnderline No >
       <FOverline No >
       <FStrike No >
       <FChangeBar No >
       <FOutline No >
       <FShadow No >
       <FPairKern No >
       <FCase FAsTyped >
       <FPosition FNormal >
       <FSupScript No >
       <FSubScript No >
       <FDX  0.0 pt>
       <FDY  0.0 pt>
       <FDW  0.0 pt>
       <FSeparation 0>
       <FColor `Black'>
      > # end of PgfFont
     > # end of Pgf
     <ParaLine 
      <Font 
       <FTag `'>
       <FFamily `Times'>
       <FPostScriptName `Times-Roman'>
       <FSize  10.0 pt>
       <FPairKern Yes >
      > # end of Font
      <String `result is not used'>
     >
    > # end of Para
   > # end of CellContent
  > # end of Cell
  <Cell 
   <CellContent 
    <Notes 
    > # end of Notes
    <Para 
     <Unique 39925>
     <PgfTag `CellBody'>
     <ParaLine 
      <String `erases all the elements in the range '>
      <Font 
       <FTag `program'>
      > # end of Font
      <String `[q1, '>
     >
     <ParaLine 
      <String `q2)'>
      <Font 
       <FTag `'>
      > # end of Font
      <String `.'>
     >
    > # end of Para
   > # end of CellContent
  > # end of Cell
  <Cell 
   <CellContent 
    <Notes 
    > # end of Notes
    <Para 
     <Unique 39927>
     <PgfTag `CellBody'>
     <ParaLine 
      <Font 
       <FTag `program'>
      > # end of Font
      <String `log(size())+ N'>
      <Font 
       <FTag `'>
      > # end of Font
      <String ` '>
     >
     <ParaLine 
      <String `where '>
      <Font 
       <FTag `program'>
      > # end of Font
      <String `N'>
      <Font 
       <FTag `'>
      > # end of Font
      <String ` is the dis'>
      <Char SoftHyphen >
     >
     <ParaLine 
      <String `tance from '>
      <Font 
       <FTag `program'>
      > # end of Font
      <String `q1'>
      <Font 
       <FTag `'>
      > # end of Font
      <String ` to '>
      <Font 
       <FTag `program'>
      > # end of Font
      <String `q2'>
      <Font 
       <FTag `'>
      > # end of Font
      <String `.'>
     >
    > # end of Para
   > # end of CellContent
  > # end of Cell
 > # end of Row
 <Row 
  <RowMaxHeight  14.0">
  <RowHeight  0.61111">
  <Cell 
   <CellContent 
    <Notes 
    > # end of Notes
    <Para 
     <Unique 39929>
     <PgfTag `CellBody'>
     <Pgf 
      <PgfFont 
       <FTag `'>
       <FFamily `Courier'>
       <FVar `Regular'>
       <FWeight `Regular'>
       <FAngle `Regular'>
       <FPostScriptName `Courier'>
       <FSize  9.0 pt>
       <FUnderlining FNoUnderlining >
       <FUnderline No >
       <FDoubleUnderline No >
       <FNumericUnderline No >
       <FOverline No >
       <FStrike No >
       <FChangeBar No >
       <FOutline No >
       <FShadow No >
       <FPairKern No >
       <FCase FAsTyped >
       <FPosition FNormal >
       <FSupScript No >
       <FSubScript No >
       <FDX  0.0 pt>
       <FDY  0.0 pt>
       <FDW  0.0 pt>
       <FSeparation 0>
       <FColor `Black'>
      > # end of PgfFont
     > # end of Pgf
     <ParaLine 
      <String `a.find(k)'>
     >
    > # end of Para
   > # end of CellContent
  > # end of Cell
  <Cell 
   <CellContent 
    <Notes 
    > # end of Notes
    <Para 
     <Unique 39931>
     <PgfTag `CellBody'>
     <Pgf 
      <PgfFont 
       <FTag `'>
       <FFamily `Courier'>
       <FVar `Regular'>
       <FWeight `Regular'>
       <FAngle `Regular'>
       <FPostScriptName `Courier'>
       <FSize  9.0 pt>
       <FUnderlining FNoUnderlining >
       <FUnderline No >
       <FDoubleUnderline No >
       <FNumericUnderline No >
       <FOverline No >
       <FStrike No >
       <FChangeBar No >
       <FOutline No >
       <FShadow No >
       <FPairKern No >
       <FCase FAsTyped >
       <FPosition FNormal >
       <FSupScript No >
       <FSubScript No >
       <FDX  0.0 pt>
       <FDY  0.0 pt>
       <FDW  0.0 pt>
       <FSeparation 0>
       <FColor `Black'>
      > # end of PgfFont
     > # end of Pgf
     <ParaLine 
      <String `iterator;'>
     >
    > # end of Para
    <Para 
     <Unique 39932>
     <PgfTag `CellBody'>
     <ParaLine 
      <Font 
       <FTag `program'>
      > # end of Font
      <String `const_iterator'>
      <Font 
       <FTag `'>
      > # end of Font
      <String ` '>
     >
     <ParaLine 
      <String `for constant '>
      <Font 
       <FTag `program'>
      > # end of Font
      <String `a'>
     >
    > # end of Para
   > # end of CellContent
  > # end of Cell
  <Cell 
   <CellContent 
    <Notes 
    > # end of Notes
    <Para 
     <Unique 39934>
     <PgfTag `CellBody'>
     <ParaLine 
      <String `returns an iterator pointing to an element '>
     >
     <ParaLine 
      <String `with the key equal to '>
      <Font 
       <FTag `program'>
      > # end of Font
      <String `k'>
      <Font 
       <FTag `'>
      > # end of Font
      <String `, or '>
      <Font 
       <FTag `program'>
      > # end of Font
      <String `a.end()'>
      <Font 
       <FTag `'>
      > # end of Font
      <String ` if '>
     >
     <ParaLine 
      <String `such an element is not found. '>
     >
    > # end of Para
   > # end of CellContent
  > # end of Cell
  <Cell 
   <CellContent 
    <Notes 
    > # end of Notes
    <Para 
     <Unique 39936>
     <PgfTag `CellBody'>
     <ParaLine 
      <String `logarithmic'>
     >
    > # end of Para
   > # end of CellContent
  > # end of Cell
 > # end of Row
 <Row 
  <RowMaxHeight  14.0">
  <RowHeight  0.44444">
  <Cell 
   <CellContent 
    <Notes 
    > # end of Notes
    <Para 
     <Unique 39938>
     <PgfTag `CellBody'>
     <Pgf 
      <PgfFont 
       <FTag `'>
       <FFamily `Courier'>
       <FVar `Regular'>
       <FWeight `Regular'>
       <FAngle `Regular'>
       <FPostScriptName `Courier'>
       <FSize  9.0 pt>
       <FUnderlining FNoUnderlining >
       <FUnderline No >
       <FDoubleUnderline No >
       <FNumericUnderline No >
       <FOverline No >
       <FStrike No >
       <FChangeBar No >
       <FOutline No >
       <FShadow No >
       <FPairKern No >
       <FCase FAsTyped >
       <FPosition FNormal >
       <FSupScript No >
       <FSubScript No >
       <FDX  0.0 pt>
       <FDY  0.0 pt>
       <FDW  0.0 pt>
       <FSeparation 0>
       <FColor `Black'>
      > # end of PgfFont
     > # end of Pgf
     <ParaLine 
      <String `a.count(k)'>
     >
    > # end of Para
   > # end of CellContent
  > # end of Cell
  <Cell 
   <CellContent 
    <Notes 
    > # end of Notes
    <Para 
     <Unique 39940>
     <PgfTag `CellBody'>
     <Pgf 
      <PgfFont 
       <FTag `'>
       <FFamily `Courier'>
       <FVar `Regular'>
       <FWeight `Regular'>
       <FAngle `Regular'>
       <FPostScriptName `Courier'>
       <FSize  9.0 pt>
       <FUnderlining FNoUnderlining >
       <FUnderline No >
       <FDoubleUnderline No >
       <FNumericUnderline No >
       <FOverline No >
       <FStrike No >
       <FChangeBar No >
       <FOutline No >
       <FShadow No >
       <FPairKern No >
       <FCase FAsTyped >
       <FPosition FNormal >
       <FSupScript No >
       <FSubScript No >
       <FDX  0.0 pt>
       <FDY  0.0 pt>
       <FDW  0.0 pt>
       <FSeparation 0>
       <FColor `Black'>
      > # end of PgfFont
     > # end of Pgf
     <ParaLine 
      <String `size_type'>
     >
    > # end of Para
   > # end of CellContent
  > # end of Cell
  <Cell 
   <CellContent 
    <Notes 
    > # end of Notes
    <Para 
     <Unique 39942>
     <PgfTag `CellBody'>
     <ParaLine 
      <String `returns the number of elements with key '>
     >
     <ParaLine 
      <String `equal to '>
      <Font 
       <FTag `program'>
      > # end of Font
      <String `k'>
      <Font 
       <FTag `'>
      > # end of Font
      <String `.'>
     >
    > # end of Para
   > # end of CellContent
  > # end of Cell
  <Cell 
   <CellContent 
    <Notes 
    > # end of Notes
    <Para 
     <Unique 39944>
     <PgfTag `CellBody'>
     <Pgf 
      <PgfFont 
       <FTag `'>
       <FFamily `Courier'>
       <FVar `Regular'>
       <FWeight `Regular'>
       <FAngle `Regular'>
       <FPostScriptName `Courier'>
       <FSize  9.0 pt>
       <FUnderlining FNoUnderlining >
       <FUnderline No >
       <FDoubleUnderline No >
       <FNumericUnderline No >
       <FOverline No >
       <FStrike No >
       <FChangeBar No >
       <FOutline No >
       <FShadow No >
       <FPairKern No >
       <FCase FAsTyped >
       <FPosition FNormal >
       <FSupScript No >
       <FSubScript No >
       <FDX  0.0 pt>
       <FDY  0.0 pt>
       <FDW  0.0 pt>
       <FSeparation 0>
       <FColor `Black'>
      > # end of PgfFont
     > # end of Pgf
     <ParaLine 
      <Font 
       <FTag `program'>
      > # end of Font
      <String `log(size())+ '>
     >
     <ParaLine 
      <String `count(k)'>
     >
    > # end of Para
   > # end of CellContent
  > # end of Cell
 > # end of Row
 <Row 
  <RowMaxHeight  14.0">
  <RowHeight  0.59722">
  <Cell 
   <CellContent 
    <Notes 
    > # end of Notes
    <Para 
     <Unique 39946>
     <PgfTag `CellBody'>
     <Pgf 
      <PgfFont 
       <FTag `'>
       <FFamily `Courier'>
       <FVar `Regular'>
       <FWeight `Regular'>
       <FAngle `Regular'>
       <FPostScriptName `Courier'>
       <FSize  9.0 pt>
       <FUnderlining FNoUnderlining >
       <FUnderline No >
       <FDoubleUnderline No >
       <FNumericUnderline No >
       <FOverline No >
       <FStrike No >
       <FChangeBar No >
       <FOutline No >
       <FShadow No >
       <FPairKern No >
       <FCase FAsTyped >
       <FPosition FNormal >
       <FSupScript No >
       <FSubScript No >
       <FDX  0.0 pt>
       <FDY  0.0 pt>
       <FDW  0.0 pt>
       <FSeparation 0>
       <FColor `Black'>
      > # end of PgfFont
     > # end of Pgf
     <ParaLine 
      <String `a.lower_bound(k)'>
     >
    > # end of Para
   > # end of CellContent
  > # end of Cell
  <Cell 
   <CellContent 
    <Notes 
    > # end of Notes
    <Para 
     <Unique 39948>
     <PgfTag `CellBody'>
     <Pgf 
      <PgfFont 
       <FTag `'>
       <FFamily `Courier'>
       <FVar `Regular'>
       <FWeight `Regular'>
       <FAngle `Regular'>
       <FPostScriptName `Courier'>
       <FSize  9.0 pt>
       <FUnderlining FNoUnderlining >
       <FUnderline No >
       <FDoubleUnderline No >
       <FNumericUnderline No >
       <FOverline No >
       <FStrike No >
       <FChangeBar No >
       <FOutline No >
       <FShadow No >
       <FPairKern No >
       <FCase FAsTyped >
       <FPosition FNormal >
       <FSupScript No >
       <FSubScript No >
       <FDX  0.0 pt>
       <FDY  0.0 pt>
       <FDW  0.0 pt>
       <FSeparation 0>
       <FColor `Black'>
      > # end of PgfFont
     > # end of Pgf
     <ParaLine 
      <String `iterator;'>
     >
    > # end of Para
    <Para 
     <Unique 39949>
     <PgfTag `CellBody'>
     <ParaLine 
      <Font 
       <FTag `program'>
      > # end of Font
      <String `const_iterator'>
      <Font 
       <FTag `'>
      > # end of Font
      <String ` '>
     >
     <ParaLine 
      <String `for constant '>
      <Font 
       <FTag `program'>
      > # end of Font
      <String `a'>
     >
    > # end of Para
   > # end of CellContent
  > # end of Cell
  <Cell 
   <CellContent 
    <Notes 
    > # end of Notes
    <Para 
     <Unique 39951>
     <PgfTag `CellBody'>
     <ParaLine 
      <String `returns an iterator pointing to the first ele'>
      <Char SoftHyphen >
     >
     <ParaLine 
      <String `ment with key not less than '>
      <Font 
       <FTag `program'>
      > # end of Font
      <String `k'>
      <Font 
       <FTag `'>
      > # end of Font
      <String `.'>
     >
    > # end of Para
   > # end of CellContent
  > # end of Cell
  <Cell 
   <CellContent 
    <Notes 
    > # end of Notes
    <Para 
     <Unique 39953>
     <PgfTag `CellBody'>
     <ParaLine 
      <String `logarithmic'>
     >
    > # end of Para
   > # end of CellContent
  > # end of Cell
 > # end of Row
 <Row 
  <RowMaxHeight  14.0">
  <RowHeight  0.61111">
  <Cell 
   <CellContent 
    <Notes 
    > # end of Notes
    <Para 
     <Unique 39955>
     <PgfTag `CellBody'>
     <Pgf 
      <PgfFont 
       <FTag `'>
       <FFamily `Courier'>
       <FVar `Regular'>
       <FWeight `Regular'>
       <FAngle `Regular'>
       <FPostScriptName `Courier'>
       <FSize  9.0 pt>
       <FUnderlining FNoUnderlining >
       <FUnderline No >
       <FDoubleUnderline No >
       <FNumericUnderline No >
       <FOverline No >
       <FStrike No >
       <FChangeBar No >
       <FOutline No >
       <FShadow No >
       <FPairKern No >
       <FCase FAsTyped >
       <FPosition FNormal >
       <FSupScript No >
       <FSubScript No >
       <FDX  0.0 pt>
       <FDY  0.0 pt>
       <FDW  0.0 pt>
       <FSeparation 0>
       <FColor `Black'>
      > # end of PgfFont
     > # end of Pgf
     <ParaLine 
      <String `a.upper_bound(k)'>
     >
    > # end of Para
   > # end of CellContent
  > # end of Cell
  <Cell 
   <CellContent 
    <Notes 
    > # end of Notes
    <Para 
     <Unique 39957>
     <PgfTag `CellBody'>
     <ParaLine 
      <String `iterator; '>
     >
     <ParaLine 
      <Font 
       <FTag `program'>
      > # end of Font
      <String `const_iterator'>
      <Font 
       <FTag `'>
      > # end of Font
      <String ` '>
     >
     <ParaLine 
      <String `for constant '>
      <Font 
       <FTag `program'>
      > # end of Font
      <String `a'>
     >
    > # end of Para
   > # end of CellContent
  > # end of Cell
  <Cell 
   <CellContent 
    <Notes 
    > # end of Notes
    <Para 
     <Unique 39959>
     <PgfTag `CellBody'>
     <ParaLine 
      <String `returns an iterator pointing to the first ele'>
      <Char SoftHyphen >
     >
     <ParaLine 
      <String `ment with key greater than '>
      <Font 
       <FTag `program'>
      > # end of Font
      <String `k'>
      <Font 
       <FTag `'>
      > # end of Font
      <String `.'>
     >
    > # end of Para
   > # end of CellContent
  > # end of Cell
  <Cell 
   <CellContent 
    <Notes 
    > # end of Notes
    <Para 
     <Unique 39961>
     <PgfTag `CellBody'>
     <ParaLine 
      <String `logarithmic'>
     >
    > # end of Para
   > # end of CellContent
  > # end of Cell
 > # end of Row
 <Row 
  <RowMaxHeight  14.0">
  <RowHeight  1.04167">
  <Cell 
   <CellContent 
    <Notes 
    > # end of Notes
    <Para 
     <Unique 39963>
     <PgfTag `CellBody'>
     <Pgf 
      <PgfFont 
       <FTag `'>
       <FFamily `Courier'>
       <FVar `Regular'>
       <FWeight `Regular'>
       <FAngle `Regular'>
       <FPostScriptName `Courier'>
       <FSize  9.0 pt>
       <FUnderlining FNoUnderlining >
       <FUnderline No >
       <FDoubleUnderline No >
       <FNumericUnderline No >
       <FOverline No >
       <FStrike No >
       <FChangeBar No >
       <FOutline No >
       <FShadow No >
       <FPairKern No >
       <FCase FAsTyped >
       <FPosition FNormal >
       <FSupScript No >
       <FSubScript No >
       <FDX  0.0 pt>
       <FDY  0.0 pt>
       <FDW  0.0 pt>
       <FSeparation 0>
       <FColor `Black'>
      > # end of PgfFont
     > # end of Pgf
     <ParaLine 
      <String `a.equal_range(k)'>
     >
    > # end of Para
   > # end of CellContent
  > # end of Cell
  <Cell 
   <CellContent 
    <Notes 
    > # end of Notes
    <Para 
     <Unique 39965>
     <PgfTag `CellBody'>
     <Pgf 
      <PgfFont 
       <FTag `'>
       <FFamily `Courier'>
       <FVar `Regular'>
       <FWeight `Regular'>
       <FAngle `Regular'>
       <FPostScriptName `Courier'>
       <FSize  9.0 pt>
       <FUnderlining FNoUnderlining >
       <FUnderline No >
       <FDoubleUnderline No >
       <FNumericUnderline No >
       <FOverline No >
       <FStrike No >
       <FChangeBar No >
       <FOutline No >
       <FShadow No >
       <FPairKern No >
       <FCase FAsTyped >
       <FPosition FNormal >
       <FSupScript No >
       <FSubScript No >
       <FDX  0.0 pt>
       <FDY  0.0 pt>
       <FDW  0.0 pt>
       <FSeparation 0>
       <FColor `Black'>
      > # end of PgfFont
     > # end of Pgf
     <ParaLine 
      <String `pair<iterator, '>
     >
     <ParaLine 
      <String `iterator\>;'>
     >
    > # end of Para
    <Para 
     <Unique 39966>
     <PgfTag `CellBody'>
     <Pgf 
      <PgfFont 
       <FTag `'>
       <FFamily `Courier'>
       <FVar `Regular'>
       <FWeight `Regular'>
       <FAngle `Regular'>
       <FPostScriptName `Courier'>
       <FSize  9.0 pt>
       <FUnderlining FNoUnderlining >
       <FUnderline No >
       <FDoubleUnderline No >
       <FNumericUnderline No >
       <FOverline No >
       <FStrike No >
       <FChangeBar No >
       <FOutline No >
       <FShadow No >
       <FPairKern No >
       <FCase FAsTyped >
       <FPosition FNormal >
       <FSupScript No >
       <FSubScript No >
       <FDX  0.0 pt>
       <FDY  0.0 pt>
       <FDW  0.0 pt>
       <FSeparation 0>
       <FColor `Black'>
      > # end of PgfFont
     > # end of Pgf
     <ParaLine 
      <String `pair<const_iter'>
     >
     <ParaLine 
      <String `ator, '>
     >
     <ParaLine 
      <String `const_iterator\>'>
     >
    > # end of Para
    <Para 
     <Unique 39967>
     <PgfTag `CellBody'>
     <ParaLine 
      <String `for constant '>
      <Font 
       <FTag `program'>
      > # end of Font
      <String `a'>
     >
    > # end of Para
   > # end of CellContent
  > # end of Cell
  <Cell 
   <CellContent 
    <Notes 
    > # end of Notes
    <Para 
     <Unique 39969>
     <PgfTag `CellBody'>
     <ParaLine 
      <String `equivalent to '>
     >
     <ParaLine 
      <Font 
       <FTag `program'>
      > # end of Font
      <String `make_pair(a.lower_bound(k), '>
     >
     <ParaLine 
      <String `a.upper_bound(k))'>
      <Font 
       <FTag `'>
      > # end of Font
      <String `.'>
     >
    > # end of Para
   > # end of CellContent
  > # end of Cell
  <Cell 
   <CellContent 
    <Notes 
    > # end of Notes
    <Para 
     <Unique 39971>
     <PgfTag `CellBody'>
     <ParaLine 
      <String `logarithmic'>
     >
    > # end of Para
   > # end of CellContent
  > # end of Cell
 > # end of Row
> # end of TblBody
> # end of Tbl
<Tbl 
<TblID 19>
<TblTag `Format A'>
<TblFormat 
 <TblColumn 
  <TblColumnNum 0>
  <TblColumnWidth  1.0">
  <TblColumnH 
   <Pgf 
    <PgfTag `CellHeading'>
    <PgfAlignment Center >
    <PgfFont 
     <FTag `'>
     <FFamily `Times'>
     <FVar `Regular'>
     <FWeight `Regular'>
     <FAngle `Regular'>
     <FPostScriptName `Times-Roman'>
     <FSize  12.0 pt>
     <FUnderlining FNoUnderlining >
     <FUnderline No >
     <FDoubleUnderline No >
     <FNumericUnderline No >
     <FOverline No >
     <FStrike No >
     <FChangeBar No >
     <FOutline No >
     <FShadow No >
     <FPairKern Yes >
     <FCase FAsTyped >
     <FPosition FNormal >
     <FSupScript No >
     <FSubScript No >
     <FDX  0.0 pt>
     <FDY  0.0 pt>
     <FDW  0.0 pt>
     <FSeparation 0>
     <FColor `Black'>
    > # end of PgfFont
    <PgfHyphenate No >
    <PgfCellAlignment Middle >
    <PgfCellMargins  0.0 pt 2.0 pt 0.0 pt 2.0 pt>
   > # end of Pgf
  > # end of TblColumnH
  <TblColumnBody 
   <PgfTag `CellBody'>
   <Pgf 
    <PgfFont 
     <FTag `'>
     <FFamily `Times'>
     <FVar `Regular'>
     <FWeight `Regular'>
     <FAngle `Regular'>
     <FPostScriptName `Times-Roman'>
     <FSize  12.0 pt>
     <FUnderlining FNoUnderlining >
     <FUnderline No >
     <FDoubleUnderline No >
     <FNumericUnderline No >
     <FOverline No >
     <FStrike No >
     <FChangeBar No >
     <FOutline No >
     <FShadow No >
     <FPairKern Yes >
     <FCase FAsTyped >
     <FPosition FNormal >
     <FSupScript No >
     <FSubScript No >
     <FDX  0.0 pt>
     <FDY  0.0 pt>
     <FDW  0.0 pt>
     <FSeparation 0>
     <FColor `Black'>
    > # end of PgfFont
   > # end of Pgf
  > # end of TblColumnBody
  <TblColumnF 
   <Pgf 
    <PgfTag `CellHeading'>
    <PgfAlignment Center >
    <PgfHyphenate No >
    <PgfCellAlignment Middle >
    <PgfCellMargins  0.0 pt 2.0 pt 0.0 pt 2.0 pt>
   > # end of Pgf
  > # end of TblColumnF
 > # end of TblColumn
 <TblColumn 
  <TblColumnNum 1>
  <TblColumnWidth  1.0">
  <TblColumnH 
  > # end of TblColumnH
  <TblColumnBody 
   <PgfTag `CellBody'>
   <Pgf 
    <PgfFont 
     <FTag `'>
     <FFamily `Times'>
     <FVar `Regular'>
     <FWeight `Regular'>
     <FAngle `Regular'>
     <FPostScriptName `Times-Roman'>
     <FSize  12.0 pt>
     <FUnderlining FNoUnderlining >
     <FUnderline No >
     <FDoubleUnderline No >
     <FNumericUnderline No >
     <FOverline No >
     <FStrike No >
     <FChangeBar No >
     <FOutline No >
     <FShadow No >
     <FPairKern Yes >
     <FCase FAsTyped >
     <FPosition FNormal >
     <FSupScript No >
     <FSubScript No >
     <FDX  0.0 pt>
     <FDY  0.0 pt>
     <FDW  0.0 pt>
     <FSeparation 0>
     <FColor `Black'>
    > # end of PgfFont
   > # end of Pgf
  > # end of TblColumnBody
  <TblColumnF 
   <Pgf 
    <PgfTag `CellHeading'>
    <PgfAlignment Center >
    <PgfHyphenate No >
    <PgfCellAlignment Middle >
    <PgfCellMargins  0.0 pt 2.0 pt 0.0 pt 2.0 pt>
   > # end of Pgf
  > # end of TblColumnF
 > # end of TblColumn
 <TblColumn 
  <TblColumnNum 2>
  <TblColumnWidth  1.0">
  <TblColumnH 
  > # end of TblColumnH
  <TblColumnBody 
   <PgfTag `CellBody'>
   <Pgf 
    <PgfFont 
     <FTag `'>
     <FFamily `Times'>
     <FVar `Regular'>
     <FWeight `Regular'>
     <FAngle `Regular'>
     <FPostScriptName `Times-Roman'>
     <FSize  12.0 pt>
     <FUnderlining FNoUnderlining >
     <FUnderline No >
     <FDoubleUnderline No >
     <FNumericUnderline No >
     <FOverline No >
     <FStrike No >
     <FChangeBar No >
     <FOutline No >
     <FShadow No >
     <FPairKern Yes >
     <FCase FAsTyped >
     <FPosition FNormal >
     <FSupScript No >
     <FSubScript No >
     <FDX  0.0 pt>
     <FDY  0.0 pt>
     <FDW  0.0 pt>
     <FSeparation 0>
     <FColor `Black'>
    > # end of PgfFont
   > # end of Pgf
  > # end of TblColumnBody
  <TblColumnF 
   <Pgf 
    <PgfTag `CellHeading'>
    <PgfAlignment Center >
    <PgfHyphenate No >
    <PgfCellAlignment Middle >
    <PgfCellMargins  0.0 pt 2.0 pt 0.0 pt 2.0 pt>
   > # end of Pgf
  > # end of TblColumnF
 > # end of TblColumn
 <TblColumn 
  <TblColumnNum 3>
  <TblColumnWidth  1.0">
  <TblColumnH 
  > # end of TblColumnH
  <TblColumnBody 
   <PgfTag `CellBody'>
   <Pgf 
    <PgfFont 
     <FTag `'>
     <FFamily `Times'>
     <FVar `Regular'>
     <FWeight `Regular'>
     <FAngle `Regular'>
     <FPostScriptName `Times-Roman'>
     <FSize  12.0 pt>
     <FUnderlining FNoUnderlining >
     <FUnderline No >
     <FDoubleUnderline No >
     <FNumericUnderline No >
     <FOverline No >
     <FStrike No >
     <FChangeBar No >
     <FOutline No >
     <FShadow No >
     <FPairKern Yes >
     <FCase FAsTyped >
     <FPosition FNormal >
     <FSupScript No >
     <FSubScript No >
     <FDX  0.0 pt>
     <FDY  0.0 pt>
     <FDW  0.0 pt>
     <FSeparation 0>
     <FColor `Black'>
    > # end of PgfFont
   > # end of Pgf
  > # end of TblColumnBody
  <TblColumnF 
   <Pgf 
    <PgfTag `CellHeading'>
    <PgfAlignment Center >
    <PgfHyphenate No >
    <PgfCellAlignment Middle >
    <PgfCellMargins  0.0 pt 2.0 pt 0.0 pt 2.0 pt>
   > # end of Pgf
  > # end of TblColumnF
 > # end of TblColumn
 <TblColumn 
  <TblColumnNum 4>
  <TblColumnWidth  1.0">
  <TblColumnH 
  > # end of TblColumnH
  <TblColumnBody 
   <PgfTag `CellBody'>
   <Pgf 
    <PgfFont 
     <FTag `'>
     <FFamily `Times'>
     <FVar `Regular'>
     <FWeight `Regular'>
     <FAngle `Regular'>
     <FPostScriptName `Times-Roman'>
     <FSize  12.0 pt>
     <FUnderlining FNoUnderlining >
     <FUnderline No >
     <FDoubleUnderline No >
     <FNumericUnderline No >
     <FOverline No >
     <FStrike No >
     <FChangeBar No >
     <FOutline No >
     <FShadow No >
     <FPairKern Yes >
     <FCase FAsTyped >
     <FPosition FNormal >
     <FSupScript No >
     <FSubScript No >
     <FDX  0.0 pt>
     <FDY  0.0 pt>
     <FDW  0.0 pt>
     <FSeparation 0>
     <FColor `Black'>
    > # end of PgfFont
   > # end of Pgf
  > # end of TblColumnBody
  <TblColumnF 
   <Pgf 
    <PgfTag `CellHeading'>
    <PgfAlignment Center >
    <PgfHyphenate No >
    <PgfCellAlignment Middle >
    <PgfCellMargins  0.0 pt 2.0 pt 0.0 pt 2.0 pt>
   > # end of Pgf
  > # end of TblColumnF
 > # end of TblColumn
 <TblCellMargins  4.0 pt 6.0 pt 4.0 pt 4.0 pt>
 <TblInitNumBodyRows 8>
> # end of TblFormat
<TblNumColumns 4>
<Unique 6293>
<TblColumnWidth  1.1">
<TblColumnWidth  1.5">
<TblColumnWidth  3.3">
<TblColumnWidth  0.6">
<TblTitleContent 
 <Notes 
 > # end of Notes
 <Para 
  <Unique 6295>
  <Pgf 
   <PgfTag `TableTitle'>
   <PgfFont 
    <FTag `'>
    <FFamily `Times'>
    <FVar `Regular'>
    <FWeight `Bold'>
    <FAngle `Regular'>
    <FPostScriptName `Times-Bold'>
    <FSize  12.0 pt>
    <FUnderlining FNoUnderlining >
    <FUnderline No >
    <FDoubleUnderline No >
    <FNumericUnderline No >
    <FOverline No >
    <FStrike No >
    <FChangeBar No >
    <FOutline No >
    <FShadow No >
    <FPairKern Yes >
    <FCase FAsTyped >
    <FPosition FNormal >
    <FSupScript No >
    <FSubScript No >
    <FDX  0.0 pt>
    <FDY  0.0 pt>
    <FDW  0.0 pt>
    <FSeparation 0>
    <FColor `Black'>
   > # end of PgfFont
   <PgfAutoNum Yes >
   <PgfNumFormat `T:Table <n+\>: '>
   <PgfNumberFont `'>
   <PgfNumAtEnd No >
   <PgfCellAlignment Top >
   <PgfCellMargins  0.0 pt 0.0 pt 0.0 pt 0.0 pt>
  > # end of Pgf
  <PgfNumString `Table 9: '>
  <ParaLine 
   <String `Revers'>
   <String `i'>
   <String `ble c'>
   <String `ontainer requirements'>
   <String ` (in addition to container)'>
  >
 > # end of Para
> # end of TblTitleContent
<TblH 
 <Row 
  <RowMaxHeight  14.0">
  <RowHeight  0.5">
  <Cell 
   <CellContent 
    <Notes 
    > # end of Notes
    <Para 
     <Unique 6303>
     <Pgf 
      <PgfTag `CellHeading'>
      <PgfFont 
       <FTag `'>
       <FFamily `Times'>
       <FVar `Regular'>
       <FWeight `Regular'>
       <FAngle `Regular'>
       <FPostScriptName `Times-Roman'>
       <FSize  10.0 pt>
       <FUnderlining FNoUnderlining >
       <FUnderline No >
       <FDoubleUnderline No >
       <FNumericUnderline No >
       <FOverline No >
       <FStrike No >
       <FChangeBar No >
       <FOutline No >
       <FShadow No >
       <FPairKern Yes >
       <FCase FAsTyped >
       <FPosition FNormal >
       <FSupScript No >
       <FSubScript No >
       <FDX  0.0 pt>
       <FDY  0.0 pt>
       <FDW  0.0 pt>
       <FSeparation 0>
       <FColor `Black'>
      > # end of PgfFont
      <PgfAutoNum No >
      <PgfCellAlignment Middle >
      <PgfCellMargins  0.0 pt 2.0 pt 0.0 pt 2.0 pt>
     > # end of Pgf
     <ParaLine 
      <String `expression'>
     >
    > # end of Para
   > # end of CellContent
  > # end of Cell
  <Cell 
   <CellContent 
    <Notes 
    > # end of Notes
    <Para 
     <Unique 6305>
     <ParaLine 
      <String `return type'>
     >
    > # end of Para
   > # end of CellContent
  > # end of Cell
  <Cell 
   <CellContent 
    <Notes 
    > # end of Notes
    <Para 
     <Unique 6307>
     <ParaLine 
      <String `operational semantics'>
     >
    > # end of Para
   > # end of CellContent
  > # end of Cell
  <Cell 
   <CellContent 
    <Notes 
    > # end of Notes
    <Para 
     <Unique 6309>
     <ParaLine 
      <String `complex'>
     >
     <ParaLine 
      <String `ity'>
     >
    > # end of Para
   > # end of CellContent
  > # end of Cell
 > # end of Row
> # end of TblH
<TblBody 
 <Row 
  <RowMaxHeight  14.0">
  <RowHeight  1.06944">
  <Cell 
   <CellContent 
    <Notes 
    > # end of Notes
    <Para 
     <Unique 6311>
     <PgfTag `CellBody'>
     <Pgf 
      <PgfFont 
       <FTag `'>
       <FFamily `Courier'>
       <FVar `Regular'>
       <FWeight `Regular'>
       <FAngle `Regular'>
       <FPostScriptName `Courier'>
       <FSize  9.0 pt>
       <FUnderlining FNoUnderlining >
       <FUnderline No >
       <FDoubleUnderline No >
       <FNumericUnderline No >
       <FOverline No >
       <FStrike No >
       <FChangeBar No >
       <FOutline No >
       <FShadow No >
       <FPairKern No >
       <FCase FAsTyped >
       <FPosition FNormal >
       <FSupScript No >
       <FSubScript No >
       <FDX  0.0 pt>
       <FDY  0.0 pt>
       <FDW  0.0 pt>
       <FSeparation 0>
       <FColor `Black'>
      > # end of PgfFont
     > # end of Pgf
     <ParaLine 
      <String `X::reverse_it'>
     >
     <ParaLine 
      <String `erator'>
     >
    > # end of Para
   > # end of CellContent
  > # end of Cell
  <Cell 
   <CellContent 
    <Notes 
    > # end of Notes
    <Para 
     <Unique 6313>
     <PgfTag `CellBody'>
     <ParaLine 
     >
    > # end of Para
   > # end of CellContent
  > # end of Cell
  <Cell 
   <CellContent 
    <Notes 
    > # end of Notes
    <Para 
     <Unique 6315>
     <PgfTag `CellBody'>
     <Pgf 
      <PgfFont 
       <FTag `'>
       <FFamily `Courier'>
       <FVar `Regular'>
       <FWeight `Regular'>
       <FAngle `Regular'>
       <FPostScriptName `Courier'>
       <FSize  9.0 pt>
       <FUnderlining FNoUnderlining >
       <FUnderline No >
       <FDoubleUnderline No >
       <FNumericUnderline No >
       <FOverline No >
       <FStrike No >
       <FChangeBar No >
       <FOutline No >
       <FShadow No >
       <FPairKern No >
       <FCase FAsTyped >
       <FPosition FNormal >
       <FSupScript No >
       <FSubScript No >
       <FDX  0.0 pt>
       <FDY  0.0 pt>
       <FDW  0.0 pt>
       <FSeparation 0>
       <FColor `Black'>
      > # end of PgfFont
     > # end of Pgf
     <ParaLine 
      <Font 
       <FTag `program'>
      > # end of Font
      <String `r'>
      <String `everse_iterator<iterator, value_type,'>
      <String ` '>
     >
    > # end of Para
    <Para 
     <Unique 6316>
     <PgfTag `CellBody'>
     <ParaLine 
      <Font 
       <FTag `program'>
      > # end of Font
      <String `r'>
      <String `eference, difference_type\>'>
      <Font 
       <FTag `'>
      > # end of Font
      <String ` '>
     >
    > # end of Para
    <Para 
     <Unique 6317>
     <PgfTag `CellBody'>
     <ParaLine 
      <String `for random access iterator'>
     >
    > # end of Para
    <Para 
     <Unique 6318>
     <PgfTag `CellBody'>
     <Pgf 
      <PgfFont 
       <FTag `'>
       <FFamily `Courier'>
       <FVar `Regular'>
       <FWeight `Regular'>
       <FAngle `Regular'>
       <FPostScriptName `Courier'>
       <FSize  9.0 pt>
       <FUnderlining FNoUnderlining >
       <FUnderline No >
       <FDoubleUnderline No >
       <FNumericUnderline No >
       <FOverline No >
       <FStrike No >
       <FChangeBar No >
       <FOutline No >
       <FShadow No >
       <FPairKern No >
       <FCase FAsTyped >
       <FPosition FNormal >
       <FSupScript No >
       <FSubScript No >
       <FDX  0.0 pt>
       <FDY  0.0 pt>
       <FDW  0.0 pt>
       <FSeparation 0>
       <FColor `Black'>
      > # end of PgfFont
     > # end of Pgf
     <ParaLine 
      <Font 
       <FTag `program'>
      > # end of Font
      <String `reverse_bidirectional_iterator<iterator, '>
     >
     <ParaLine 
      <String `value_type'>
      <String `, '>
      <String `r'>
      <String `eference, difference_type\>'>
     >
    > # end of Para
    <Para 
     <Unique 6319>
     <PgfTag `CellBody'>
     <ParaLine 
      <String `for '>
      <String `bidirectional iterator'>
     >
    > # end of Para
   > # end of CellContent
  > # end of Cell
  <Cell 
   <CellContent 
    <Notes 
    > # end of Notes
    <Para 
     <Unique 6321>
     <PgfTag `CellBody'>
     <ParaLine 
      <String `compile '>
      <Char HardReturn >
     >
     <ParaLine 
      <String `time'>
     >
    > # end of Para
   > # end of CellContent
  > # end of Cell
 > # end of Row
 <Row 
  <RowMaxHeight  14.0">
  <RowHeight  1.36111">
  <Cell 
   <CellContent 
    <Notes 
    > # end of Notes
    <Para 
     <Unique 6323>
     <PgfTag `CellBody'>
     <Pgf 
      <PgfFont 
       <FTag `'>
       <FFamily `Courier'>
       <FVar `Regular'>
       <FWeight `Regular'>
       <FAngle `Regular'>
       <FPostScriptName `Courier'>
       <FSize  9.0 pt>
       <FUnderlining FNoUnderlining >
       <FUnderline No >
       <FDoubleUnderline No >
       <FNumericUnderline No >
       <FOverline No >
       <FStrike No >
       <FChangeBar No >
       <FOutline No >
       <FShadow No >
       <FPairKern No >
       <FCase FAsTyped >
       <FPosition FNormal >
       <FSupScript No >
       <FSubScript No >
       <FDX  0.0 pt>
       <FDY  0.0 pt>
       <FDW  0.0 pt>
       <FSeparation 0>
       <FColor `Black'>
      > # end of PgfFont
     > # end of Pgf
     <ParaLine 
      <String `X::const_reve'>
     >
     <ParaLine 
      <String `rse_iterator'>
     >
    > # end of Para
   > # end of CellContent
  > # end of Cell
  <Cell 
   <CellContent 
    <Notes 
    > # end of Notes
    <Para 
     <Unique 6325>
     <PgfTag `CellBody'>
     <ParaLine 
     >
    > # end of Para
   > # end of CellContent
  > # end of Cell
  <Cell 
   <CellContent 
    <Notes 
    > # end of Notes
    <Para 
     <Unique 6327>
     <PgfTag `CellBody'>
     <Pgf 
      <PgfFont 
       <FTag `'>
       <FFamily `Courier'>
       <FVar `Regular'>
       <FWeight `Regular'>
       <FAngle `Regular'>
       <FPostScriptName `Courier'>
       <FSize  9.0 pt>
       <FUnderlining FNoUnderlining >
       <FUnderline No >
       <FDoubleUnderline No >
       <FNumericUnderline No >
       <FOverline No >
       <FStrike No >
       <FChangeBar No >
       <FOutline No >
       <FShadow No >
       <FPairKern No >
       <FCase FAsTyped >
       <FPosition FNormal >
       <FSupScript No >
       <FSubScript No >
       <FDX  0.0 pt>
       <FDY  0.0 pt>
       <FDW  0.0 pt>
       <FSeparation 0>
       <FColor `Black'>
      > # end of PgfFont
     > # end of Pgf
     <ParaLine 
      <Font 
       <FTag `program'>
      > # end of Font
      <String `r'>
      <String `everse_iterator<const_iterator, '>
     >
     <ParaLine 
      <String `value_type'>
      <String `, '>
      <String `c'>
      <String `onst_reference, '>
     >
     <ParaLine 
      <String `difference_type\> '>
     >
    > # end of Para
    <Para 
     <Unique 6328>
     <PgfTag `CellBody'>
     <ParaLine 
      <String `for random access iterator'>
     >
    > # end of Para
    <Para 
     <Unique 6329>
     <PgfTag `CellBody'>
     <Pgf 
      <PgfFont 
       <FTag `'>
       <FFamily `Courier'>
       <FVar `Regular'>
       <FWeight `Regular'>
       <FAngle `Regular'>
       <FPostScriptName `Courier'>
       <FSize  9.0 pt>
       <FUnderlining FNoUnderlining >
       <FUnderline No >
       <FDoubleUnderline No >
       <FNumericUnderline No >
       <FOverline No >
       <FStrike No >
       <FChangeBar No >
       <FOutline No >
       <FShadow No >
       <FPairKern No >
       <FCase FAsTyped >
       <FPosition FNormal >
       <FSupScript No >
       <FSubScript No >
       <FDX  0.0 pt>
       <FDY  0.0 pt>
       <FDW  0.0 pt>
       <FSeparation 0>
       <FColor `Black'>
      > # end of PgfFont
     > # end of Pgf
     <ParaLine 
      <Font 
       <FTag `program'>
      > # end of Font
      <String `reverse_bidirectional_iterator'>
      <String `<'>
     >
    > # end of Para
    <Para 
     <Unique 6330>
     <PgfTag `CellBody'>
     <Pgf 
      <PgfFont 
       <FTag `'>
       <FFamily `Courier'>
       <FVar `Regular'>
       <FWeight `Regular'>
       <FAngle `Regular'>
       <FPostScriptName `Courier'>
       <FSize  9.0 pt>
       <FUnderlining FNoUnderlining >
       <FUnderline No >
       <FDoubleUnderline No >
       <FNumericUnderline No >
       <FOverline No >
       <FStrike No >
       <FChangeBar No >
       <FOutline No >
       <FShadow No >
       <FPairKern No >
       <FCase FAsTyped >
       <FPosition FNormal >
       <FSupScript No >
       <FSubScript No >
       <FDX  0.0 pt>
       <FDY  0.0 pt>
       <FDW  0.0 pt>
       <FSeparation 0>
       <FColor `Black'>
      > # end of PgfFont
     > # end of Pgf
     <ParaLine 
      <Font 
       <FTag `program'>
      > # end of Font
      <String `c'>
      <String `onst_iterator'>
      <String `, v'>
      <String `alue_type'>
      <String `,'>
     >
    > # end of Para
    <Para 
     <Unique 6331>
     <PgfTag `CellBody'>
     <Pgf 
      <PgfFont 
       <FTag `'>
       <FFamily `Courier'>
       <FVar `Regular'>
       <FWeight `Regular'>
       <FAngle `Regular'>
       <FPostScriptName `Courier'>
       <FSize  9.0 pt>
       <FUnderlining FNoUnderlining >
       <FUnderline No >
       <FDoubleUnderline No >
       <FNumericUnderline No >
       <FOverline No >
       <FStrike No >
       <FChangeBar No >
       <FOutline No >
       <FShadow No >
       <FPairKern No >
       <FCase FAsTyped >
       <FPosition FNormal >
       <FSupScript No >
       <FSubScript No >
       <FDX  0.0 pt>
       <FDY  0.0 pt>
       <FDW  0.0 pt>
       <FSeparation 0>
       <FColor `Black'>
      > # end of PgfFont
     > # end of Pgf
     <ParaLine 
      <Font 
       <FTag `program'>
      > # end of Font
      <String `c'>
      <String `onst_reference, difference_type\>'>
     >
    > # end of Para
    <Para 
     <Unique 6332>
     <PgfTag `CellBody'>
     <ParaLine 
      <String `for bidirectional iterator'>
     >
    > # end of Para
   > # end of CellContent
  > # end of Cell
  <Cell 
   <CellContent 
    <Notes 
    > # end of Notes
    <Para 
     <Unique 6334>
     <PgfTag `CellBody'>
     <ParaLine 
      <String `compile '>
      <Char HardReturn >
     >
     <ParaLine 
      <String `time'>
     >
    > # end of Para
   > # end of CellContent
  > # end of Cell
 > # end of Row
 <Row 
  <RowMaxHeight  14.0">
  <RowHeight  0.61111">
  <Cell 
   <CellContent 
    <Notes 
    > # end of Notes
    <Para 
     <Unique 6336>
     <PgfTag `CellBody'>
     <Pgf 
      <PgfFont 
       <FTag `'>
       <FFamily `Courier'>
       <FVar `Regular'>
       <FWeight `Regular'>
       <FAngle `Regular'>
       <FPostScriptName `Courier'>
       <FSize  9.0 pt>
       <FUnderlining FNoUnderlining >
       <FUnderline No >
       <FDoubleUnderline No >
       <FNumericUnderline No >
       <FOverline No >
       <FStrike No >
       <FChangeBar No >
       <FOutline No >
       <FShadow No >
       <FPairKern No >
       <FCase FAsTyped >
       <FPosition FNormal >
       <FSupScript No >
       <FSubScript No >
       <FDX  0.0 pt>
       <FDY  0.0 pt>
       <FDW  0.0 pt>
       <FSeparation 0>
       <FColor `Black'>
      > # end of PgfFont
     > # end of Pgf
     <ParaLine 
      <String `a.rbegin()'>
     >
    > # end of Para
   > # end of CellContent
  > # end of Cell
  <Cell 
   <CellContent 
    <Notes 
    > # end of Notes
    <Para 
     <Unique 6338>
     <PgfTag `CellBody'>
     <ParaLine 
      <Font 
       <FTag `program'>
      > # end of Font
      <String `reverse_iterator'>
      <Font 
       <FTag `'>
      > # end of Font
      <String `;'>
     >
    > # end of Para
    <Para 
     <Unique 6339>
     <PgfTag `CellBody'>
     <ParaLine 
      <Font 
       <FTag `program'>
      > # end of Font
      <String `const_reverse_iter'>
     >
     <ParaLine 
      <String `ator'>
      <Font 
       <FTag `'>
      > # end of Font
      <String ` for constant '>
      <Font 
       <FTag `program'>
      > # end of Font
      <String `a'>
     >
    > # end of Para
   > # end of CellContent
  > # end of Cell
  <Cell 
   <CellContent 
    <Notes 
    > # end of Notes
    <Para 
     <Unique 6341>
     <PgfTag `CellBody'>
     <Pgf 
      <PgfFont 
       <FTag `'>
       <FFamily `Courier'>
       <FVar `Regular'>
       <FWeight `Regular'>
       <FAngle `Regular'>
       <FPostScriptName `Courier'>
       <FSize  9.0 pt>
       <FUnderlining FNoUnderlining >
       <FUnderline No >
       <FDoubleUnderline No >
       <FNumericUnderline No >
       <FOverline No >
       <FStrike No >
       <FChangeBar No >
       <FOutline No >
       <FShadow No >
       <FPairKern No >
       <FCase FAsTyped >
       <FPosition FNormal >
       <FSupScript No >
       <FSubScript No >
       <FDX  0.0 pt>
       <FDY  0.0 pt>
       <FDW  0.0 pt>
       <FSeparation 0>
       <FColor `Black'>
      > # end of PgfFont
     > # end of Pgf
     <ParaLine 
      <String `reverse_iterator(end())'>
     >
    > # end of Para
   > # end of CellContent
  > # end of Cell
  <Cell 
   <CellContent 
    <Notes 
    > # end of Notes
    <Para 
     <Unique 6343>
     <PgfTag `CellBody'>
     <ParaLine 
      <String `constant'>
     >
    > # end of Para
   > # end of CellContent
  > # end of Cell
 > # end of Row
 <Row 
  <RowMaxHeight  14.0">
  <RowHeight  0.61111">
  <Cell 
   <CellContent 
    <Notes 
    > # end of Notes
    <Para 
     <Unique 6345>
     <PgfTag `CellBody'>
     <Pgf 
      <PgfFont 
       <FTag `'>
       <FFamily `Courier'>
       <FVar `Regular'>
       <FWeight `Regular'>
       <FAngle `Regular'>
       <FPostScriptName `Courier'>
       <FSize  9.0 pt>
       <FUnderlining FNoUnderlining >
       <FUnderline No >
       <FDoubleUnderline No >
       <FNumericUnderline No >
       <FOverline No >
       <FStrike No >
       <FChangeBar No >
       <FOutline No >
       <FShadow No >
       <FPairKern No >
       <FCase FAsTyped >
       <FPosition FNormal >
       <FSupScript No >
       <FSubScript No >
       <FDX  0.0 pt>
       <FDY  0.0 pt>
       <FDW  0.0 pt>
       <FSeparation 0>
       <FColor `Black'>
      > # end of PgfFont
     > # end of Pgf
     <ParaLine 
      <String `a.rend()'>
     >
    > # end of Para
   > # end of CellContent
  > # end of Cell
  <Cell 
   <CellContent 
    <Notes 
    > # end of Notes
    <Para 
     <Unique 6347>
     <PgfTag `CellBody'>
     <ParaLine 
      <Font 
       <FTag `program'>
      > # end of Font
      <String `reverse_iterator'>
      <Font 
       <FTag `'>
      > # end of Font
      <String `;'>
     >
    > # end of Para
    <Para 
     <Unique 6348>
     <PgfTag `CellBody'>
     <ParaLine 
      <Font 
       <FTag `program'>
      > # end of Font
      <String `const_reverse_iter'>
     >
     <ParaLine 
      <String `ator'>
      <Font 
       <FTag `'>
      > # end of Font
      <String ` for constant a'>
     >
    > # end of Para
   > # end of CellContent
  > # end of Cell
  <Cell 
   <CellContent 
    <Notes 
    > # end of Notes
    <Para 
     <Unique 6350>
     <PgfTag `CellBody'>
     <Pgf 
      <PgfFont 
       <FTag `'>
       <FFamily `Courier'>
       <FVar `Regular'>
       <FWeight `Regular'>
       <FAngle `Regular'>
       <FPostScriptName `Courier'>
       <FSize  9.0 pt>
       <FUnderlining FNoUnderlining >
       <FUnderline No >
       <FDoubleUnderline No >
       <FNumericUnderline No >
       <FOverline No >
       <FStrike No >
       <FChangeBar No >
       <FOutline No >
       <FShadow No >
       <FPairKern No >
       <FCase FAsTyped >
       <FPosition FNormal >
       <FSupScript No >
       <FSubScript No >
       <FDX  0.0 pt>
       <FDY  0.0 pt>
       <FDW  0.0 pt>
       <FSeparation 0>
       <FColor `Black'>
      > # end of PgfFont
     > # end of Pgf
     <ParaLine 
      <String `reverse_iterator(begin())'>
     >
    > # end of Para
   > # end of CellContent
  > # end of Cell
  <Cell 
   <CellContent 
    <Notes 
    > # end of Notes
    <Para 
     <Unique 6352>
     <PgfTag `CellBody'>
     <ParaLine 
      <String `constant'>
     >
    > # end of Para
   > # end of CellContent
  > # end of Cell
 > # end of Row
> # end of TblBody
> # end of Tbl
> # end of Tbls
<Page 
 <Unique 1786>
 <PageType LeftMasterPage >
 <PageTag `Left'>
 <PageSize  8.5" 11.0">
 <PageOrientation Portrait >
 <PageAngle  0.0>
 <TextRect 
  <ID 20>
  <Unique 1795>
  <Pen 15>
  <Fill 7>
  <PenWidth  1.0 pt>
  <Separation 0>
  <ObColor `Black'>
  <DashedPattern 
   <DashedStyle Solid >
  > # end of DashedPattern
  <Overprint No >
  <ShapeRect  1.0" 1.0" 6.5" 9.0">
  <BRect  1.0" 1.0" 6.5" 9.0">
  <TRNext 0>
 > # end of TextRect
 <TextRect 
  <ID 21>
  <Unique 1873>
  <PenWidth  0.5 pt>
  <Overprint No >
  <ShapeRect  1.0" 10.125" 6.5" 0.625">
  <BRect  1.0" 10.125" 6.5" 0.625">
  <TRNext 0>
 > # end of TextRect
> # end of Page
<Page 
 <Unique 1781>
 <PageType RightMasterPage >
 <PageTag `Right'>
 <PageSize  8.5" 11.0">
 <PageOrientation Portrait >
 <PageAngle  0.0>
 <TextRect 
  <ID 22>
  <Unique 1791>
  <Pen 15>
  <Fill 7>
  <PenWidth  1.0 pt>
  <Separation 0>
  <ObColor `Black'>
  <DashedPattern 
   <DashedStyle Solid >
  > # end of DashedPattern
  <Overprint No >
  <ShapeRect  1.0" 1.0" 6.5" 9.0">
  <BRect  1.0" 1.0" 6.5" 9.0">
  <TRNext 0>
 > # end of TextRect
 <TextRect 
  <ID 23>
  <Unique 1872>
  <Fill 15>
  <Overprint No >
  <ShapeRect  1.0" 1.0" 6.5" 9.0">
  <BRect  1.0" 1.0" 6.5" 9.0">
  <TRNext 0>
 > # end of TextRect
 <TextRect 
  <ID 24>
  <Unique 1825>
  <Fill 7>
  <PenWidth  0.5 pt>
  <Overprint No >
  <ShapeRect  1.0" 10.125" 6.5" 0.625">
  <BRect  1.0" 10.125" 6.5" 0.625">
  <TRNext 0>
 > # end of TextRect
> # end of Page
<Page 
 <Unique 1782>
 <PageType OtherMasterPage >
 <PageTag `First'>
 <PageSize  8.5" 11.0">
 <PageOrientation Portrait >
 <PageAngle  0.0>
 <TextRect 
  <ID 25>
  <Unique 1802>
  <Pen 15>
  <Fill 7>
  <PenWidth  1.0 pt>
  <Separation 0>
  <ObColor `Black'>
  <DashedPattern 
   <DashedStyle Solid >
  > # end of DashedPattern
  <Overprint No >
  <ShapeRect  1.0" 1.0" 6.5" 9.0">
  <BRect  1.0" 1.0" 6.5" 9.0">
  <TRNext 0>
 > # end of TextRect
> # end of Page
<Page 
 <Unique 1806>
 <PageType ReferencePage >
 <PageTag `Reference'>
 <PageSize  8.5" 11.0">
 <PageOrientation Portrait >
 <PageAngle  0.0>
 <TextLine 
  <Unique 1807>
  <Separation 0>
  <ObColor `Black'>
  <DashedPattern 
   <DashedStyle Solid >
  > # end of DashedPattern
  <Overprint No >
  <TLOrigin  1.0" 0.458">
  <TLAlignment Left >
  <TLLanguage USEnglish >
  <Font 
   <FTag `'>
   <FFamily `Helvetica'>
   <FVar `Regular'>
   <FWeight `Bold'>
   <FAngle `Regular'>
   <FPostScriptName `Helvetica-Bold'>
   <FSize  12.0 pt>
   <FUnderlining FNoUnderlining >
   <FUnderline No >
   <FDoubleUnderline No >
   <FNumericUnderline No >
   <FOverline No >
   <FStrike No >
   <FChangeBar No >
   <FOutline No >
   <FShadow No >
   <FPairKern No >
   <FCase FAsTyped >
   <FPosition FNormal >
   <FSupScript No >
   <FSubScript No >
   <FDX  0.0 pt>
   <FDY  0.0 pt>
   <FDW  0.0 pt>
   <FSeparation 0>
   <FColor `Black'>
  > # end of Font
  <String `Footnote'>
 > # end of TextLine
 <TextLine 
  <Unique 1808>
  <Overprint No >
  <TLOrigin  1.0" 1.083">
  <TLAlignment Left >
  <TLLanguage USEnglish >
  <String `Single Line'>
 > # end of TextLine
 <Frame 
  <Unique 1809>
  <Pen 15>
  <Fill 7>
  <PenWidth  1.0 pt>
  <Angle  360.0>
  <Overprint No >
  <ShapeRect  1.0" 0.542" 2.528" 0.208">
  <BRect  1.0" 0.542" 2.528" 0.208">
  <FrameType NotAnchored >
  <Tag `Footnote'>
  <PolyLine 
   <Unique 1625>
   <Pen 0>
   <PenWidth  0.5 pt>
   <HeadCap Square >
   <TailCap Square >
   <Overprint No >
   <NumPoints 2>
   <Point  0.0" 0.028">
   <Point  2.125" 0.028">
  > # end of PolyLine
 > # end of Frame
 <TextLine 
  <Unique 1811>
  <Overprint No >
  <TLOrigin  1.0" 1.625">
  <TLAlignment Left >
  <TLLanguage USEnglish >
  <String `Double Line'>
 > # end of TextLine
 <Frame 
  <Unique 1812>
  <Pen 15>
  <PenWidth  1.0 pt>
  <Angle  360.0>
  <Overprint No >
  <ShapeRect  1.0" 1.708" 6.5" 0.167">
  <BRect  1.0" 1.708" 6.5" 0.167">
  <FrameType NotAnchored >
  <Tag `Double Line'>
  <PolyLine 
   <Unique 1629>
   <Pen 0>
   <Overprint No >
   <NumPoints 2>
   <Point  0.0" 0.014">
   <Point  6.5" 0.014">
  > # end of PolyLine
  <PolyLine 
   <Unique 1631>
   <Overprint No >
   <NumPoints 2>
   <Point  0.0" 0.056">
   <Point  6.5" 0.056">
  > # end of PolyLine
 > # end of Frame
 <Frame 
  <Unique 1815>
  <Pen 15>
  <Angle  360.0>
  <Overprint No >
  <ShapeRect  1.0" 1.167" 6.5" 0.139">
  <BRect  1.0" 1.167" 6.5" 0.139">
  <FrameType NotAnchored >
  <Tag `Single Line'>
  <PolyLine 
   <Unique 1634>
   <Pen 0>
   <Overprint No >
   <NumPoints 2>
   <Point  0.0" 0.014">
   <Point  6.514" 0.014">
  > # end of PolyLine
 > # end of Frame
 <Frame 
  <Unique 1908>
  <Pen 15>
  <Fill 15>
  <Angle  360.0>
  <Overprint No >
  <ShapeRect  1.0" 1.25" 2.5" 0.08333">
  <BRect  1.0" 1.25" 2.5" 0.08333">
  <FrameType NotAnchored >
  <Tag `TableFootnote'>
 > # end of Frame
> # end of Page
<Page 
 <Unique 1834>
 <PageType ReferencePage >
 <PageTag `TOC'>
 <PageSize  8.5" 11.0">
 <PageOrientation Portrait >
 <PageAngle  0.0>
 <TextRect 
  <ID 26>
  <Unique 1835>
  <Pen 15>
  <Fill 7>
  <PenWidth  1.0 pt>
  <Separation 0>
  <ObColor `Black'>
  <DashedPattern 
   <DashedStyle Solid >
  > # end of DashedPattern
  <Overprint No >
  <ShapeRect  1.0" 1.75" 6.125" 1.0">
  <BRect  1.0" 1.75" 6.125" 1.0">
  <TRNext 0>
 > # end of TextRect
 <TextLine 
  <Unique 1836>
  <Overprint No >
  <TLOrigin  1.0" 1.663">
  <TLAlignment Left >
  <TLLanguage USEnglish >
  <String `Table of Contents Specification'>
 > # end of TextLine
 <TextRect 
  <ID 27>
  <Unique 1862>
  <Overprint No >
  <ShapeRect  1.0" 3.83343" 6.125" 0.625">
  <BRect  1.0" 3.83343" 6.125" 0.625">
  <TRNext 0>
 > # end of TextRect
 <TextLine 
  <Unique 1863>
  <Overprint No >
  <TLOrigin  1.0" 3.74643">
  <TLAlignment Left >
  <TLLanguage USEnglish >
  <String `List of Figures Specification'>
 > # end of TextLine
 <TextRect 
  <ID 28>
  <Unique 1857>
  <Overprint No >
  <ShapeRect  1.0" 5.75" 6.125" 0.625">
  <BRect  1.0" 5.75" 6.125" 0.625">
  <TRNext 0>
 > # end of TextRect
 <TextLine 
  <Unique 1858>
  <Overprint No >
  <TLOrigin  1.0" 5.663">
  <TLAlignment Left >
  <TLLanguage USEnglish >
  <String `List of Tables Specification'>
 > # end of TextLine
> # end of Page
<Page 
 <Unique 1837>
 <PageType ReferencePage >
 <PageTag `IX'>
 <PageSize  8.5" 11.0">
 <PageOrientation Portrait >
 <PageAngle  0.0>
 <TextRect 
  <ID 29>
  <Unique 1838>
  <Pen 15>
  <Fill 7>
  <PenWidth  1.0 pt>
  <Separation 0>
  <ObColor `Black'>
  <DashedPattern 
   <DashedStyle Solid >
  > # end of DashedPattern
  <Overprint No >
  <ShapeRect  1.0" 1.75" 5.5" 2.875">
  <BRect  1.0" 1.75" 5.5" 2.875">
  <TRNext 0>
 > # end of TextRect
 <TextLine 
  <Unique 1839>
  <Overprint No >
  <TLOrigin  1.0" 1.625">
  <TLAlignment Left >
  <TLLanguage USEnglish >
  <String `Index Specification'>
 > # end of TextLine
> # end of Page
<Page 
 <Unique 1796>
 <PageType BodyPage >
 <PageNum `-1'>
 <PageSize  8.5" 11.0">
 <PageOrientation Portrait >
 <PageAngle  0.0>
 <PageBackground `First'>
 <TextRect 
  <ID 30>
  <Unique 1797>
  <Pen 15>
  <Fill 7>
  <PenWidth  1.0 pt>
  <Separation 0>
  <ObColor `Black'>
  <DashedPattern 
   <DashedStyle Solid >
  > # end of DashedPattern
  <Overprint No >
  <ShapeRect  1.0" 1.0" 6.5" 9.0">
  <BRect  1.0" 1.0" 6.5" 9.0">
  <TRNext 31>
 > # end of TextRect
> # end of Page
<Page 
 <Unique 1798>
 <PageType BodyPage >
 <PageNum `0'>
 <PageSize  8.5" 11.0">
 <PageOrientation Portrait >
 <PageAngle  0.0>
 <PageBackground `First'>
 <TextRect 
  <ID 31>
  <Unique 1799>
  <Pen 15>
  <Fill 7>
  <PenWidth  1.0 pt>
  <Separation 0>
  <ObColor `Black'>
  <DashedPattern 
   <DashedStyle Solid >
  > # end of DashedPattern
  <Overprint No >
  <ShapeRect  1.0" 1.0" 6.5" 9.0">
  <BRect  1.0" 1.0" 6.5" 9.0">
  <TRNext 32>
 > # end of TextRect
> # end of Page
<Page 
 <Unique 1803>
 <PageType BodyPage >
 <PageNum `1'>
 <PageSize  8.5" 11.0">
 <PageOrientation Portrait >
 <PageAngle  0.0>
 <PageBackground `Default'>
 <TextRect 
  <ID 32>
  <Unique 1804>
  <Pen 15>
  <Fill 7>
  <PenWidth  1.0 pt>
  <Separation 0>
  <ObColor `Black'>
  <DashedPattern 
   <DashedStyle Solid >
  > # end of DashedPattern
  <Overprint No >
  <ShapeRect  1.0" 1.0" 6.5" 9.0">
  <BRect  1.0" 1.0" 6.5" 9.0">
  <TRNext 33>
 > # end of TextRect
> # end of Page
<Page 
 <Unique 1821>
 <PageType BodyPage >
 <PageNum `2'>
 <PageSize  8.5" 11.0">
 <PageOrientation Portrait >
 <PageAngle  0.0>
 <PageBackground `Default'>
 <TextRect 
  <ID 33>
  <Unique 1822>
  <Pen 15>
  <Fill 7>
  <PenWidth  1.0 pt>
  <Separation 0>
  <ObColor `Black'>
  <DashedPattern 
   <DashedStyle Solid >
  > # end of DashedPattern
  <Overprint No >
  <ShapeRect  1.0" 1.0" 6.5" 9.0">
  <BRect  1.0" 1.0" 6.5" 9.0">
  <TRNext 34>
 > # end of TextRect
> # end of Page
<Page 
 <Unique 1826>
 <PageType BodyPage >
 <PageNum `3'>
 <PageSize  8.5" 11.0">
 <PageOrientation Portrait >
 <PageAngle  0.0>
 <PageBackground `Default'>
 <TextRect 
  <ID 34>
  <Unique 1827>
  <Pen 15>
  <Fill 7>
  <PenWidth  1.0 pt>
  <Separation 0>
  <ObColor `Black'>
  <DashedPattern 
   <DashedStyle Solid >
  > # end of DashedPattern
  <Overprint No >
  <ShapeRect  1.0" 1.0" 6.5" 9.0">
  <BRect  1.0" 1.0" 6.5" 9.0">
  <TRNext 35>
 > # end of TextRect
> # end of Page
<Page 
 <Unique 1832>
 <PageType BodyPage >
 <PageNum `4'>
 <PageSize  8.5" 11.0">
 <PageOrientation Portrait >
 <PageAngle  0.0>
 <PageBackground `Default'>
 <TextRect 
  <ID 35>
  <Unique 1833>
  <Pen 15>
  <Fill 7>
  <PenWidth  1.0 pt>
  <Separation 0>
  <ObColor `Black'>
  <DashedPattern 
   <DashedStyle Solid >
  > # end of DashedPattern
  <Overprint No >
  <ShapeRect  1.0" 1.0" 6.5" 9.0">
  <BRect  1.0" 1.0" 6.5" 9.0">
  <TRNext 36>
 > # end of TextRect
> # end of Page
<Page 
 <Unique 1846>
 <PageType BodyPage >
 <PageNum `5'>
 <PageSize  8.5" 11.0">
 <PageOrientation Portrait >
 <PageAngle  0.0>
 <PageBackground `Default'>
 <TextRect 
  <ID 36>
  <Unique 1847>
  <Pen 15>
  <Fill 7>
  <PenWidth  1.0 pt>
  <Separation 0>
  <ObColor `Black'>
  <DashedPattern 
   <DashedStyle Solid >
  > # end of DashedPattern
  <Overprint No >
  <ShapeRect  1.0" 1.0" 6.5" 9.0">
  <BRect  1.0" 1.0" 6.5" 9.0">
  <TRNext 37>
 > # end of TextRect
> # end of Page
<Page 
 <Unique 1854>
 <PageType BodyPage >
 <PageNum `6'>
 <PageSize  8.5" 11.0">
 <PageOrientation Portrait >
 <PageAngle  0.0>
 <PageBackground `Default'>
 <TextRect 
  <ID 37>
  <Unique 1855>
  <Pen 15>
  <Fill 7>
  <PenWidth  1.0 pt>
  <Separation 0>
  <ObColor `Black'>
  <DashedPattern 
   <DashedStyle Solid >
  > # end of DashedPattern
  <Overprint No >
  <ShapeRect  1.0" 1.0" 6.5" 9.0">
  <BRect  1.0" 1.0" 6.5" 9.0">
  <TRNext 38>
 > # end of TextRect
> # end of Page
<Page 
 <Unique 1848>
 <PageType BodyPage >
 <PageNum `7'>
 <PageSize  8.5" 11.0">
 <PageOrientation Portrait >
 <PageAngle  0.0>
 <PageBackground `Default'>
 <TextRect 
  <ID 38>
  <Unique 1849>
  <Pen 15>
  <Fill 7>
  <PenWidth  1.0 pt>
  <Separation 0>
  <ObColor `Black'>
  <DashedPattern 
   <DashedStyle Solid >
  > # end of DashedPattern
  <Overprint No >
  <ShapeRect  1.0" 1.0" 6.5" 9.0">
  <BRect  1.0" 1.0" 6.5" 9.0">
  <TRNext 39>
 > # end of TextRect
> # end of Page
<Page 
 <Unique 1876>
 <PageType BodyPage >
 <PageNum `8'>
 <PageSize  8.5" 11.0">
 <PageOrientation Portrait >
 <PageAngle  0.0>
 <PageBackground `Default'>
 <TextRect 
  <ID 39>
  <Unique 1877>
  <Pen 15>
  <Fill 7>
  <PenWidth  1.0 pt>
  <Separation 0>
  <ObColor `Black'>
  <DashedPattern 
   <DashedStyle Solid >
  > # end of DashedPattern
  <Overprint No >
  <ShapeRect  1.0" 1.0" 6.5" 9.0">
  <BRect  1.0" 1.0" 6.5" 9.0">
  <TRNext 40>
 > # end of TextRect
> # end of Page
<Page 
 <Unique 1882>
 <PageType BodyPage >
 <PageNum `9'>
 <PageSize  8.5" 11.0">
 <PageOrientation Portrait >
 <PageAngle  0.0>
 <PageBackground `Default'>
 <TextRect 
  <ID 40>
  <Unique 1883>
  <Pen 15>
  <Fill 7>
  <PenWidth  1.0 pt>
  <Separation 0>
  <ObColor `Black'>
  <DashedPattern 
   <DashedStyle Solid >
  > # end of DashedPattern
  <Overprint No >
  <ShapeRect  1.0" 1.0" 6.5" 9.0">
  <BRect  1.0" 1.0" 6.5" 9.0">
  <TRNext 41>
 > # end of TextRect
> # end of Page
<Page 
 <Unique 1792>
 <PageType BodyPage >
 <PageNum `10'>
 <PageSize  8.5" 11.0">
 <PageOrientation Portrait >
 <PageAngle  0.0>
 <PageBackground `Default'>
 <TextRect 
  <ID 41>
  <Unique 1793>
  <Pen 15>
  <Fill 7>
  <PenWidth  1.0 pt>
  <Separation 0>
  <ObColor `Black'>
  <DashedPattern 
   <DashedStyle Solid >
  > # end of DashedPattern
  <Overprint No >
  <ShapeRect  1.0" 1.0" 6.5" 9.0">
  <BRect  1.0" 1.0" 6.5" 9.0">
  <TRNext 42>
 > # end of TextRect
> # end of Page
<Page 
 <Unique 1805>
 <PageType BodyPage >
 <PageNum `11'>
 <PageSize  8.5" 11.0">
 <PageOrientation Portrait >
 <PageAngle  0.0>
 <PageBackground `Default'>
 <TextRect 
  <ID 42>
  <Unique 1817>
  <Pen 15>
  <Fill 7>
  <PenWidth  1.0 pt>
  <Separation 0>
  <ObColor `Black'>
  <DashedPattern 
   <DashedStyle Solid >
  > # end of DashedPattern
  <Overprint No >
  <ShapeRect  1.0" 1.0" 6.5" 9.0">
  <BRect  1.0" 1.0" 6.5" 9.0">
  <TRNext 43>
 > # end of TextRect
> # end of Page
<Page 
 <Unique 1823>
 <PageType BodyPage >
 <PageNum `12'>
 <PageSize  8.5" 11.0">
 <PageOrientation Portrait >
 <PageAngle  0.0>
 <PageBackground `Default'>
 <TextRect 
  <ID 43>
  <Unique 1850>
  <Pen 15>
  <Fill 7>
  <PenWidth  1.0 pt>
  <Separation 0>
  <ObColor `Black'>
  <DashedPattern 
   <DashedStyle Solid >
  > # end of DashedPattern
  <Overprint No >
  <ShapeRect  1.0" 1.0" 6.5" 9.0">
  <BRect  1.0" 1.0" 6.5" 9.0">
  <TRNext 44>
 > # end of TextRect
> # end of Page
<Page 
 <Unique 1851>
 <PageType BodyPage >
 <PageNum `13'>
 <PageSize  8.5" 11.0">
 <PageOrientation Portrait >
 <PageAngle  0.0>
 <PageBackground `Default'>
 <TextRect 
  <ID 44>
  <Unique 1852>
  <Pen 15>
  <Fill 7>
  <PenWidth  1.0 pt>
  <Separation 0>
  <ObColor `Black'>
  <DashedPattern 
   <DashedStyle Solid >
  > # end of DashedPattern
  <Overprint No >
  <ShapeRect  1.0" 1.0" 6.5" 9.0">
  <BRect  1.0" 1.0" 6.5" 9.0">
  <TRNext 45>
 > # end of TextRect
> # end of Page
<Page 
 <Unique 1853>
 <PageType BodyPage >
 <PageNum `14'>
 <PageSize  8.5" 11.0">
 <PageOrientation Portrait >
 <PageAngle  0.0>
 <PageBackground `Default'>
 <TextRect 
  <ID 45>
  <Unique 1856>
  <Pen 15>
  <Fill 7>
  <PenWidth  1.0 pt>
  <Separation 0>
  <ObColor `Black'>
  <DashedPattern 
   <DashedStyle Solid >
  > # end of DashedPattern
  <Overprint No >
  <ShapeRect  1.0" 1.0" 6.5" 9.0">
  <BRect  1.0" 1.0" 6.5" 9.0">
  <TRNext 46>
 > # end of TextRect
> # end of Page
<Page 
 <Unique 1859>
 <PageType BodyPage >
 <PageNum `15'>
 <PageSize  8.5" 11.0">
 <PageOrientation Portrait >
 <PageAngle  0.0>
 <PageBackground `Default'>
 <TextRect 
  <ID 46>
  <Unique 1860>
  <Pen 15>
  <Fill 7>
  <PenWidth  1.0 pt>
  <Separation 0>
  <ObColor `Black'>
  <DashedPattern 
   <DashedStyle Solid >
  > # end of DashedPattern
  <Overprint No >
  <ShapeRect  1.0" 1.0" 6.5" 9.0">
  <BRect  1.0" 1.0" 6.5" 9.0">
  <TRNext 47>
 > # end of TextRect
> # end of Page
<Page 
 <Unique 1800>
 <PageType BodyPage >
 <PageNum `16'>
 <PageSize  8.5" 11.0">
 <PageOrientation Portrait >
 <PageAngle  0.0>
 <PageBackground `Default'>
 <TextRect 
  <ID 47>
  <Unique 1801>
  <Pen 15>
  <Fill 7>
  <PenWidth  1.0 pt>
  <Separation 0>
  <ObColor `Black'>
  <DashedPattern 
   <DashedStyle Solid >
  > # end of DashedPattern
  <Overprint No >
  <ShapeRect  1.0" 1.0" 6.5" 9.0">
  <BRect  1.0" 1.0" 6.5" 9.0">
  <TRNext 48>
 > # end of TextRect
> # end of Page
<Page 
 <Unique 1819>
 <PageType BodyPage >
 <PageNum `17'>
 <PageSize  8.5" 11.0">
 <PageOrientation Portrait >
 <PageAngle  0.0>
 <PageBackground `Default'>
 <TextRect 
  <ID 48>
  <Unique 1820>
  <Pen 15>
  <Fill 7>
  <PenWidth  1.0 pt>
  <Separation 0>
  <ObColor `Black'>
  <DashedPattern 
   <DashedStyle Solid >
  > # end of DashedPattern
  <Overprint No >
  <ShapeRect  1.0" 1.0" 6.5" 9.0">
  <BRect  1.0" 1.0" 6.5" 9.0">
  <TRNext 49>
 > # end of TextRect
> # end of Page
<Page 
 <Unique 1824>
 <PageType BodyPage >
 <PageNum `18'>
 <PageSize  8.5" 11.0">
 <PageOrientation Portrait >
 <PageAngle  0.0>
 <PageBackground `Default'>
 <TextRect 
  <ID 49>
  <Unique 1828>
  <Pen 15>
  <Fill 7>
  <PenWidth  1.0 pt>
  <Separation 0>
  <ObColor `Black'>
  <DashedPattern 
   <DashedStyle Solid >
  > # end of DashedPattern
  <Overprint No >
  <ShapeRect  1.0" 1.0" 6.5" 9.0">
  <BRect  1.0" 1.0" 6.5" 9.0">
  <TRNext 50>
 > # end of TextRect
> # end of Page
<Page 
 <Unique 1829>
 <PageType BodyPage >
 <PageNum `19'>
 <PageSize  8.5" 11.0">
 <PageOrientation Portrait >
 <PageAngle  0.0>
 <PageBackground `Default'>
 <TextRect 
  <ID 50>
  <Unique 1830>
  <Pen 15>
  <Fill 7>
  <PenWidth  1.0 pt>
  <Separation 0>
  <ObColor `Black'>
  <DashedPattern 
   <DashedStyle Solid >
  > # end of DashedPattern
  <Overprint No >
  <ShapeRect  1.0" 1.0" 6.5" 9.0">
  <BRect  1.0" 1.0" 6.5" 9.0">
  <TRNext 51>
 > # end of TextRect
> # end of Page
<Page 
 <Unique 1831>
 <PageType BodyPage >
 <PageNum `20'>
 <PageSize  8.5" 11.0">
 <PageOrientation Portrait >
 <PageAngle  0.0>
 <PageBackground `Default'>
 <TextRect 
  <ID 51>
  <Unique 1842>
  <Pen 15>
  <Fill 7>
  <PenWidth  1.0 pt>
  <Separation 0>
  <ObColor `Black'>
  <DashedPattern 
   <DashedStyle Solid >
  > # end of DashedPattern
  <Overprint No >
  <ShapeRect  1.0" 1.0" 6.5" 9.0">
  <BRect  1.0" 1.0" 6.5" 9.0">
  <TRNext 52>
 > # end of TextRect
> # end of Page
<Page 
 <Unique 1843>
 <PageType BodyPage >
 <PageNum `21'>
 <PageSize  8.5" 11.0">
 <PageOrientation Portrait >
 <PageAngle  0.0>
 <PageBackground `Default'>
 <TextRect 
  <ID 52>
  <Unique 1844>
  <Pen 15>
  <Fill 7>
  <PenWidth  1.0 pt>
  <Separation 0>
  <ObColor `Black'>
  <DashedPattern 
   <DashedStyle Solid >
  > # end of DashedPattern
  <Overprint No >
  <ShapeRect  1.0" 1.0" 6.5" 9.0">
  <BRect  1.0" 1.0" 6.5" 9.0">
  <TRNext 53>
 > # end of TextRect
> # end of Page
<Page 
 <Unique 1845>
 <PageType BodyPage >
 <PageNum `22'>
 <PageSize  8.5" 11.0">
 <PageOrientation Portrait >
 <PageAngle  0.0>
 <PageBackground `Default'>
 <TextRect 
  <ID 53>
  <Unique 1861>
  <Pen 15>
  <Fill 7>
  <PenWidth  1.0 pt>
  <Separation 0>
  <ObColor `Black'>
  <DashedPattern 
   <DashedStyle Solid >
  > # end of DashedPattern
  <Overprint No >
  <ShapeRect  1.0" 1.0" 6.5" 9.0">
  <BRect  1.0" 1.0" 6.5" 9.0">
  <TRNext 54>
 > # end of TextRect
> # end of Page
<Page 
 <Unique 1864>
 <PageType BodyPage >
 <PageNum `23'>
 <PageSize  8.5" 11.0">
 <PageOrientation Portrait >
 <PageAngle  0.0>
 <PageBackground `Default'>
 <TextRect 
  <ID 54>
  <Unique 1865>
  <Pen 15>
  <Fill 7>
  <PenWidth  1.0 pt>
  <Separation 0>
  <ObColor `Black'>
  <DashedPattern 
   <DashedStyle Solid >
  > # end of DashedPattern
  <Overprint No >
  <ShapeRect  1.0" 1.0" 6.5" 9.0">
  <BRect  1.0" 1.0" 6.5" 9.0">
  <TRNext 55>
 > # end of TextRect
> # end of Page
<Page 
 <Unique 1866>
 <PageType BodyPage >
 <PageNum `24'>
 <PageSize  8.5" 11.0">
 <PageOrientation Portrait >
 <PageAngle  0.0>
 <PageBackground `Default'>
 <TextRect 
  <ID 55>
  <Unique 1867>
  <Pen 15>
  <Fill 7>
  <PenWidth  1.0 pt>
  <Separation 0>
  <ObColor `Black'>
  <DashedPattern 
   <DashedStyle Solid >
  > # end of DashedPattern
  <Overprint No >
  <ShapeRect  1.0" 1.0" 6.5" 9.0">
  <BRect  1.0" 1.0" 6.5" 9.0">
  <TRNext 56>
 > # end of TextRect
> # end of Page
<Page 
 <Unique 1868>
 <PageType BodyPage >
 <PageNum `25'>
 <PageSize  8.5" 11.0">
 <PageOrientation Portrait >
 <PageAngle  0.0>
 <PageBackground `Default'>
 <TextRect 
  <ID 56>
  <Unique 1869>
  <Pen 15>
  <Fill 7>
  <PenWidth  1.0 pt>
  <Separation 0>
  <ObColor `Black'>
  <DashedPattern 
   <DashedStyle Solid >
  > # end of DashedPattern
  <Overprint No >
  <ShapeRect  1.0" 1.0" 6.5" 9.0">
  <BRect  1.0" 1.0" 6.5" 9.0">
  <TRNext 57>
 > # end of TextRect
> # end of Page
<Page 
 <Unique 1870>
 <PageType BodyPage >
 <PageNum `26'>
 <PageSize  8.5" 11.0">
 <PageOrientation Portrait >
 <PageAngle  0.0>
 <PageBackground `Default'>
 <TextRect 
  <ID 57>
  <Unique 1871>
  <Pen 15>
  <Fill 7>
  <PenWidth  1.0 pt>
  <Separation 0>
  <ObColor `Black'>
  <DashedPattern 
   <DashedStyle Solid >
  > # end of DashedPattern
  <Overprint No >
  <ShapeRect  1.0" 1.0" 6.5" 9.0">
  <BRect  1.0" 1.0" 6.5" 9.0">
  <TRNext 58>
 > # end of TextRect
> # end of Page
<Page 
 <Unique 1874>
 <PageType BodyPage >
 <PageNum `27'>
 <PageSize  8.5" 11.0">
 <PageOrientation Portrait >
 <PageAngle  0.0>
 <PageBackground `Default'>
 <TextRect 
  <ID 58>
  <Unique 1875>
  <Pen 15>
  <Fill 7>
  <PenWidth  1.0 pt>
  <Separation 0>
  <ObColor `Black'>
  <DashedPattern 
   <DashedStyle Solid >
  > # end of DashedPattern
  <Overprint No >
  <ShapeRect  1.0" 1.0" 6.5" 9.0">
  <BRect  1.0" 1.0" 6.5" 9.0">
  <TRNext 59>
 > # end of TextRect
> # end of Page
<Page 
 <Unique 1880>
 <PageType BodyPage >
 <PageNum `28'>
 <PageSize  8.5" 11.0">
 <PageOrientation Portrait >
 <PageAngle  0.0>
 <PageBackground `Default'>
 <TextRect 
  <ID 59>
  <Unique 1881>
  <Pen 15>
  <Fill 7>
  <PenWidth  1.0 pt>
  <Separation 0>
  <ObColor `Black'>
  <DashedPattern 
   <DashedStyle Solid >
  > # end of DashedPattern
  <Overprint No >
  <ShapeRect  1.0" 1.0" 6.5" 9.0">
  <BRect  1.0" 1.0" 6.5" 9.0">
  <TRNext 60>
 > # end of TextRect
> # end of Page
<Page 
 <Unique 1890>
 <PageType BodyPage >
 <PageNum `29'>
 <PageSize  8.5" 11.0">
 <PageOrientation Portrait >
 <PageAngle  0.0>
 <PageBackground `Default'>
 <TextRect 
  <ID 60>
  <Unique 1891>
  <Pen 15>
  <Fill 7>
  <PenWidth  1.0 pt>
  <Separation 0>
  <ObColor `Black'>
  <DashedPattern 
   <DashedStyle Solid >
  > # end of DashedPattern
  <Overprint No >
  <ShapeRect  1.0" 1.0" 6.5" 9.0">
  <BRect  1.0" 1.0" 6.5" 9.0">
  <TRNext 61>
 > # end of TextRect
> # end of Page
<Page 
 <Unique 1893>
 <PageType BodyPage >
 <PageNum `30'>
 <PageSize  8.5" 11.0">
 <PageOrientation Portrait >
 <PageAngle  0.0>
 <PageBackground `Default'>
 <TextRect 
  <ID 61>
  <Unique 1895>
  <Pen 15>
  <Fill 7>
  <PenWidth  1.0 pt>
  <Separation 0>
  <ObColor `Black'>
  <DashedPattern 
   <DashedStyle Solid >
  > # end of DashedPattern
  <Overprint No >
  <ShapeRect  1.0" 1.0" 6.5" 9.0">
  <BRect  1.0" 1.0" 6.5" 9.0">
  <TRNext 62>
 > # end of TextRect
> # end of Page
<Page 
 <Unique 1888>
 <PageType BodyPage >
 <PageNum `31'>
 <PageSize  8.5" 11.0">
 <PageOrientation Portrait >
 <PageAngle  0.0>
 <PageBackground `Default'>
 <TextRect 
  <ID 62>
  <Unique 1889>
  <Pen 15>
  <Fill 7>
  <PenWidth  1.0 pt>
  <Separation 0>
  <ObColor `Black'>
  <DashedPattern 
   <DashedStyle Solid >
  > # end of DashedPattern
  <Overprint No >
  <ShapeRect  1.0" 1.0" 6.5" 9.0">
  <BRect  1.0" 1.0" 6.5" 9.0">
  <TRNext 63>
 > # end of TextRect
> # end of Page
<Page 
 <Unique 1897>
 <PageType BodyPage >
 <PageNum `32'>
 <PageSize  8.5" 11.0">
 <PageOrientation Portrait >
 <PageAngle  0.0>
 <PageBackground `Default'>
 <TextRect 
  <ID 63>
  <Unique 1899>
  <Pen 15>
  <Fill 7>
  <PenWidth  1.0 pt>
  <Separation 0>
  <ObColor `Black'>
  <DashedPattern 
   <DashedStyle Solid >
  > # end of DashedPattern
  <Overprint No >
  <ShapeRect  1.0" 1.0" 6.5" 9.0">
  <BRect  1.0" 1.0" 6.5" 9.0">
  <TRNext 64>
 > # end of TextRect
> # end of Page
<Page 
 <Unique 1783>
 <PageType BodyPage >
 <PageNum `33'>
 <PageSize  8.5" 11.0">
 <PageOrientation Portrait >
 <PageAngle  0.0>
 <PageBackground `Default'>
 <TextRect 
  <ID 64>
  <Unique 1784>
  <Pen 15>
  <Fill 7>
  <PenWidth  1.0 pt>
  <Separation 0>
  <ObColor `Black'>
  <DashedPattern 
   <DashedStyle Solid >
  > # end of DashedPattern
  <Overprint No >
  <ShapeRect  1.0" 1.0" 6.5" 9.0">
  <BRect  1.0" 1.0" 6.5" 9.0">
  <TRNext 65>
 > # end of TextRect
> # end of Page
<Page 
 <Unique 1896>
 <PageType BodyPage >
 <PageNum `34'>
 <PageSize  8.5" 11.0">
 <PageOrientation Portrait >
 <PageAngle  0.0>
 <PageBackground `Default'>
 <TextRect 
  <ID 65>
  <Unique 1898>
  <Pen 15>
  <Fill 7>
  <PenWidth  1.0 pt>
  <Separation 0>
  <ObColor `Black'>
  <DashedPattern 
   <DashedStyle Solid >
  > # end of DashedPattern
  <Overprint No >
  <ShapeRect  1.0" 1.0" 6.5" 9.0">
  <BRect  1.0" 1.0" 6.5" 9.0">
  <TRNext 66>
 > # end of TextRect
> # end of Page
<Page 
 <Unique 9315>
 <PageType BodyPage >
 <PageNum `35'>
 <PageSize  8.5" 11.0">
 <PageOrientation Portrait >
 <PageAngle  0.0>
 <PageBackground `Default'>
 <TextRect 
  <ID 66>
  <Unique 9316>
  <Pen 15>
  <Fill 7>
  <PenWidth  1.0 pt>
  <Separation 0>
  <ObColor `Black'>
  <DashedPattern 
   <DashedStyle Solid >
  > # end of DashedPattern
  <Overprint No >
  <ShapeRect  1.0" 1.0" 6.5" 9.0">
  <BRect  1.0" 1.0" 6.5" 9.0">
  <TRNext 67>
 > # end of TextRect
> # end of Page
<Page 
 <Unique 9618>
 <PageType BodyPage >
 <PageNum `36'>
 <PageSize  8.5" 11.0">
 <PageOrientation Portrait >
 <PageAngle  0.0>
 <PageBackground `Default'>
 <TextRect 
  <ID 67>
  <Unique 9619>
  <Pen 15>
  <Fill 7>
  <PenWidth  1.0 pt>
  <Separation 0>
  <ObColor `Black'>
  <DashedPattern 
   <DashedStyle Solid >
  > # end of DashedPattern
  <Overprint No >
  <ShapeRect  1.0" 1.0" 6.5" 9.0">
  <BRect  1.0" 1.0" 6.5" 9.0">
  <TRNext 68>
 > # end of TextRect
> # end of Page
<Page 
 <Unique 19349>
 <PageType BodyPage >
 <PageNum `37'>
 <PageSize  8.5" 11.0">
 <PageOrientation Portrait >
 <PageAngle  0.0>
 <PageBackground `Default'>
 <TextRect 
  <ID 68>
  <Unique 19350>
  <Pen 15>
  <Fill 7>
  <PenWidth  1.0 pt>
  <Separation 0>
  <ObColor `Black'>
  <DashedPattern 
   <DashedStyle Solid >
  > # end of DashedPattern
  <Overprint No >
  <ShapeRect  1.0" 1.0" 6.5" 9.0">
  <BRect  1.0" 1.0" 6.5" 9.0">
  <TRNext 69>
 > # end of TextRect
> # end of Page
<Page 
 <Unique 19352>
 <PageType BodyPage >
 <PageNum `38'>
 <PageSize  8.5" 11.0">
 <PageOrientation Portrait >
 <PageAngle  0.0>
 <PageBackground `Default'>
 <TextRect 
  <ID 69>
  <Unique 19353>
  <Pen 15>
  <Fill 7>
  <PenWidth  1.0 pt>
  <Separation 0>
  <ObColor `Black'>
  <DashedPattern 
   <DashedStyle Solid >
  > # end of DashedPattern
  <Overprint No >
  <ShapeRect  1.0" 1.0" 6.5" 9.0">
  <BRect  1.0" 1.0" 6.5" 9.0">
  <TRNext 70>
 > # end of TextRect
> # end of Page
<Page 
 <Unique 19355>
 <PageType BodyPage >
 <PageNum `39'>
 <PageSize  8.5" 11.0">
 <PageOrientation Portrait >
 <PageAngle  0.0>
 <PageBackground `Default'>
 <TextRect 
  <ID 70>
  <Unique 19356>
  <Pen 15>
  <Fill 7>
  <PenWidth  1.0 pt>
  <Separation 0>
  <ObColor `Black'>
  <DashedPattern 
   <DashedStyle Solid >
  > # end of DashedPattern
  <Overprint No >
  <ShapeRect  1.0" 1.0" 6.5" 9.0">
  <BRect  1.0" 1.0" 6.5" 9.0">
  <TRNext 71>
 > # end of TextRect
> # end of Page
<Page 
 <Unique 19358>
 <PageType BodyPage >
 <PageNum `40'>
 <PageSize  8.5" 11.0">
 <PageOrientation Portrait >
 <PageAngle  0.0>
 <PageBackground `Default'>
 <TextRect 
  <ID 71>
  <Unique 19359>
  <Pen 15>
  <Fill 7>
  <PenWidth  1.0 pt>
  <Separation 0>
  <ObColor `Black'>
  <DashedPattern 
   <DashedStyle Solid >
  > # end of DashedPattern
  <Overprint No >
  <ShapeRect  1.0" 1.0" 6.5" 9.0">
  <BRect  1.0" 1.0" 6.5" 9.0">
  <TRNext 72>
 > # end of TextRect
> # end of Page
<Page 
 <Unique 20984>
 <PageType BodyPage >
 <PageNum `41'>
 <PageSize  8.5" 11.0">
 <PageOrientation Portrait >
 <PageAngle  0.0>
 <PageBackground `Default'>
 <TextRect 
  <ID 72>
  <Unique 20985>
  <Pen 15>
  <Fill 7>
  <PenWidth  1.0 pt>
  <Separation 0>
  <ObColor `Black'>
  <DashedPattern 
   <DashedStyle Solid >
  > # end of DashedPattern
  <Overprint No >
  <ShapeRect  1.0" 1.0" 6.5" 9.0">
  <BRect  1.0" 1.0" 6.5" 9.0">
  <TRNext 73>
 > # end of TextRect
> # end of Page
<Page 
 <Unique 20987>
 <PageType BodyPage >
 <PageNum `42'>
 <PageSize  8.5" 11.0">
 <PageOrientation Portrait >
 <PageAngle  0.0>
 <PageBackground `Default'>
 <TextRect 
  <ID 73>
  <Unique 20988>
  <Pen 15>
  <Fill 7>
  <PenWidth  1.0 pt>
  <Separation 0>
  <ObColor `Black'>
  <DashedPattern 
   <DashedStyle Solid >
  > # end of DashedPattern
  <Overprint No >
  <ShapeRect  1.0" 1.0" 6.5" 9.0">
  <BRect  1.0" 1.0" 6.5" 9.0">
  <TRNext 74>
 > # end of TextRect
> # end of Page
<Page 
 <Unique 20990>
 <PageType BodyPage >
 <PageNum `43'>
 <PageSize  8.5" 11.0">
 <PageOrientation Portrait >
 <PageAngle  0.0>
 <PageBackground `Default'>
 <TextRect 
  <ID 74>
  <Unique 20991>
  <Pen 15>
  <Fill 7>
  <PenWidth  1.0 pt>
  <Separation 0>
  <ObColor `Black'>
  <DashedPattern 
   <DashedStyle Solid >
  > # end of DashedPattern
  <Overprint No >
  <ShapeRect  1.0" 1.0" 6.5" 9.0">
  <BRect  1.0" 1.0" 6.5" 9.0">
  <TRNext 75>
 > # end of TextRect
> # end of Page
<Page 
 <Unique 21333>
 <PageType BodyPage >
 <PageNum `44'>
 <PageSize  8.5" 11.0">
 <PageOrientation Portrait >
 <PageAngle  0.0>
 <PageBackground `Default'>
 <TextRect 
  <ID 75>
  <Unique 21334>
  <Pen 15>
  <Fill 7>
  <PenWidth  1.0 pt>
  <Separation 0>
  <ObColor `Black'>
  <DashedPattern 
   <DashedStyle Solid >
  > # end of DashedPattern
  <Overprint No >
  <ShapeRect  1.0" 1.0" 6.5" 9.0">
  <BRect  1.0" 1.0" 6.5" 9.0">
  <TRNext 76>
 > # end of TextRect
> # end of Page
<Page 
 <Unique 21494>
 <PageType BodyPage >
 <PageNum `45'>
 <PageSize  8.5" 11.0">
 <PageOrientation Portrait >
 <PageAngle  0.0>
 <PageBackground `Default'>
 <TextRect 
  <ID 76>
  <Unique 21495>
  <Pen 15>
  <Fill 7>
  <PenWidth  1.0 pt>
  <Separation 0>
  <ObColor `Black'>
  <DashedPattern 
   <DashedStyle Solid >
  > # end of DashedPattern
  <Overprint No >
  <ShapeRect  1.0" 1.0" 6.5" 9.0">
  <BRect  1.0" 1.0" 6.5" 9.0">
  <TRNext 77>
 > # end of TextRect
> # end of Page
<Page 
 <Unique 21497>
 <PageType BodyPage >
 <PageNum `46'>
 <PageSize  8.5" 11.0">
 <PageOrientation Portrait >
 <PageAngle  0.0>
 <PageBackground `Default'>
 <TextRect 
  <ID 77>
  <Unique 21498>
  <Pen 15>
  <Fill 7>
  <PenWidth  1.0 pt>
  <Separation 0>
  <ObColor `Black'>
  <DashedPattern 
   <DashedStyle Solid >
  > # end of DashedPattern
  <Overprint No >
  <ShapeRect  1.0" 1.0" 6.5" 9.0">
  <BRect  1.0" 1.0" 6.5" 9.0">
  <TRNext 78>
 > # end of TextRect
> # end of Page
<Page 
 <Unique 21500>
 <PageType BodyPage >
 <PageNum `47'>
 <PageSize  8.5" 11.0">
 <PageOrientation Portrait >
 <PageAngle  0.0>
 <PageBackground `Default'>
 <TextRect 
  <ID 78>
  <Unique 21501>
  <Pen 15>
  <Fill 7>
  <PenWidth  1.0 pt>
  <Separation 0>
  <ObColor `Black'>
  <DashedPattern 
   <DashedStyle Solid >
  > # end of DashedPattern
  <Overprint No >
  <ShapeRect  1.0" 1.0" 6.5" 9.0">
  <BRect  1.0" 1.0" 6.5" 9.0">
  <TRNext 79>
 > # end of TextRect
> # end of Page
<Page 
 <Unique 27560>
 <PageType BodyPage >
 <PageNum `48'>
 <PageSize  8.5" 11.0">
 <PageOrientation Portrait >
 <PageAngle  0.0>
 <PageBackground `Default'>
 <TextRect 
  <ID 79>
  <Unique 27561>
  <Pen 15>
  <Fill 7>
  <PenWidth  1.0 pt>
  <Separation 0>
  <ObColor `Black'>
  <DashedPattern 
   <DashedStyle Solid >
  > # end of DashedPattern
  <Overprint No >
  <ShapeRect  1.0" 1.0" 6.5" 9.0">
  <BRect  1.0" 1.0" 6.5" 9.0">
  <TRNext 80>
 > # end of TextRect
> # end of Page
<Page 
 <Unique 28082>
 <PageType BodyPage >
 <PageNum `49'>
 <PageSize  8.5" 11.0">
 <PageOrientation Portrait >
 <PageAngle  0.0>
 <PageBackground `Default'>
 <TextRect 
  <ID 80>
  <Unique 28083>
  <Pen 15>
  <Fill 7>
  <PenWidth  1.0 pt>
  <Separation 0>
  <ObColor `Black'>
  <DashedPattern 
   <DashedStyle Solid >
  > # end of DashedPattern
  <Overprint No >
  <ShapeRect  1.0" 1.0" 6.5" 9.0">
  <BRect  1.0" 1.0" 6.5" 9.0">
  <TRNext 81>
 > # end of TextRect
> # end of Page
<Page 
 <Unique 28085>
 <PageType BodyPage >
 <PageNum `50'>
 <PageSize  8.5" 11.0">
 <PageOrientation Portrait >
 <PageAngle  0.0>
 <PageBackground `Default'>
 <TextRect 
  <ID 81>
  <Unique 28086>
  <Pen 15>
  <Fill 7>
  <PenWidth  1.0 pt>
  <Separation 0>
  <ObColor `Black'>
  <DashedPattern 
   <DashedStyle Solid >
  > # end of DashedPattern
  <Overprint No >
  <ShapeRect  1.0" 1.0" 6.5" 9.0">
  <BRect  1.0" 1.0" 6.5" 9.0">
  <TRNext 82>
 > # end of TextRect
> # end of Page
<Page 
 <Unique 28223>
 <PageType BodyPage >
 <PageNum `51'>
 <PageSize  8.5" 11.0">
 <PageOrientation Portrait >
 <PageAngle  0.0>
 <PageBackground `Default'>
 <TextRect 
  <ID 82>
  <Unique 28224>
  <Pen 15>
  <Fill 7>
  <PenWidth  1.0 pt>
  <Separation 0>
  <ObColor `Black'>
  <DashedPattern 
   <DashedStyle Solid >
  > # end of DashedPattern
  <Overprint No >
  <ShapeRect  1.0" 1.0" 6.5" 9.0">
  <BRect  1.0" 1.0" 6.5" 9.0">
  <TRNext 83>
 > # end of TextRect
> # end of Page
<Page 
 <Unique 28540>
 <PageType BodyPage >
 <PageNum `52'>
 <PageSize  8.5" 11.0">
 <PageOrientation Portrait >
 <PageAngle  0.0>
 <PageBackground `Default'>
 <TextRect 
  <ID 83>
  <Unique 28541>
  <Pen 15>
  <Fill 7>
  <PenWidth  1.0 pt>
  <Separation 0>
  <ObColor `Black'>
  <DashedPattern 
   <DashedStyle Solid >
  > # end of DashedPattern
  <Overprint No >
  <ShapeRect  1.0" 1.0" 6.5" 9.0">
  <BRect  1.0" 1.0" 6.5" 9.0">
  <TRNext 84>
 > # end of TextRect
> # end of Page
<Page 
 <Unique 33167>
 <PageType BodyPage >
 <PageNum `53'>
 <PageSize  8.5" 11.0">
 <PageOrientation Portrait >
 <PageAngle  0.0>
 <PageBackground `Default'>
 <TextRect 
  <ID 84>
  <Unique 33168>
  <Pen 15>
  <Fill 7>
  <PenWidth  1.0 pt>
  <Separation 0>
  <ObColor `Black'>
  <DashedPattern 
   <DashedStyle Solid >
  > # end of DashedPattern
  <Overprint No >
  <ShapeRect  1.0" 1.0" 6.5" 9.0">
  <BRect  1.0" 1.0" 6.5" 9.0">
  <TRNext 85>
 > # end of TextRect
> # end of Page
<Page 
 <Unique 33562>
 <PageType BodyPage >
 <PageNum `54'>
 <PageSize  8.5" 11.0">
 <PageOrientation Portrait >
 <PageAngle  0.0>
 <PageBackground `Default'>
 <TextRect 
  <ID 85>
  <Unique 33563>
  <Pen 15>
  <Fill 7>
  <PenWidth  1.0 pt>
  <Separation 0>
  <ObColor `Black'>
  <DashedPattern 
   <DashedStyle Solid >
  > # end of DashedPattern
  <Overprint No >
  <ShapeRect  1.0" 1.0" 6.5" 9.0">
  <BRect  1.0" 1.0" 6.5" 9.0">
  <TRNext 86>
 > # end of TextRect
> # end of Page
<Page 
 <Unique 35536>
 <PageType BodyPage >
 <PageNum `55'>
 <PageSize  8.5" 11.0">
 <PageOrientation Portrait >
 <PageAngle  0.0>
 <PageBackground `Default'>
 <TextRect 
  <ID 86>
  <Unique 35537>
  <Pen 15>
  <Fill 7>
  <PenWidth  1.0 pt>
  <Separation 0>
  <ObColor `Black'>
  <DashedPattern 
   <DashedStyle Solid >
  > # end of DashedPattern
  <Overprint No >
  <ShapeRect  1.0" 1.0" 6.5" 9.0">
  <BRect  1.0" 1.0" 6.5" 9.0">
  <TRNext 87>
 > # end of TextRect
> # end of Page
<Page 
 <Unique 36313>
 <PageType BodyPage >
 <PageNum `56'>
 <PageSize  8.5" 11.0">
 <PageOrientation Portrait >
 <PageAngle  0.0>
 <PageBackground `Default'>
 <TextRect 
  <ID 87>
  <Unique 36314>
  <Pen 15>
  <Fill 7>
  <PenWidth  1.0 pt>
  <Separation 0>
  <ObColor `Black'>
  <DashedPattern 
   <DashedStyle Solid >
  > # end of DashedPattern
  <Overprint No >
  <ShapeRect  1.0" 1.0" 6.5" 9.0">
  <BRect  1.0" 1.0" 6.5" 9.0">
  <TRNext 88>
 > # end of TextRect
> # end of Page
<Page 
 <Unique 36786>
 <PageType BodyPage >
 <PageNum `57'>
 <PageSize  8.5" 11.0">
 <PageOrientation Portrait >
 <PageAngle  0.0>
 <PageBackground `Default'>
 <TextRect 
  <ID 88>
  <Unique 36787>
  <Pen 15>
  <Fill 7>
  <PenWidth  1.0 pt>
  <Separation 0>
  <ObColor `Black'>
  <DashedPattern 
   <DashedStyle Solid >
  > # end of DashedPattern
  <Overprint No >
  <ShapeRect  1.0" 1.0" 6.5" 9.0">
  <BRect  1.0" 1.0" 6.5" 9.0">
  <TRNext 89>
 > # end of TextRect
> # end of Page
<Page 
 <Unique 37775>
 <PageType BodyPage >
 <PageNum `58'>
 <PageSize  8.5" 11.0">
 <PageOrientation Portrait >
 <PageAngle  0.0>
 <PageBackground `Default'>
 <TextRect 
  <ID 89>
  <Unique 37776>
  <Pen 15>
  <Fill 7>
  <PenWidth  1.0 pt>
  <Separation 0>
  <ObColor `Black'>
  <DashedPattern 
   <DashedStyle Solid >
  > # end of DashedPattern
  <Overprint No >
  <ShapeRect  1.0" 1.0" 6.5" 9.0">
  <BRect  1.0" 1.0" 6.5" 9.0">
  <TRNext 90>
 > # end of TextRect
> # end of Page
<Page 
 <Unique 37812>
 <PageType BodyPage >
 <PageNum `59'>
 <PageSize  8.5" 11.0">
 <PageOrientation Portrait >
 <PageAngle  0.0>
 <PageBackground `Default'>
 <TextRect 
  <ID 90>
  <Unique 37813>
  <Pen 15>
  <Fill 7>
  <PenWidth  1.0 pt>
  <Separation 0>
  <ObColor `Black'>
  <DashedPattern 
   <DashedStyle Solid >
  > # end of DashedPattern
  <Overprint No >
  <ShapeRect  1.0" 1.0" 6.5" 9.0">
  <BRect  1.0" 1.0" 6.5" 9.0">
  <TRNext 91>
 > # end of TextRect
> # end of Page
<Page 
 <Unique 38520>
 <PageType BodyPage >
 <PageNum `60'>
 <PageSize  8.5" 11.0">
 <PageOrientation Portrait >
 <PageAngle  0.0>
 <PageBackground `Default'>
 <TextRect 
  <ID 91>
  <Unique 38521>
  <Pen 15>
  <Fill 7>
  <PenWidth  1.0 pt>
  <Separation 0>
  <ObColor `Black'>
  <DashedPattern 
   <DashedStyle Solid >
  > # end of DashedPattern
  <Overprint No >
  <ShapeRect  1.0" 1.0" 6.5" 9.0">
  <BRect  1.0" 1.0" 6.5" 9.0">
  <TRNext 92>
 > # end of TextRect
> # end of Page
<Page 
 <Unique 38936>
 <PageType BodyPage >
 <PageNum `61'>
 <PageSize  8.5" 11.0">
 <PageOrientation Portrait >
 <PageAngle  0.0>
 <PageBackground `Default'>
 <TextRect 
  <ID 92>
  <Unique 38937>
  <Pen 15>
  <Fill 7>
  <PenWidth  1.0 pt>
  <Separation 0>
  <ObColor `Black'>
  <DashedPattern 
   <DashedStyle Solid >
  > # end of DashedPattern
  <Overprint No >
  <ShapeRect  1.0" 1.0" 6.5" 9.0">
  <BRect  1.0" 1.0" 6.5" 9.0">
  <TRNext 93>
 > # end of TextRect
> # end of Page
<Page 
 <Unique 40122>
 <PageType BodyPage >
 <PageNum `62'>
 <PageSize  8.5" 11.0">
 <PageOrientation Portrait >
 <PageAngle  0.0>
 <PageBackground `Default'>
 <TextRect 
  <ID 93>
  <Unique 40123>
  <Pen 15>
  <Fill 7>
  <PenWidth  1.0 pt>
  <Separation 0>
  <ObColor `Black'>
  <DashedPattern 
   <DashedStyle Solid >
  > # end of DashedPattern
  <Overprint No >
  <ShapeRect  1.0" 1.0" 6.5" 9.0">
  <BRect  1.0" 1.0" 6.5" 9.0">
  <TRNext 94>
 > # end of TextRect
> # end of Page
<Page 
 <Unique 40509>
 <PageType BodyPage >
 <PageNum `63'>
 <PageSize  8.5" 11.0">
 <PageOrientation Portrait >
 <PageAngle  0.0>
 <PageBackground `Default'>
 <TextRect 
  <ID 94>
  <Unique 40510>
  <Pen 15>
  <Fill 7>
  <PenWidth  1.0 pt>
  <Separation 0>
  <ObColor `Black'>
  <DashedPattern 
   <DashedStyle Solid >
  > # end of DashedPattern
  <Overprint No >
  <ShapeRect  1.0" 1.0" 6.5" 9.0">
  <BRect  1.0" 1.0" 6.5" 9.0">
  <TRNext 95>
 > # end of TextRect
> # end of Page
<Page 
 <Unique 4254>
 <PageType BodyPage >
 <PageNum `64'>
 <PageSize  8.5" 11.0">
 <PageOrientation Portrait >
 <PageAngle  0.0>
 <PageBackground `Default'>
 <TextRect 
  <ID 95>
  <Unique 4255>
  <Pen 15>
  <Fill 7>
  <PenWidth  1.0 pt>
  <Separation 0>
  <ObColor `Black'>
  <DashedPattern 
   <DashedStyle Solid >
  > # end of DashedPattern
  <Overprint No >
  <ShapeRect  1.0" 1.0" 6.5" 9.0">
  <BRect  1.0" 1.0" 6.5" 9.0">
  <TRNext 0>
 > # end of TextRect
> # end of Page
<TextFlow 
 <Notes 
 > # end of Notes
 <Para 
  <Unique 8186>
  <Pgf 
   <PgfTag `body'>
   <PgfUseNextTag No >
   <PgfNextTag `'>
   <PgfAlignment LeftRight >
   <PgfFIndent  0.0">
   <PgfLIndent  0.0">
   <PgfRIndent  0.0">
   <PgfTopSeparator `'>
   <PgfBotSeparator `'>
   <PgfPlacement Anywhere >
   <PgfPlacementStyle Normal >
   <PgfRunInDefaultPunct `. '>
   <PgfSpBefore  7.0 pt>
   <PgfSpAfter  0.0 pt>
   <PgfWithPrev No >
   <PgfWithNext No >
   <PgfBlockSize 2>
   <PgfFont 
    <FTag `'>
    <FFamily `Palatino'>
    <FVar `Regular'>
    <FWeight `Regular'>
    <FAngle `Regular'>
    <FPostScriptName `Palatino-Roman'>
    <FSize  10.0 pt>
    <FUnderlining FNoUnderlining >
    <FUnderline No >
    <FDoubleUnderline No >
    <FNumericUnderline No >
    <FOverline No >
    <FStrike No >
    <FChangeBar No >
    <FOutline No >
    <FShadow No >
    <FPairKern No >
    <FCase FAsTyped >
    <FPosition FNormal >
    <FSupScript No >
    <FSubScript No >
    <FDX  0.0 pt>
    <FDY  0.0 pt>
    <FDW  0.0 pt>
    <FSeparation 0>
    <FColor `Black'>
   > # end of PgfFont
   <PgfLineSpacing Fixed >
   <PgfLeading  2.0 pt>
   <PgfAutoNum No >
   <PgfNumTabs 0>
   <PgfHyphenate No >
   <HyphenMaxLines 2>
   <HyphenMinPrefix 2>
   <HyphenMinSuffix 2>
   <HyphenMinWord 5>
   <PgfLetterSpace No >
   <PgfMinWordSpace 75>
   <PgfOptWordSpace 100>
   <PgfMaxWordSpace 125>
   <PgfLanguage USEnglish >
   <PgfCellAlignment Top >
   <PgfCellMargins  0.0 pt 0.0 pt 0.0 pt 0.0 pt>
   <PgfCellLMarginFixed No >
   <PgfCellTMarginFixed No >
   <PgfCellRMarginFixed No >
   <PgfCellBMarginFixed No >
  > # end of Pgf
  <ParaLine 
   <TextRectID 2>
   <String `Copyright (c) 1994 Hewlett-Packard Company'>
  >
 > # end of Para
 <Para 
  <Unique 8187>
  <PgfTag `body'>
  <ParaLine 
   <String `Permission to use, copy, modify, distribute and sell this document for any '>
  >
  <ParaLine 
   <String `purpose is hereby granted without fee,'>
   <Char HardSpace >
   <String `provided that the above copyright '>
  >
  <ParaLine 
   <String `notice appear in all copies and that both that copyright notice and this '>
  >
  <ParaLine 
   <String `permission notice appear in supporting documentation.'>
  >
 > # end of Para
> # end of TextFlow
<TextFlow 
 <Notes 
 > # end of Notes
 <Para 
  <Unique 38855>
  <Pgf 
   <PgfTag `Body'>
   <PgfSpBefore  0.0 pt>
   <PgfBlockSize 1>
   <PgfFont 
    <FTag `'>
    <FFamily `Times'>
    <FVar `Regular'>
    <FWeight `Regular'>
    <FAngle `Regular'>
    <FPostScriptName `Times-Roman'>
    <FSize  12.0 pt>
    <FUnderlining FNoUnderlining >
    <FUnderline No >
    <FDoubleUnderline No >
    <FNumericUnderline No >
    <FOverline No >
    <FStrike No >
    <FChangeBar No >
    <FOutline No >
    <FShadow No >
    <FPairKern No >
    <FCase FAsTyped >
    <FPosition FNormal >
    <FSupScript No >
    <FSubScript No >
    <FDX  0.0 pt>
    <FDY  0.0 pt>
    <FDW  0.0 pt>
    <FSeparation 0>
    <FColor `Black'>
   > # end of PgfFont
   <PgfHyphenate Yes >
  > # end of Pgf
  <ParaLine 
   <TextRectID 4>
   <Font 
    <FTag `'>
    <FFamily `Palatino'>
    <FPostScriptName `Palatino-Roman'>
    <FSize  10.0 pt>
   > # end of Font
   <ATbl 16>
  >
 > # end of Para
> # end of TextFlow
<TextFlow 
 <Notes 
 > # end of Notes
 <Para 
  <Unique 38791>
  <PgfTag `body'>
  <ParaLine 
   <TextRectID 7>
   <String `At present, it is not possible to templatize a specialization. That is, we cannot write:'>
  >
 > # end of Para
 <Para 
  <Unique 38799>
  <PgfTag `program'>
  <ParaLine 
  >
 > # end of Para
 <Para 
  <Unique 38820>
  <PgfTag `program'>
  <ParaLine 
   <String `template <template <class U\> class Allocator = allocator\>'>
  >
 > # end of Para
 <Para 
  <Unique 38801>
  <PgfTag `program'>
  <ParaLine 
   <String `class vector<bool, Allocator\> { /* ... */ };'>
  >
 > # end of Para
 <Para 
  <Unique 40258>
  <PgfTag `body'>
  <ParaLine 
   <String `Therefore, only '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `vector<bool, allocator\>'>
   <Font 
    <FTag `'>
   > # end of Font
   <String ` is provided.'>
  >
 > # end of Para
> # end of TextFlow
<TextFlow 
 <TFTag `A'>
 <TFAutoConnect Yes >
 <Notes 
 > # end of Notes
 <Para 
  <Unique 69>
  <PgfTag `body'>
  <ParaLine 
   <TextRectID 20>
  >
 > # end of Para
> # end of TextFlow
<TextFlow 
 <Notes 
 > # end of Notes
 <Para 
  <Unique 106>
  <Pgf 
   <PgfTag `Body'>
   <PgfAlignment Center >
   <PgfSpBefore  0.0 pt>
   <PgfBlockSize 1>
   <PgfHyphenate Yes >
  > # end of Pgf
  <ParaLine 
   <TextRectID 21>
   <Variable 
    <VariableName `Current Page #'>
    <Unique 27>
   > # end of Variable
  >
 > # end of Para
> # end of TextFlow
<TextFlow 
 <TFTag `A'>
 <TFAutoConnect Yes >
 <Notes 
 > # end of Notes
 <Para 
  <Unique 30>
  <Pgf 
   <PgfAlignment LeftRight >
   <PgfFont 
    <FTag `'>
    <FFamily `Times'>
    <FVar `Regular'>
    <FWeight `Regular'>
    <FAngle `Regular'>
    <FPostScriptName `Times-Roman'>
    <FSize  12.0 pt>
    <FUnderlining FNoUnderlining >
    <FUnderline No >
    <FDoubleUnderline No >
    <FNumericUnderline No >
    <FOverline No >
    <FStrike No >
    <FChangeBar No >
    <FOutline No >
    <FShadow No >
    <FPairKern No >
    <FCase FAsTyped >
    <FPosition FNormal >
    <FSupScript No >
    <FSubScript No >
    <FDX  0.0 pt>
    <FDY  0.0 pt>
    <FDW  0.0 pt>
    <FSeparation 0>
    <FColor `Black'>
   > # end of PgfFont
  > # end of Pgf
  <ParaLine 
   <TextRectID 22>
  >
 > # end of Para
> # end of TextFlow
<TextFlow 
 <TFAutoConnect Yes >
 <Notes 
 > # end of Notes
 <Para 
  <Unique 101>
  <ParaLine 
   <TextRectID 23>
  >
 > # end of Para
> # end of TextFlow
<TextFlow 
 <Notes 
 > # end of Notes
 <Para 
  <Unique 135>
  <Pgf 
   <PgfAlignment Center >
   <PgfFont 
    <FTag `'>
    <FFamily `Palatino'>
    <FVar `Regular'>
    <FWeight `Regular'>
    <FAngle `Regular'>
    <FPostScriptName `Palatino-Roman'>
    <FSize  10.0 pt>
    <FUnderlining FNoUnderlining >
    <FUnderline No >
    <FDoubleUnderline No >
    <FNumericUnderline No >
    <FOverline No >
    <FStrike No >
    <FChangeBar No >
    <FOutline No >
    <FShadow No >
    <FPairKern No >
    <FCase FAsTyped >
    <FPosition FNormal >
    <FSupScript No >
    <FSubScript No >
    <FDX  0.0 pt>
    <FDY  0.0 pt>
    <FDW  0.0 pt>
    <FSeparation 0>
    <FColor `Black'>
   > # end of PgfFont
  > # end of Pgf
  <ParaLine 
   <TextRectID 24>
   <Variable 
    <VariableName `Current Page #'>
    <Unique 21>
   > # end of Variable
  >
 > # end of Para
> # end of TextFlow
<TextFlow 
 <TFTag `A'>
 <TFAutoConnect Yes >
 <Notes 
 > # end of Notes
 <Para 
  <Unique 33>
  <Pgf 
   <PgfAlignment LeftRight >
   <PgfFont 
    <FTag `'>
    <FFamily `Times'>
    <FVar `Regular'>
    <FWeight `Regular'>
    <FAngle `Regular'>
    <FPostScriptName `Times-Roman'>
    <FSize  12.0 pt>
    <FUnderlining FNoUnderlining >
    <FUnderline No >
    <FDoubleUnderline No >
    <FNumericUnderline No >
    <FOverline No >
    <FStrike No >
    <FChangeBar No >
    <FOutline No >
    <FShadow No >
    <FPairKern No >
    <FCase FAsTyped >
    <FPosition FNormal >
    <FSupScript No >
    <FSubScript No >
    <FDX  0.0 pt>
    <FDY  0.0 pt>
    <FDW  0.0 pt>
    <FSeparation 0>
    <FColor `Black'>
   > # end of PgfFont
  > # end of Pgf
  <ParaLine 
   <TextRectID 25>
  >
 > # end of Para
> # end of TextFlow
<TextFlow 
 <TFTag `TOC'>
 <Notes 
 > # end of Notes
 <Para 
  <Unique 40>
  <PgfTag `sectionTOC'>
  <ParaLine 
   <TextRectID 26>
   <String `<$paranum\> <$paratext\> '>
   <Char Tab >
   <String ` <$pagenum\>'>
  >
 > # end of Para
 <Para 
  <Unique 1469>
  <PgfTag `subsectionTOC'>
  <ParaLine 
   <String `<$paranum\> <$paratext\>'>
   <Char Tab >
   <Char Tab >
   <String ` <$pagenum\> '>
  >
 > # end of Para
 <Para 
  <Unique 1470>
  <PgfTag `subsubsectionTOC'>
  <ParaLine 
   <String `<$paranum\> <$paratext\> '>
   <Char Tab >
   <String ` <$pagenum\>'>
  >
 > # end of Para
 <Para 
  <Unique 36>
  <Pgf 
   <PgfTag `2HeadingTOC'>
   <PgfFIndent  0.375">
   <PgfLIndent  0.75">
   <PgfFont 
    <FTag `'>
    <FFamily `Times'>
    <FVar `Regular'>
    <FWeight `Regular'>
    <FAngle `Regular'>
    <FPostScriptName `Times-Roman'>
    <FSize  12.0 pt>
    <FUnderlining FNoUnderlining >
    <FUnderline No >
    <FDoubleUnderline No >
    <FNumericUnderline No >
    <FOverline No >
    <FStrike No >
    <FChangeBar No >
    <FOutline No >
    <FShadow No >
    <FPairKern Yes >
    <FCase FAsTyped >
    <FPosition FNormal >
    <FSupScript No >
    <FSubScript No >
    <FDX  0.0 pt>
    <FDY  0.0 pt>
    <FDW  0.0 pt>
    <FSeparation 0>
    <FColor `Black'>
   > # end of PgfFont
   <PgfNumTabs 1>
   <TabStop 
    <TSX  0.75">
    <TSType Left >
    <TSLeaderStr ` '>
   > # end of TabStop
  > # end of Pgf
  <ParaLine 
  >
 > # end of Para
 <Para 
  <Unique 31>
  <Pgf 
   <PgfTag `1HeadingTOC'>
   <PgfAlignment Left >
   <PgfFIndent  0.0">
   <PgfLIndent  0.375">
   <PgfSpBefore  6.0 pt>
   <PgfFont 
    <FTag `'>
    <FFamily `Times'>
    <FVar `Regular'>
    <FWeight `Regular'>
    <FAngle `Regular'>
    <FPostScriptName `Times-Roman'>
    <FSize  14.0 pt>
    <FUnderlining FNoUnderlining >
    <FUnderline No >
    <FDoubleUnderline No >
    <FNumericUnderline No >
    <FOverline No >
    <FStrike No >
    <FChangeBar No >
    <FOutline No >
    <FShadow No >
    <FPairKern Yes >
    <FCase FAsTyped >
    <FPosition FNormal >
    <FSupScript No >
    <FSubScript No >
    <FDX  0.0 pt>
    <FDY  0.0 pt>
    <FDW  0.0 pt>
    <FSeparation 0>
    <FColor `Black'>
   > # end of PgfFont
   <PgfNumTabs 1>
   <TabStop 
    <TSX  0.375">
    <TSType Left >
    <TSLeaderStr ` '>
   > # end of TabStop
  > # end of Pgf
  <ParaLine 
  >
 > # end of Para
> # end of TextFlow
<TextFlow 
 <TFTag `LOF'>
 <Notes 
 > # end of Notes
 <Para 
  <Unique 43>
  <Pgf 
   <PgfTag `FigureLOF'>
   <PgfLIndent  0.875">
   <PgfSpBefore  0.0 pt>
   <PgfFont 
    <FTag `'>
    <FFamily `Times'>
    <FVar `Regular'>
    <FWeight `Regular'>
    <FAngle `Regular'>
    <FPostScriptName `Times-Roman'>
    <FSize  10.0 pt>
    <FUnderlining FNoUnderlining >
    <FUnderline No >
    <FDoubleUnderline No >
    <FNumericUnderline No >
    <FOverline No >
    <FStrike No >
    <FChangeBar No >
    <FOutline No >
    <FShadow No >
    <FPairKern Yes >
    <FCase FAsTyped >
    <FPosition FNormal >
    <FSupScript No >
    <FSubScript No >
    <FDX  0.0 pt>
    <FDY  0.0 pt>
    <FDW  0.0 pt>
    <FSeparation 0>
    <FColor `Black'>
   > # end of PgfFont
   <PgfNumTabs 1>
   <TabStop 
    <TSX  0.875">
    <TSType Left >
    <TSLeaderStr ` '>
   > # end of TabStop
  > # end of Pgf
  <ParaLine 
   <TextRectID 27>
   <String `<$paranum\>'>
   <Char Tab >
   <String `<$paratext\>'>
   <Char EmSpace >
   <String `<$pagenum\>'>
  >
 > # end of Para
> # end of TextFlow
<TextFlow 
 <TFTag `LOT'>
 <Notes 
 > # end of Notes
 <Para 
  <Unique 103>
  <Pgf 
   <PgfTag `TableLOT'>
  > # end of Pgf
  <ParaLine 
   <TextRectID 28>
   <String `<$paranum\>'>
   <Char Tab >
   <String `<$paratext\>'>
   <Char EmSpace >
   <String `<$pagenum\>'>
  >
 > # end of Para
> # end of TextFlow
<TextFlow 
 <TFTag `IX'>
 <TFAutoConnect Yes >
 <Notes 
 > # end of Notes
 <Para 
  <Unique 35>
  <Pgf 
   <PgfTag `SeparatorsIX'>
   <PgfAlignment LeftRight >
   <PgfLIndent  0.0">
   <PgfFont 
    <FTag `'>
    <FFamily `Times'>
    <FVar `Regular'>
    <FWeight `Regular'>
    <FAngle `Regular'>
    <FPostScriptName `Times-Roman'>
    <FSize  9.0 pt>
    <FUnderlining FNoUnderlining >
    <FUnderline No >
    <FDoubleUnderline No >
    <FNumericUnderline No >
    <FOverline No >
    <FStrike No >
    <FChangeBar No >
    <FOutline No >
    <FShadow No >
    <FPairKern No >
    <FCase FAsTyped >
    <FPosition FNormal >
    <FSupScript No >
    <FSubScript No >
    <FDX  0.0 pt>
    <FDY  0.0 pt>
    <FDW  0.0 pt>
    <FSeparation 0>
    <FColor `Black'>
   > # end of PgfFont
   <PgfNumTabs 0>
  > # end of Pgf
  <ParaLine 
   <TextRectID 29>
   <Char EnSpace >
   <String `1, 2'>
   <Char EnDash >
   <String `3'>
  >
 > # end of Para
 <Para 
  <Unique 44>
  <Pgf 
   <PgfTag `SortOrderIX'>
  > # end of Pgf
  <ParaLine 
   <String `<$symbols\><$numerics\><$alphabetics\>'>
  >
 > # end of Para
 <Para 
  <Unique 45>
  <Pgf 
   <PgfTag `Level3IX'>
   <PgfAlignment Left >
   <PgfFIndent  0.25">
   <PgfLIndent  0.5">
   <PgfLeading  1.0 pt>
  > # end of Pgf
  <ParaLine 
   <String `Level3IX'>
  >
 > # end of Para
 <Para 
  <Unique 46>
  <Pgf 
   <PgfTag `Level2IX'>
   <PgfFIndent  0.125">
   <PgfLIndent  0.375">
  > # end of Pgf
  <ParaLine 
   <String `Level2IX'>
  >
 > # end of Para
 <Para 
  <Unique 47>
  <Pgf 
   <PgfTag `Level1IX'>
   <PgfFIndent  0.0">
   <PgfLIndent  0.25">
  > # end of Pgf
  <ParaLine 
   <String `Level1X'>
  >
 > # end of Para
 <Para 
  <Unique 48>
  <Pgf 
   <PgfTag `GroupTitlesIX'>
   <PgfLIndent  0.0">
   <PgfSpBefore  9.0 pt>
   <PgfWithNext Yes >
   <PgfFont 
    <FTag `'>
    <FFamily `Helvetica'>
    <FVar `Regular'>
    <FWeight `Bold'>
    <FAngle `Regular'>
    <FPostScriptName `Helvetica-Bold'>
    <FSize  9.0 pt>
    <FUnderlining FNoUnderlining >
    <FUnderline No >
    <FDoubleUnderline No >
    <FNumericUnderline No >
    <FOverline No >
    <FStrike No >
    <FChangeBar No >
    <FOutline No >
    <FShadow No >
    <FPairKern No >
    <FCase FAsTyped >
    <FPosition FNormal >
    <FSupScript No >
    <FSubScript No >
    <FDX  0.0 pt>
    <FDY  0.0 pt>
    <FDW  0.0 pt>
    <FSeparation 0>
    <FColor `Black'>
   > # end of PgfFont
   <PgfLeading  0.0 pt>
  > # end of Pgf
  <ParaLine 
   <String `Symbols[\\ ];Numerics[0];A;B;C;D;E;F;G;H;I;J;K;L;M;N;O;P;Q;R;S;T;U;V;W;X;Y;Z'>
  >
 > # end of Para
 <Para 
  <Unique 49>
  <Pgf 
   <PgfTag `IndexIX'>
   <PgfAlignment LeftRight >
   <PgfSpBefore  0.0 pt>
   <PgfWithNext No >
   <PgfFont 
    <FTag `'>
    <FFamily `Times'>
    <FVar `Regular'>
    <FWeight `Regular'>
    <FAngle `Regular'>
    <FPostScriptName `Times-Roman'>
    <FSize  9.0 pt>
    <FUnderlining FNoUnderlining >
    <FUnderline No >
    <FDoubleUnderline No >
    <FNumericUnderline No >
    <FOverline No >
    <FStrike No >
    <FChangeBar No >
    <FOutline No >
    <FShadow No >
    <FPairKern No >
    <FCase FAsTyped >
    <FPosition FNormal >
    <FSupScript No >
    <FSubScript No >
    <FDX  0.0 pt>
    <FDY  0.0 pt>
    <FDW  0.0 pt>
    <FSeparation 0>
    <FColor `Black'>
   > # end of PgfFont
   <PgfLeading  2.0 pt>
  > # end of Pgf
  <ParaLine 
   <String `<$pagenum\>'>
  >
 > # end of Para
 <Para 
  <Unique 50>
  <Pgf 
   <PgfTag `Paragraph'>
   <PgfFont 
    <FTag `'>
    <FFamily `Times'>
    <FVar `Regular'>
    <FWeight `Regular'>
    <FAngle `Regular'>
    <FPostScriptName `Times-Roman'>
    <FSize  12.0 pt>
    <FUnderlining FNoUnderlining >
    <FUnderline No >
    <FDoubleUnderline No >
    <FNumericUnderline No >
    <FOverline No >
    <FStrike No >
    <FChangeBar No >
    <FOutline No >
    <FShadow No >
    <FPairKern No >
    <FCase FAsTyped >
    <FPosition FNormal >
    <FSupScript No >
    <FSubScript No >
    <FDX  0.0 pt>
    <FDY  0.0 pt>
    <FDW  0.0 pt>
    <FSeparation 0>
    <FColor `Black'>
   > # end of PgfFont
  > # end of Pgf
  <ParaLine 
  >
 > # end of Para
> # end of TextFlow
<TextFlow 
 <TFTag `A'>
 <TFAutoConnect Yes >
 <Notes 
 > # end of Notes
 <Para 
  <Unique 8026>
  <PgfTag `body'>
  <ParaLine 
   <TextRectID 30>
  >
 > # end of Para
 <Para 
  <Unique 8027>
  <PgfTag `Title'>
  <ParaLine 
  >
 > # end of Para
 <Para 
  <Unique 37832>
  <PgfTag `Title'>
  <ParaLine 
  >
 > # end of Para
 <Para 
  <Unique 37833>
  <PgfTag `Title'>
  <ParaLine 
  >
 > # end of Para
 <Para 
  <Unique 37834>
  <PgfTag `Title'>
  <ParaLine 
  >
 > # end of Para
 <Para 
  <Unique 37835>
  <PgfTag `Title'>
  <ParaLine 
  >
 > # end of Para
 <Para 
  <Unique 37837>
  <PgfTag `Title'>
  <ParaLine 
  >
 > # end of Para
 <Para 
  <Unique 37838>
  <PgfTag `Title'>
  <ParaLine 
  >
 > # end of Para
 <Para 
  <Unique 8030>
  <PgfTag `Title'>
  <ParaLine 
  >
 > # end of Para
 <Para 
  <Unique 8031>
  <PgfTag `Title'>
  <ParaLine 
  >
 > # end of Para
 <Para 
  <Unique 8033>
  <PgfTag `Title'>
  <ParaLine 
  >
 > # end of Para
 <Para 
  <Unique 4264>
  <PgfTag `Title'>
  <ParaLine 
  >
 > # end of Para
 <Para 
  <Unique 4265>
  <PgfTag `Title'>
  <ParaLine 
   <String `The Standard Template Library'>
  >
 > # end of Para
 <Para 
  <Unique 4266>
  <PgfTag `Author'>
  <ParaLine 
  >
 > # end of Para
 <Para 
  <Unique 37842>
  <PgfTag `Author'>
  <ParaLine 
   <String `Alexander Stepanov'>
  >
 > # end of Para
 <Para 
  <Unique 9155>
  <PgfTag `TRnumber'>
  <Pgf 
   <PgfNextTag `Organization'>
   <PgfAlignment Center >
   <PgfSpBefore  1.0 pt>
   <PgfWithPrev Yes >
   <PgfFont 
    <FTag `'>
    <FFamily `Times'>
    <FVar `Regular'>
    <FWeight `Regular'>
    <FAngle `Italic'>
    <FPostScriptName `Times-Italic'>
    <FSize  12.0 pt>
    <FUnderlining FNoUnderlining >
    <FUnderline No >
    <FDoubleUnderline No >
    <FNumericUnderline No >
    <FOverline No >
    <FStrike No >
    <FChangeBar No >
    <FOutline No >
    <FShadow No >
    <FPairKern No >
    <FCase FAsTyped >
    <FPosition FNormal >
    <FSupScript No >
    <FSubScript No >
    <FDX  0.0 pt>
    <FDY  0.0 pt>
    <FDW  0.0 pt>
    <FSeparation 0>
    <FColor `Black'>
   > # end of PgfFont
  > # end of Pgf
  <ParaLine 
  >
 > # end of Para
 <Para 
  <Unique 9160>
  <PgfTag `TRnumber'>
  <Pgf 
   <PgfNextTag `Organization'>
   <PgfAlignment Center >
   <PgfSpBefore  1.0 pt>
   <PgfWithPrev Yes >
   <PgfFont 
    <FTag `'>
    <FFamily `Times'>
    <FVar `Regular'>
    <FWeight `Regular'>
    <FAngle `Italic'>
    <FPostScriptName `Times-Italic'>
    <FSize  12.0 pt>
    <FUnderlining FNoUnderlining >
    <FUnderline No >
    <FDoubleUnderline No >
    <FNumericUnderline No >
    <FOverline No >
    <FStrike No >
    <FChangeBar No >
    <FOutline No >
    <FShadow No >
    <FPairKern No >
    <FCase FAsTyped >
    <FPosition FNormal >
    <FSupScript No >
    <FSubScript No >
    <FDX  0.0 pt>
    <FDY  0.0 pt>
    <FDW  0.0 pt>
    <FSeparation 0>
    <FColor `Black'>
   > # end of PgfFont
  > # end of Pgf
  <ParaLine 
   <String `Silicon Graphics Inc.'>
  >
 > # end of Para
 <Para 
  <Unique 9156>
  <PgfTag `TRnumber'>
  <Pgf 
   <PgfNextTag `Organization'>
   <PgfAlignment Center >
   <PgfSpBefore  1.0 pt>
   <PgfWithPrev Yes >
   <PgfFont 
    <FTag `'>
    <FFamily `Times'>
    <FVar `Regular'>
    <FWeight `Regular'>
    <FAngle `Italic'>
    <FPostScriptName `Times-Italic'>
    <FSize  12.0 pt>
    <FUnderlining FNoUnderlining >
    <FUnderline No >
    <FDoubleUnderline No >
    <FNumericUnderline No >
    <FOverline No >
    <FStrike No >
    <FChangeBar No >
    <FOutline No >
    <FShadow No >
    <FPairKern No >
    <FCase FAsTyped >
    <FPosition FNormal >
    <FSupScript No >
    <FSubScript No >
    <FDX  0.0 pt>
    <FDY  0.0 pt>
    <FDW  0.0 pt>
    <FSeparation 0>
    <FColor `Black'>
   > # end of PgfFont
  > # end of Pgf
  <ParaLine 
   <String `2011 N. Shoreline Blvd.'>
  >
 > # end of Para
 <Para 
  <Unique 9157>
  <PgfTag `TRnumber'>
  <Pgf 
   <PgfNextTag `Organization'>
   <PgfAlignment Center >
   <PgfSpBefore  1.0 pt>
   <PgfWithPrev Yes >
   <PgfFont 
    <FTag `'>
    <FFamily `Times'>
    <FVar `Regular'>
    <FWeight `Regular'>
    <FAngle `Italic'>
    <FPostScriptName `Times-Italic'>
    <FSize  12.0 pt>
    <FUnderlining FNoUnderlining >
    <FUnderline No >
    <FDoubleUnderline No >
    <FNumericUnderline No >
    <FOverline No >
    <FStrike No >
    <FChangeBar No >
    <FOutline No >
    <FShadow No >
    <FPairKern No >
    <FCase FAsTyped >
    <FPosition FNormal >
    <FSupScript No >
    <FSubScript No >
    <FDX  0.0 pt>
    <FDY  0.0 pt>
    <FDW  0.0 pt>
    <FSeparation 0>
    <FColor `Black'>
   > # end of PgfFont
  > # end of Pgf
  <ParaLine 
   <String `Mt. View, CA 94043'>
  >
 > # end of Para
 <Para 
  <Unique 9178>
  <PgfTag `TRnumber'>
  <Pgf 
   <PgfNextTag `Organization'>
   <PgfAlignment Center >
   <PgfSpBefore  1.0 pt>
   <PgfWithPrev Yes >
   <PgfFont 
    <FTag `'>
    <FFamily `Times'>
    <FVar `Regular'>
    <FWeight `Regular'>
    <FAngle `Italic'>
    <FPostScriptName `Times-Italic'>
    <FSize  12.0 pt>
    <FUnderlining FNoUnderlining >
    <FUnderline No >
    <FDoubleUnderline No >
    <FNumericUnderline No >
    <FOverline No >
    <FStrike No >
    <FChangeBar No >
    <FOutline No >
    <FShadow No >
    <FPairKern No >
    <FCase FAsTyped >
    <FPosition FNormal >
    <FSupScript No >
    <FSubScript No >
    <FDX  0.0 pt>
    <FDY  0.0 pt>
    <FDW  0.0 pt>
    <FSeparation 0>
    <FColor `Black'>
   > # end of PgfFont
  > # end of Pgf
  <ParaLine 
   <String `stepanov@mti.sgi.com'>
  >
 > # end of Para
 <Para 
  <Unique 9150>
  <PgfTag `Author'>
  <ParaLine 
  >
 > # end of Para
 <Para 
  <Unique 9164>
  <PgfTag `Author'>
  <ParaLine 
   <String `Meng Lee'>
  >
 > # end of Para
 <Para 
  <Unique 37843>
  <PgfTag `TRnumber'>
  <Pgf 
   <PgfNextTag `Organization'>
   <PgfAlignment Center >
   <PgfSpBefore  1.0 pt>
   <PgfWithPrev Yes >
   <PgfFont 
    <FTag `'>
    <FFamily `Times'>
    <FVar `Regular'>
    <FWeight `Regular'>
    <FAngle `Italic'>
    <FPostScriptName `Times-Italic'>
    <FSize  12.0 pt>
    <FUnderlining FNoUnderlining >
    <FUnderline No >
    <FDoubleUnderline No >
    <FNumericUnderline No >
    <FOverline No >
    <FStrike No >
    <FChangeBar No >
    <FOutline No >
    <FShadow No >
    <FPairKern No >
    <FCase FAsTyped >
    <FPosition FNormal >
    <FSupScript No >
    <FSubScript No >
    <FDX  0.0 pt>
    <FDY  0.0 pt>
    <FDW  0.0 pt>
    <FSeparation 0>
    <FColor `Black'>
   > # end of PgfFont
  > # end of Pgf
  <ParaLine 
  >
 > # end of Para
 <Para 
  <Unique 37844>
  <PgfTag `TRnumber'>
  <Pgf 
   <PgfNextTag `Organization'>
   <PgfAlignment Center >
   <PgfSpBefore  1.0 pt>
   <PgfWithPrev Yes >
   <PgfFont 
    <FTag `'>
    <FFamily `Times'>
    <FVar `Regular'>
    <FWeight `Regular'>
    <FAngle `Italic'>
    <FPostScriptName `Times-Italic'>
    <FSize  12.0 pt>
    <FUnderlining FNoUnderlining >
    <FUnderline No >
    <FDoubleUnderline No >
    <FNumericUnderline No >
    <FOverline No >
    <FStrike No >
    <FChangeBar No >
    <FOutline No >
    <FShadow No >
    <FPairKern No >
    <FCase FAsTyped >
    <FPosition FNormal >
    <FSupScript No >
    <FSubScript No >
    <FDX  0.0 pt>
    <FDY  0.0 pt>
    <FDW  0.0 pt>
    <FSeparation 0>
    <FColor `Black'>
   > # end of PgfFont
  > # end of Pgf
  <ParaLine 
   <String `Hewlett-Packard Laboratories'>
  >
 > # end of Para
 <Para 
  <Unique 37845>
  <PgfTag `TRnumber'>
  <Pgf 
   <PgfNextTag `Organization'>
   <PgfAlignment Center >
   <PgfSpBefore  1.0 pt>
   <PgfWithPrev Yes >
   <PgfFont 
    <FTag `'>
    <FFamily `Times'>
    <FVar `Regular'>
    <FWeight `Regular'>
    <FAngle `Italic'>
    <FPostScriptName `Times-Italic'>
    <FSize  12.0 pt>
    <FUnderlining FNoUnderlining >
    <FUnderline No >
    <FDoubleUnderline No >
    <FNumericUnderline No >
    <FOverline No >
    <FStrike No >
    <FChangeBar No >
    <FOutline No >
    <FShadow No >
    <FPairKern No >
    <FCase FAsTyped >
    <FPosition FNormal >
    <FSupScript No >
    <FSubScript No >
    <FDX  0.0 pt>
    <FDY  0.0 pt>
    <FDW  0.0 pt>
    <FSeparation 0>
    <FColor `Black'>
   > # end of PgfFont
  > # end of Pgf
  <ParaLine 
   <String `1501 Page Mill Road'>
  >
 > # end of Para
 <Para 
  <Unique 37846>
  <PgfTag `TRnumber'>
  <Pgf 
   <PgfNextTag `Organization'>
   <PgfAlignment Center >
   <PgfSpBefore  1.0 pt>
   <PgfWithPrev Yes >
   <PgfFont 
    <FTag `'>
    <FFamily `Times'>
    <FVar `Regular'>
    <FWeight `Regular'>
    <FAngle `Italic'>
    <FPostScriptName `Times-Italic'>
    <FSize  12.0 pt>
    <FUnderlining FNoUnderlining >
    <FUnderline No >
    <FDoubleUnderline No >
    <FNumericUnderline No >
    <FOverline No >
    <FStrike No >
    <FChangeBar No >
    <FOutline No >
    <FShadow No >
    <FPairKern No >
    <FCase FAsTyped >
    <FPosition FNormal >
    <FSupScript No >
    <FSubScript No >
    <FDX  0.0 pt>
    <FDY  0.0 pt>
    <FDW  0.0 pt>
    <FSeparation 0>
    <FColor `Black'>
   > # end of PgfFont
  > # end of Pgf
  <ParaLine 
   <String `Palo Alto, CA 9430'>
   <Font 
    <FTag `Emphasis'>
   > # end of Font
   <String `4'>
  >
 > # end of Para
 <Para 
  <Unique 9186>
  <PgfTag `TRnumber'>
  <Pgf 
   <PgfNextTag `Organization'>
   <PgfAlignment Center >
   <PgfSpBefore  1.0 pt>
   <PgfWithPrev Yes >
   <PgfFont 
    <FTag `'>
    <FFamily `Times'>
    <FVar `Regular'>
    <FWeight `Regular'>
    <FAngle `Italic'>
    <FPostScriptName `Times-Italic'>
    <FSize  12.0 pt>
    <FUnderlining FNoUnderlining >
    <FUnderline No >
    <FDoubleUnderline No >
    <FNumericUnderline No >
    <FOverline No >
    <FStrike No >
    <FChangeBar No >
    <FOutline No >
    <FShadow No >
    <FPairKern No >
    <FCase FAsTyped >
    <FPosition FNormal >
    <FSupScript No >
    <FSubScript No >
    <FDX  0.0 pt>
    <FDY  0.0 pt>
    <FDW  0.0 pt>
    <FSeparation 0>
    <FColor `Black'>
   > # end of PgfFont
  > # end of Pgf
  <ParaLine 
   <String `lee@hpl.hp.com'>
   <Font 
    <FTag `Emphasis'>
   > # end of Font
  >
 > # end of Para
 <Para 
  <Unique 37828>
  <PgfTag `Title'>
  <ParaLine 
  >
 > # end of Para
 <Para 
  <Unique 8206>
  <PgfTag `Title'>
  <ParaLine 
  >
 > # end of Para
 <Para 
  <Unique 8207>
  <PgfTag `Title'>
  <ParaLine 
  >
 > # end of Para
 <Para 
  <Unique 8208>
  <PgfTag `Title'>
  <ParaLine 
  >
 > # end of Para
 <Para 
  <Unique 9221>
  <PgfTag `Title'>
  <ParaLine 
  >
 > # end of Para
 <Para 
  <Unique 8214>
  <PgfTag `Title'>
  <ParaLine 
  >
 > # end of Para
 <Para 
  <Unique 8215>
  <PgfTag `Title'>
  <ParaLine 
  >
 > # end of Para
 <Para 
  <Unique 8217>
  <PgfTag `Title'>
  <ParaLine 
  >
 > # end of Para
 <Para 
  <Unique 9787>
  <PgfTag `Title'>
  <ParaLine 
  >
 > # end of Para
 <Para 
  <Unique 9788>
  <PgfTag `cbody'>
  <ParaLine 
   <String `October 31, 1995'>
  >
 > # end of Para
 <Para 
  <Unique 9789>
  <PgfTag `Title'>
  <ParaLine 
  >
 > # end of Para
 <Para 
  <Unique 8221>
  <PgfTag `Title'>
  <ParaLine 
   <TextRectID 31>
  >
 > # end of Para
 <Para 
  <Unique 8222>
  <PgfTag `Title'>
  <ParaLine 
  >
 > # end of Para
 <Para 
  <Unique 8223>
  <PgfTag `Title'>
  <ParaLine 
  >
 > # end of Para
 <Para 
  <Unique 8224>
  <PgfTag `Title'>
  <ParaLine 
  >
 > # end of Para
 <Para 
  <Unique 8225>
  <PgfTag `Title'>
  <ParaLine 
  >
 > # end of Para
 <Para 
  <Unique 8226>
  <PgfTag `Title'>
  <ParaLine 
  >
 > # end of Para
 <Para 
  <Unique 8227>
  <PgfTag `Title'>
  <ParaLine 
  >
 > # end of Para
 <Para 
  <Unique 8228>
  <PgfTag `Title'>
  <ParaLine 
  >
 > # end of Para
 <Para 
  <Unique 8251>
  <PgfTag `Title'>
  <ParaLine 
  >
 > # end of Para
 <Para 
  <Unique 8252>
  <PgfTag `Title'>
  <ParaLine 
  >
 > # end of Para
 <Para 
  <Unique 8253>
  <PgfTag `Title'>
  <ParaLine 
  >
 > # end of Para
 <Para 
  <Unique 8254>
  <PgfTag `Title'>
  <ParaLine 
  >
 > # end of Para
 <Para 
  <Unique 8260>
  <PgfTag `Title'>
  <ParaLine 
  >
 > # end of Para
 <Para 
  <Unique 8275>
  <PgfTag `Title'>
  <ParaLine 
  >
 > # end of Para
 <Para 
  <Unique 38531>
  <PgfTag `Title'>
  <ParaLine 
   <AFrame 1>
  >
 > # end of Para
 <Para 
  <Unique 8259>
  <PgfTag `Title'>
  <ParaLine 
  >
 > # end of Para
 <Para 
  <Unique 38533>
  <PgfTag `body'>
  <ParaLine 
  >
 > # end of Para
 <Para 
  <Unique 38534>
  <PgfTag `body'>
  <ParaLine 
  >
 > # end of Para
 <Para 
  <Unique 38535>
  <PgfTag `body'>
  <ParaLine 
  >
 > # end of Para
 <Para 
  <Unique 38536>
  <PgfTag `body'>
  <ParaLine 
  >
 > # end of Para
 <Para 
  <Unique 38537>
  <PgfTag `body'>
  <ParaLine 
  >
 > # end of Para
 <Para 
  <Unique 38538>
  <PgfTag `body'>
  <ParaLine 
  >
 > # end of Para
 <Para 
  <Unique 38540>
  <PgfTag `body'>
  <ParaLine 
  >
 > # end of Para
 <Para 
  <Unique 38541>
  <PgfTag `body'>
  <ParaLine 
  >
 > # end of Para
 <Para 
  <Unique 38542>
  <PgfTag `body'>
  <ParaLine 
  >
 > # end of Para
 <Para 
  <Unique 38543>
  <PgfTag `body'>
  <ParaLine 
  >
 > # end of Para
 <Para 
  <Unique 38544>
  <PgfTag `body'>
  <ParaLine 
  >
 > # end of Para
 <Para 
  <Unique 8323>
  <PgfTag `body'>
  <ParaLine 
  >
 > # end of Para
 <Para 
  <Unique 9801>
  <PgfTag `body'>
  <ParaLine 
  >
 > # end of Para
 <Para 
  <Unique 9898>
  <PgfTag `sectionTOC'>
  <ParaLine 
   <TextRectID 32>
   <String `1 '>
   <String `Introduction '>
   <Char Tab >
   <String ` 3'>
  >
 > # end of Para
 <Para 
  <Unique 9899>
  <PgfTag `sectionTOC'>
  <ParaLine 
   <String `2 '>
   <String `S'>
   <String `tructure of the library '>
   <Char Tab >
   <String ` 3'>
  >
 > # end of Para
 <Para 
  <Unique 9900>
  <PgfTag `sectionTOC'>
  <ParaLine 
   <String `3 '>
   <String `Requirements '>
   <Char Tab >
   <String ` 4'>
  >
 > # end of Para
 <Para 
  <Unique 9901>
  <PgfTag `sectionTOC'>
  <ParaLine 
   <String `4 '>
   <String `Core components '>
   <Char Tab >
   <String ` 5'>
  >
 > # end of Para
 <Para 
  <Unique 9902>
  <PgfTag `subsectionTOC'>
  <ParaLine 
   <String `4.1 '>
   <String `Operators'>
   <Char Tab >
   <Char Tab >
   <String ` 5'>
  >
 > # end of Para
 <Para 
  <Unique 9903>
  <PgfTag `subsectionTOC'>
  <ParaLine 
   <String `4.2 '>
   <String `Pair'>
   <Char Tab >
   <Char Tab >
   <String ` 5'>
  >
 > # end of Para
 <Para 
  <Unique 9904>
  <PgfTag `sectionTOC'>
  <ParaLine 
   <String `5 '>
   <String `I'>
   <String `terators '>
   <Char Tab >
   <String ` 6'>
  >
 > # end of Para
 <Para 
  <Unique 9905>
  <PgfTag `subsectionTOC'>
  <ParaLine 
   <String `5.1 '>
   <String `Input iterators'>
   <Char Tab >
   <Char Tab >
   <String ` 7'>
  >
 > # end of Para
 <Para 
  <Unique 9906>
  <PgfTag `subsectionTOC'>
  <ParaLine 
   <String `5.2 '>
   <String `Output iterators'>
   <Char Tab >
   <Char Tab >
   <String ` 8'>
  >
 > # end of Para
 <Para 
  <Unique 9907>
  <PgfTag `subsectionTOC'>
  <ParaLine 
   <String `5.3 '>
   <String `Forward iterators'>
   <Char Tab >
   <Char Tab >
   <String ` 8'>
  >
 > # end of Para
 <Para 
  <Unique 9908>
  <PgfTag `subsectionTOC'>
  <ParaLine 
   <String `5.4 '>
   <String `Bidirectional iterators'>
   <Char Tab >
   <Char Tab >
   <String ` 9'>
  >
 > # end of Para
 <Para 
  <Unique 9909>
  <PgfTag `subsectionTOC'>
  <ParaLine 
   <String `5.5 '>
   <String `Random access iterators'>
   <Char Tab >
   <Char Tab >
   <String ` 10'>
  >
 > # end of Para
 <Para 
  <Unique 9910>
  <PgfTag `subsectionTOC'>
  <ParaLine 
   <String `5.6 '>
   <String `Iterator tags'>
   <Char Tab >
   <Char Tab >
   <String ` 10'>
  >
 > # end of Para
 <Para 
  <Unique 9911>
  <PgfTag `subsubsectionTOC'>
  <ParaLine 
   <String `5.6.1 '>
   <String `Examples of using iterator tags '>
   <Char Tab >
   <String ` 11'>
  >
 > # end of Para
 <Para 
  <Unique 9912>
  <PgfTag `subsubsectionTOC'>
  <ParaLine 
   <String `5.6.2 '>
   <String `Library defined primitives '>
   <Char Tab >
   <String ` 12'>
  >
 > # end of Para
 <Para 
  <Unique 9913>
  <PgfTag `subsectionTOC'>
  <ParaLine 
   <String `5.7 '>
   <String `Iterator operations'>
   <Char Tab >
   <Char Tab >
   <String ` 14'>
  >
 > # end of Para
 <Para 
  <Unique 9914>
  <PgfTag `sectionTOC'>
  <ParaLine 
   <String `6 '>
   <String `Function objects '>
   <Char Tab >
   <String ` 14'>
  >
 > # end of Para
 <Para 
  <Unique 9915>
  <PgfTag `subsectionTOC'>
  <ParaLine 
   <String `6.1 '>
   <String `Base'>
   <Char Tab >
   <Char Tab >
   <String ` 14'>
  >
 > # end of Para
 <Para 
  <Unique 9916>
  <PgfTag `subsectionTOC'>
  <ParaLine 
   <String `6.2 '>
   <String `Arithmetic operations'>
   <Char Tab >
   <Char Tab >
   <String ` 15'>
  >
 > # end of Para
 <Para 
  <Unique 9917>
  <PgfTag `subsectionTOC'>
  <ParaLine 
   <String `6.3 '>
   <String `Comparisons'>
   <Char Tab >
   <Char Tab >
   <String ` 15'>
  >
 > # end of Para
 <Para 
  <Unique 9918>
  <PgfTag `subsectionTOC'>
  <ParaLine 
   <String `6.4 '>
   <String `Logical operations'>
   <Char Tab >
   <Char Tab >
   <String ` 16'>
  >
 > # end of Para
 <Para 
  <Unique 9919>
  <PgfTag `sectionTOC'>
  <ParaLine 
   <String `7 '>
   <String `Allocators '>
   <Char Tab >
   <String ` 16'>
  >
 > # end of Para
 <Para 
  <Unique 9920>
  <PgfTag `subsectionTOC'>
  <ParaLine 
   <String `7.1 '>
   <String `Allocator requirements'>
   <Char Tab >
   <Char Tab >
   <String ` 16'>
  >
 > # end of Para
 <Para 
  <Unique 9921>
  <PgfTag `subsectionTOC'>
  <ParaLine 
   <String `7.2 '>
   <String `The default allocator'>
   <Char Tab >
   <Char Tab >
   <String ` 18'>
  >
 > # end of Para
 <Para 
  <Unique 9922>
  <PgfTag `sectionTOC'>
  <ParaLine 
   <String `8 '>
   <String `Containers '>
   <Char Tab >
   <String ` 18'>
  >
 > # end of Para
 <Para 
  <Unique 9923>
  <PgfTag `subsectionTOC'>
  <ParaLine 
   <String `8.1 '>
   <String `Sequences'>
   <Char Tab >
   <Char Tab >
   <String ` 21'>
  >
 > # end of Para
 <Para 
  <Unique 9924>
  <PgfTag `subsubsectionTOC'>
  <ParaLine 
   <String `8.1.1 '>
   <String `Vector '>
   <Char Tab >
   <String ` 22'>
  >
 > # end of Para
 <Para 
  <Unique 9925>
  <PgfTag `subsubsectionTOC'>
  <ParaLine 
   <String `8.1.2 '>
   <String `List '>
   <Char Tab >
   <String ` 26'>
  >
 > # end of Para
 <Para 
  <Unique 9926>
  <PgfTag `subsubsectionTOC'>
  <ParaLine 
   <String `8.1.3 '>
   <String `Deque '>
   <Char Tab >
   <String ` 28'>
  >
 > # end of Para
 <Para 
  <Unique 9927>
  <PgfTag `subsectionTOC'>
  <ParaLine 
   <String `8.2 '>
   <String `Associative containers'>
   <Char Tab >
   <Char Tab >
   <String ` 30'>
  >
 > # end of Para
 <Para 
  <Unique 9928>
  <PgfTag `subsubsectionTOC'>
  <ParaLine 
   <String `8.2.1 '>
   <String `Set '>
   <Char Tab >
   <String ` 33'>
  >
 > # end of Para
 <Para 
  <Unique 9929>
  <PgfTag `subsubsectionTOC'>
  <ParaLine 
   <String `8.2.2 '>
   <String `Multiset '>
   <Char Tab >
   <String ` 34'>
  >
 > # end of Para
 <Para 
  <Unique 9930>
  <PgfTag `subsubsectionTOC'>
  <ParaLine 
   <String `8.2.3 '>
   <String `Map '>
   <Char Tab >
   <String ` 36'>
  >
 > # end of Para
 <Para 
  <Unique 9931>
  <PgfTag `subsubsectionTOC'>
  <ParaLine 
   <String `8.2.4 '>
   <String `Multimap '>
   <Char Tab >
   <String ` 38'>
  >
 > # end of Para
 <Para 
  <Unique 9932>
  <PgfTag `sectionTOC'>
  <ParaLine 
   <String `9 '>
   <String `Stream iterators '>
   <Char Tab >
   <String ` 39'>
  >
 > # end of Para
 <Para 
  <Unique 9933>
  <PgfTag `subsectionTOC'>
  <ParaLine 
   <String `9.1 '>
   <String `Istream Iterator'>
   <Char Tab >
   <Char Tab >
   <String ` 40'>
  >
 > # end of Para
 <Para 
  <Unique 9934>
  <PgfTag `subsectionTOC'>
  <ParaLine 
   <String `9.2 '>
   <String `Ostream iterator'>
   <Char Tab >
   <Char Tab >
   <String ` 40'>
  >
 > # end of Para
 <Para 
  <Unique 9935>
  <PgfTag `sectionTOC'>
  <ParaLine 
   <String `10 '>
   <String `Algorithms '>
   <Char Tab >
   <String ` 41'>
  >
 > # end of Para
 <Para 
  <Unique 9936>
  <PgfTag `subsectionTOC'>
  <ParaLine 
   <String `10.1 '>
   <String `Non-mutating sequence operations'>
   <Char Tab >
   <Char Tab >
   <String ` 41'>
  >
 > # end of Para
 <Para 
  <Unique 9937>
  <PgfTag `subsubsectionTOC'>
  <ParaLine 
   <String `10.1.1 '>
   <String `For each '>
   <Char Tab >
   <String ` 41'>
  >
 > # end of Para
 <Para 
  <Unique 9938>
  <PgfTag `subsubsectionTOC'>
  <ParaLine 
   <String `10.1.2 '>
   <String `Find '>
   <Char Tab >
   <String ` 41'>
  >
 > # end of Para
 <Para 
  <Unique 9939>
  <PgfTag `subsubsectionTOC'>
  <ParaLine 
   <String `10.1.3 '>
   <String `Adjacent find '>
   <Char Tab >
   <String ` 41'>
  >
 > # end of Para
 <Para 
  <Unique 9940>
  <PgfTag `subsubsectionTOC'>
  <ParaLine 
   <String `10.1.4 '>
   <String `Count '>
   <Char Tab >
   <String ` 42'>
  >
 > # end of Para
 <Para 
  <Unique 9941>
  <PgfTag `subsubsectionTOC'>
  <ParaLine 
   <String `10.1.5 '>
   <String `Mismatch '>
   <Char Tab >
   <String ` 42'>
  >
 > # end of Para
 <Para 
  <Unique 9942>
  <PgfTag `subsubsectionTOC'>
  <ParaLine 
   <String `10.1.6 '>
   <String `Equal '>
   <Char Tab >
   <String ` 42'>
  >
 > # end of Para
 <Para 
  <Unique 9943>
  <PgfTag `subsubsectionTOC'>
  <ParaLine 
   <String `10.1.7 '>
   <String `Search '>
   <Char Tab >
   <String ` 42'>
  >
 > # end of Para
 <Para 
  <Unique 9944>
  <PgfTag `subsectionTOC'>
  <ParaLine 
   <String `10.2 '>
   <String `Mutating sequence operations'>
   <Char Tab >
   <Char Tab >
   <String ` 43'>
  >
 > # end of Para
 <Para 
  <Unique 9945>
  <PgfTag `subsubsectionTOC'>
  <ParaLine 
   <String `10.2.1 '>
   <String `Copy '>
   <Char Tab >
   <String ` 43'>
  >
 > # end of Para
 <Para 
  <Unique 9946>
  <PgfTag `subsubsectionTOC'>
  <ParaLine 
   <String `10.2.2 '>
   <String `Swap '>
   <Char Tab >
   <String ` 43'>
  >
 > # end of Para
 <Para 
  <Unique 9947>
  <PgfTag `subsubsectionTOC'>
  <ParaLine 
   <TextRectID 33>
   <String `10.2.3 '>
   <String `Transform '>
   <Char Tab >
   <String ` 44'>
  >
 > # end of Para
 <Para 
  <Unique 9948>
  <PgfTag `subsubsectionTOC'>
  <ParaLine 
   <String `10.2.4 '>
   <String `Replace '>
   <Char Tab >
   <String ` 44'>
  >
 > # end of Para
 <Para 
  <Unique 9949>
  <PgfTag `subsubsectionTOC'>
  <ParaLine 
   <String `10.2.5 '>
   <String `Fill '>
   <Char Tab >
   <String ` 44'>
  >
 > # end of Para
 <Para 
  <Unique 9950>
  <PgfTag `subsubsectionTOC'>
  <ParaLine 
   <String `10.2.6 '>
   <String `Generate '>
   <Char Tab >
   <String ` 44'>
  >
 > # end of Para
 <Para 
  <Unique 9951>
  <PgfTag `subsubsectionTOC'>
  <ParaLine 
   <String `10.2.7 '>
   <String `Remove '>
   <Char Tab >
   <String ` 45'>
  >
 > # end of Para
 <Para 
  <Unique 9952>
  <PgfTag `subsubsectionTOC'>
  <ParaLine 
   <String `10.2.8 '>
   <String `Unique '>
   <Char Tab >
   <String ` 45'>
  >
 > # end of Para
 <Para 
  <Unique 9953>
  <PgfTag `subsubsectionTOC'>
  <ParaLine 
   <String `10.2.9 '>
   <String `Reverse '>
   <Char Tab >
   <String ` 46'>
  >
 > # end of Para
 <Para 
  <Unique 9954>
  <PgfTag `subsubsectionTOC'>
  <ParaLine 
   <String `10.2.10 '>
   <String `Rotate '>
   <Char Tab >
   <String ` 46'>
  >
 > # end of Para
 <Para 
  <Unique 9955>
  <PgfTag `subsubsectionTOC'>
  <ParaLine 
   <String `10.2.11 '>
   <String `Random shuffle '>
   <Char Tab >
   <String ` 46'>
  >
 > # end of Para
 <Para 
  <Unique 9956>
  <PgfTag `subsubsectionTOC'>
  <ParaLine 
   <String `10.2.12 '>
   <String `Partitions '>
   <Char Tab >
   <String ` 47'>
  >
 > # end of Para
 <Para 
  <Unique 9957>
  <PgfTag `subsectionTOC'>
  <ParaLine 
   <String `10.3 '>
   <String `Sorting and related operations'>
   <Char Tab >
   <Char Tab >
   <String ` 47'>
  >
 > # end of Para
 <Para 
  <Unique 9958>
  <PgfTag `subsubsectionTOC'>
  <ParaLine 
   <String `10.3.1 '>
   <String `Sort '>
   <Char Tab >
   <String ` 47'>
  >
 > # end of Para
 <Para 
  <Unique 9959>
  <PgfTag `subsubsectionTOC'>
  <ParaLine 
   <String `10.3.2 '>
   <String `Nth element '>
   <Char Tab >
   <String ` 48'>
  >
 > # end of Para
 <Para 
  <Unique 9960>
  <PgfTag `subsubsectionTOC'>
  <ParaLine 
   <String `10.3.3 '>
   <String `Binary search '>
   <Char Tab >
   <String ` 48'>
  >
 > # end of Para
 <Para 
  <Unique 9961>
  <PgfTag `subsubsectionTOC'>
  <ParaLine 
   <String `10.3.4 '>
   <String `Merge '>
   <Char Tab >
   <String ` 49'>
  >
 > # end of Para
 <Para 
  <Unique 9962>
  <PgfTag `subsubsectionTOC'>
  <ParaLine 
   <String `10.3.5 '>
   <String `Set operations on sorted structures '>
   <Char Tab >
   <String ` 50'>
  >
 > # end of Para
 <Para 
  <Unique 9963>
  <PgfTag `subsubsectionTOC'>
  <ParaLine 
   <String `10.3.6 '>
   <String `Heap operations '>
   <Char Tab >
   <String ` 51'>
  >
 > # end of Para
 <Para 
  <Unique 9964>
  <PgfTag `subsubsectionTOC'>
  <ParaLine 
   <String `10.3.7 '>
   <String `Minimum and maximum '>
   <Char Tab >
   <String ` 52'>
  >
 > # end of Para
 <Para 
  <Unique 9965>
  <PgfTag `subsubsectionTOC'>
  <ParaLine 
   <String `10.3.8 '>
   <String `Lexicographical comparison '>
   <Char Tab >
   <String ` 53'>
  >
 > # end of Para
 <Para 
  <Unique 9966>
  <PgfTag `subsubsectionTOC'>
  <ParaLine 
   <String `10.3.9 '>
   <String `Permutation generators '>
   <Char Tab >
   <String ` 53'>
  >
 > # end of Para
 <Para 
  <Unique 9967>
  <PgfTag `subsectionTOC'>
  <ParaLine 
   <String `10.4 '>
   <String `Generalized numeric operations'>
   <Char Tab >
   <Char Tab >
   <String ` 54'>
  >
 > # end of Para
 <Para 
  <Unique 9968>
  <PgfTag `subsubsectionTOC'>
  <ParaLine 
   <String `10.4.1 '>
   <String `Accumulate '>
   <Char Tab >
   <String ` 54'>
  >
 > # end of Para
 <Para 
  <Unique 9969>
  <PgfTag `subsubsectionTOC'>
  <ParaLine 
   <String `10.4.2 '>
   <String `Inner product '>
   <Char Tab >
   <String ` 54'>
  >
 > # end of Para
 <Para 
  <Unique 9970>
  <PgfTag `subsubsectionTOC'>
  <ParaLine 
   <String `10.4.3 '>
   <String `Partial sum '>
   <Char Tab >
   <String ` 54'>
  >
 > # end of Para
 <Para 
  <Unique 9971>
  <PgfTag `subsubsectionTOC'>
  <ParaLine 
   <String `10.4.4 '>
   <String `Adjacent difference '>
   <Char Tab >
   <String ` 54'>
  >
 > # end of Para
 <Para 
  <Unique 9972>
  <PgfTag `sectionTOC'>
  <ParaLine 
   <String `11 '>
   <String `Adaptors '>
   <Char Tab >
   <String ` 55'>
  >
 > # end of Para
 <Para 
  <Unique 9973>
  <PgfTag `subsectionTOC'>
  <ParaLine 
   <String `11.1 '>
   <String `Container adaptors'>
   <Char Tab >
   <Char Tab >
   <String ` 55'>
  >
 > # end of Para
 <Para 
  <Unique 9974>
  <PgfTag `subsubsectionTOC'>
  <ParaLine 
   <String `11.1.1 '>
   <String `Stack '>
   <Char Tab >
   <String ` 55'>
  >
 > # end of Para
 <Para 
  <Unique 9975>
  <PgfTag `subsubsectionTOC'>
  <ParaLine 
   <String `11.1.2 '>
   <String `Queue '>
   <Char Tab >
   <String ` 55'>
  >
 > # end of Para
 <Para 
  <Unique 9976>
  <PgfTag `subsubsectionTOC'>
  <ParaLine 
   <String `11.1.3 '>
   <String `Priority queue '>
   <Char Tab >
   <String ` 56'>
  >
 > # end of Para
 <Para 
  <Unique 9977>
  <PgfTag `subsectionTOC'>
  <ParaLine 
   <String `11.2 '>
   <String `Iterator adaptors'>
   <Char Tab >
   <Char Tab >
   <String ` 57'>
  >
 > # end of Para
 <Para 
  <Unique 9978>
  <PgfTag `subsubsectionTOC'>
  <ParaLine 
   <String `11.2.1 '>
   <String `Reverse iterators '>
   <Char Tab >
   <String ` 57'>
  >
 > # end of Para
 <Para 
  <Unique 9979>
  <PgfTag `subsubsectionTOC'>
  <ParaLine 
   <String `11.2.2 '>
   <String `I'>
   <String `nsert iterators '>
   <Char Tab >
   <String ` 59'>
  >
 > # end of Para
 <Para 
  <Unique 9980>
  <PgfTag `subsectionTOC'>
  <ParaLine 
   <String `11.3 '>
   <String `F'>
   <String `unction adaptors'>
   <Char Tab >
   <Char Tab >
   <String ` 60'>
  >
 > # end of Para
 <Para 
  <Unique 9981>
  <PgfTag `subsubsectionTOC'>
  <ParaLine 
   <String `11.3.1 '>
   <String `Negators '>
   <Char Tab >
   <String ` 61'>
  >
 > # end of Para
 <Para 
  <Unique 9982>
  <PgfTag `subsubsectionTOC'>
  <ParaLine 
   <String `11.3.2 '>
   <String `Binders '>
   <Char Tab >
   <String ` 61'>
  >
 > # end of Para
 <Para 
  <Unique 9983>
  <PgfTag `subsubsectionTOC'>
  <ParaLine 
   <String `11.3.3 '>
   <String `Adaptors for pointers to functions '>
   <Char Tab >
   <String ` 62'>
  >
 > # end of Para
 <Para 
  <Unique 9984>
  <PgfTag `sectionTOC'>
  <ParaLine 
   <String `12 '>
   <String `Memory Handlin'>
   <String `g P'>
   <String `rimitives '>
   <Char Tab >
   <String ` 63'>
  >
 > # end of Para
 <Para 
  <Unique 9986>
  <PgfTag `sectionTOC'>
  <ParaLine 
   <String `13 Bibliography '>
   <Char Tab >
   <String ` 63'>
  >
 > # end of Para
 <Para 
  <Unique 9893>
  <PgfTag `sectionTOC'>
  <ParaLine 
  >
 > # end of Para
 <Para 
  <Unique 10533>
  <PgfTag `sectionTOC'>
  <ParaLine 
  >
 > # end of Para
 <Para 
  <Unique 9989>
  <PgfTag `sectionTOC'>
  <ParaLine 
  >
 > # end of Para
 <Para 
  <Unique 9894>
  <PgfTag `sectionTOC'>
  <ParaLine 
  >
 > # end of Para
 <Para 
  <Unique 8136>
  <PgfTag `sectionTOC'>
  <ParaLine 
  >
 > # end of Para
 <Para 
  <Unique 37877>
  <PgfTag `body'>
  <ParaLine 
  >
 > # end of Para
 <Para 
  <Unique 37872>
  <PgfTag `section'>
  <PgfNumString `1  '>
  <ParaLine 
   <TextRectID 34>
   <String `Introduction'>
  >
 > # end of Para
 <Para 
  <Unique 3786>
  <PgfTag `body'>
  <ParaLine 
   <String `The Standard Template Library provides a set of well structured generic C++ components that work '>
  >
  <ParaLine 
   <String `together in a seamless way. Special care has been taken to ensure that all the template algorithms work not '>
  >
  <ParaLine 
   <String `only on the data structures in the library, but also on built-in C++ data structures. For example, all the '>
  >
  <ParaLine 
   <String `algorithms work on regular pointers. The orthogonal design of the library allows programmers to use '>
  >
  <ParaLine 
   <String `library data structures with their own algorithms, and to use library algorithms with their own data '>
  >
  <ParaLine 
   <String `structures. The well specified semantic and complexity requirements guarantee that a user component will '>
  >
  <ParaLine 
   <String `work with the library, and that it will work efficiently. This flexibility ensures the widespread utility of the '>
  >
  <ParaLine 
   <String `library.'>
  >
 > # end of Para
 <Para 
  <Unique 540>
  <PgfTag `body'>
  <ParaLine 
   <String `Another important consideration is efficiency. C++ is successful because it combines expressive power with '>
  >
  <ParaLine 
   <String `efficiency. Much effort has been spent to verify that every template component in the library has a generic '>
  >
  <ParaLine 
   <String `implementation that performs within a few percentage points of the efficiency of the corresponding hand '>
  >
  <ParaLine 
   <String `coded routine. '>
  >
 > # end of Para
 <Para 
  <Unique 258>
  <PgfTag `body'>
  <ParaLine 
   <String `The third consideration in the design has been to develop a library structure that, while being natural and '>
  >
  <ParaLine 
   <String `easy to grasp, is based on a firm theoretical foundation'>
   <String `.'>
  >
 > # end of Para
 <Para 
  <Unique 29051>
  <PgfTag `section'>
  <PgfNumString `2  '>
  <ParaLine 
   <String `S'>
   <String `tructure of the library'>
  >
 > # end of Para
 <Para 
  <Unique 36135>
  <PgfTag `body'>
  <ParaLine 
   <String `The library contains five main kinds of components: '>
  >
 > # end of Para
 <Para 
  <Unique 34261>
  <PgfTag `bullet2'>
  <PgfNumString `\xd0 \t'>
  <ParaLine 
   <String `algorithm: defines a computational procedure.'>
  >
 > # end of Para
 <Para 
  <Unique 29242>
  <PgfTag `bullet2'>
  <PgfNumString `\xd0 \t'>
  <ParaLine 
   <String `container: manages a set of memory locations.'>
  >
 > # end of Para
 <Para 
  <Unique 1696>
  <PgfTag `bullet2'>
  <PgfNumString `\xd0 \t'>
  <ParaLine 
   <String `iterator: provides a means for an algorithm to traverse through a container.'>
  >
 > # end of Para
 <Para 
  <Unique 29248>
  <PgfTag `bullet2'>
  <PgfNumString `\xd0 \t'>
  <ParaLine 
   <String `function object: encapsulates a function in an object for use by other components.'>
  >
 > # end of Para
 <Para 
  <Unique 33241>
  <PgfTag `bullet2'>
  <PgfNumString `\xd0 \t'>
  <ParaLine 
   <String `adaptor: adapts a component to provide a different interface.'>
  >
 > # end of Para
 <Para 
  <Unique 1699>
  <PgfTag `body'>
  <ParaLine 
   <String `Such decomposition allows us to dramatically reduce the component space. For example, instead of '>
  >
  <ParaLine 
   <String `providing a search member function for every kind of container we provide a single version that works '>
  >
  <ParaLine 
   <String `with all of them as long as a basic set of requirements is satisfied. '>
  >
 > # end of Para
 <Para 
  <Unique 1717>
  <PgfTag `body'>
  <ParaLine 
   <String `The following description helps clarify the structure of the library. If software components are tabulated as '>
  >
  <ParaLine 
   <String `a three-dimensional array, where one dimension represents different data types (e.g. int, double), the '>
  >
  <ParaLine 
   <String `second dimension represents different containers (e.g. vector, linked-list, file), and the third dimension '>
  >
  <ParaLine 
   <String `represents different algorithms on the containers (e.g. searching, sorting, rotation), if '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `i'>
   <Font 
    <FTag `'>
   > # end of Font
   <String `, '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `j'>
   <Font 
    <FTag `'>
   > # end of Font
   <String `, and '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `k'>
   <Font 
    <FTag `'>
   > # end of Font
   <String ` are the size '>
  >
  <ParaLine 
   <String `of the dimensions, then '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `i*j*k'>
   <Font 
    <FTag `'>
   > # end of Font
   <String ` different versions of code have to be designed. By using template functions '>
  >
  <ParaLine 
   <String `that are parameterized by a data type, we need only '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `j*k'>
   <Font 
    <FTag `'>
   > # end of Font
   <String ` versions. Further, by making our algorithms work '>
  >
  <ParaLine 
   <String `on different containers, we need merely '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `j+k'>
   <Font 
    <FTag `'>
   > # end of Font
   <String ` versions. This significantly simplifies software design work '>
  >
  <ParaLine 
   <String `and also makes it possible to use components in the library together with user defined components in a very '>
  >
  <ParaLine 
   <String `flexible way. A user may easily define a specialized container class and use the library\xd5 s sort function to sort '>
  >
  <ParaLine 
   <String `it. A user may provide a different comparison function for the sort either as a regular pointer to a '>
  >
  <ParaLine 
   <String `comparison function, or as a function object (an object with an '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `operator()'>
   <Font 
    <FTag `'>
   > # end of Font
   <String ` defined) that does the '>
  >
  <ParaLine 
   <String `comparisons. If a user needs to iterate through a container in the reverse direction, the '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `reverse_iterator'>
   <Font 
    <FTag `'>
   > # end of Font
   <String ` '>
  >
  <ParaLine 
   <String `adaptor allows that.'>
  >
 > # end of Para
 <Para 
  <Unique 1701>
  <PgfTag `body'>
  <ParaLine 
   <String `The library extends the basic C++ paradigms in a consistent way, so it is easy for a C/C++ programmer to '>
  >
  <ParaLine 
   <String `start using the library. For example, the library contains a '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `merge'>
   <Font 
    <FTag `'>
   > # end of Font
   <String ` template function. When a user has two '>
  >
  <ParaLine 
   <String `arrays '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `a'>
   <Font 
    <FTag `'>
   > # end of Font
   <String ` and '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `b'>
   <Font 
    <FTag `'>
   > # end of Font
   <String ` to be merged into '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `c'>
   <Font 
    <FTag `'>
   > # end of Font
   <String ` it can be done with:'>
  >
 > # end of Para
 <Para 
  <Unique 1703>
  <PgfTag `program'>
  <ParaLine 
  >
 > # end of Para
 <Para 
  <Unique 1702>
  <PgfTag `program'>
  <ParaLine 
   <String `int a[1000];'>
  >
 > # end of Para
 <Para 
  <Unique 1704>
  <PgfTag `program'>
  <ParaLine 
   <String `int b[2000];'>
  >
 > # end of Para
 <Para 
  <Unique 1705>
  <PgfTag `program'>
  <ParaLine 
   <String `int c[3000];'>
  >
 > # end of Para
 <Para 
  <Unique 1709>
  <PgfTag `program'>
  <ParaLine 
   <String `...'>
  >
 > # end of Para
 <Para 
  <Unique 1706>
  <PgfTag `program'>
  <ParaLine 
   <String `merge(a, a + 1000, b, b + 2000, c);'>
  >
 > # end of Para
 <Para 
  <Unique 1708>
  <PgfTag `body'>
  <ParaLine 
   <TextRectID 35>
   <String `When a user wants to merge a vector and a list (both of which are template classes in the library) and put '>
  >
  <ParaLine 
   <String `the result into a freshly allocated uninitialized storage it can be done with:'>
  >
 > # end of Para
 <Para 
  <Unique 1710>
  <PgfTag `program'>
  <ParaLine 
  >
 > # end of Para
 <Para 
  <Unique 1777>
  <PgfTag `program'>
  <ParaLine 
   <String `vector<Employee\> a;'>
  >
 > # end of Para
 <Para 
  <Unique 1711>
  <PgfTag `program'>
  <ParaLine 
   <String `list<Employee\> b;'>
  >
 > # end of Para
 <Para 
  <Unique 39749>
  <PgfTag `program'>
  <ParaLine 
   <String `...'>
  >
 > # end of Para
 <Para 
  <Unique 39745>
  <PgfTag `program'>
  <ParaLine 
   <String `Employee* c = allocate(a.size() + b.size(), (Employee*)0);'>
  >
 > # end of Para
 <Para 
  <Unique 1713>
  <PgfTag `program'>
  <ParaLine 
   <String `merge(a.begin(), a.end(), b.begin(), b.end(), '>
  >
 > # end of Para
 <Para 
  <Unique 39755>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <String `raw_storage_iterator<Employee*, Employee\>(c));'>
  >
 > # end of Para
 <Para 
  <Unique 39760>
  <PgfTag `body'>
  <ParaLine 
   <String `where '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `begin()'>
   <Font 
    <FTag `'>
   > # end of Font
   <String ` and '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `end()'>
   <Font 
    <FTag `'>
   > # end of Font
   <String ` are member functions of containers that return the right types of iterators or '>
  >
  <ParaLine 
   <String `pointer-like objects that allow the merge to do the job and '>
   <Font 
    <FTag `'>
    <FFamily `Courier'>
    <FPostScriptName `Courier'>
    <FSize  9.0 pt>
   > # end of Font
   <String `raw_storage_iterator'>
   <Font 
    <FTag `'>
   > # end of Font
   <String ` is an adapter that allows '>
  >
  <ParaLine 
   <String `algorithms to put results directly into uninitialized memory by calling the appropriate copy constructor. '>
  >
 > # end of Para
 <Para 
  <Unique 39761>
  <PgfTag `body'>
  <ParaLine 
   <String `In many cases it is useful to iterate through input/output streams in the same way as through regular data '>
  >
  <ParaLine 
   <String `structures. For example, if we want to merge two data structures and then store them in a file, it would be '>
  >
  <ParaLine 
   <String `nice to avoid creation of an auxiliary data structure for the result, instead storing the result directly into the '>
  >
  <ParaLine 
   <String `corresponding file. The library provides both '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `istream_iterator'>
   <Font 
    <FTag `'>
   > # end of Font
   <String ` and '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `ostream_iterator'>
   <Font 
    <FTag `'>
   > # end of Font
   <String ` template classes '>
  >
  <ParaLine 
   <String `to make many of the library algorithms work with I/O streams that represent homogenous aggregates of '>
  >
  <ParaLine 
   <String `data. Here is a program that reads a file of integers from the standard input, removes all those that are '>
  >
  <ParaLine 
   <String `divisible by its command argument, and writes the result to the standard output:'>
  >
 > # end of Para
 <Para 
  <Unique 1741>
  <PgfTag `program'>
  <ParaLine 
  >
 > # end of Para
 <Para 
  <Unique 1731>
  <PgfTag `program'>
  <ParaLine 
   <String `main(int argc, char** argv) {'>
  >
 > # end of Para
 <Para 
  <Unique 1733>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <String `if (argc != 2) throw(\xd3 usage: remove_if_divides integer\\n\xd3 );'>
  >
 > # end of Para
 <Para 
  <Unique 1737>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <String `remove_copy_if(istream_iterator<int\>(cin), istream_iterator<int\>(),'>
  >
 > # end of Para
 <Para 
  <Unique 1738>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <Char Tab >
   <String `ostream_iterator<int\>(cout, \xd3 \\n\xd3 ),'>
  >
 > # end of Para
 <Para 
  <Unique 29014>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <Char Tab >
   <String `not1(bind2nd(modulus<int\>(), atoi(argv[1]))));'>
  >
 > # end of Para
 <Para 
  <Unique 1739>
  <PgfTag `program'>
  <ParaLine 
   <String `}'>
  >
 > # end of Para
 <Para 
  <Unique 38344>
  <PgfTag `body'>
  <ParaLine 
   <String `All the work is done by '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `remove_copy_if'>
   <Font 
    <FTag `'>
   > # end of Font
   <String ` which reads integers one by one until the input iterator becomes '>
  >
  <ParaLine 
   <String `equal to the '>
   <Font 
    <FTag `Emphasis'>
   > # end of Font
   <String `end-of-stream'>
   <Font 
    <FTag `'>
   > # end of Font
   <String ` iterator that is constructed by the constructor with no arguments. (In general, all '>
  >
  <ParaLine 
   <String `the algorithms work in a \xd2 from here to there\xd3  fashion taking two iterators that signify the beginning and '>
  >
  <ParaLine 
   <String `the end of the input.) Then '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `remove_copy_if'>
   <Font 
    <FTag `'>
   > # end of Font
   <String ` writes the integers that pass the test onto the output stream '>
  >
  <ParaLine 
   <String `through the output iterator that is bound to '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `cout'>
   <Font 
    <FTag `'>
   > # end of Font
   <String `. As a predicate, '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `remove_copy_if'>
   <Font 
    <FTag `'>
   > # end of Font
   <String ` uses a function object '>
  >
  <ParaLine 
   <String `constructed from a function object, '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `modulus<int\>'>
   <Font 
    <FTag `'>
   > # end of Font
   <String `, which takes '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `i'>
   <Font 
    <FTag `'>
   > # end of Font
   <String ` and '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `j'>
   <Font 
    <FTag `'>
   > # end of Font
   <String ` and returns '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `i%j'>
   <Font 
    <FTag `'>
   > # end of Font
   <String `, as a binary '>
  >
  <ParaLine 
   <String `predicate and makes it into a unary predicate by using '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `bind2nd'>
   <Font 
    <FTag `'>
   > # end of Font
   <String ` to bind the second argument to the '>
  >
  <ParaLine 
   <String `command line argument, '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `atoi(argv[1])'>
   <Font 
    <FTag `'>
   > # end of Font
   <String `. Then the negation of this unary predicate is obtained using '>
  >
  <ParaLine 
   <String `function adaptor '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `not1'>
   <Font 
    <FTag `'>
   > # end of Font
   <String `.'>
  >
 > # end of Para
 <Para 
  <Unique 31919>
  <PgfTag `body'>
  <ParaLine 
   <String `A somewhat more realistic example is a filter program that takes a file and randomly shuffles its lines.'>
  >
 > # end of Para
 <Para 
  <Unique 1718>
  <PgfTag `program'>
  <ParaLine 
   <String `main(int argc, char**) {'>
  >
 > # end of Para
 <Para 
  <Unique 38841>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <String `if (argc != 1) throw(\xd3 usage: shuffle\\n\xd3 );'>
  >
 > # end of Para
 <Para 
  <Unique 1723>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <String `vector<string\> v;'>
  >
 > # end of Para
 <Para 
  <Unique 1724>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <String `copy(istream_iterator<string\>(cin), istream_iterator<string\>(),'>
  >
 > # end of Para
 <Para 
  <Unique 1725>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <Char Tab >
   <String `inserter(v, v.end()));'>
  >
 > # end of Para
 <Para 
  <Unique 1726>
  <PgfTag `program'>
  <ParaLine 
   <String ` '>
   <Char Tab >
   <String `random_shuffle(v.begin(), v.end());'>
  >
 > # end of Para
 <Para 
  <Unique 1727>
  <PgfTag `program'>
  <ParaLine 
   <String ` '>
   <Char Tab >
   <String `copy(v.begin(), v.end(), ostream_iterator<string\>(cout));'>
  >
 > # end of Para
 <Para 
  <Unique 1728>
  <PgfTag `program'>
  <Pgf 
   <PgfWithPrev Yes >
  > # end of Pgf
  <ParaLine 
   <String `}'>
  >
 > # end of Para
 <Para 
  <Unique 28408>
  <PgfTag `body'>
  <ParaLine 
   <String `In this example, '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `copy'>
   <Font 
    <FTag `'>
   > # end of Font
   <String ` moves lines from the standard input into a vector, but since the vector is not pre-'>
  >
  <ParaLine 
   <String `allocated it uses an insert iterator to insert the lines one by one into the vector. (This technique allows all of '>
  >
  <ParaLine 
   <String `the copying functions to work in the usual overwrite mode as well as in the insert mode.) Then '>
  >
  <ParaLine 
   <Font 
    <FTag `program'>
   > # end of Font
   <String `random_shuffle'>
   <Font 
    <FTag `'>
   > # end of Font
   <String ` shuffles the vector and another call to '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `copy'>
   <Font 
    <FTag `'>
   > # end of Font
   <String ` copies it onto the '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `cout'>
   <Font 
    <FTag `'>
   > # end of Font
   <String ` stream.'>
   <Marker 
    <MType 9>
    <MText `33027: section: 4 Requirements'>
    <MCurrPage 5>
    <Unique 28409>
   > # end of Marker
  >
 > # end of Para
 <Para 
  <Unique 28414>
  <PgfTag `section'>
  <PgfNumString `3  '>
  <ParaLine 
   <String `Requirements'>
  >
 > # end of Para
 <Para 
  <Unique 28415>
  <PgfTag `body'>
  <ParaLine 
   <String `To ensure that the different components in a library work together, they must satisfy some basic '>
  >
  <ParaLine 
   <String `requirements. Requirements should be as general as possible, so instead of saying \xd2 class '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `X'>
   <Font 
    <FTag `'>
   > # end of Font
   <String ` has to define a '>
  >
  <ParaLine 
   <TextRectID 36>
   <String `member function '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `operator++(),\xd3 '>
   <Font 
    <FTag `'>
   > # end of Font
   <String ` we say \xd2 for any object '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `x'>
   <Font 
    <FTag `'>
   > # end of Font
   <String ` of class '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `X'>
   <Font 
    <FTag `'>
   > # end of Font
   <String `, '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `++x'>
   <Font 
    <FTag `'>
   > # end of Font
   <String ` is defined.\xd3  (It is unspecified '>
  >
  <ParaLine 
   <String `whether the operator is a member or a global function.) Requirements are stated in terms of well-defined '>
  >
  <ParaLine 
   <String `expressions, which define valid terms of the types that satisfy the requirements. For every set of '>
  >
  <ParaLine 
   <String `requirements there is a table that specifies an initial set of the valid expressions and their semantics. Any '>
  >
  <ParaLine 
   <String `generic algorithm that uses the requirements has to be written in terms of the valid expressions for its '>
  >
  <ParaLine 
   <String `formal type parameters.'>
  >
 > # end of Para
 <Para 
  <Unique 28601>
  <PgfTag `body'>
  <ParaLine 
   <String `If an operation is required to be linear time, it means no worse than linear time, and a constant time '>
  >
  <ParaLine 
   <String `operation satisfies the requirement.'>
  >
 > # end of Para
 <Para 
  <Unique 33245>
  <PgfTag `body'>
  <ParaLine 
   <String `In some cases we present the semantic requirements using C++ code. Such code is intended as a '>
  >
  <ParaLine 
   <String `specification of equivalence of a construct to another construct, not necessarily as the way the construct '>
  >
  <ParaLine 
   <String `must be implemented (although in some cases the code given is unambiguously the optimum '>
  >
  <ParaLine 
   <String `implementation).'>
  >
 > # end of Para
 <Para 
  <Unique 30999>
  <PgfTag `section'>
  <PgfNumString `4  '>
  <ParaLine 
   <String `Core components'>
  >
 > # end of Para
 <Para 
  <Unique 33246>
  <PgfTag `body'>
  <ParaLine 
   <String `This section contains some basic template functions and classes that are used throughout the rest of the '>
  >
  <ParaLine 
   <String `library.'>
  >
 > # end of Para
 <Para 
  <Unique 28410>
  <PgfTag `subsection'>
  <PgfNumString `4.1 '>
  <ParaLine 
   <String `Operators'>
  >
 > # end of Para
 <Para 
  <Unique 33259>
  <PgfTag `body'>
  <ParaLine 
   <String `To avoid redundant definitions of '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `operator!='>
   <Font 
    <FTag `'>
   > # end of Font
   <String ` out of '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `operator=='>
   <Font 
    <FTag `'>
   > # end of Font
   <String ` and '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `operators\>'>
   <Font 
    <FTag `'>
   > # end of Font
   <String `, '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `<='>
   <Font 
    <FTag `'>
   > # end of Font
   <String `, and '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `\>='>
   <Font 
    <FTag `'>
   > # end of Font
   <String ` out of '>
  >
  <ParaLine 
   <Font 
    <FTag `program'>
   > # end of Font
   <String `operator<'>
   <Font 
    <FTag `'>
   > # end of Font
   <String ` the library provides the following:'>
  >
 > # end of Para
 <Para 
  <Unique 28297>
  <PgfTag `program'>
  <ParaLine 
  >
 > # end of Para
 <Para 
  <Unique 28298>
  <PgfTag `program'>
  <ParaLine 
   <String `template <class T'>
   <String `1, class T2'>
   <String `\>'>
  >
 > # end of Para
 <Para 
  <Unique 28299>
  <PgfTag `program'>
  <ParaLine 
   <String `inline bool operator!=(const T'>
   <String `1'>
   <String `& x, const T'>
   <String `2'>
   <String `& y) {'>
  >
 > # end of Para
 <Para 
  <Unique 28300>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <String `return !(x == y);'>
  >
 > # end of Para
 <Para 
  <Unique 28301>
  <PgfTag `program'>
  <ParaLine 
   <String `}'>
  >
 > # end of Para
 <Para 
  <Unique 28302>
  <PgfTag `program'>
  <ParaLine 
  >
 > # end of Para
 <Para 
  <Unique 28303>
  <PgfTag `program'>
  <ParaLine 
   <String `template <class T'>
   <String `1, class T2'>
   <String `\>'>
  >
 > # end of Para
 <Para 
  <Unique 28304>
  <PgfTag `program'>
  <ParaLine 
   <String `inline bool operator\>(const T'>
   <String `1'>
   <String `& x, const T'>
   <String `2'>
   <String `& y) {'>
  >
 > # end of Para
 <Para 
  <Unique 28305>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <String `return y < x;'>
  >
 > # end of Para
 <Para 
  <Unique 28306>
  <PgfTag `program'>
  <ParaLine 
   <String `}'>
  >
 > # end of Para
 <Para 
  <Unique 28307>
  <PgfTag `program'>
  <ParaLine 
  >
 > # end of Para
 <Para 
  <Unique 28308>
  <PgfTag `program'>
  <ParaLine 
   <String `template <class T'>
   <String `1, class T2'>
   <String `\>'>
  >
 > # end of Para
 <Para 
  <Unique 28309>
  <PgfTag `program'>
  <ParaLine 
   <String `inline bool operator<=(const T'>
   <String `1'>
   <String `& x, const T'>
   <String `2'>
   <String `& y) {'>
  >
 > # end of Para
 <Para 
  <Unique 28310>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <String `return !(y < x);'>
  >
 > # end of Para
 <Para 
  <Unique 28311>
  <PgfTag `program'>
  <ParaLine 
   <String `}'>
  >
 > # end of Para
 <Para 
  <Unique 28312>
  <PgfTag `program'>
  <ParaLine 
  >
 > # end of Para
 <Para 
  <Unique 28313>
  <PgfTag `program'>
  <ParaLine 
   <String `template <class T'>
   <String `1, class T2'>
   <String `\>'>
  >
 > # end of Para
 <Para 
  <Unique 28314>
  <PgfTag `program'>
  <ParaLine 
   <String `inline bool operator\>=(const T'>
   <String `1'>
   <String `& x, const T'>
   <String `2'>
   <String `& y) {'>
  >
 > # end of Para
 <Para 
  <Unique 28315>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <String `return !(x < y);'>
  >
 > # end of Para
 <Para 
  <Unique 28316>
  <PgfTag `program'>
  <ParaLine 
   <String `}'>
  >
 > # end of Para
 <Para 
  <Unique 8531>
  <PgfTag `subsection'>
  <PgfNumString `4.2 '>
  <ParaLine 
   <String `Pair'>
  >
 > # end of Para
 <Para 
  <Unique 8532>
  <PgfTag `body'>
  <ParaLine 
   <String `The library includes templates for heterogeneous '>
   <String `pairs of values.'>
  >
 > # end of Para
 <Para 
  <Unique 8533>
  <PgfTag `program'>
  <ParaLine 
  >
 > # end of Para
 <Para 
  <Unique 7428>
  <PgfTag `program'>
  <ParaLine 
   <String `template <class T1, class T2\>'>
  >
 > # end of Para
 <Para 
  <Unique 28379>
  <PgfTag `program'>
  <ParaLine 
   <String `struct pair {'>
  >
 > # end of Para
 <Para 
  <Unique 28380>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <String `T1 first;'>
  >
 > # end of Para
 <Para 
  <Unique 28381>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <String `T2 second;'>
  >
 > # end of Para
 <Para 
  <Unique 9260>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <String `pair() {}'>
  >
 > # end of Para
 <Para 
  <Unique 28382>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <String `pair(const T1& x, const T2& y) : first(x), second(y) {}'>
  >
 > # end of Para
 <Para 
  <Unique 28383>
  <PgfTag `program'>
  <ParaLine 
   <String `};'>
  >
 > # end of Para
 <Para 
  <Unique 28384>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
  >
 > # end of Para
 <Para 
  <Unique 28385>
  <PgfTag `program'>
  <ParaLine 
   <String `template <class T1, class T2\>'>
  >
 > # end of Para
 <Para 
  <Unique 28386>
  <PgfTag `program'>
  <ParaLine 
   <TextRectID 37>
   <String `inline bool operator==(const pair<T1, T2\>& x, const pair<T1, T2\>& y) {'>
  >
 > # end of Para
 <Para 
  <Unique 28387>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <String `return x.first == y.first && x.second == y.second;'>
  >
 > # end of Para
 <Para 
  <Unique 28388>
  <PgfTag `program'>
  <ParaLine 
   <String `}'>
  >
 > # end of Para
 <Para 
  <Unique 28389>
  <PgfTag `program'>
  <ParaLine 
  >
 > # end of Para
 <Para 
  <Unique 28390>
  <PgfTag `program'>
  <ParaLine 
   <String `template <class T1, class T2\>'>
  >
 > # end of Para
 <Para 
  <Unique 28391>
  <PgfTag `program'>
  <ParaLine 
   <String `inline bool operator<(const pair<T1, T2\>& x, const pair<T1, T2\>& y) {'>
  >
 > # end of Para
 <Para 
  <Unique 28392>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <String `return x.first < y.first || (!(y.first < x.first) && x.second < y.second);'>
  >
 > # end of Para
 <Para 
  <Unique 28393>
  <PgfTag `program'>
  <ParaLine 
   <String `}'>
  >
 > # end of Para
 <Para 
  <Unique 7436>
  <PgfTag `body'>
  <ParaLine 
   <String `The library provides a matching template function '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `make_pair'>
   <Font 
    <FTag `'>
   > # end of Font
   <String ` to simplify their construction. Instead of '>
  >
  <ParaLine 
   <String `saying, for example,'>
  >
 > # end of Para
 <Para 
  <Unique 7437>
  <PgfTag `program'>
  <ParaLine 
  >
 > # end of Para
 <Para 
  <Unique 7438>
  <PgfTag `program'>
  <ParaLine 
   <String `return pair<int, double\>(5, 3.1415926); // explicit types'>
  >
 > # end of Para
 <Para 
  <Unique 7439>
  <PgfTag `body'>
  <ParaLine 
   <String `one may say'>
  >
 > # end of Para
 <Para 
  <Unique 7440>
  <PgfTag `program'>
  <ParaLine 
  >
 > # end of Para
 <Para 
  <Unique 7441>
  <PgfTag `program'>
  <ParaLine 
   <String `return make_pair(5, 3.1415926); // types are deduced'>
  >
 > # end of Para
 <Para 
  <Unique 7447>
  <PgfTag `program'>
  <ParaLine 
  >
 > # end of Para
 <Para 
  <Unique 28395>
  <PgfTag `program'>
  <ParaLine 
   <String `template <class T1, class T2\> '>
  >
 > # end of Para
 <Para 
  <Unique 7430>
  <PgfTag `program'>
  <ParaLine 
   <String `inline pair<T1, T2\> make_pair(const T1& x, const T2& y) {'>
  >
 > # end of Para
 <Para 
  <Unique 7431>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <String `return pair<T1, T2\>(x, y);'>
  >
 > # end of Para
 <Para 
  <Unique 7432>
  <PgfTag `section'>
  <PgfNumString `5  '>
  <ParaLine 
   <String `I'>
   <String `terators'>
  >
 > # end of Para
 <Para 
  <Unique 30672>
  <PgfTag `body'>
  <ParaLine 
   <String `Iterators are a generalization of pointers that allow a programmer to work with different data structures '>
  >
  <ParaLine 
   <String `(containers) in a uniform manner. To be able to construct template algorithms that work correctly and '>
  >
  <ParaLine 
   <String `efficiently on different types of data structures, we need to formalize not just the interfaces but also the '>
  >
  <ParaLine 
   <String `semantics and complexity assumptions of iterators. Iterators are objects that have '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `operator*'>
   <Font 
    <FTag `'>
   > # end of Font
   <String ` returning a '>
  >
  <ParaLine 
   <String `value of some class or built-in type '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `T'>
   <Font 
    <FTag `'>
   > # end of Font
   <String ` called a '>
   <Font 
    <FTag `Emphasis'>
   > # end of Font
   <String `value type'>
   <Font 
    <FTag `'>
   > # end of Font
   <String ` of the iterator. For every iterator type '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `X'>
   <Font 
    <FTag `'>
   > # end of Font
   <String ` for which '>
  >
  <ParaLine 
   <String `equality is defined, there is a corresponding signed integral type called the '>
   <Font 
    <FTag `Emphasis'>
   > # end of Font
   <String `distance type'>
   <Font 
    <FTag `'>
   > # end of Font
   <String ` of the iterator. '>
  >
 > # end of Para
 <Para 
  <Unique 31010>
  <PgfTag `body'>
  <ParaLine 
   <String `Since iterators are a generalization of pointers, their semantics is a generalization of the semantics of '>
  >
  <ParaLine 
   <String `pointers in C++. This assures that every template function that takes iterators works with regular pointers. '>
  >
  <ParaLine 
   <String `Depending on the operations defined on them, there are five categories of iterators: '>
   <Font 
    <FTag `Emphasis'>
   > # end of Font
   <String `input iterators, output '>
  >
  <ParaLine 
   <String `iterators,'>
   <Font 
    <FTag `'>
   > # end of Font
   <String ` '>
   <Font 
    <FTag `Emphasis'>
   > # end of Font
   <String `forward iterators'>
   <Font 
    <FTag `'>
   > # end of Font
   <String `, '>
   <Font 
    <FTag `Emphasis'>
   > # end of Font
   <String `bidirectional iterators'>
   <Font 
    <FTag `'>
   > # end of Font
   <String ` and '>
   <Font 
    <FTag `Emphasis'>
   > # end of Font
   <String `random access iterators'>
   <Font 
    <FTag `'>
   > # end of Font
   <String `. Forward iterators satisfy all the '>
  >
  <ParaLine 
   <String `requirements of the input and output iterators and can be used whenever either kind is specified. '>
  >
  <ParaLine 
   <String `Bidirectional iterators satisfy all the requirements of the forward iterators and can be used whenever a '>
  >
  <ParaLine 
   <String `forward iterator is specified. Random access iterators satisfy all the requirements of bidirectional iterators '>
  >
  <ParaLine 
   <String `and can be used whenever a bidirectional iterator is specified. There is an additional attribute that forward, '>
  >
  <ParaLine 
   <String `bidirectional and random access iterators might have, that is, they can be '>
   <Font 
    <FTag `Emphasis'>
   > # end of Font
   <String `mutable'>
   <Font 
    <FTag `'>
   > # end of Font
   <String ` or '>
   <Font 
    <FTag `Emphasis'>
   > # end of Font
   <String `constant'>
   <Font 
    <FTag `'>
   > # end of Font
   <String ` depending on '>
  >
  <ParaLine 
   <String `whether the result of the '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `operator*'>
   <Font 
    <FTag `'>
   > # end of Font
   <String ` behaves as a reference or as a reference to a constant. Constant iterators '>
  >
  <ParaLine 
   <String `do not satisfy the requirements for output iterators.'>
  >
 > # end of Para
 <Para 
  <Unique 15832>
  <PgfTag `body'>
  <ParaLine 
   <AFrame 3>
  >
 > # end of Para
 <Para 
  <Unique 16774>
  <PgfTag `body'>
  <ParaLine 
   <String `Just as a regular pointer to an array guarantees that there is a pointer value pointing past the last element '>
  >
  <ParaLine 
   <String `of the array, so for any iterator type there is an iterator value that points past the last element of a '>
  >
  <ParaLine 
   <String `corresponding container. These values are called '>
   <Font 
    <FTag `Emphasis'>
   > # end of Font
   <String `past-the-end'>
   <Font 
    <FTag `'>
   > # end of Font
   <String ` values. Values of the iterator for which the '>
  >
  <ParaLine 
   <Font 
    <FTag `program'>
   > # end of Font
   <String `operator*'>
   <Font 
    <FTag `'>
   > # end of Font
   <String ` is defined are called '>
   <Font 
    <FTag `Emphasis'>
   > # end of Font
   <String `dereferenceable'>
   <Font 
    <FTag `'>
   > # end of Font
   <String `. The library never assumes that past-the-end values are '>
  >
  <ParaLine 
   <String `dereferenceable. Iterators might also have '>
   <Font 
    <FTag `Emphasis'>
   > # end of Font
   <String `singular'>
   <Font 
    <FTag `'>
   > # end of Font
   <String ` values that are not associated with any container. For '>
  >
  <ParaLine 
   <TextRectID 38>
   <String `example, after the declaration of an uninitialized pointer '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `x'>
   <Font 
    <FTag `'>
   > # end of Font
   <String ` (as with '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `int* x;'>
   <Font 
    <FTag `'>
   > # end of Font
   <String `), '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `x'>
   <Font 
    <FTag `'>
   > # end of Font
   <String ` should always be assumed '>
  >
  <ParaLine 
   <String `to have a singular value of a pointer. Results of most expressions are undefined for singular values. The '>
  >
  <ParaLine 
   <String `only exception is an assignment of a non-singular value to an iterator that holds a singular value. In this '>
  >
  <ParaLine 
   <String `case the singular value is overwritten the same way as any other value. Dereferenceable and past-the-end '>
  >
  <ParaLine 
   <String `values are always non-singular. '>
  >
 > # end of Para
 <Para 
  <Unique 37705>
  <PgfTag `body'>
  <ParaLine 
   <String `An iterator '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `j'>
   <Font 
    <FTag `'>
   > # end of Font
   <String ` is called '>
   <Font 
    <FTag `Emphasis'>
   > # end of Font
   <String `reachable'>
   <Font 
    <FTag `'>
   > # end of Font
   <String ` from an iterator '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `i'>
   <Font 
    <FTag `'>
   > # end of Font
   <String ` if'>
   <String ` '>
   <String `and only if t'>
   <String `here is a finite sequence of applications of '>
  >
  <ParaLine 
   <Font 
    <FTag `program'>
   > # end of Font
   <String `operator++'>
   <Font 
    <FTag `'>
   > # end of Font
   <String ` to '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `i'>
   <Font 
    <FTag `'>
   > # end of Font
   <String ` that makes '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `i == j'>
   <Font 
    <FTag `'>
   > # end of Font
   <String `. If '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `i'>
   <Font 
    <FTag `'>
   > # end of Font
   <String ` and '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `j'>
   <Font 
    <FTag `'>
   > # end of Font
   <String ` '>
   <String `r'>
   <String `efer to the same container'>
   <String `, then either '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `j'>
   <Font 
    <FTag `'>
   > # end of Font
   <String ` is reachable from '>
  >
  <ParaLine 
   <Font 
    <FTag `program'>
   > # end of Font
   <String `i'>
   <Font 
    <FTag `'>
   > # end of Font
   <String `, or '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `i'>
   <Font 
    <FTag `'>
   > # end of Font
   <String ` is reachable from '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `j'>
   <Font 
    <FTag `'>
   > # end of Font
   <String `, or both ('>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `i == j'>
   <Font 
    <FTag `'>
   > # end of Font
   <String `).'>
  >
 > # end of Para
 <Para 
  <Unique 16416>
  <PgfTag `body'>
  <ParaLine 
   <String `Most of the library\xd5 s algorithmic templates that operate on data structures have interfaces that use ranges. '>
  >
  <ParaLine 
   <String `A range is a pair of iterators that designate the beginning and end of the computation. A range '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `[i, i)'>
   <Font 
    <FTag `'>
   > # end of Font
   <String ` is '>
  >
  <ParaLine 
   <String `an empty range; in general, a range '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `[i, j)'>
   <Font 
    <FTag `'>
   > # end of Font
   <String ` refers to the elements in the data structure starting with the one '>
  >
  <ParaLine 
   <String `pointed to by '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `i'>
   <Font 
    <FTag `'>
   > # end of Font
   <String ` and up to but not including the one pointed to by'>
   <Font 
    <FTag `program'>
   > # end of Font
   <String ` j'>
   <Font 
    <FTag `'>
   > # end of Font
   <String `. Range'>
   <Font 
    <FTag `program'>
   > # end of Font
   <String ` [i, j)'>
   <Font 
    <FTag `'>
   > # end of Font
   <String ` is valid if and only if '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `j '>
  >
  <ParaLine 
   <Font 
    <FTag `'>
   > # end of Font
   <String `is reachable from '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `i'>
   <Font 
    <FTag `'>
   > # end of Font
   <String `. The result of the application of the algorithms in the library to invalid ranges is '>
  >
  <ParaLine 
   <String `undefined.'>
  >
 > # end of Para
 <Para 
  <Unique 25090>
  <PgfTag `body'>
  <ParaLine 
   <String `All the categories of iterators require only those functions that are realizable for a given category in constant '>
  >
  <ParaLine 
   <String `time (amortized). Therefore, requirement tables for the iterators do not have a complexity column.'>
  >
 > # end of Para
 <Para 
  <Unique 25091>
  <PgfTag `body'>
  <ParaLine 
   <String `In the following sections, we assume: '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `a'>
   <Font 
    <FTag `'>
   > # end of Font
   <String ` and '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `b'>
   <Font 
    <FTag `'>
   > # end of Font
   <String ` are values of '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `X'>
   <Font 
    <FTag `'>
   > # end of Font
   <String `, '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `n'>
   <Font 
    <FTag `'>
   > # end of Font
   <String ` is a value of the distance type '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `Distance,'>
   <Font 
    <FTag `'>
   > # end of Font
   <String ` '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `u'>
   <Font 
    <FTag `'>
   > # end of Font
   <String `, '>
  >
  <ParaLine 
   <Font 
    <FTag `program'>
   > # end of Font
   <String `tmp'>
   <Font 
    <FTag `'>
   > # end of Font
   <String `, and '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `m'>
   <Font 
    <FTag `'>
   > # end of Font
   <String ` are identifiers, '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `r'>
   <Font 
    <FTag `'>
   > # end of Font
   <String ` '>
   <String `and '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `s'>
   <Font 
    <FTag `'>
   > # end of Font
   <String ` are l'>
   <String `value'>
   <String `s'>
   <String ` of '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `X'>
   <Font 
    <FTag `'>
   > # end of Font
   <String `,'>
   <String ` '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `t'>
   <Font 
    <FTag `'>
   > # end of Font
   <String ` is a value of value type '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `T'>
   <Font 
    <FTag `'>
   > # end of Font
   <String `.'>
  >
 > # end of Para
 <Para 
  <Unique 25071>
  <PgfTag `subsection'>
  <PgfNumString `5.1 '>
  <ParaLine 
   <String `Input iterators'>
  >
 > # end of Para
 <Para 
  <Unique 9497>
  <PgfTag `body'>
  <ParaLine 
   <String `A class or a built-in type '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `X'>
   <Font 
    <FTag `'>
   > # end of Font
   <String ` satisfies the requirements of an input iterator for the value type '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `T'>
   <Font 
    <FTag `'>
   > # end of Font
   <String ` if the following '>
  >
  <ParaLine 
   <String `expressions are valid:'>
  >
 > # end of Para
 <Para 
  <Unique 9595>
  <PgfTag `body'>
  <ParaLine 
   <ATbl 8>
  >
 > # end of Para
 <Para 
  <Unique 9596>
  <PgfTag `body'>
  <ParaLine 
   <TextRectID 39>
   <Font 
    <FTag `Bold'>
   > # end of Font
   <String `NOTE:'>
   <Font 
    <FTag `'>
   > # end of Font
   <String ` For input iterators,'>
   <String ` '>
   <String `there are no requirements on the type or value of '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `r++'>
   <Font 
    <FTag `'>
   > # end of Font
   <String ` beyond the requirement '>
  >
  <ParaLine 
   <String `that '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `*r++'>
   <Font 
    <FTag `'>
   > # end of Font
   <String ` works appropriately. In particular, '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `r'>
   <String ` == s'>
   <Font 
    <FTag `'>
   > # end of Font
   <String ` does not imply '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `++r == ++s'>
   <Font 
    <FTag `'>
   > # end of Font
   <String `. (Equality does not '>
  >
  <ParaLine 
   <String `guarantee the substitution property or referential transparency.) '>
   <String `As for '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `++r'>
   <Font 
    <FTag `'>
   > # end of Font
   <String `, there are no more requirements '>
  >
  <ParaLine 
   <String `on the values of any copies of '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `r'>
   <Font 
    <FTag `'>
   > # end of Font
   <String ` except that they can be safely destroyed or assigned to. After executing '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `++r'>
   <Font 
    <FTag `'>
   > # end of Font
   <String `, '>
  >
  <ParaLine 
   <String `copies of (the previous) '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `r'>
   <Font 
    <FTag `'>
   > # end of Font
   <String ` are not required to be in the domain of '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `=='>
   <Font 
    <FTag `'>
   > # end of Font
   <String `. A'>
   <String `lgorithms on input iterators should '>
  >
  <ParaLine 
   <String `never attempt to pass through the same iterator twice. They should be '>
   <Font 
    <FTag `Emphasis'>
   > # end of Font
   <String `single pass'>
   <Font 
    <FTag `'>
   > # end of Font
   <String ` algorithms. '>
   <Font 
    <FTag `Emphasis'>
   > # end of Font
   <String `Value type '>
   <Font 
    <FTag `Emphasis'>
    <FFamily `Courier'>
    <FAngle `Oblique'>
    <FPostScriptName `Courier-Oblique'>
    <FSize  9.0 pt>
   > # end of Font
   <String `T'>
   <Font 
    <FTag `Emphasis'>
    <FFamily `Palatino'>
    <FAngle `Italic'>
    <FPostScriptName `Palatino-Italic'>
    <FSize  10.0 pt>
   > # end of Font
   <String ` is '>
  >
  <ParaLine 
   <String `not required to be an lvalue type'>
   <Font 
    <FTag `'>
   > # end of Font
   <String `. These algorithms can be used with istreams as the source of the input data '>
  >
  <ParaLine 
   <String `through the '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `istream_iterator'>
   <Font 
    <FTag `'>
   > # end of Font
   <String ` class.'>
  >
 > # end of Para
 <Para 
  <Unique 9586>
  <PgfTag `subsection'>
  <PgfNumString `5.2 '>
  <ParaLine 
   <String `Output iterators'>
  >
 > # end of Para
 <Para 
  <Unique 14437>
  <PgfTag `body'>
  <ParaLine 
   <String `A class or a built-in type '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `X'>
   <Font 
    <FTag `'>
   > # end of Font
   <String ` satisfies the requirements of an output iterator if the following expressions are '>
  >
  <ParaLine 
   <String `valid:'>
  >
 > # end of Para
 <Para 
  <Unique 14560>
  <PgfTag `body'>
  <ParaLine 
   <ATbl 9>
  >
 > # end of Para
 <Para 
  <Unique 12407>
  <PgfTag `body'>
  <ParaLine 
   <Font 
    <FTag `Bold'>
   > # end of Font
   <String `NOTE:'>
   <Font 
    <FTag `'>
   > # end of Font
   <String ` The only valid use of an '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `operator*'>
   <Font 
    <FTag `'>
   > # end of Font
   <String ` is on the left side of the assignment statement. '>
   <Font 
    <FTag `Emphasis'>
   > # end of Font
   <String `Assignment '>
  >
  <ParaLine 
   <String `through the same value of the iterator happens only once'>
   <Font 
    <FTag `'>
   > # end of Font
   <String `. Algorithms on output iterators should never attempt '>
  >
  <ParaLine 
   <String `to pass through the same iterator twice. They should be '>
   <Font 
    <FTag `Emphasis'>
   > # end of Font
   <String `single pass'>
   <Font 
    <FTag `'>
   > # end of Font
   <String ` algorithms. '>
   <String `Equality and inequality are '>
  >
  <ParaLine 
   <String `not necessarily defined. Algorithms that take output iterators can be used with ostreams as the destination '>
  >
  <ParaLine 
   <String `for placing data through the '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `ostream_iterator'>
   <Font 
    <FTag `'>
   > # end of Font
   <String ` class as well as with insert iterators and insert pointers. In '>
  >
  <ParaLine 
   <String `particular, the following two conditions should hold: first, any iterator value should be assigned through '>
  >
  <ParaLine 
   <String `before it is incremented (this is, for an output iterator '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `i'>
   <Font 
    <FTag `'>
   > # end of Font
   <String `, '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `i++; i++'>
   <Font 
    <FTag `'>
   > # end of Font
   <String `; is not a valid code sequence); second, '>
  >
  <ParaLine 
   <String `any value of an output iterator may have at most one active copy at any given time (for example, '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `i = j; '>
  >
  <ParaLine 
   <String `*++i = a; *j = b;'>
   <Font 
    <FTag `'>
   > # end of Font
   <String ` is not a valid code sequence).'>
  >
 > # end of Para
 <Para 
  <Unique 13983>
  <PgfTag `subsection'>
  <PgfNumString `5.3 '>
  <ParaLine 
   <String `Forward iterators'>
  >
 > # end of Para
 <Para 
  <Unique 10250>
  <PgfTag `body'>
  <ParaLine 
   <String `A class or a built-in type '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `X'>
   <Font 
    <FTag `'>
   > # end of Font
   <String ` satisfies the requirements of a forward iterator if the following expressions are '>
   <Char HardReturn >
  >
  <ParaLine 
   <String `valid:'>
  >
 > # end of Para
 <Para 
  <Unique 10359>
  <PgfTag `body'>
  <ParaLine 
   <TextRectID 40>
   <ATbl 17>
  >
 > # end of Para
 <Para 
  <Unique 10360>
  <PgfTag `body'>
  <ParaLine 
   <Font 
    <FTag `Bold'>
   > # end of Font
   <String `NOTE:'>
   <Font 
    <FTag `'>
   > # end of Font
   <String ` The fact that '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `r ='>
   <String `= '>
   <String `s'>
   <Font 
    <FTag `'>
   > # end of Font
   <String ` i'>
   <String `mplies '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `++'>
   <String `r ='>
   <String `= ++'>
   <String `s'>
   <Font 
    <FTag `'>
   > # end of Font
   <String ` ('>
   <String `which is not true for input and output iterators) and the '>
  >
  <ParaLine 
   <String `removal on the restrictions on the number of the assignments through the iterator (which applies to output '>
  >
  <ParaLine 
   <String `iterators) allows the use of multi-pass one-directional algorithms with forward iterators.'>
  >
 > # end of Para
 <Para 
  <Unique 14418>
  <PgfTag `subsection'>
  <PgfNumString `5.4 '>
  <ParaLine 
   <String `Bidirectional iterators'>
  >
 > # end of Para
 <Para 
  <Unique 10090>
  <PgfTag `body'>
  <ParaLine 
   <String `A class or a built-in type '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `X'>
   <Font 
    <FTag `'>
   > # end of Font
   <String ` satisfies the requirements of a bidirectional iterator if to the table that specifies '>
   <Char HardReturn >
  >
  <ParaLine 
   <String `forward iterators we add the following lines:'>
   <Char HardReturn >
  >
  <ParaLine 
   <ATbl 11>
  >
 > # end of Para
 <Para 
  <Unique 10375>
  <PgfTag `body'>
  <ParaLine 
   <TextRectID 41>
   <Font 
    <FTag `Bold'>
   > # end of Font
   <String `NOTE:'>
   <Font 
    <FTag `'>
   > # end of Font
   <String ` Bidirectional iterators allow algorithms to move iterators backward as well as forward.'>
  >
 > # end of Para
 <Para 
  <Unique 668>
  <PgfTag `subsection'>
  <PgfNumString `5.5 '>
  <ParaLine 
   <String `Random access iterators'>
  >
 > # end of Para
 <Para 
  <Unique 14618>
  <PgfTag `body'>
  <ParaLine 
   <String `A class or a built-in type '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `X'>
   <Font 
    <FTag `'>
   > # end of Font
   <String ` satisfies the requirements of a random access iterator if to the table that specifies '>
  >
  <ParaLine 
   <String `bidirectional iterators we add the following lines:'>
  >
 > # end of Para
 <Para 
  <Unique 14726>
  <PgfTag `body'>
  <ParaLine 
   <ATbl 12>
  >
 > # end of Para
 <Para 
  <Unique 16434>
  <PgfTag `subsection'>
  <PgfNumString `5.6 '>
  <ParaLine 
   <String `Iterator tags'>
  >
 > # end of Para
 <Para 
  <Unique 16438>
  <PgfTag `body'>
  <ParaLine 
   <String `To implement algorithms only in terms of iterators, it is often necessary to infer both of the value type and '>
  >
  <ParaLine 
   <String `the distance type from the iterator. To enable this task it is required that for an iterator '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `i'>
   <Font 
    <FTag `'>
   > # end of Font
   <String ` of any category '>
  >
  <ParaLine 
   <String `other than output iterator'>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `,'>
   <Font 
    <FTag `'>
   > # end of Font
   <String ` the expression '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `value_type(i)'>
   <Font 
    <FTag `'>
   > # end of Font
   <String ` returns '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `(T*)(0)'>
   <Font 
    <FTag `'>
   > # end of Font
   <String ` and the expression '>
  >
  <ParaLine 
   <Font 
    <FTag `program'>
   > # end of Font
   <String `distance_type(i)'>
   <Font 
    <FTag `'>
   > # end of Font
   <String ` returns '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `(Distance*)(0)'>
   <Font 
    <FTag `'>
   > # end of Font
   <String `. For output iterators, these expressions are not required. '>
  >
 > # end of Para
 <Para 
  <Unique 31013>
  <PgfTag `subsubsection'>
  <PgfNumString `5.6.1 '>
  <ParaLine 
   <TextRectID 42>
   <String `Examples of using iterator tags'>
  >
 > # end of Para
 <Para 
  <Unique 29439>
  <PgfTag `body'>
  <ParaLine 
   <String `For all the regular pointer types we can define '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `value_type'>
   <Font 
    <FTag `'>
   > # end of Font
   <String ` and '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `distance_type'>
   <Font 
    <FTag `'>
   > # end of Font
   <String ` with the help of:'>
  >
 > # end of Para
 <Para 
  <Unique 16459>
  <PgfTag `program'>
  <ParaLine 
  >
 > # end of Para
 <Para 
  <Unique 16454>
  <PgfTag `program'>
  <ParaLine 
   <String `template <class T\>'>
  >
 > # end of Para
 <Para 
  <Unique 16455>
  <PgfTag `program'>
  <ParaLine 
   <String `inline T* value_type(const T*) { return (T*)(0); }'>
  >
 > # end of Para
 <Para 
  <Unique 16456>
  <PgfTag `program'>
  <ParaLine 
  >
 > # end of Para
 <Para 
  <Unique 16457>
  <PgfTag `program'>
  <ParaLine 
   <String `template <class T\>'>
  >
 > # end of Para
 <Para 
  <Unique 16458>
  <PgfTag `program'>
  <ParaLine 
   <String `inline ptrdiff_t* distance_type(const T*) { return (ptrdiff_t*)(0); }'>
  >
 > # end of Para
 <Para 
  <Unique 16460>
  <PgfTag `body'>
  <ParaLine 
   <String `Then, if we want to implement a generic '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `reverse'>
   <Font 
    <FTag `'>
   > # end of Font
   <String ` function, we do the following:'>
  >
 > # end of Para
 <Para 
  <Unique 16465>
  <PgfTag `program'>
  <ParaLine 
  >
 > # end of Para
 <Para 
  <Unique 16493>
  <PgfTag `program'>
  <ParaLine 
   <String `template <class BidirectionalIterator\>'>
  >
 > # end of Para
 <Para 
  <Unique 16466>
  <PgfTag `program'>
  <ParaLine 
   <String `inline void reverse(BidirectionalIterator first, BidirectionalIterator last) {'>
  >
 > # end of Para
 <Para 
  <Unique 16471>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <String `__reverse(first, last, value_type(first), distance_type(first));'>
  >
 > # end of Para
 <Para 
  <Unique 16472>
  <PgfTag `program'>
  <ParaLine 
   <String `}'>
  >
 > # end of Para
 <Para 
  <Unique 16473>
  <PgfTag `body'>
  <ParaLine 
   <String `where '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `__reverse'>
   <Font 
    <FTag `'>
   > # end of Font
   <String ` is defined as:'>
  >
 > # end of Para
 <Para 
  <Unique 16478>
  <PgfTag `program'>
  <ParaLine 
  >
 > # end of Para
 <Para 
  <Unique 16494>
  <PgfTag `program'>
  <ParaLine 
   <String `template <class BidirectionalIterator, class T, class Distance\>'>
  >
 > # end of Para
 <Para 
  <Unique 16479>
  <PgfTag `program'>
  <ParaLine 
   <String `void __reverse(BidirectionalIterator first, '>
   <Char Tab >
   <Char Tab >
   <String `BidirectionalIterator last, '>
   <Char Tab >
   <Char Tab >
   <String `T*,'>
  >
 > # end of Para
 <Para 
  <Unique 40005>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <Char Tab >
   <String ` Distance*) {'>
  >
 > # end of Para
 <Para 
  <Unique 16485>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <String `Distance n;'>
  >
 > # end of Para
 <Para 
  <Unique 31014>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <String `distance(first, last, n); // see '>
   <Font 
    <FTag `Emphasis'>
   > # end of Font
   <String `Iterator operations'>
   <Font 
    <FTag `'>
   > # end of Font
   <String ` section'>
  >
 > # end of Para
 <Para 
  <Unique 31018>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <String `--n;'>
  >
 > # end of Para
 <Para 
  <Unique 16486>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <String `while (n \> 0) {'>
  >
 > # end of Para
 <Para 
  <Unique 16487>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <Char Tab >
   <String `T tmp = *first;'>
  >
 > # end of Para
 <Para 
  <Unique 16488>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <Char Tab >
   <String `*first++ = *--last;'>
  >
 > # end of Para
 <Para 
  <Unique 16489>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <Char Tab >
   <String `*last = tmp;'>
  >
 > # end of Para
 <Para 
  <Unique 16490>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <Char Tab >
   <String `n -= 2;'>
  >
 > # end of Para
 <Para 
  <Unique 16491>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <String `}'>
  >
 > # end of Para
 <Para 
  <Unique 4941>
  <PgfTag `program'>
  <ParaLine 
   <String `}'>
  >
 > # end of Para
 <Para 
  <Unique 4942>
  <PgfTag `body'>
  <ParaLine 
   <String `If there is an additional pointer type '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `__huge'>
   <Font 
    <FTag `'>
   > # end of Font
   <String ` s'>
   <String `uch that the difference of two '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `__huge'>
   <Font 
    <FTag `'>
   > # end of Font
   <String ` p'>
   <String `ointers is of the type '>
  >
  <ParaLine 
   <Font 
    <FTag `program'>
   > # end of Font
   <String `lon'>
   <String `g lon'>
   <String `g'>
   <Font 
    <FTag `'>
   > # end of Font
   <String `, we define:'>
  >
 > # end of Para
 <Para 
  <Unique 16514>
  <PgfTag `program'>
  <ParaLine 
  >
 > # end of Para
 <Para 
  <Unique 16523>
  <PgfTag `program'>
  <ParaLine 
   <String `template <class T\>'>
  >
 > # end of Para
 <Para 
  <Unique 16515>
  <PgfTag `program'>
  <ParaLine 
   <String `inline T* value_type(const T '>
   <String `__huge *'>
   <String `) { return (T*)(0); }'>
  >
 > # end of Para
 <Para 
  <Unique 16516>
  <PgfTag `program'>
  <ParaLine 
  >
 > # end of Para
 <Para 
  <Unique 16517>
  <PgfTag `program'>
  <ParaLine 
   <String `template <class T\>'>
  >
 > # end of Para
 <Para 
  <Unique 16518>
  <PgfTag `program'>
  <ParaLine 
   <String `inline long'>
   <String ` long'>
   <String `* distance_type(const T '>
   <String `__huge *'>
   <String `) { return (long'>
   <String ` long'>
   <String `*)(0); }'>
  >
 > # end of Para
 <Para 
  <Unique 31952>
  <PgfTag `body'>
  <ParaLine 
   <String `It is often desirable for a template function to find out what is the most specific category of its iterator '>
  >
  <ParaLine 
   <String `argument, so that the function can select the most efficient algorithm at compile time. To facilitate this, the '>
  >
  <ParaLine 
   <String `library introduces '>
   <Font 
    <FTag `Emphasis'>
   > # end of Font
   <String `category tag'>
   <Font 
    <FTag `'>
   > # end of Font
   <String ` classes which are used as compile time tags for algorithm selection. They are: '>
  >
  <ParaLine 
   <Font 
    <FTag `program'>
   > # end of Font
   <String `input_iterator_tag'>
   <Font 
    <FTag `'>
   > # end of Font
   <String `, '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `output_iterator_tag'>
   <Font 
    <FTag `'>
   > # end of Font
   <String `, '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `forward_iterator_tag'>
   <Font 
    <FTag `'>
   > # end of Font
   <String `, '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `bidirectional_iterator_tag'>
   <Font 
    <FTag `'>
   > # end of Font
   <String ` '>
  >
  <ParaLine 
   <String `and '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `random_access_iterator_tag'>
   <Font 
    <FTag `'>
   > # end of Font
   <String `. Every iterator '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `i'>
   <Font 
    <FTag `'>
   > # end of Font
   <String ` must have an expression '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `iterator_category(i)'>
   <Font 
    <FTag `'>
   > # end of Font
   <String ` '>
  >
  <ParaLine 
   <String `defined on it that returns the most specific category tag that describes its behavior. For example, we define '>
  >
  <ParaLine 
   <String `that all the pointer types are in the random access iterator category by:'>
  >
 > # end of Para
 <Para 
  <Unique 16547>
  <PgfTag `program'>
  <ParaLine 
  >
 > # end of Para
 <Para 
  <Unique 16548>
  <PgfTag `program'>
  <ParaLine 
   <String `template <class T\>'>
  >
 > # end of Para
 <Para 
  <Unique 16549>
  <PgfTag `program'>
  <ParaLine 
   <String `inline random_access_iterator_tag iterator_category('>
   <String `const '>
   <String `T*) {'>
  >
 > # end of Para
 <Para 
  <Unique 16553>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <String `return random_access_iterator_tag(); '>
  >
 > # end of Para
 <Para 
  <Unique 16554>
  <PgfTag `program'>
  <ParaLine 
   <String `}'>
  >
 > # end of Para
 <Para 
  <Unique 16556>
  <PgfTag `body'>
  <ParaLine 
   <String `For a user-defined iterator '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `BinaryTreeIterator'>
   <Font 
    <FTag `'>
   > # end of Font
   <String `, it can be included into the bidirectional iterator category '>
  >
  <ParaLine 
   <String `by saying:'>
  >
 > # end of Para
 <Para 
  <Unique 16557>
  <PgfTag `program'>
  <ParaLine 
  >
 > # end of Para
 <Para 
  <Unique 16558>
  <PgfTag `program'>
  <ParaLine 
   <String `template <class T\>'>
  >
 > # end of Para
 <Para 
  <Unique 16573>
  <PgfTag `program'>
  <ParaLine 
   <String `inline bidirectional_iterator_tag iterator_category('>
  >
 > # end of Para
 <Para 
  <Unique 33467>
  <PgfTag `program'>
  <ParaLine 
   <TextRectID 43>
   <Char Tab >
   <Char Tab >
   <String `const BinaryTreeIterator<T\>&) {'>
  >
 > # end of Para
 <Para 
  <Unique 16575>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <String `return bidirectional_iterator_tag();'>
  >
 > # end of Para
 <Para 
  <Unique 16576>
  <PgfTag `program'>
  <ParaLine 
   <String `}'>
  >
 > # end of Para
 <Para 
  <Unique 16577>
  <PgfTag `body'>
  <ParaLine 
   <String `If a template function '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `evolve'>
   <Font 
    <FTag `'>
   > # end of Font
   <String ` is well defined for bidirectional iterators, but can be implemented more '>
  >
  <ParaLine 
   <String `efficiently for random access iterators, then the implementation is like:'>
  >
 > # end of Para
 <Para 
  <Unique 29259>
  <PgfTag `program'>
  <ParaLine 
  >
 > # end of Para
 <Para 
  <Unique 29260>
  <PgfTag `program'>
  <ParaLine 
   <String `template <class BidirectionalIterator\>'>
  >
 > # end of Para
 <Para 
  <Unique 29261>
  <PgfTag `program'>
  <ParaLine 
   <String `inline void evolve(BidirectionalIterator first, BidirectionalIterator last)'>
  >
 > # end of Para
 <Para 
  <Unique 29262>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <String `evolve(first, last, iterator_category(first));'>
  >
 > # end of Para
 <Para 
  <Unique 29263>
  <PgfTag `program'>
  <ParaLine 
   <String `}'>
  >
 > # end of Para
 <Para 
  <Unique 16578>
  <PgfTag `program'>
  <ParaLine 
  >
 > # end of Para
 <Para 
  <Unique 16579>
  <PgfTag `program'>
  <ParaLine 
   <String `template <class BidirectionalIterator\>'>
  >
 > # end of Para
 <Para 
  <Unique 16580>
  <PgfTag `program'>
  <ParaLine 
   <String `void evolve(BidirectionalIterator first, BidirectionalIterator last, '>
  >
  <ParaLine 
   <String `bidirectional_iterator_tag) {'>
  >
 > # end of Para
 <Para 
  <Unique 16582>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <String `// ... more generic, but less efficient algorithm'>
  >
 > # end of Para
 <Para 
  <Unique 16583>
  <PgfTag `program'>
  <ParaLine 
   <String `}'>
  >
 > # end of Para
 <Para 
  <Unique 16584>
  <PgfTag `program'>
  <ParaLine 
  >
 > # end of Para
 <Para 
  <Unique 16585>
  <PgfTag `program'>
  <ParaLine 
   <String `template <class RandomAccessIterator\>'>
  >
 > # end of Para
 <Para 
  <Unique 16587>
  <PgfTag `program'>
  <ParaLine 
   <String `void evolve(RandomAccessIterator first, RandomAccessIterator last, '>
   <Char HardReturn >
  >
  <ParaLine 
   <String `random_access_iterator_tag) {'>
  >
 > # end of Para
 <Para 
  <Unique 16588>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <String `// ... more efficient, but less generic algorithm'>
  >
 > # end of Para
 <Para 
  <Unique 16589>
  <PgfTag `program'>
  <ParaLine 
   <String `}'>
  >
 > # end of Para
 <Para 
  <Unique 29440>
  <PgfTag `subsubsection'>
  <PgfNumString `5.6.2 '>
  <ParaLine 
   <String `Library defined primitives'>
  >
 > # end of Para
 <Para 
  <Unique 16628>
  <PgfTag `body'>
  <ParaLine 
   <String `To simplify the task of defining the '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `iterator_category'>
   <Font 
    <FTag `'>
   > # end of Font
   <String `, '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `value_type'>
   <Font 
    <FTag `'>
   > # end of Font
   <String ` and '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `distance_type'>
   <Font 
    <FTag `'>
   > # end of Font
   <String ` for user '>
  >
  <ParaLine 
   <String `definable iterators, the library provides the following predefined classes and functions:'>
  >
 > # end of Para
 <Para 
  <Unique 23406>
  <PgfTag `program'>
  <ParaLine 
  >
 > # end of Para
 <Para 
  <Unique 40115>
  <PgfTag `program'>
  <ParaLine 
   <String `// iterator tags'>
  >
 > # end of Para
 <Para 
  <Unique 40116>
  <PgfTag `program'>
  <ParaLine 
  >
 > # end of Para
 <Para 
  <Unique 28551>
  <PgfTag `program'>
  <ParaLine 
   <String `struct input_iterator_tag'>
   <String ` {'>
   <String `};'>
  >
 > # end of Para
 <Para 
  <Unique 28631>
  <PgfTag `program'>
  <ParaLine 
   <String `struct output_iterator_tag '>
   <String `{'>
   <String `};'>
  >
 > # end of Para
 <Para 
  <Unique 28638>
  <PgfTag `program'>
  <ParaLine 
   <String `struct forward_iterator_tag '>
   <String `{'>
   <String `};'>
  >
 > # end of Para
 <Para 
  <Unique 28645>
  <PgfTag `program'>
  <ParaLine 
   <String `struct bidirectional_iterator_tag '>
   <String `{'>
   <String `};'>
  >
 > # end of Para
 <Para 
  <Unique 28652>
  <PgfTag `program'>
  <ParaLine 
   <String `struct random_access_iterator_tag '>
   <String `{'>
   <String `};'>
  >
 > # end of Para
 <Para 
  <Unique 40117>
  <PgfTag `program'>
  <ParaLine 
  >
 > # end of Para
 <Para 
  <Unique 40118>
  <PgfTag `program'>
  <ParaLine 
   <String `// iterator bases'>
  >
 > # end of Para
 <Para 
  <Unique 28552>
  <PgfTag `program'>
  <ParaLine 
  >
 > # end of Para
 <Para 
  <Unique 28553>
  <PgfTag `program'>
  <ParaLine 
   <String `template <class T, class Distance = ptrdiff_t\> struct input_iterator '>
   <String `{'>
   <String `};'>
  >
 > # end of Para
 <Para 
  <Unique 40133>
  <PgfTag `program'>
  <ParaLine 
   <String `struct output_iterator'>
   <String ` {'>
   <String `};'>
  >
 > # end of Para
 <Para 
  <Unique 40128>
  <PgfTag `program'>
  <ParaLine 
   <String `// output_iterator is not a template because output iterators'>
  >
 > # end of Para
 <Para 
  <Unique 40129>
  <PgfTag `program'>
  <ParaLine 
   <String `// do not have either value type or distance type defined.'>
  >
 > # end of Para
 <Para 
  <Unique 40134>
  <PgfTag `program'>
  <ParaLine 
   <String `template <class T, class Distance = ptrdiff_t\> struct forward_iterator '>
   <String `{'>
   <String `};'>
  >
 > # end of Para
 <Para 
  <Unique 40135>
  <PgfTag `program'>
  <ParaLine 
   <String `template <class T, class Distance = ptrdiff_t\> struct bidirectional_iterato'>
   <String `r {'>
   <String `};'>
  >
 > # end of Para
 <Para 
  <Unique 40136>
  <PgfTag `program'>
  <ParaLine 
   <String `template <class T, class Distance = ptrdiff_t\> struct random_access_iterato'>
   <String `r {'>
   <String `};'>
  >
 > # end of Para
 <Para 
  <Unique 28682>
  <PgfTag `program'>
  <ParaLine 
  >
 > # end of Para
 <Para 
  <Unique 40119>
  <PgfTag `program'>
  <ParaLine 
   <String `// iterator_category'>
  >
 > # end of Para
 <Para 
  <Unique 40120>
  <PgfTag `program'>
  <ParaLine 
  >
 > # end of Para
 <Para 
  <Unique 28556>
  <PgfTag `program'>
  <ParaLine 
   <String `template <class T, class Distance\> '>
  >
 > # end of Para
 <Para 
  <Unique 28557>
  <PgfTag `program'>
  <ParaLine 
   <String `inline input_iterator_tag'>
  >
 > # end of Para
 <Para 
  <Unique 28581>
  <PgfTag `program'>
  <ParaLine 
   <String `iterator_category(const input_iterator<T, Distance\>&) {'>
  >
 > # end of Para
 <Para 
  <Unique 34476>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <String `return input_iterator_tag();'>
  >
 > # end of Para
 <Para 
  <Unique 28560>
  <PgfTag `program'>
  <ParaLine 
   <String `}'>
  >
 > # end of Para
 <Para 
  <Unique 40137>
  <PgfTag `program'>
  <ParaLine 
   <String `inline output_iterator_tag iterator_category(const output_iterator&) {'>
  >
 > # end of Para
 <Para 
  <Unique 28741>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <String `return output_iterator_tag();'>
  >
 > # end of Para
 <Para 
  <Unique 28742>
  <PgfTag `program'>
  <ParaLine 
   <String `}'>
  >
 > # end of Para
 <Para 
  <Unique 28705>
  <PgfTag `program'>
  <ParaLine 
   <String `template <class T, class Distance\> '>
  >
 > # end of Para
 <Para 
  <Unique 28706>
  <PgfTag `program'>
  <ParaLine 
   <String `inline forward_iterator_tag'>
  >
 > # end of Para
 <Para 
  <Unique 28707>
  <PgfTag `program'>
  <ParaLine 
   <TextRectID 44>
   <String `iterator_category(const forward_iterator<T, Distance\>&) {'>
  >
 > # end of Para
 <Para 
  <Unique 28708>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <String `return forward_iterator_tag();'>
  >
 > # end of Para
 <Para 
  <Unique 28709>
  <PgfTag `program'>
  <ParaLine 
   <String `}'>
  >
 > # end of Para
 <Para 
  <Unique 28716>
  <PgfTag `program'>
  <ParaLine 
   <String `template <class T, class Distance\> '>
  >
 > # end of Para
 <Para 
  <Unique 28717>
  <PgfTag `program'>
  <ParaLine 
   <String `inline bidirectional_iterator_tag'>
  >
 > # end of Para
 <Para 
  <Unique 28718>
  <PgfTag `program'>
  <ParaLine 
   <String `iterator_category(const bidirectional_iterator<T, Distance\>&) {'>
  >
 > # end of Para
 <Para 
  <Unique 28719>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <String `return bidirectional_iterator_tag();'>
  >
 > # end of Para
 <Para 
  <Unique 28720>
  <PgfTag `program'>
  <ParaLine 
   <String `}'>
  >
 > # end of Para
 <Para 
  <Unique 28726>
  <PgfTag `program'>
  <ParaLine 
   <String `template <class T, class Distance\> '>
  >
 > # end of Para
 <Para 
  <Unique 28727>
  <PgfTag `program'>
  <ParaLine 
   <String `inline random_access_iterator_tag'>
  >
 > # end of Para
 <Para 
  <Unique 28728>
  <PgfTag `program'>
  <ParaLine 
   <String `iterator_category(const random_access_iterator<T, Distance\>&) {'>
  >
 > # end of Para
 <Para 
  <Unique 28729>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <String `return random_access_iterator_tag();'>
  >
 > # end of Para
 <Para 
  <Unique 28730>
  <PgfTag `program'>
  <ParaLine 
   <String `}'>
  >
 > # end of Para
 <Para 
  <Unique 28832>
  <PgfTag `program'>
  <ParaLine 
   <String `template <class T\>'>
  >
 > # end of Para
 <Para 
  <Unique 28833>
  <PgfTag `program'>
  <ParaLine 
   <String `inline random_access_iterator_tag iterator_category(const T*) {'>
  >
 > # end of Para
 <Para 
  <Unique 28834>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <String `return random_access_iterator_tag();'>
  >
 > # end of Para
 <Para 
  <Unique 28835>
  <PgfTag `program'>
  <ParaLine 
   <String `}'>
  >
 > # end of Para
 <Para 
  <Unique 28836>
  <PgfTag `program'>
  <ParaLine 
  >
 > # end of Para
 <Para 
  <Unique 40121>
  <PgfTag `program'>
  <ParaLine 
   <String `// value_type of iterator'>
  >
 > # end of Para
 <Para 
  <Unique 40125>
  <PgfTag `program'>
  <ParaLine 
  >
 > # end of Para
 <Para 
  <Unique 28562>
  <PgfTag `program'>
  <ParaLine 
   <String `template <class T, class Distance\> '>
  >
 > # end of Para
 <Para 
  <Unique 28563>
  <PgfTag `program'>
  <ParaLine 
   <String `inline T* value_type(const input_iterator<T, Distance\>&) {'>
  >
 > # end of Para
 <Para 
  <Unique 28799>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <String `return (T*)(0); '>
  >
 > # end of Para
 <Para 
  <Unique 28801>
  <PgfTag `program'>
  <ParaLine 
   <String `}'>
  >
 > # end of Para
 <Para 
  <Unique 28474>
  <PgfTag `program'>
  <ParaLine 
   <String `template <class T, class Distance\> '>
  >
 > # end of Para
 <Para 
  <Unique 28475>
  <PgfTag `program'>
  <ParaLine 
   <String `inline T* value_type(const forward_iterator<T, Distance\>&) {'>
  >
 > # end of Para
 <Para 
  <Unique 28797>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <String `return (T*)(0);'>
  >
 > # end of Para
 <Para 
  <Unique 28796>
  <PgfTag `program'>
  <ParaLine 
   <String `}'>
  >
 > # end of Para
 <Para 
  <Unique 28763>
  <PgfTag `program'>
  <ParaLine 
   <String `template <class T, class Distance\> '>
  >
 > # end of Para
 <Para 
  <Unique 28764>
  <PgfTag `program'>
  <ParaLine 
   <String `inline T* value_type(const bidirectional_iterator<T, Distance\>&) {'>
  >
 > # end of Para
 <Para 
  <Unique 28765>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <String `return (T*)(0);'>
  >
 > # end of Para
 <Para 
  <Unique 28766>
  <PgfTag `program'>
  <ParaLine 
   <String `}'>
  >
 > # end of Para
 <Para 
  <Unique 28773>
  <PgfTag `program'>
  <ParaLine 
   <String `template <class T, class Distance\> '>
  >
 > # end of Para
 <Para 
  <Unique 28774>
  <PgfTag `program'>
  <ParaLine 
   <String `inline T* value_type(const random_access_iterator<T, Distance\>&) {'>
  >
 > # end of Para
 <Para 
  <Unique 28775>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <String `return (T*)(0);'>
  >
 > # end of Para
 <Para 
  <Unique 28776>
  <PgfTag `program'>
  <ParaLine 
   <String `}'>
  >
 > # end of Para
 <Para 
  <Unique 28783>
  <PgfTag `program'>
  <ParaLine 
   <String `template <class T\>'>
  >
 > # end of Para
 <Para 
  <Unique 28784>
  <PgfTag `program'>
  <ParaLine 
   <String `inline T* value_type(const T*) { return (T*)(0); }'>
  >
 > # end of Para
 <Para 
  <Unique 28751>
  <PgfTag `program'>
  <ParaLine 
  >
 > # end of Para
 <Para 
  <Unique 40126>
  <PgfTag `program'>
  <ParaLine 
   <String `// distance_type of iterator'>
  >
 > # end of Para
 <Para 
  <Unique 40127>
  <PgfTag `program'>
  <ParaLine 
  >
 > # end of Para
 <Para 
  <Unique 28752>
  <PgfTag `program'>
  <ParaLine 
   <String `template <class T, class Distance\> '>
  >
 > # end of Para
 <Para 
  <Unique 28753>
  <PgfTag `program'>
  <ParaLine 
   <String `inline Distance* distance_type(const input_iterator<T, Distance\>&) {'>
  >
 > # end of Para
 <Para 
  <Unique 28754>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <String `return (Distance*)(0);'>
  >
 > # end of Para
 <Para 
  <Unique 28755>
  <PgfTag `program'>
  <ParaLine 
   <String `}'>
  >
 > # end of Para
 <Para 
  <Unique 28479>
  <PgfTag `program'>
  <ParaLine 
   <String `template <class T, class Distance\> '>
  >
 > # end of Para
 <Para 
  <Unique 28480>
  <PgfTag `program'>
  <ParaLine 
   <String `inline Distance* distance_type(const forward_iterator<T, Distance\>&) {'>
  >
 > # end of Para
 <Para 
  <Unique 28481>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <String `return (Distance*)(0);'>
  >
 > # end of Para
 <Para 
  <Unique 28482>
  <PgfTag `program'>
  <ParaLine 
   <String `}'>
  >
 > # end of Para
 <Para 
  <Unique 28500>
  <PgfTag `program'>
  <ParaLine 
   <String `template <class T, class Distance\> '>
  >
 > # end of Para
 <Para 
  <Unique 28501>
  <PgfTag `program'>
  <ParaLine 
   <String `inline Distance'>
   <String `* d'>
   <String `istance_type(const bidirectional_iterator<T, Distance\>&) {'>
  >
 > # end of Para
 <Para 
  <Unique 28503>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <String `return (Distance*)(0);'>
  >
 > # end of Para
 <Para 
  <Unique 28504>
  <PgfTag `program'>
  <ParaLine 
   <String `}'>
  >
 > # end of Para
 <Para 
  <Unique 28522>
  <PgfTag `program'>
  <ParaLine 
   <String `template <class T, class Distance\> '>
  >
 > # end of Para
 <Para 
  <Unique 28523>
  <PgfTag `program'>
  <ParaLine 
   <String `inline Distance'>
   <String `* d'>
   <String `istance_type(const random_access_iterator<T, Distance\>&) {'>
  >
 > # end of Para
 <Para 
  <Unique 28525>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <String `return (Distance*)(0);'>
  >
 > # end of Para
 <Para 
  <Unique 28526>
  <PgfTag `program'>
  <ParaLine 
   <String `}'>
  >
 > # end of Para
 <Para 
  <Unique 28531>
  <PgfTag `program'>
  <ParaLine 
   <String `template <class T\>'>
  >
 > # end of Para
 <Para 
  <Unique 28532>
  <PgfTag `program'>
  <ParaLine 
   <String `inline ptrdiff_t* distance_type(const T*) { return (ptrdiff_t*)(0); }'>
  >
 > # end of Para
 <Para 
  <Unique 16629>
  <PgfTag `body'>
  <Pgf 
   <PgfNumTabs 1>
   <TabStop 
    <TSX  0.625">
    <TSType Left >
    <TSLeaderStr ` '>
   > # end of TabStop
  > # end of Pgf
  <ParaLine 
   <TextRectID 45>
   <String `If a user wants to define a bidirectional iterator for some data structure containing '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `double'>
   <Font 
    <FTag `'>
   > # end of Font
   <String ` and such that it '>
  >
  <ParaLine 
   <String `works on a large memory model of '>
   <String `a c'>
   <String `omputer, '>
   <String `it can be done by defining:'>
  >
 > # end of Para
 <Para 
  <Unique 23726>
  <PgfTag `program'>
  <ParaLine 
  >
 > # end of Para
 <Para 
  <Unique 23728>
  <PgfTag `program'>
  <ParaLine 
   <String `class MyIterator : public bidirectional_iterator<double, long\> {'>
  >
 > # end of Para
 <Para 
  <Unique 23736>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <String `// code implementing ++, etc.'>
  >
 > # end of Para
 <Para 
  <Unique 23737>
  <PgfTag `program'>
  <ParaLine 
   <String `};'>
  >
 > # end of Para
 <Para 
  <Unique 16630>
  <PgfTag `body'>
  <ParaLine 
   <String `Then there is no need to define '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `iterator_category'>
   <Font 
    <FTag `'>
   > # end of Font
   <String `, '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `value_type'>
   <Font 
    <FTag `'>
   > # end of Font
   <String `, and '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `distance_type'>
   <Font 
    <FTag `'>
   > # end of Font
   <String ` on '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `MyIterator'>
   <Font 
    <FTag `'>
   > # end of Font
   <String `.'>
  >
 > # end of Para
 <Para 
  <Unique 16763>
  <PgfTag `subsection'>
  <PgfNumString `5.7 '>
  <ParaLine 
   <String `Iterator operations'>
  >
 > # end of Para
 <Para 
  <Unique 33266>
  <PgfTag `body'>
  <ParaLine 
   <String `Since only random access iterators provide '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `+'>
   <Font 
    <FTag `'>
   > # end of Font
   <String ` and '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `-'>
   <Font 
    <FTag `'>
   > # end of Font
   <String ` operators, the library provides two template functions '>
  >
  <ParaLine 
   <Font 
    <FTag `program'>
   > # end of Font
   <String `advance'>
   <Font 
    <FTag `'>
   > # end of Font
   <String ` and '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `distance'>
   <Font 
    <FTag `'>
   > # end of Font
   <String `. These functions use '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `+'>
   <Font 
    <FTag `'>
   > # end of Font
   <String ` and '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `-'>
   <Font 
    <FTag `'>
   > # end of Font
   <String ` for random access iterators (and are, therefore, '>
  >
  <ParaLine 
   <String `constant time for them); for input, forward and bidirectional iterators they use '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `++'>
   <Font 
    <FTag `'>
   > # end of Font
   <String ` to provide linear time '>
  >
  <ParaLine 
   <String `implementations. '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `advance'>
   <Font 
    <FTag `'>
   > # end of Font
   <String ` takes '>
   <String `a '>
   <String `negative argument '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `n'>
   <Font 
    <FTag `'>
   > # end of Font
   <String ` for random access and bidirectional iterators only. '>
  >
  <ParaLine 
   <Font 
    <FTag `program'>
   > # end of Font
   <String `advance'>
   <Font 
    <FTag `'>
   > # end of Font
   <String ` increments (or decrements for negative '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `n'>
   <Font 
    <FTag `'>
   > # end of Font
   <String `) iterator reference '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `i'>
   <Font 
    <FTag `'>
   > # end of Font
   <String ` by '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `n'>
   <Font 
    <FTag `'>
   > # end of Font
   <String `. '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `distance'>
   <Font 
    <FTag `'>
   > # end of Font
   <String ` increments '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `n'>
   <Font 
    <FTag `'>
   > # end of Font
   <String ` by the '>
  >
  <ParaLine 
   <String `number of times it takes to get from '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `first'>
   <Font 
    <FTag `'>
   > # end of Font
   <String ` to '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `last'>
   <Font 
    <FTag `'>
   > # end of Font
   <String `. '>
  >
 > # end of Para
 <Para 
  <Unique 25429>
  <PgfTag `program'>
  <ParaLine 
  >
 > # end of Para
 <Para 
  <Unique 27262>
  <PgfTag `program'>
  <ParaLine 
   <String `template <class InputIterator, class Distance\>'>
  >
 > # end of Para
 <Para 
  <Unique 27263>
  <PgfTag `program'>
  <ParaLine 
   <String `inline void advance(InputIterator& i, Distance n);'>
  >
 > # end of Para
 <Para 
  <Unique 40266>
  <PgfTag `program'>
  <ParaLine 
  >
 > # end of Para
 <Para 
  <Unique 40271>
  <PgfTag `program'>
  <ParaLine 
   <String `template <class InputIterator, class Distance\>'>
  >
 > # end of Para
 <Para 
  <Unique 40267>
  <PgfTag `program'>
  <ParaLine 
   <String `inline void distance(InputIterator first, InputIterator last, Distance& n);'>
  >
 > # end of Para
 <Para 
  <Unique 40268>
  <PgfTag `body'>
  <ParaLine 
   <Font 
    <FTag `program'>
   > # end of Font
   <String `distance'>
   <Font 
    <FTag `'>
   > # end of Font
   <String ` must be a three argument function storing the result into a reference instead of returning the '>
  >
  <ParaLine 
   <String `result because the distance type cannot be deduced from built-in iterator types such as '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `int*'>
   <Font 
    <FTag `'>
   > # end of Font
   <String `.'>
  >
 > # end of Para
 <Para 
  <Unique 25198>
  <PgfTag `section'>
  <PgfNumString `6  '>
  <ParaLine 
   <String `Function objects'>
  >
 > # end of Para
 <Para 
  <Unique 25444>
  <PgfTag `body'>
  <ParaLine 
   <String `Function objects are objects with an '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `operator()'>
   <Font 
    <FTag `'>
   > # end of Font
   <String ` defined. They are important for the effective use of the '>
  >
  <ParaLine 
   <String `library. In the places where one would expect to pass a pointer to a function to an algorithmic template, the '>
  >
  <ParaLine 
   <String `interface is specified to accept an object with an '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `operator()'>
   <Font 
    <FTag `'>
   > # end of Font
   <String ` defined. This not only makes algorithmic '>
  >
  <ParaLine 
   <String `templates work with pointers to functions, but also enables them to work with arbitrary function objects. '>
  >
  <ParaLine 
   <String `Using function objects together with function templates increases the expressive power of the library as '>
  >
  <ParaLine 
   <String `well as making the resulting code much more efficient. For example, if we want to have a by-element '>
  >
  <ParaLine 
   <String `addition of two vectors '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `a'>
   <Font 
    <FTag `'>
   > # end of Font
   <String ` and '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `b'>
   <Font 
    <FTag `'>
   > # end of Font
   <String ` containing '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `double'>
   <Font 
    <FTag `'>
   > # end of Font
   <String ` and put the result into '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `a'>
   <Font 
    <FTag `'>
   > # end of Font
   <String ` we can do:'>
  >
 > # end of Para
 <Para 
  <Unique 25200>
  <PgfTag `program'>
  <ParaLine 
  >
 > # end of Para
 <Para 
  <Unique 38935>
  <PgfTag `program'>
  <ParaLine 
   <String `transform(a.begin(), a.end(), b.begin(), '>
   <String `a'>
   <String `.begin(), plus<double\>());'>
  >
 > # end of Para
 <Para 
  <Unique 38940>
  <PgfTag `body'>
  <ParaLine 
   <String `If we want to negate every element of '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `a'>
   <Font 
    <FTag `'>
   > # end of Font
   <String ` we can do:'>
  >
 > # end of Para
 <Para 
  <Unique 38941>
  <PgfTag `program'>
  <ParaLine 
  >
 > # end of Para
 <Para 
  <Unique 38942>
  <PgfTag `program'>
  <ParaLine 
   <String `transform(a.begin(), a.end(), a.begin(), negate<double\>());'>
  >
 > # end of Para
 <Para 
  <Unique 25201>
  <PgfTag `body'>
  <ParaLine 
   <String `The corresponding functions will inline the addition and the negation.'>
  >
 > # end of Para
 <Para 
  <Unique 38949>
  <PgfTag `body'>
  <ParaLine 
   <String `To enable adaptors and other components to manipulate function objects that take one or two arguments '>
  >
  <ParaLine 
   <String `it is required that they correspondingly provide typedefs '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `argument_type'>
   <Font 
    <FTag `'>
   > # end of Font
   <String ` and '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `result_type'>
   <Font 
    <FTag `'>
   > # end of Font
   <String ` for function '>
  >
  <ParaLine 
   <String `objects that take one argument and '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `first_argument_type'>
   <Font 
    <FTag `'>
   > # end of Font
   <String `, '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `second_argument_type'>
   <Font 
    <FTag `'>
   > # end of Font
   <String `, and '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `result_type'>
   <Font 
    <FTag `'>
   > # end of Font
   <String ` for '>
  >
  <ParaLine 
   <String `function objects that take two arguments.'>
  >
 > # end of Para
 <Para 
  <Unique 31573>
  <PgfTag `subsection'>
  <PgfNumString `6.1 '>
  <ParaLine 
   <String `Base'>
  >
 > # end of Para
 <Para 
  <Unique 33267>
  <PgfTag `body'>
  <ParaLine 
   <String `The following classes are provided to simplify the typedefs of the argument and result types:'>
  >
 > # end of Para
 <Para 
  <Unique 31574>
  <PgfTag `program'>
  <ParaLine 
  >
 > # end of Para
 <Para 
  <Unique 31575>
  <PgfTag `program'>
  <ParaLine 
   <String `template <class Arg, class Result\>'>
  >
 > # end of Para
 <Para 
  <Unique 31576>
  <PgfTag `program'>
  <ParaLine 
   <String `struct unary_function'>
   <String ` {'>
  >
 > # end of Para
 <Para 
  <Unique 31577>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <String `typedef Arg argument_type;'>
  >
 > # end of Para
 <Para 
  <Unique 31581>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <String `typedef Result result_type;'>
  >
 > # end of Para
 <Para 
  <Unique 31582>
  <PgfTag `program'>
  <ParaLine 
   <String `};'>
  >
 > # end of Para
 <Para 
  <Unique 31578>
  <PgfTag `program'>
  <ParaLine 
   <TextRectID 46>
  >
 > # end of Para
 <Para 
  <Unique 31589>
  <PgfTag `program'>
  <ParaLine 
   <String `template <class Arg1, class Arg2, class Result\>'>
  >
 > # end of Para
 <Para 
  <Unique 31584>
  <PgfTag `program'>
  <ParaLine 
   <String `struct binary_function '>
   <String `{'>
  >
 > # end of Para
 <Para 
  <Unique 31585>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <String `typedef Arg1 first_argument_type;'>
  >
 > # end of Para
 <Para 
  <Unique 31586>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <String `typedef Arg2 second_argument_type;'>
  >
 > # end of Para
 <Para 
  <Unique 33271>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <String `typedef Result result_type;'>
  >
 > # end of Para
 <Para 
  <Unique 33272>
  <PgfTag `program'>
  <ParaLine 
   <String `};'>
   <Char Tab >
  >
 > # end of Para
 <Para 
  <Unique 33277>
  <PgfTag `subsection'>
  <PgfNumString `6.2 '>
  <ParaLine 
   <String `Arithmetic operations'>
  >
 > # end of Para
 <Para 
  <Unique 33279>
  <PgfTag `body'>
  <ParaLine 
   <String `The library provides basic function object classes for all of the arithmetic operators in the language.'>
  >
 > # end of Para
 <Para 
  <Unique 29286>
  <PgfTag `program'>
  <ParaLine 
  >
 > # end of Para
 <Para 
  <Unique 33296>
  <PgfTag `program'>
  <ParaLine 
   <String `template <class T\>'>
  >
 > # end of Para
 <Para 
  <Unique 29287>
  <PgfTag `program'>
  <ParaLine 
   <String `struct plus : binary_function<T, T, T\> {'>
  >
 > # end of Para
 <Para 
  <Unique 29289>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <String `T operator()(const T& x, const T& y) const { return x + y; }'>
  >
 > # end of Para
 <Para 
  <Unique 29290>
  <PgfTag `program'>
  <ParaLine 
   <String `};'>
  >
 > # end of Para
 <Para 
  <Unique 27585>
  <PgfTag `program'>
  <ParaLine 
  >
 > # end of Para
 <Para 
  <Unique 27586>
  <PgfTag `program'>
  <ParaLine 
   <String `template <class T\>'>
  >
 > # end of Para
 <Para 
  <Unique 27587>
  <PgfTag `program'>
  <ParaLine 
   <String `struct minus : binary_function<T, T, T\> {'>
  >
 > # end of Para
 <Para 
  <Unique 27589>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <String `T operator()(const T& x, const T& y) const { return x - y; }'>
  >
 > # end of Para
 <Para 
  <Unique 27590>
  <PgfTag `program'>
  <ParaLine 
   <String `};'>
  >
 > # end of Para
 <Para 
  <Unique 27605>
  <PgfTag `program'>
  <ParaLine 
  >
 > # end of Para
 <Para 
  <Unique 27606>
  <PgfTag `program'>
  <ParaLine 
   <String `template <class T\>'>
  >
 > # end of Para
 <Para 
  <Unique 27607>
  <PgfTag `program'>
  <ParaLine 
   <String `struct times : binary_function<T, T, T\> {'>
  >
 > # end of Para
 <Para 
  <Unique 27609>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <String `T operator()(const T& x, const T& y) const { return x * y; }'>
  >
 > # end of Para
 <Para 
  <Unique 27610>
  <PgfTag `program'>
  <ParaLine 
   <String `};'>
  >
 > # end of Para
 <Para 
  <Unique 27625>
  <PgfTag `program'>
  <ParaLine 
  >
 > # end of Para
 <Para 
  <Unique 27626>
  <PgfTag `program'>
  <ParaLine 
   <String `template <class T\>'>
  >
 > # end of Para
 <Para 
  <Unique 27627>
  <PgfTag `program'>
  <ParaLine 
   <String `struct divides : binary_function<T, T, T\> {'>
  >
 > # end of Para
 <Para 
  <Unique 27629>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <String `T operator()(const T& x, const T& y) const { return x / y; }'>
  >
 > # end of Para
 <Para 
  <Unique 27630>
  <PgfTag `program'>
  <ParaLine 
   <String `};'>
  >
 > # end of Para
 <Para 
  <Unique 27631>
  <PgfTag `program'>
  <ParaLine 
  >
 > # end of Para
 <Para 
  <Unique 27646>
  <PgfTag `program'>
  <ParaLine 
   <String `template <class T\>'>
  >
 > # end of Para
 <Para 
  <Unique 27647>
  <PgfTag `program'>
  <ParaLine 
   <String `struct modulus : binary_function<T, T, T\> {'>
  >
 > # end of Para
 <Para 
  <Unique 27649>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <String `T operator()(const T& x, const T& y) const { return x % y; }'>
  >
 > # end of Para
 <Para 
  <Unique 27650>
  <PgfTag `program'>
  <ParaLine 
   <String `};'>
  >
 > # end of Para
 <Para 
  <Unique 27665>
  <PgfTag `program'>
  <ParaLine 
  >
 > # end of Para
 <Para 
  <Unique 27666>
  <PgfTag `program'>
  <ParaLine 
   <String `template <class T\>'>
  >
 > # end of Para
 <Para 
  <Unique 27667>
  <PgfTag `program'>
  <ParaLine 
   <String `struct negate : unary_function<T, T\> {'>
  >
 > # end of Para
 <Para 
  <Unique 27669>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <String `T operator()(const T& x) const { return -x; }'>
  >
 > # end of Para
 <Para 
  <Unique 33299>
  <PgfTag `program'>
  <ParaLine 
   <String `};'>
  >
 > # end of Para
 <Para 
  <Unique 33300>
  <PgfTag `subsection'>
  <PgfNumString `6.3 '>
  <ParaLine 
   <String `Comparisons'>
  >
 > # end of Para
 <Para 
  <Unique 33301>
  <PgfTag `body'>
  <ParaLine 
   <String `The library provides basic function object classes for all of the comparison operators in the language.'>
  >
 > # end of Para
 <Para 
  <Unique 27844>
  <PgfTag `program'>
  <ParaLine 
  >
 > # end of Para
 <Para 
  <Unique 27672>
  <PgfTag `program'>
  <ParaLine 
   <String `template <class T\>'>
  >
 > # end of Para
 <Para 
  <Unique 27673>
  <PgfTag `program'>
  <ParaLine 
   <String `struct equal_to : binary_function<T, T, bool\> {'>
  >
 > # end of Para
 <Para 
  <Unique 27675>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <String `bool operator()(const T& x, const T& y) const { return x == y; }'>
  >
 > # end of Para
 <Para 
  <Unique 27676>
  <PgfTag `program'>
  <ParaLine 
   <String `};'>
  >
 > # end of Para
 <Para 
  <Unique 27677>
  <PgfTag `program'>
  <ParaLine 
  >
 > # end of Para
 <Para 
  <Unique 27692>
  <PgfTag `program'>
  <ParaLine 
   <String `template <class T\>'>
  >
 > # end of Para
 <Para 
  <Unique 27693>
  <PgfTag `program'>
  <ParaLine 
   <String `struct not_equal_to : binary_function<T, T, bool\> {'>
  >
 > # end of Para
 <Para 
  <Unique 27695>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <String `bool operator()(const T& x, const T& y) const { return x != y; }'>
  >
 > # end of Para
 <Para 
  <Unique 27696>
  <PgfTag `program'>
  <ParaLine 
   <String `};'>
  >
 > # end of Para
 <Para 
  <Unique 27697>
  <PgfTag `program'>
  <ParaLine 
  >
 > # end of Para
 <Para 
  <Unique 27712>
  <PgfTag `program'>
  <ParaLine 
   <String `template <class T\>'>
  >
 > # end of Para
 <Para 
  <Unique 27713>
  <PgfTag `program'>
  <ParaLine 
   <String `struct greater : binary_function<T, T, bool\> {'>
  >
 > # end of Para
 <Para 
  <Unique 27715>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <String `bool operator()(const T& x, const T& y) const { return x \> y; }'>
  >
 > # end of Para
 <Para 
  <Unique 27716>
  <PgfTag `program'>
  <ParaLine 
   <TextRectID 47>
   <String `};'>
  >
 > # end of Para
 <Para 
  <Unique 27717>
  <PgfTag `program'>
  <ParaLine 
  >
 > # end of Para
 <Para 
  <Unique 31628>
  <PgfTag `program'>
  <ParaLine 
   <String `template <class T\>'>
  >
 > # end of Para
 <Para 
  <Unique 27733>
  <PgfTag `program'>
  <ParaLine 
   <String `struct less : binary_function<T, T, bool\> {'>
  >
 > # end of Para
 <Para 
  <Unique 27735>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <String `bool operator()(const T& x, const T& y) const { return x < y; }'>
  >
 > # end of Para
 <Para 
  <Unique 27736>
  <PgfTag `program'>
  <ParaLine 
   <String `};'>
  >
 > # end of Para
 <Para 
  <Unique 27737>
  <PgfTag `program'>
  <ParaLine 
  >
 > # end of Para
 <Para 
  <Unique 27752>
  <PgfTag `program'>
  <ParaLine 
   <String `template <class T\>'>
  >
 > # end of Para
 <Para 
  <Unique 27753>
  <PgfTag `program'>
  <ParaLine 
   <String `struct greater_equal : binary_function<T, T, bool\> {'>
  >
 > # end of Para
 <Para 
  <Unique 27755>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <String `bool operator()(const T& x, const T& y) const { return x \>= y; }'>
  >
 > # end of Para
 <Para 
  <Unique 27756>
  <PgfTag `program'>
  <ParaLine 
   <String `};'>
  >
 > # end of Para
 <Para 
  <Unique 27757>
  <PgfTag `program'>
  <ParaLine 
  >
 > # end of Para
 <Para 
  <Unique 27772>
  <PgfTag `program'>
  <ParaLine 
   <String `template <class T\>'>
  >
 > # end of Para
 <Para 
  <Unique 27773>
  <PgfTag `program'>
  <ParaLine 
   <String `struct less_equal : binary_function<T, T, bool\> {'>
  >
 > # end of Para
 <Para 
  <Unique 27775>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <String `bool operator()(const T& x, const T& y) const { return x <= y; }'>
  >
 > # end of Para
 <Para 
  <Unique 27776>
  <PgfTag `program'>
  <ParaLine 
   <String `};'>
  >
 > # end of Para
 <Para 
  <Unique 27777>
  <PgfTag `subsection'>
  <PgfNumString `6.4 '>
  <ParaLine 
   <String `Logical operations'>
  >
 > # end of Para
 <Para 
  <Unique 27792>
  <PgfTag `program'>
  <ParaLine 
  >
 > # end of Para
 <Para 
  <Unique 40171>
  <PgfTag `program'>
  <ParaLine 
   <String `template <class T\>'>
  >
 > # end of Para
 <Para 
  <Unique 40172>
  <PgfTag `program'>
  <ParaLine 
   <String `struct logical_and : binary_function<T, T, bool\> {'>
  >
 > # end of Para
 <Para 
  <Unique 40173>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <String `bool operator()(const T& x, const T& y) const { return x && y; }'>
  >
 > # end of Para
 <Para 
  <Unique 40174>
  <PgfTag `program'>
  <ParaLine 
   <String `};'>
  >
 > # end of Para
 <Para 
  <Unique 40175>
  <PgfTag `program'>
  <ParaLine 
  >
 > # end of Para
 <Para 
  <Unique 40159>
  <PgfTag `program'>
  <ParaLine 
   <String `template <class T\>'>
  >
 > # end of Para
 <Para 
  <Unique 40203>
  <PgfTag `program'>
  <ParaLine 
   <String `struct logical_or : binary_function<T, T, bool\> {'>
  >
 > # end of Para
 <Para 
  <Unique 40204>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <String `bool operator()(const T& x, const T& y) const { return x || y; }'>
  >
 > # end of Para
 <Para 
  <Unique 40205>
  <PgfTag `program'>
  <ParaLine 
   <String `};'>
  >
 > # end of Para
 <Para 
  <Unique 40206>
  <PgfTag `program'>
  <ParaLine 
  >
 > # end of Para
 <Para 
  <Unique 40198>
  <PgfTag `program'>
  <ParaLine 
   <String `template <class T\>'>
  >
 > # end of Para
 <Para 
  <Unique 27793>
  <PgfTag `program'>
  <ParaLine 
   <String `struct logical_not : unary_function<T, bool\> {'>
  >
 > # end of Para
 <Para 
  <Unique 31648>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <String `bool operator()(const T& x) const { return !x; }'>
  >
 > # end of Para
 <Para 
  <Unique 31649>
  <PgfTag `program'>
  <ParaLine 
   <String `};'>
  >
 > # end of Para
 <Para 
  <Unique 31650>
  <PgfTag `section'>
  <PgfNumString `7  '>
  <ParaLine 
   <String `Allocators'>
  >
 > # end of Para
 <Para 
  <Unique 29476>
  <PgfTag `body'>
  <ParaLine 
   <String `One of the common problems in portability is to be able to encapsulate the information about the memory '>
  >
  <ParaLine 
   <String `model. This information includes the knowledge of pointer types, the type of their difference, the type of '>
  >
  <ParaLine 
   <String `the size of objects in this memory model, as well as the memory allocation and deallocation primitives for it.'>
  >
 > # end of Para
 <Para 
  <Unique 29481>
  <PgfTag `body'>
  <ParaLine 
   <String `STL addresses this problem by providing a standard set of requirements for '>
   <Font 
    <FTag `Emphasis'>
   > # end of Font
   <String `allocators'>
   <Font 
    <FTag `'>
   > # end of Font
   <String `, which are objects that '>
  >
  <ParaLine 
   <String `encapsulate this information. All of the containers in STL are parameterized in terms of allocators. That '>
  >
  <ParaLine 
   <String `dramatically simplifies the task of dealing with multiple memory models.'>
  >
 > # end of Para
 <Para 
  <Unique 29482>
  <PgfTag `subsection'>
  <PgfNumString `7.1 '>
  <ParaLine 
   <String `Allocator requirements'>
  >
 > # end of Para
 <Para 
  <Unique 10391>
  <PgfTag `body'>
  <ParaLine 
   <String `In the following table, we assume '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `X'>
   <Font 
    <FTag `'>
   > # end of Font
   <String ` is an allocator class for objects of type '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `T'>
   <Font 
    <FTag `'>
   > # end of Font
   <String `, '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `a'>
   <Font 
    <FTag `'>
   > # end of Font
   <String ` is a value of '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `X'>
   <Font 
    <FTag `'>
   > # end of Font
   <String `, '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `n'>
   <Font 
    <FTag `'>
   > # end of Font
   <String ` is of type '>
  >
  <ParaLine 
   <Font 
    <FTag `program'>
   > # end of Font
   <String `X::size_type'>
   <Font 
    <FTag `'>
   > # end of Font
   <String `, '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `p'>
   <Font 
    <FTag `'>
   > # end of Font
   <String ` is of type '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `X::pointer'>
   <Font 
    <FTag `'>
   > # end of Font
   <String `, '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `r'>
   <Font 
    <FTag `'>
   > # end of Font
   <String ` is of type '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `X::reference'>
   <Font 
    <FTag `'>
   > # end of Font
   <String ` and '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `s'>
   <Font 
    <FTag `'>
   > # end of Font
   <String ` is of type '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `X::const_reference'>
   <Font 
    <FTag `'>
   > # end of Font
   <String `.'>
   <String ` '>
  >
 > # end of Para
 <Para 
  <Unique 10503>
  <PgfTag `body'>
  <ParaLine 
   <String `All the operations on the allocators are expected to be amortized constant time.'>
   <ATbl 10>
  >
 > # end of Para
 <Para 
  <Unique 10504>
  <PgfTag `body'>
  <ParaLine 
   <TextRectID 48>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `p'>
   <String `ointer'>
   <Font 
    <FTag `'>
   > # end of Font
   <String ` belongs to the category of mutable random access iterators referring to '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `T'>
   <Font 
    <FTag `'>
   > # end of Font
   <String `. '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `const_pointer'>
   <Font 
    <FTag `'>
   > # end of Font
   <String ` belongs '>
  >
  <ParaLine 
   <String `to the category of constant random access iterators referring to '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `T'>
   <Font 
    <FTag `'>
   > # end of Font
   <String `. There is a conversion defined from '>
  >
  <ParaLine 
   <Font 
    <FTag `program'>
   > # end of Font
   <String `pointer'>
   <Font 
    <FTag `'>
   > # end of Font
   <String ` to '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `const_pointer'>
   <Font 
    <FTag `'>
   > # end of Font
   <String `.'>
  >
 > # end of Para
 <Para 
  <Unique 4851>
  <PgfTag `body'>
  <ParaLine 
   <String `For any allocator template '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `Alloc'>
   <Font 
    <FTag `'>
   > # end of Font
   <String ` there is a specialization for type '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `void'>
   <Font 
    <FTag `'>
   > # end of Font
   <String `. '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `Alloc<void\>'>
   <Font 
    <FTag `'>
   > # end of Font
   <String ` has only constructor, '>
  >
  <ParaLine 
   <String `destructor, and '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `Alloc<void\>::pointer'>
   <Font 
    <FTag `'>
   > # end of Font
   <String ` defined. Conversions are defined from any instance of '>
  >
  <ParaLine 
   <Font 
    <FTag `program'>
   > # end of Font
   <String `Alloc<T\>::pointer'>
   <Font 
    <FTag `'>
   > # end of Font
   <String ` into '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `Alloc<void\>::pointer'>
   <Font 
    <FTag `'>
   > # end of Font
   <String ` and back so that for any '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `p'>
   <Font 
    <FTag `'>
   > # end of Font
   <String `,'>
   <String ` '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `p == '>
  >
  <ParaLine 
   <String `Alloc<T\>::pointer(Alloc<void\>'>
   <String `::pointer'>
   <String `(p))'>
   <Font 
    <FTag `'>
   > # end of Font
   <String `.'>
  >
 > # end of Para
 <Para 
  <Unique 29484>
  <PgfTag `subsection'>
  <PgfNumString `7.2 '>
  <ParaLine 
   <TextRectID 49>
   <String `The default allocator'>
  >
 > # end of Para
 <Para 
  <Unique 29458>
  <PgfTag `program'>
  <ParaLine 
  >
 > # end of Para
 <Para 
  <Unique 29459>
  <PgfTag `program'>
  <ParaLine 
   <String `template <class T\>'>
  >
 > # end of Para
 <Para 
  <Unique 29460>
  <PgfTag `program'>
  <ParaLine 
   <String `class allocator {'>
  >
 > # end of Para
 <Para 
  <Unique 29461>
  <PgfTag `program'>
  <ParaLine 
   <String `public:'>
  >
 > # end of Para
 <Para 
  <Unique 29462>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <String `typedef T* pointer;'>
  >
 > # end of Para
 <Para 
  <Unique 29463>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <String `typedef const T* const_pointer;'>
  >
 > # end of Para
 <Para 
  <Unique 5077>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <String `typedef T& reference;'>
  >
 > # end of Para
 <Para 
  <Unique 5079>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <String `typedef const T& const_reference;'>
  >
 > # end of Para
 <Para 
  <Unique 29600>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <String `typedef T value_type;'>
  >
 > # end of Para
 <Para 
  <Unique 29464>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <String `typedef size_t size_type;'>
  >
 > # end of Para
 <Para 
  <Unique 29465>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <String `typedef ptrdiff_t difference_type;'>
  >
 > # end of Para
 <Para 
  <Unique 29466>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <String `allocator();'>
  >
 > # end of Para
 <Para 
  <Unique 29467>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <String `~allocator();'>
  >
 > # end of Para
 <Para 
  <Unique 5090>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <String `pointer address(reference x);'>
  >
 > # end of Para
 <Para 
  <Unique 5092>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <String `const_pointer const_address(const_reference x);'>
  >
 > # end of Para
 <Para 
  <Unique 29468>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <String `pointer allocate(size_type n);'>
  >
 > # end of Para
 <Para 
  <Unique 29469>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <String `void deallocate(pointer p); '>
  >
 > # end of Para
 <Para 
  <Unique 29470>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <String `size_t'>
   <String `ype'>
   <String ` init_page_size();'>
  >
 > # end of Para
 <Para 
  <Unique 40717>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <String `size_t'>
   <String `ype'>
   <String ` max_size();'>
  >
 > # end of Para
 <Para 
  <Unique 29471>
  <PgfTag `program'>
  <ParaLine 
   <String `};'>
  >
 > # end of Para
 <Para 
  <Unique 4860>
  <PgfTag `program'>
  <ParaLine 
  >
 > # end of Para
 <Para 
  <Unique 4861>
  <PgfTag `program'>
  <ParaLine 
   <String `class allocator<void\> {'>
  >
 > # end of Para
 <Para 
  <Unique 4862>
  <PgfTag `program'>
  <ParaLine 
   <String `public:'>
  >
 > # end of Para
 <Para 
  <Unique 4863>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <String `typedef void* pointer;'>
  >
 > # end of Para
 <Para 
  <Unique 4864>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <String `allocator();'>
  >
 > # end of Para
 <Para 
  <Unique 4865>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <String `~allocator();'>
  >
 > # end of Para
 <Para 
  <Unique 4866>
  <PgfTag `program'>
  <ParaLine 
   <String `};'>
  >
 > # end of Para
 <Para 
  <Unique 29489>
  <PgfTag `body'>
  <ParaLine 
   <String `In addition to '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `allocator'>
   <Font 
    <FTag `'>
   > # end of Font
   <String ` the library vendors are expected to provide allocators for all supported memory '>
  >
  <ParaLine 
   <String `models.'>
  >
 > # end of Para
 <Para 
  <Unique 25104>
  <PgfTag `section'>
  <PgfNumString `8  '>
  <ParaLine 
   <String `Containers'>
  >
 > # end of Para
 <Para 
  <Unique 30006>
  <PgfTag `body'>
  <ParaLine 
   <String `Containers are objects that store other objects. They control allocation and deallocation of these objects '>
  >
  <ParaLine 
   <String `through constructors, destructors, insert and erase operations. '>
  >
 > # end of Para
 <Para 
  <Unique 30013>
  <PgfTag `body'>
  <ParaLine 
   <String `In the following table, we assume '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `X'>
   <Font 
    <FTag `'>
   > # end of Font
   <String ` is a container class containing objects of type '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `T'>
   <Font 
    <FTag `'>
   > # end of Font
   <String `, '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `a'>
   <Font 
    <FTag `'>
   > # end of Font
   <String ` and '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `b'>
   <Font 
    <FTag `'>
   > # end of Font
   <String ` are values of '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `X'>
   <Font 
    <FTag `'>
   > # end of Font
   <String `, '>
  >
  <ParaLine 
   <Font 
    <FTag `program'>
   > # end of Font
   <String `u'>
   <Font 
    <FTag `'>
   > # end of Font
   <String ` is an identifier and '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `r'>
   <Font 
    <FTag `'>
   > # end of Font
   <String ` is a value of '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `X&'>
   <Font 
    <FTag `'>
   > # end of Font
   <String `.'>
  >
 > # end of Para
 <Para 
  <Unique 25116>
  <PgfTag `body'>
  <ParaLine 
   <ATbl 14>
  >
 > # end of Para
 <Para 
  <Unique 32217>
  <PgfTag `body'>
  <ParaLine 
   <TextRectID 51>
   <String `The member function '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `size()'>
   <Font 
    <FTag `'>
   > # end of Font
   <String ` returns the number of elements in the container. Its semantics is defined by '>
  >
  <ParaLine 
   <String `the rules of constructors, inserts, and erases.'>
  >
 > # end of Para
 <Para 
  <Unique 32250>
  <PgfTag `body'>
  <ParaLine 
   <Font 
    <FTag `program'>
   > # end of Font
   <String `begin()'>
   <Font 
    <FTag `'>
   > # end of Font
   <String ` returns an iterator referring to the first element in the container. '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `end()'>
   <Font 
    <FTag `'>
   > # end of Font
   <String ` returns an iterator which '>
  >
  <ParaLine 
   <String `is the past-the-end value.'>
  >
 > # end of Para
 <Para 
  <Unique 6292>
  <PgfTag `body'>
  <ParaLine 
   <String `If the iterator type of a container belongs to the bidirectional or random access iterator categories, the '>
  >
  <ParaLine 
   <String `container is called '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `reversible'>
   <Font 
    <FTag `'>
   > # end of Font
   <String ` and satisfies the following additional requirements: '>
  >
 > # end of Para
 <Para 
  <Unique 6353>
  <PgfTag `body'>
  <ParaLine 
   <ATbl 19>
  >
 > # end of Para
 <Para 
  <Unique 5813>
  <PgfTag `subsection'>
  <PgfNumString `8.1 '>
  <ParaLine 
   <TextRectID 52>
   <String `Sequences'>
  >
 > # end of Para
 <Para 
  <Unique 40767>
  <PgfTag `body'>
  <ParaLine 
   <String `A sequence is a kind of container that organizes a finite set of objects, all of the same type, into a strictly '>
  >
  <ParaLine 
   <String `linear arrangement. The library provides three basic kinds of sequence containers: '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `vector'>
   <Font 
    <FTag `'>
   > # end of Font
   <String `, '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `list'>
   <Font 
    <FTag `'>
   > # end of Font
   <String `, and '>
  >
  <ParaLine 
   <Font 
    <FTag `program'>
   > # end of Font
   <String `deque'>
   <Font 
    <FTag `'>
   > # end of Font
   <String `. It also provides container adaptors that make it easy to construct abstract data types, such as stacks '>
  >
  <ParaLine 
   <String `or queues, out of the basic sequence kinds (or out of other kinds of sequences that the user might define).'>
  >
 > # end of Para
 <Para 
  <Unique 35136>
  <PgfTag `body'>
  <ParaLine 
   <String `In the following two tables, '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `X'>
   <Font 
    <FTag `'>
   > # end of Font
   <String ` is a sequence class, '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `a'>
   <Font 
    <FTag `'>
   > # end of Font
   <String ` is value of '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `X'>
   <Font 
    <FTag `'>
   > # end of Font
   <String `, '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `i'>
   <Font 
    <FTag `'>
   > # end of Font
   <String ` and '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `j'>
   <Font 
    <FTag `'>
   > # end of Font
   <String ` satisfy input iterator requirements, '>
  >
  <ParaLine 
   <Font 
    <FTag `program'>
   > # end of Font
   <String `[i, j)'>
   <Font 
    <FTag `'>
   > # end of Font
   <String ` is a valid range, '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `n'>
   <Font 
    <FTag `'>
   > # end of Font
   <String ` is a value of '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `X::size_type'>
   <Font 
    <FTag `'>
   > # end of Font
   <String `, '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `p'>
   <Font 
    <FTag `'>
   > # end of Font
   <String ` is a valid iterator to '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `a'>
   <Font 
    <FTag `'>
   > # end of Font
   <String `, '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `q'>
   <Font 
    <FTag `'>
   > # end of Font
   <String ` is a d'>
   <String `ereferenceable iterator'>
   <String ` '>
  >
  <ParaLine 
   <String `t'>
   <String `o '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `a'>
   <Font 
    <FTag `'>
   > # end of Font
   <String `, '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `[q1, q2)'>
   <Font 
    <FTag `'>
   > # end of Font
   <String ` is a valid range'>
   <String ` in '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `a'>
   <Font 
    <FTag `'>
   > # end of Font
   <String `, '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `t'>
   <Font 
    <FTag `'>
   > # end of Font
   <String ` is a value of '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `X::value_type'>
   <Font 
    <FTag `'>
   > # end of Font
   <String `.'>
  >
 > # end of Para
 <Para 
  <Unique 35141>
  <PgfTag `body'>
  <ParaLine 
   <String `The complexities of the expressions are sequence dependent.'>
  >
 > # end of Para
 <Para 
  <Unique 35127>
  <PgfTag `body'>
  <ParaLine 
   <ATbl 15>
  >
 > # end of Para
 <Para 
  <Unique 39063>
  <PgfTag `body'>
  <ParaLine 
   <TextRectID 53>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `vector'>
   <Font 
    <FTag `'>
   > # end of Font
   <String `, '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `list'>
   <Font 
    <FTag `'>
   > # end of Font
   <String `, and '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `deque'>
   <Font 
    <FTag `'>
   > # end of Font
   <String ` offer the programmer different complexity trade-offs and should be used '>
  >
  <ParaLine 
   <String `accordingly. '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `vector'>
   <Font 
    <FTag `'>
   > # end of Font
   <String ` is the type of sequence that should be used by default. '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `list'>
   <Font 
    <FTag `'>
   > # end of Font
   <String ` should be used when there '>
  >
  <ParaLine 
   <String `are frequent insertions and deletions from the middle of the sequence. '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `deque'>
   <Font 
    <FTag `'>
   > # end of Font
   <String ` is the data structure of choice '>
  >
  <ParaLine 
   <String `when most insertions and deletions take place at the beginning or at the end of the sequence.'>
  >
 > # end of Para
 <Para 
  <Unique 39344>
  <PgfTag `body'>
  <ParaLine 
   <Font 
    <FTag `program'>
   > # end of Font
   <String `iterator'>
   <Font 
    <FTag `'>
   > # end of Font
   <String ` and '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `const_iterator'>
   <Font 
    <FTag `'>
   > # end of Font
   <String ` types for sequences have to be at least of the forward iterator category.'>
  >
 > # end of Para
 <Para 
  <Unique 39421>
  <PgfTag `body'>
  <ParaLine 
   <ATbl 13>
  >
 > # end of Para
 <Para 
  <Unique 39422>
  <PgfTag `body'>
  <ParaLine 
   <String `All the operations in the above table are provided only for the containers for which they take constant time.'>
  >
 > # end of Para
 <Para 
  <Unique 39246>
  <PgfTag `subsubsection'>
  <PgfNumString `8.1.1 '>
  <ParaLine 
   <Marker 
    <MType 9>
    <MText `22526: subsection: 5.1 Vector'>
    <MCurrPage 23>
    <Unique 26854>
   > # end of Marker
   <String `Vector'>
  >
 > # end of Para
 <Para 
  <Unique 40982>
  <PgfTag `body'>
  <ParaLine 
   <Font 
    <FTag `program'>
   > # end of Font
   <String `vector'>
   <Font 
    <FTag `'>
   > # end of Font
   <String ` is a kind of sequence '>
   <String `that '>
   <String `supports random access iterators. In addition, it supports (amortized) '>
  >
  <ParaLine 
   <String `constant time insert and erase operations at the end; insert and erase in the middle take linear time. Storage '>
  >
  <ParaLine 
   <String `management is handled automatically, though hints can be given to improve efficiency.'>
  >
 > # end of Para
 <Para 
  <Unique 26857>
  <PgfTag `program'>
  <ParaLine 
  >
 > # end of Para
 <Para 
  <Unique 26859>
  <PgfTag `program'>
  <ParaLine 
   <String `template <class T, template <class U\> class Allocator = allocator\>'>
  >
 > # end of Para
 <Para 
  <Unique 26860>
  <PgfTag `program'>
  <ParaLine 
   <String `class vector {'>
  >
 > # end of Para
 <Para 
  <Unique 26861>
  <PgfTag `program'>
  <ParaLine 
   <String `public:'>
  >
 > # end of Para
 <Para 
  <Unique 26862>
  <PgfTag `program'>
  <ParaLine 
  >
 > # end of Para
 <Para 
  <Unique 26863>
  <PgfTag `program'>
  <ParaLine 
   <String `// typedefs:'>
  >
 > # end of Para
 <Para 
  <Unique 34809>
  <PgfTag `program'>
  <ParaLine 
  >
 > # end of Para
 <Para 
  <Unique 26865>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <String `typedef iterator; '>
  >
 > # end of Para
 <Para 
  <Unique 26871>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <String `typedef const_iterator; '>
  >
 > # end of Para
 <Para 
  <Unique 6380>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <String `typedef Allocator<T\>::pointer pointer;'>
  >
 > # end of Para
 <Para 
  <Unique 5192>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <String `typedef Allocator<T\>::reference reference;'>
  >
 > # end of Para
 <Para 
  <Unique 5193>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <String `typedef Allocator<T\>::const_reference const_reference;'>
  >
 > # end of Para
 <Para 
  <Unique 26879>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <String `typedef size_type;'>
  >
 > # end of Para
 <Para 
  <Unique 26884>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <String `typedef difference_type;'>
  >
 > # end of Para
 <Para 
  <Unique 26889>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <String `typedef T value_type;'>
  >
 > # end of Para
 <Para 
  <Unique 5194>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <String `typedef reverse_iterator;'>
  >
 > # end of Para
 <Para 
  <Unique 5195>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <String `typedef const_reverse_iterator;'>
  >
 > # end of Para
 <Para 
  <Unique 26891>
  <PgfTag `program'>
  <ParaLine 
  >
 > # end of Para
 <Para 
  <Unique 26893>
  <PgfTag `program'>
  <ParaLine 
   <String `// allocation/'>
   <String `deallocation:'>
  >
 > # end of Para
 <Para 
  <Unique 26894>
  <PgfTag `program'>
  <ParaLine 
   <TextRectID 54>
  >
 > # end of Para
 <Para 
  <Unique 26895>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <String `vector();'>
  >
 > # end of Para
 <Para 
  <Unique 26896>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <String `vector(size_type n, const T& value = T());'>
  >
 > # end of Para
 <Para 
  <Unique 40009>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <String `vector(const vector<T, Allocator\>& x); '>
  >
 > # end of Para
 <Para 
  <Unique 40010>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <String `template <class InputIterator\>'>
  >
 > # end of Para
 <Para 
  <Unique 40011>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <String `vector(InputIterator first, InputIterator last);'>
  >
 > # end of Para
 <Para 
  <Unique 34554>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <String `~vector();'>
  >
 > # end of Para
 <Para 
  <Unique 34555>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <String `vector<T, Allocator\>& operator=(const vector<T, Allocator\>& x);'>
  >
 > # end of Para
 <Para 
  <Unique 26902>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <String `void reserve(size_type n);'>
  >
 > # end of Para
 <Para 
  <Unique 4313>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <String `void swap(vector<T, Allocator\>& x);'>
  >
 > # end of Para
 <Para 
  <Unique 26904>
  <PgfTag `program'>
  <ParaLine 
  >
 > # end of Para
 <Para 
  <Unique 34810>
  <PgfTag `program'>
  <ParaLine 
   <String `// accessors:'>
  >
 > # end of Para
 <Para 
  <Unique 26905>
  <PgfTag `program'>
  <ParaLine 
  >
 > # end of Para
 <Para 
  <Unique 26906>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <String `iterator begin();'>
  >
 > # end of Para
 <Para 
  <Unique 26907>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <String `const_iterator begin() const;'>
  >
 > # end of Para
 <Para 
  <Unique 5251>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <String `iterator end();'>
  >
 > # end of Para
 <Para 
  <Unique 5252>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <String `const_iterator end() const;'>
  >
 > # end of Para
 <Para 
  <Unique 5253>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <String `reverse_iterator rbegin();'>
  >
 > # end of Para
 <Para 
  <Unique 5257>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <String `const_reverse_iterator rbegin();'>
  >
 > # end of Para
 <Para 
  <Unique 5259>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <String `reverse_iterator rend();'>
  >
 > # end of Para
 <Para 
  <Unique 5261>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <String `const_reverse_iterator rend();'>
  >
 > # end of Para
 <Para 
  <Unique 26910>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <String `size_type size() const;'>
  >
 > # end of Para
 <Para 
  <Unique 40732>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <String `size_type max_size() const;'>
  >
 > # end of Para
 <Para 
  <Unique 26911>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <String `size_type capacity() const;'>
  >
 > # end of Para
 <Para 
  <Unique 26912>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <String `bool empty() const;'>
  >
 > # end of Para
 <Para 
  <Unique 26913>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <String `reference o'>
   <String `perator[](size_type n);'>
  >
 > # end of Para
 <Para 
  <Unique 26914>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <String `const_reference o'>
   <String `perator[](size_type n) const;'>
  >
 > # end of Para
 <Para 
  <Unique 26915>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <String `reference f'>
   <String `ront();'>
  >
 > # end of Para
 <Para 
  <Unique 26916>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <String `const_reference'>
   <String ` front() const;'>
  >
 > # end of Para
 <Para 
  <Unique 26917>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <String `reference b'>
   <String `ack(); '>
  >
 > # end of Para
 <Para 
  <Unique 26918>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <String `const_reference'>
   <String ` back() const; '>
  >
 > # end of Para
 <Para 
  <Unique 26919>
  <PgfTag `program'>
  <ParaLine 
  >
 > # end of Para
 <Para 
  <Unique 26920>
  <PgfTag `program'>
  <ParaLine 
   <String `// insert/erase:'>
  >
 > # end of Para
 <Para 
  <Unique 26921>
  <PgfTag `program'>
  <ParaLine 
  >
 > # end of Para
 <Para 
  <Unique 26922>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <String `void push_back(const T& x);'>
  >
 > # end of Para
 <Para 
  <Unique 26923>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <String `iterator insert(iterator position, const T& x = T());'>
  >
 > # end of Para
 <Para 
  <Unique 26924>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <String `void insert(iterator position, size_type n, const T& x'>
   <String `)'>
   <String `;'>
  >
 > # end of Para
 <Para 
  <Unique 26925>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <String `template <class InputIterator\> '>
  >
 > # end of Para
 <Para 
  <Unique 26926>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <String `void insert(iterator position, InputIterator first, InputIterator last);'>
  >
 > # end of Para
 <Para 
  <Unique 26927>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <String `void pop_back();'>
  >
 > # end of Para
 <Para 
  <Unique 26928>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <String `void erase(iterator position);'>
  >
 > # end of Para
 <Para 
  <Unique 26929>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <String `void erase(iterator first, iterator last);'>
  >
 > # end of Para
 <Para 
  <Unique 26930>
  <PgfTag `program'>
  <ParaLine 
   <String `};'>
  >
 > # end of Para
 <Para 
  <Unique 26931>
  <PgfTag `program'>
  <ParaLine 
  >
 > # end of Para
 <Para 
  <Unique 26933>
  <PgfTag `program'>
  <ParaLine 
   <String `template <class T, class Allocator\>'>
  >
 > # end of Para
 <Para 
  <Unique 26934>
  <PgfTag `program'>
  <ParaLine 
   <String `bool operator==(const vector<T, Allocator\>& x, const vector<T, Allocator\>& y);'>
  >
 > # end of Para
 <Para 
  <Unique 26935>
  <PgfTag `program'>
  <ParaLine 
  >
 > # end of Para
 <Para 
  <Unique 26936>
  <PgfTag `program'>
  <ParaLine 
   <String `template <class T, class Allocator\>'>
  >
 > # end of Para
 <Para 
  <Unique 26937>
  <PgfTag `program'>
  <ParaLine 
   <String `bool operator<(const vector<T, Allocator\>& x, const vector<T, Allocator\>& y);'>
  >
 > # end of Para
 <Para 
  <Unique 34615>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
  >
 > # end of Para
 <Para 
  <Unique 34621>
  <PgfTag `body'>
  <ParaLine 
   <Font 
    <FTag `program'>
   > # end of Font
   <String `iterator'>
   <Font 
    <FTag `'>
   > # end of Font
   <String ` is a random access iterator '>
   <Char Tab >
   <String `referring to '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `T'>
   <Font 
    <FTag `'>
   > # end of Font
   <String `. The exact type is implementation dependent and '>
  >
  <ParaLine 
   <String `determined by '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `Allocator'>
   <Font 
    <FTag `'>
   > # end of Font
   <String `. '>
   <Char Tab >
  >
 > # end of Para
 <Para 
  <Unique 34646>
  <PgfTag `body'>
  <ParaLine 
   <Font 
    <FTag `program'>
   > # end of Font
   <String `const_iterator'>
   <Font 
    <FTag `'>
   > # end of Font
   <String ` is a constant random access iterator referring to '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `const T'>
   <Font 
    <FTag `'>
   > # end of Font
   <String `.'>
   <Char Tab >
   <String ` The exact type is '>
  >
  <ParaLine 
   <String `implementation dependent and determined by '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `Allocator'>
   <Font 
    <FTag `'>
   > # end of Font
   <String `. It is guaranteed that there is a constructor for '>
  >
  <ParaLine 
   <Font 
    <FTag `program'>
   > # end of Font
   <String `const_iterator'>
   <Font 
    <FTag `'>
   > # end of Font
   <String ` out of '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `iterator'>
   <Font 
    <FTag `'>
   > # end of Font
   <String `.'>
  >
 > # end of Para
 <Para 
  <Unique 34560>
  <PgfTag `body'>
  <ParaLine 
   <TextRectID 55>
   <Font 
    <FTag `program'>
   > # end of Font
   <Char Tab >
   <Char Tab >
   <String `size_type'>
   <Font 
    <FTag `'>
   > # end of Font
   <String ` is an unsigned integral type. The exact type is implementation dependent and determined by '>
  >
  <ParaLine 
   <Font 
    <FTag `program'>
   > # end of Font
   <String `Allocator'>
   <Font 
    <FTag `'>
   > # end of Font
   <String `.'>
  >
 > # end of Para
 <Para 
  <Unique 34696>
  <PgfTag `body'>
  <ParaLine 
   <Char Tab >
   <Font 
    <FTag `program'>
   > # end of Font
   <String `difference_type'>
   <Font 
    <FTag `'>
   > # end of Font
   <String ` is a signed integral type. The exact type is implementation dependent and determined '>
  >
  <ParaLine 
   <String `by '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `Allocator'>
   <Font 
    <FTag `'>
   > # end of Font
   <String `.'>
  >
 > # end of Para
 <Para 
  <Unique 34590>
  <PgfTag `body'>
  <ParaLine 
   <String `The constructor'>
   <Font 
    <FTag `program'>
   > # end of Font
   <String ` template <class InputIterator\> '>
   <Char Tab >
   <String `vector(InputIterator first, InputIterator '>
  >
  <ParaLine 
   <String `last)'>
   <Font 
    <FTag `'>
   > # end of Font
   <String ` makes only '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `N'>
   <Font 
    <FTag `'>
   > # end of Font
   <String ` calls to the copy constructor of '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `T'>
   <Font 
    <FTag `'>
   > # end of Font
   <String ` (where '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `N'>
   <Font 
    <FTag `'>
   > # end of Font
   <String ` is the distance between '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `first'>
   <Font 
    <FTag `'>
   > # end of Font
   <String ` and '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `last'>
   <Font 
    <FTag `'>
   > # end of Font
   <String `) and '>
  >
  <ParaLine 
   <String `no reallocations if iterators '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `first'>
   <Font 
    <FTag `'>
   > # end of Font
   <String ` and '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `last'>
   <Font 
    <FTag `'>
   > # end of Font
   <String ` are of forward, bidirectional, or random access categories. It '>
  >
  <ParaLine 
   <String `does at most '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `2N'>
   <Font 
    <FTag `'>
   > # end of Font
   <String ` calls to the copy constructor of '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `T'>
   <Font 
    <FTag `'>
   > # end of Font
   <String ` and '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `logN'>
   <Font 
    <FTag `'>
   > # end of Font
   <String ` reallocations if they are just input iterators, since '>
  >
  <ParaLine 
   <String `it is impossible to determine the distance between '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `first'>
   <Font 
    <FTag `'>
   > # end of Font
   <String ` and '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `last'>
   <Font 
    <FTag `'>
   > # end of Font
   <String ` and then do copying.'>
  >
 > # end of Para
 <Para 
  <Unique 26944>
  <PgfTag `body'>
  <ParaLine 
   <String `The member function '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `capacity'>
   <Font 
    <FTag `'>
   > # end of Font
   <String ` returns the size of the allocated storage in the vector. The member function '>
  >
  <ParaLine 
   <Font 
    <FTag `program'>
   > # end of Font
   <String `reserve'>
   <Font 
    <FTag `'>
   > # end of Font
   <String ` is a directive that informs '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `vector'>
   <Font 
    <FTag `'>
   > # end of Font
   <String ` of a planned change in size, so that it can manage the storage '>
  >
  <ParaLine 
   <String `allocation accordingly. It does not change the size of the sequence and takes at most linear time in the size '>
  >
  <ParaLine 
   <String `of the sequence. Reallocation happens at this point if and only if the current capacity is less than the '>
  >
  <ParaLine 
   <String `argument of '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `reserve'>
   <Font 
    <FTag `'>
   > # end of Font
   <String `. After '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `reserve'>
   <Font 
    <FTag `'>
   > # end of Font
   <String `, '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `capacity'>
   <Font 
    <FTag `'>
   > # end of Font
   <String ` is greater or equal to the argument of '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `reserve'>
   <Font 
    <FTag `'>
   > # end of Font
   <String ` if '>
  >
  <ParaLine 
   <String `reallocation happens; and equal to the previous value of '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `capacity'>
   <Font 
    <FTag `'>
   > # end of Font
   <String ` otherwise. Reallocation invalidates all '>
  >
  <ParaLine 
   <String `the references, pointers, and iterators referring to the elements in the sequence. It is guaranteed that no '>
  >
  <ParaLine 
   <String `reallocation takes place during the insertions that happen after '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `reserve'>
   <Font 
    <FTag `'>
   > # end of Font
   <String ` takes place till the time when the '>
  >
  <ParaLine 
   <String `size of the vector reaches the size specified by '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `reserve'>
   <Font 
    <FTag `'>
   > # end of Font
   <String `.'>
  >
 > # end of Para
 <Para 
  <Unique 34541>
  <PgfTag `body'>
  <ParaLine 
   <Font 
    <FTag `program'>
   > # end of Font
   <String `insert'>
   <Font 
    <FTag `'>
   > # end of Font
   <String ` causes reallocation if the new size is greater than the old capacity. If no reallocation happens, all the '>
  >
  <ParaLine 
   <String `iterators and references before the insertion point remain valid. Inserting a single element into a vector is '>
  >
  <ParaLine 
   <String `linear in the distance from the insertion point to the end of the vector. The amortized complexity over the '>
  >
  <ParaLine 
   <String `lifetime of a vector of inserting a single element at its end is constant. Insertion of multiple elements into a '>
  >
  <ParaLine 
   <String `vector with a single call of the insert member function is linear in the sum of the number of elements plus '>
  >
  <ParaLine 
   <String `the distance to the end of the vector. In other words, it is much faster to insert many elements into the '>
  >
  <ParaLine 
   <String `middle of a vector at once than to do the insertion one at a time. The insert template member function '>
  >
  <ParaLine 
   <String `preallocates enough storage for the insertion if the iterators '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `first'>
   <Font 
    <FTag `'>
   > # end of Font
   <String ` and '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `last'>
   <Font 
    <FTag `'>
   > # end of Font
   <String ` are of forward, bidirectional or '>
  >
  <ParaLine 
   <String `random access category. Otherwise, it does insert elements one by one and should not be used for inserting '>
  >
  <ParaLine 
   <String `into the middle of vectors. '>
  >
 > # end of Para
 <Para 
  <Unique 34702>
  <PgfTag `body'>
  <ParaLine 
   <Font 
    <FTag `program'>
   > # end of Font
   <String `erase'>
   <Font 
    <FTag `'>
   > # end of Font
   <String ` invalidates all the iterators and references after the point of the erase. The destructor of '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `T'>
   <Font 
    <FTag `'>
   > # end of Font
   <String ` is called the '>
  >
  <ParaLine 
   <String `number of times equal to the number of the elements erased, but the assignment operator of '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `T'>
   <Font 
    <FTag `'>
   > # end of Font
   <String ` is called the '>
  >
  <ParaLine 
   <String `number of times equal to the number of elements in the vector after the erased elements. '>
  >
 > # end of Para
 <Para 
  <Unique 38662>
  <PgfTag `body'>
  <ParaLine 
   <String `To optimize space allocation, a specialization for '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `bool'>
   <Font 
    <FTag `'>
   > # end of Font
   <String ` is provided:'>
  >
 > # end of Para
 <Para 
  <Unique 38663>
  <PgfTag `program'>
  <ParaLine 
  >
 > # end of Para
 <Para 
  <Unique 38813>
  <PgfTag `program'>
  <ParaLine 
   <String `class vector<bool, allocator\> {'>
  >
 > # end of Para
 <Para 
  <Unique 38664>
  <PgfTag `program'>
  <ParaLine 
   <String `public:'>
  >
 > # end of Para
 <Para 
  <Unique 38665>
  <PgfTag `program'>
  <ParaLine 
  >
 > # end of Para
 <Para 
  <Unique 38666>
  <PgfTag `program'>
  <ParaLine 
   <String `// bit reference:'>
  >
 > # end of Para
 <Para 
  <Unique 38667>
  <PgfTag `program'>
  <ParaLine 
  >
 > # end of Para
 <Para 
  <Unique 38668>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <String `class reference {'>
  >
 > # end of Para
 <Para 
  <Unique 38669>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <String `public:'>
  >
 > # end of Para
 <Para 
  <Unique 38670>
  <PgfTag `program'>
  <ParaLine 
   <String `      '>
   <Char Tab >
   <Char Tab >
   <String `~reference();'>
  >
 > # end of Para
 <Para 
  <Unique 38671>
  <PgfTag `program'>
  <ParaLine 
   <String `       '>
   <Char Tab >
   <Char Tab >
   <String `operator bool() const;'>
  >
 > # end of Para
 <Para 
  <Unique 38672>
  <PgfTag `program'>
  <ParaLine 
   <String `       '>
   <Char Tab >
   <Char Tab >
   <String `reference& operator=(const bool x);'>
  >
 > # end of Para
 <Para 
  <Unique 38673>
  <PgfTag `program'>
  <ParaLine 
   <String `       '>
   <Char Tab >
   <Char Tab >
   <String `void flip();'>
   <Char Tab >
   <Char Tab >
   <Char Tab >
   <String `// flips the bit'>
  >
 > # end of Para
 <Para 
  <Unique 38674>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <String `};'>
  >
 > # end of Para
 <Para 
  <Unique 38675>
  <PgfTag `program'>
  <ParaLine 
  >
 > # end of Para
 <Para 
  <Unique 38676>
  <PgfTag `program'>
  <ParaLine 
   <String `// typedefs:'>
  >
 > # end of Para
 <Para 
  <Unique 38677>
  <PgfTag `program'>
  <ParaLine 
  >
 > # end of Para
 <Para 
  <Unique 6388>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <String `typedef bool const_reference;'>
  >
 > # end of Para
 <Para 
  <Unique 38678>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <String `typedef iterator; '>
  >
 > # end of Para
 <Para 
  <Unique 6964>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <String `typedef const_iterator; '>
  >
 > # end of Para
 <Para 
  <Unique 6965>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <String `typedef size_t size_type;'>
  >
 > # end of Para
 <Para 
  <Unique 6966>
  <PgfTag `program'>
  <ParaLine 
   <TextRectID 56>
   <Char Tab >
   <String `typedef ptrdiff_t difference_type'>
   <String `;'>
  >
 > # end of Para
 <Para 
  <Unique 38682>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <String `typedef bool value_type;'>
  >
 > # end of Para
 <Para 
  <Unique 6385>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <String `typedef reverse_iterator;'>
  >
 > # end of Para
 <Para 
  <Unique 6387>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <String `typedef const_reverse_iterator;'>
  >
 > # end of Para
 <Para 
  <Unique 38683>
  <PgfTag `program'>
  <ParaLine 
  >
 > # end of Para
 <Para 
  <Unique 38684>
  <PgfTag `program'>
  <ParaLine 
   <String `// allocation/deallocation:'>
  >
 > # end of Para
 <Para 
  <Unique 38685>
  <PgfTag `program'>
  <ParaLine 
  >
 > # end of Para
 <Para 
  <Unique 38686>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <String `vector();'>
  >
 > # end of Para
 <Para 
  <Unique 38687>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <String `vector(size_type n, const bool& value = bool());'>
  >
 > # end of Para
 <Para 
  <Unique 38688>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <String `vector(const vector<bool, allocator\>& x); '>
  >
 > # end of Para
 <Para 
  <Unique 38689>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <String `template <class InputIterator\>'>
  >
 > # end of Para
 <Para 
  <Unique 38690>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <String `vector(InputIterator first, InputIterator last);'>
  >
 > # end of Para
 <Para 
  <Unique 38691>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <String `~vector();'>
  >
 > # end of Para
 <Para 
  <Unique 38692>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <String `vector<bool, allocator\>& operator=(const vector<bool, allocator\>& x);'>
  >
 > # end of Para
 <Para 
  <Unique 4321>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <String `void reserve(size_type n);'>
  >
 > # end of Para
 <Para 
  <Unique 4322>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <String `void swap(vector<bool, allocator\>& x);'>
  >
 > # end of Para
 <Para 
  <Unique 4323>
  <PgfTag `program'>
  <ParaLine 
  >
 > # end of Para
 <Para 
  <Unique 38695>
  <PgfTag `program'>
  <ParaLine 
   <String `// accessors:'>
  >
 > # end of Para
 <Para 
  <Unique 38696>
  <PgfTag `program'>
  <ParaLine 
  >
 > # end of Para
 <Para 
  <Unique 38697>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <String `iterator begin();'>
  >
 > # end of Para
 <Para 
  <Unique 38698>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <String `const_iterator begin() const;'>
  >
 > # end of Para
 <Para 
  <Unique 38699>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <String `iterator end();'>
  >
 > # end of Para
 <Para 
  <Unique 38700>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <String `const_iterator end() const;'>
  >
 > # end of Para
 <Para 
  <Unique 6390>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <String `reverse_iterator rbegin();'>
  >
 > # end of Para
 <Para 
  <Unique 6392>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <String `const_reverse_iterator rbegin();'>
  >
 > # end of Para
 <Para 
  <Unique 6393>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <String `reverse_iterator rend();'>
  >
 > # end of Para
 <Para 
  <Unique 6394>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <String `const_reverse_iterator rend();'>
  >
 > # end of Para
 <Para 
  <Unique 38701>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <String `size_type size() const;'>
  >
 > # end of Para
 <Para 
  <Unique 40734>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <String `size_type max_size() const;'>
  >
 > # end of Para
 <Para 
  <Unique 38702>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <String `size_type capacity() const;'>
  >
 > # end of Para
 <Para 
  <Unique 38703>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <String `bool empty() const;'>
  >
 > # end of Para
 <Para 
  <Unique 38704>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <String `reference operator[](size_type n);'>
  >
 > # end of Para
 <Para 
  <Unique 38705>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <String `const'>
   <String `_r'>
   <String `eference operator[](size_type n) const;'>
  >
 > # end of Para
 <Para 
  <Unique 38706>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <String `reference front();'>
  >
 > # end of Para
 <Para 
  <Unique 38707>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <String `const'>
   <String `_r'>
   <String `eference front() const;'>
  >
 > # end of Para
 <Para 
  <Unique 38708>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <String `reference back(); '>
  >
 > # end of Para
 <Para 
  <Unique 38709>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <String `const'>
   <String `_r'>
   <String `eference back() const; '>
  >
 > # end of Para
 <Para 
  <Unique 38710>
  <PgfTag `program'>
  <ParaLine 
  >
 > # end of Para
 <Para 
  <Unique 38711>
  <PgfTag `program'>
  <ParaLine 
   <String `// insert/erase:'>
  >
 > # end of Para
 <Para 
  <Unique 38712>
  <PgfTag `program'>
  <ParaLine 
  >
 > # end of Para
 <Para 
  <Unique 38713>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <String `void push_back(const bool& x);'>
  >
 > # end of Para
 <Para 
  <Unique 38714>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <String `iterator insert(iterator position, const bool& x = bool());'>
  >
 > # end of Para
 <Para 
  <Unique 38715>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <String `void insert (iterator position, size_type n, const bool& x'>
   <String `)'>
   <String `;'>
  >
 > # end of Para
 <Para 
  <Unique 38716>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <String `template <class InputIterator\> '>
  >
 > # end of Para
 <Para 
  <Unique 38717>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <String `void insert (iterator position, InputIterator first, InputIterator last);'>
  >
 > # end of Para
 <Para 
  <Unique 38718>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <String `void pop_back();'>
  >
 > # end of Para
 <Para 
  <Unique 38719>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <String `void erase(iterator position);'>
  >
 > # end of Para
 <Para 
  <Unique 38720>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <String `void erase(iterator first, iterator last);'>
  >
 > # end of Para
 <Para 
  <Unique 38721>
  <PgfTag `program'>
  <ParaLine 
   <String `};'>
  >
 > # end of Para
 <Para 
  <Unique 38722>
  <PgfTag `program'>
  <ParaLine 
  >
 > # end of Para
 <Para 
  <Unique 4347>
  <PgfTag `program'>
  <ParaLine 
   <String `void swap(vector<bool, allocator\>::reference x, '>
  >
 > # end of Para
 <Para 
  <Unique 4372>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <String ` vector<bool, allocator\>::reference y);'>
  >
 > # end of Para
 <Para 
  <Unique 4373>
  <PgfTag `program'>
  <ParaLine 
  >
 > # end of Para
 <Para 
  <Unique 38724>
  <PgfTag `program'>
  <ParaLine 
   <String `bool operator==(const vector<bool, allocator\>& x, '>
  >
 > # end of Para
 <Para 
  <Unique 38761>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <Char Tab >
   <String `const vector<bool, allocator\>& y);'>
  >
 > # end of Para
 <Para 
  <Unique 38725>
  <PgfTag `program'>
  <ParaLine 
  >
 > # end of Para
 <Para 
  <Unique 38727>
  <PgfTag `program'>
  <ParaLine 
   <String `bool operator<(const vector<bool, allocator\>& x, '>
  >
 > # end of Para
 <Para 
  <Unique 38766>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <Char Tab >
   <String `const vector<bool, allocator\>& y);'>
  >
 > # end of Para
 <Para 
  <Unique 38785>
  <PgfTag `body'>
  <ParaLine 
   <TextRectID 57>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `reference'>
   <Font 
    <FTag `'>
   > # end of Font
   <String ` is a class that simulates the behavior of references of a single bit in '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `vector<bool\>'>
   <Font 
    <FTag `'>
   > # end of Font
   <String `.'>
  >
 > # end of Para
 <Para 
  <Unique 38786>
  <PgfTag `body'>
  <ParaLine 
   <String `Every implementation is expected to provide specializations of '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `vector<bool\>'>
   <Font 
    <FTag `'>
   > # end of Font
   <String ` for all supported memory'>
   <String ` '>
  >
  <ParaLine 
   <String `models.'>
  >
 > # end of Para
 <Para 
  <Unique 4377>
  <PgfTag `body'>
  <ParaLine 
   <AFrame 6>
  >
 > # end of Para
 <Para 
  <Unique 26947>
  <PgfTag `subsubsection'>
  <PgfNumString `8.1.2 '>
  <ParaLine 
   <String `List'>
  >
 > # end of Para
 <Para 
  <Unique 40994>
  <PgfTag `body'>
  <ParaLine 
   <Font 
    <FTag `program'>
   > # end of Font
   <String `list'>
   <Font 
    <FTag `'>
   > # end of Font
   <String ` is a kind of sequence that supports bidirectional iterators and allows constant time insert and erase '>
  >
  <ParaLine 
   <String `operations anywhere within the sequence, with storage management handled automatically. Unlike '>
  >
  <ParaLine 
   <String `vectors and deques, fast random access to list elements is not supported, but many algorithms only need '>
  >
  <ParaLine 
   <String `sequential access anyway.'>
  >
 > # end of Para
 <Para 
  <Unique 32871>
  <PgfTag `program'>
  <ParaLine 
  >
 > # end of Para
 <Para 
  <Unique 32872>
  <PgfTag `program'>
  <ParaLine 
   <String `template <class T, template <class U\> class Allocator = allocator\>'>
  >
 > # end of Para
 <Para 
  <Unique 32873>
  <PgfTag `program'>
  <ParaLine 
   <String `class list {'>
  >
 > # end of Para
 <Para 
  <Unique 26952>
  <PgfTag `program'>
  <ParaLine 
   <String `public:'>
  >
 > # end of Para
 <Para 
  <Unique 26953>
  <PgfTag `program'>
  <ParaLine 
  >
 > # end of Para
 <Para 
  <Unique 26954>
  <PgfTag `program'>
  <ParaLine 
   <String `// typedefs:'>
  >
 > # end of Para
 <Para 
  <Unique 26955>
  <PgfTag `program'>
  <ParaLine 
  >
 > # end of Para
 <Para 
  <Unique 26956>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <String `typedef iterator; '>
  >
 > # end of Para
 <Para 
  <Unique 26967>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <String `typedef const_iterator; '>
  >
 > # end of Para
 <Para 
  <Unique 6398>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <String `typedef Allocator<T\>::pointer pointer;'>
  >
 > # end of Para
 <Para 
  <Unique 6400>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <String `typedef Allocator<T\>::reference reference;'>
  >
 > # end of Para
 <Para 
  <Unique 6401>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <String `typedef Allocator<T\>::const_reference const_reference;'>
  >
 > # end of Para
 <Para 
  <Unique 26975>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <String `typedef size_type;'>
  >
 > # end of Para
 <Para 
  <Unique 26980>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <String `typedef difference_type;'>
  >
 > # end of Para
 <Para 
  <Unique 26985>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <String `typedef T value_type;'>
  >
 > # end of Para
 <Para 
  <Unique 6402>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <String `typedef reverse_iterator;'>
  >
 > # end of Para
 <Para 
  <Unique 6404>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <String `typedef const_reverse_iterator;'>
  >
 > # end of Para
 <Para 
  <Unique 26987>
  <PgfTag `program'>
  <ParaLine 
  >
 > # end of Para
 <Para 
  <Unique 26988>
  <PgfTag `program'>
  <ParaLine 
   <String `// allocation/deallocation:'>
  >
 > # end of Para
 <Para 
  <Unique 26989>
  <PgfTag `program'>
  <ParaLine 
  >
 > # end of Para
 <Para 
  <Unique 26990>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <String `list();'>
  >
 > # end of Para
 <Para 
  <Unique 26991>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <String `list(size_type n, const T& value = T());'>
  >
 > # end of Para
 <Para 
  <Unique 26992>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <String `template <class InputIterator\> '>
  >
 > # end of Para
 <Para 
  <Unique 26993>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <String `list(InputIterator first, InputIterator last); '>
  >
 > # end of Para
 <Para 
  <Unique 26994>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <String `list(const list<T, Allocator\>& x);'>
  >
 > # end of Para
 <Para 
  <Unique 26995>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <String `~list(); '>
  >
 > # end of Para
 <Para 
  <Unique 26996>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <String `list<T, Allocator\>& operator=(const list<T, Allocator\>& x);'>
  >
 > # end of Para
 <Para 
  <Unique 4327>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <String `void swap(list<T, Allocator\>& x);'>
  >
 > # end of Para
 <Para 
  <Unique 26997>
  <PgfTag `program'>
  <ParaLine 
  >
 > # end of Para
 <Para 
  <Unique 26998>
  <PgfTag `program'>
  <ParaLine 
   <String `// accessors:'>
  >
 > # end of Para
 <Para 
  <Unique 26999>
  <PgfTag `program'>
  <ParaLine 
  >
 > # end of Para
 <Para 
  <Unique 27000>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <String `iterator begin();'>
  >
 > # end of Para
 <Para 
  <Unique 27001>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <String `const_iterator begin() const;'>
  >
 > # end of Para
 <Para 
  <Unique 27002>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <String `iterator end();'>
  >
 > # end of Para
 <Para 
  <Unique 27003>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <String `const_iterator end() const;'>
  >
 > # end of Para
 <Para 
  <Unique 6413>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <String `reverse_iterator rbegin();'>
  >
 > # end of Para
 <Para 
  <Unique 6415>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <String `const_reverse_iterator rbegin();'>
  >
 > # end of Para
 <Para 
  <Unique 6416>
  <PgfTag `program'>
  <ParaLine 
   <TextRectID 58>
   <Char Tab >
   <String `reverse_iterator rend();'>
  >
 > # end of Para
 <Para 
  <Unique 6417>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <String `const_reverse_iterator rend();'>
  >
 > # end of Para
 <Para 
  <Unique 27004>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <String `bool empty() const; '>
  >
 > # end of Para
 <Para 
  <Unique 27005>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <String `size_type size() const;'>
  >
 > # end of Para
 <Para 
  <Unique 27006>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <String `size_type max_size() const;'>
  >
 > # end of Para
 <Para 
  <Unique 40742>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <String `reference f'>
   <String `ront();'>
  >
 > # end of Para
 <Para 
  <Unique 27007>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <String `const_reference f'>
   <String `ront() const;'>
  >
 > # end of Para
 <Para 
  <Unique 27008>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <String `reference b'>
   <String `ack(); '>
  >
 > # end of Para
 <Para 
  <Unique 27009>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <String `const'>
   <String `_reference b'>
   <String `ack() const; '>
  >
 > # end of Para
 <Para 
  <Unique 27010>
  <PgfTag `program'>
  <ParaLine 
  >
 > # end of Para
 <Para 
  <Unique 27011>
  <PgfTag `program'>
  <ParaLine 
   <String `// insert/erase:'>
  >
 > # end of Para
 <Para 
  <Unique 27012>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
  >
 > # end of Para
 <Para 
  <Unique 27013>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <String `void push_front(const T& x);'>
  >
 > # end of Para
 <Para 
  <Unique 27014>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <String `void push_back(const T& x);'>
  >
 > # end of Para
 <Para 
  <Unique 27015>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <String `iterator insert(iterator position, const T& x = T());'>
  >
 > # end of Para
 <Para 
  <Unique 27016>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <String `void insert(iterator position, size_type n, const T& x'>
   <String `)'>
   <String `;'>
  >
 > # end of Para
 <Para 
  <Unique 27017>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <String `template <class InputIterator\> '>
  >
 > # end of Para
 <Para 
  <Unique 27018>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <String `void insert(iterator position, InputIterator first, InputIterator last);'>
  >
 > # end of Para
 <Para 
  <Unique 39144>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <String `void pop_front();'>
  >
 > # end of Para
 <Para 
  <Unique 27020>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <String `void pop_back();'>
  >
 > # end of Para
 <Para 
  <Unique 27021>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <String `void erase(iterator position);'>
  >
 > # end of Para
 <Para 
  <Unique 27022>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <String `void erase(iterator first, iterator last);'>
  >
 > # end of Para
 <Para 
  <Unique 27023>
  <PgfTag `program'>
  <ParaLine 
  >
 > # end of Para
 <Para 
  <Unique 27024>
  <PgfTag `program'>
  <ParaLine 
   <String `// special mutative operations on list:'>
  >
 > # end of Para
 <Para 
  <Unique 27025>
  <PgfTag `program'>
  <ParaLine 
  >
 > # end of Para
 <Para 
  <Unique 40547>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <String `void splice(iterator position, list<T, Allocator\>& x);'>
  >
 > # end of Para
 <Para 
  <Unique 40548>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <String `void splice(iterator position, list<T, Allocator\>& x, iterator i);'>
  >
 > # end of Para
 <Para 
  <Unique 40549>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <String `void splice(iterator position, list<T, Allocator\>& x, iterator first,'>
  >
 > # end of Para
 <Para 
  <Unique 40550>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <Char Tab >
   <Char Tab >
   <String `iterator last);'>
  >
 > # end of Para
 <Para 
  <Unique 27026>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <String `void remove(const T& value);'>
  >
 > # end of Para
 <Para 
  <Unique 27027>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <String `template <class Predicate\> void remove_if(Predicate pred);'>
  >
 > # end of Para
 <Para 
  <Unique 27028>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <String `void unique();'>
  >
 > # end of Para
 <Para 
  <Unique 27029>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <String `template <class BinaryPredicate\> void unique(BinaryPredicate binary_pred);'>
  >
 > # end of Para
 <Para 
  <Unique 27030>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <String `void merge(list<T, Allocator\>& x);'>
  >
 > # end of Para
 <Para 
  <Unique 27031>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <String `template <class Compare\> void merge(list<T, Allocator\>& x, Compare comp);'>
  >
 > # end of Para
 <Para 
  <Unique 27032>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <String `void reverse();'>
  >
 > # end of Para
 <Para 
  <Unique 27033>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <String `void sort();'>
  >
 > # end of Para
 <Para 
  <Unique 27034>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <String `template <class Compare\> void sort(Compare comp);'>
  >
 > # end of Para
 <Para 
  <Unique 27035>
  <PgfTag `program'>
  <ParaLine 
   <String `};'>
  >
 > # end of Para
 <Para 
  <Unique 27036>
  <PgfTag `program'>
  <ParaLine 
  >
 > # end of Para
 <Para 
  <Unique 27037>
  <PgfTag `program'>
  <ParaLine 
   <String `template <class T, class Allocator\>'>
  >
 > # end of Para
 <Para 
  <Unique 27038>
  <PgfTag `program'>
  <ParaLine 
   <String `bool operator==(const list<T, Allocator\>& x, const list<T, Allocator\>& y);'>
  >
 > # end of Para
 <Para 
  <Unique 27039>
  <PgfTag `program'>
  <ParaLine 
  >
 > # end of Para
 <Para 
  <Unique 27040>
  <PgfTag `program'>
  <ParaLine 
   <String `template <class T, class Allocator\>'>
  >
 > # end of Para
 <Para 
  <Unique 27041>
  <PgfTag `program'>
  <ParaLine 
   <String `bool operator<(const list<T, Allocator\>& x, const list<T, Allocator\>& y);'>
  >
 > # end of Para
 <Para 
  <Unique 34715>
  <PgfTag `body'>
  <ParaLine 
   <Font 
    <FTag `program'>
   > # end of Font
   <String `iterator'>
   <Font 
    <FTag `'>
   > # end of Font
   <String ` is a bidirectional iterator '>
   <Char Tab >
   <String `referring to '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `T'>
   <Font 
    <FTag `'>
   > # end of Font
   <String `. The exact type is implementation dependent and '>
  >
  <ParaLine 
   <String `determined by '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `Allocator'>
   <Font 
    <FTag `'>
   > # end of Font
   <String `. '>
   <Char Tab >
   <Char Tab >
  >
 > # end of Para
 <Para 
  <Unique 34716>
  <PgfTag `body'>
  <ParaLine 
   <Font 
    <FTag `program'>
   > # end of Font
   <String `const_iterator'>
   <Font 
    <FTag `'>
   > # end of Font
   <String ` is a constant bidirectional iterator referring to '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `const T'>
   <Font 
    <FTag `'>
   > # end of Font
   <String `.'>
   <Char Tab >
   <String ` The exact type is implementation '>
  >
  <ParaLine 
   <String `dependent and determined by '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `Allocator'>
   <Font 
    <FTag `'>
   > # end of Font
   <String `. It is guaranteed that there is a constructor for '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `const_iterator'>
   <Font 
    <FTag `'>
   > # end of Font
   <String ` '>
  >
  <ParaLine 
   <String `out of '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `iterator'>
   <Font 
    <FTag `'>
   > # end of Font
   <String `.'>
  >
 > # end of Para
 <Para 
  <Unique 34717>
  <PgfTag `body'>
  <ParaLine 
   <Font 
    <FTag `program'>
   > # end of Font
   <Char Tab >
   <Char Tab >
   <String `size_type'>
   <Font 
    <FTag `'>
   > # end of Font
   <String ` is an unsigned integral type. The exact type is implementation dependent and determined by '>
  >
  <ParaLine 
   <Font 
    <FTag `program'>
   > # end of Font
   <String `Allocator'>
   <Font 
    <FTag `'>
   > # end of Font
   <String `.'>
  >
 > # end of Para
 <Para 
  <Unique 34718>
  <PgfTag `body'>
  <ParaLine 
   <Char Tab >
   <Font 
    <FTag `program'>
   > # end of Font
   <String `difference_type'>
   <Font 
    <FTag `'>
   > # end of Font
   <String ` is a signed integral type. The exact type is implementation dependent and determined '>
  >
  <ParaLine 
   <String `by '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `Allocator'>
   <Font 
    <FTag `'>
   > # end of Font
   <String `.'>
  >
 > # end of Para
 <Para 
  <Unique 34789>
  <PgfTag `body'>
  <ParaLine 
   <TextRectID 59>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `insert'>
   <Font 
    <FTag `'>
   > # end of Font
   <String ` does not affect the validity of iterators and references. Insertion of a single element into a list takes '>
  >
  <ParaLine 
   <String `constant time and exactly one call to the copy constructor of '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `T'>
   <Font 
    <FTag `'>
   > # end of Font
   <String `. Insertion of multiple elements into a list is '>
  >
  <ParaLine 
   <String `linear in the number of elements inserted, and the number of calls to the copy constructor of '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `T'>
   <Font 
    <FTag `'>
   > # end of Font
   <String ` is exactly '>
  >
  <ParaLine 
   <String `equal to the number of elements inserted. '>
  >
 > # end of Para
 <Para 
  <Unique 39147>
  <PgfTag `body'>
  <ParaLine 
   <Font 
    <FTag `program'>
   > # end of Font
   <String `erase'>
   <Font 
    <FTag `'>
   > # end of Font
   <String ` invalidates only the iterators and references to the erased elements. Erasing a single element is a '>
  >
  <ParaLine 
   <String `constant time operation with a single call to the destructor of '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `T'>
   <Font 
    <FTag `'>
   > # end of Font
   <String `. Erasing a range in a list is linear time in the '>
  >
  <ParaLine 
   <String `size of the range and the number of calls to the destructor of type '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `T'>
   <Font 
    <FTag `'>
   > # end of Font
   <String ` is exactly equal to the size of the range.'>
  >
 > # end of Para
 <Para 
  <Unique 39149>
  <PgfTag `body'>
  <ParaLine 
   <String `Since lists allow fast insertion and erasing from the middle of a list, certain operations are provided '>
  >
  <ParaLine 
   <String `specifically for them:'>
  >
 > # end of Para
 <Para 
  <Unique 27047>
  <PgfTag `body'>
  <ParaLine 
   <Font 
    <FTag `program'>
   > # end of Font
   <String `list'>
   <Font 
    <FTag `'>
   > # end of Font
   <String ` provides three splice operations that destructively move elements from one list to another:'>
  >
 > # end of Para
 <Para 
  <Unique 40574>
  <PgfTag `body'>
  <ParaLine 
   <Font 
    <FTag `program'>
   > # end of Font
   <String `void splice(iterator position, list<T, Allocator\>& x)'>
   <Font 
    <FTag `'>
   > # end of Font
   <String ` inserts the contents of '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `x'>
   <Font 
    <FTag `'>
   > # end of Font
   <String ` before '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `position'>
   <Font 
    <FTag `'>
   > # end of Font
   <String ` '>
  >
  <ParaLine 
   <String `and '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `x'>
   <Font 
    <FTag `'>
   > # end of Font
   <String ` becomes empty. It takes constant time.'>
   <String ` The result is undefined if '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `&x'>
   <String ` == '>
   <String `t'>
   <String `his'>
   <Font 
    <FTag `'>
   > # end of Font
   <String `.'>
  >
 > # end of Para
 <Para 
  <Unique 40582>
  <PgfTag `body'>
  <ParaLine 
   <Char Tab >
   <Font 
    <FTag `program'>
   > # end of Font
   <String `void splice(iterator position, list<T, Allocator\>& x, iterator i)'>
   <Font 
    <FTag `'>
   > # end of Font
   <String ` inserts an element pointed '>
  >
  <ParaLine 
   <String `to by '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `i'>
   <Font 
    <FTag `'>
   > # end of Font
   <String ` from list '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `x'>
   <Font 
    <FTag `'>
   > # end of Font
   <String ` before '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `position'>
   <Font 
    <FTag `'>
   > # end of Font
   <String ` and removes the element from '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `x'>
   <Font 
    <FTag `'>
   > # end of Font
   <String `. It takes constant time. '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `i'>
   <Font 
    <FTag `'>
   > # end of Font
   <String ` is a valid '>
  >
  <ParaLine 
   <String `dereferenceable '>
   <String `iterator of '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `x'>
   <Font 
    <FTag `'>
   > # end of Font
   <String `.'>
   <String ` The result is un'>
   <String `changed if '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `position ='>
   <String `= i'>
   <Font 
    <FTag `'>
   > # end of Font
   <String ` or '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `position ='>
   <String `= ++i'>
   <Font 
    <FTag `'>
   > # end of Font
   <String `.'>
  >
 > # end of Para
 <Para 
  <Unique 40578>
  <PgfTag `body'>
  <ParaLine 
   <Font 
    <FTag `program'>
   > # end of Font
   <String `void splice(iterator position, list<T, Allocator\>& x, iterator first, '>
   <Char Tab >
   <Char Tab >
   <Char Tab >
   <String `iterator last)'>
   <Font 
    <FTag `'>
   > # end of Font
   <String ` '>
  >
  <ParaLine 
   <String `inserts elements in the range '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `[first, last)'>
   <Font 
    <FTag `'>
   > # end of Font
   <String ` before '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `position'>
   <Font 
    <FTag `'>
   > # end of Font
   <String ` and removes the elements from '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `x'>
   <Font 
    <FTag `'>
   > # end of Font
   <String `. It takes '>
  >
  <ParaLine 
   <String `constant time if '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `&'>
   <String `x == '>
   <String `t'>
   <String `his'>
   <Font 
    <FTag `'>
   > # end of Font
   <String `; otherwise, it takes l'>
   <String `inear time. '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `[first, last)'>
   <Font 
    <FTag `'>
   > # end of Font
   <String ` is a valid range in '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `x'>
   <Font 
    <FTag `'>
   > # end of Font
   <String `.'>
   <String ` The result '>
  >
  <ParaLine 
   <String `is undefined if '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `position'>
   <Font 
    <FTag `'>
   > # end of Font
   <String ` is an iterator in the range '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `[fir'>
   <String `s'>
   <String `t, last)'>
   <Font 
    <FTag `'>
   > # end of Font
   <String `.'>
  >
 > # end of Para
 <Para 
  <Unique 39155>
  <PgfTag `body'>
  <ParaLine 
   <Font 
    <FTag `program'>
   > # end of Font
   <String `remove'>
   <Font 
    <FTag `'>
   > # end of Font
   <String ` erases all the elements in the list referred by the list iterator '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `i'>
   <Font 
    <FTag `'>
   > # end of Font
   <String ` for which the following conditions '>
  >
  <ParaLine 
   <String `hold: '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `*i == value'>
   <Font 
    <FTag `'>
   > # end of Font
   <String `, '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `pred(*i) == true'>
   <Font 
    <FTag `'>
   > # end of Font
   <String `. '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `remove'>
   <Font 
    <FTag `'>
   > # end of Font
   <String ` is stable, that is, the relative order of the elements that are '>
  >
  <ParaLine 
   <String `not removed is the same as their relative order in the original list. Exactly '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `size()'>
   <Font 
    <FTag `'>
   > # end of Font
   <String ` applications of the '>
  >
  <ParaLine 
   <String `corresponding predicate are done. '>
  >
 > # end of Para
 <Para 
  <Unique 27048>
  <PgfTag `body'>
  <ParaLine 
   <Font 
    <FTag `'>
    <FFamily `Courier'>
    <FPostScriptName `Courier'>
    <FSize  9.0 pt>
   > # end of Font
   <String `unique'>
   <Font 
    <FTag `'>
   > # end of Font
   <String ` erases all but the first element from every consecutive group of equal elements in the list. Exactly '>
  >
  <ParaLine 
   <Font 
    <FTag `program'>
   > # end of Font
   <String `size() - 1'>
   <Font 
    <FTag `'>
   > # end of Font
   <String ` applications of the corresponding binary predicate are done.'>
  >
 > # end of Para
 <Para 
  <Unique 27049>
  <PgfTag `body'>
  <ParaLine 
   <Font 
    <FTag `'>
    <FFamily `Courier'>
    <FPostScriptName `Courier'>
    <FSize  9.0 pt>
   > # end of Font
   <String `merge'>
   <Font 
    <FTag `'>
   > # end of Font
   <String ` merges the argument list into the list (both are assumed to be sorted). The merge is stable, that is, for '>
  >
  <ParaLine 
   <String `equal elements in the two lists, the elements from the list always precede the elements from the argument '>
  >
  <ParaLine 
   <String `list. '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `x'>
   <Font 
    <FTag `'>
   > # end of Font
   <String ` is empty after the merge. At most '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `size() + x.size() - 1'>
   <Font 
    <FTag `'>
   > # end of Font
   <String ` comparisons are done.'>
  >
 > # end of Para
 <Para 
  <Unique 27050>
  <PgfTag `body'>
  <ParaLine 
   <Font 
    <FTag `program'>
   > # end of Font
   <String `reverse'>
   <Font 
    <FTag `'>
   > # end of Font
   <String ` reverses the order of the elements in the list. It is linear time.'>
  >
 > # end of Para
 <Para 
  <Unique 27051>
  <PgfTag `body'>
  <ParaLine 
   <Font 
    <FTag `program'>
   > # end of Font
   <String `sort'>
   <Font 
    <FTag `'>
   > # end of Font
   <String ` sorts the list according to the '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `operator<'>
   <Font 
    <FTag `'>
   > # end of Font
   <String ` or a compare function object. It is stable, that is, the relative '>
  >
  <ParaLine 
   <String `order of the equal elements is preserved. Approximately '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `NlogN'>
   <Font 
    <FTag `'>
   > # end of Font
   <String ` comparisons are done where '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `N'>
   <Font 
    <FTag `'>
   > # end of Font
   <String ` is equal to '>
  >
  <ParaLine 
   <Font 
    <FTag `program'>
   > # end of Font
   <String `size()'>
   <Font 
    <FTag `'>
   > # end of Font
   <String `.'>
  >
 > # end of Para
 <Para 
  <Unique 27053>
  <PgfTag `subsubsection'>
  <PgfNumString `8.1.3 '>
  <ParaLine 
   <String `Deque'>
  >
 > # end of Para
 <Para 
  <Unique 41000>
  <PgfTag `body'>
  <ParaLine 
   <Font 
    <FTag `program'>
   > # end of Font
   <String `deque'>
   <Font 
    <FTag `'>
   > # end of Font
   <String ` is a kind of sequence that, like a vector, supports random access iterators. In addition, it supports '>
  >
  <ParaLine 
   <String `constant time insert and erase operations at the beginning or the end; insert and erase in the middle take '>
  >
  <ParaLine 
   <String `linear time. As with vectors, storage management is handled automatically.'>
  >
 > # end of Para
 <Para 
  <Unique 27056>
  <PgfTag `program'>
  <ParaLine 
  >
 > # end of Para
 <Para 
  <Unique 27057>
  <PgfTag `program'>
  <ParaLine 
   <String `template <class T, template <class U\> class Allocator = allocator\>'>
  >
 > # end of Para
 <Para 
  <Unique 27058>
  <PgfTag `program'>
  <ParaLine 
   <String `class deque {'>
  >
 > # end of Para
 <Para 
  <Unique 27059>
  <PgfTag `program'>
  <ParaLine 
   <String `public:'>
  >
 > # end of Para
 <Para 
  <Unique 27060>
  <PgfTag `program'>
  <ParaLine 
  >
 > # end of Para
 <Para 
  <Unique 27061>
  <PgfTag `program'>
  <ParaLine 
   <String `// typedefs:'>
  >
 > # end of Para
 <Para 
  <Unique 27062>
  <PgfTag `program'>
  <ParaLine 
  >
 > # end of Para
 <Para 
  <Unique 27063>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <String `typedef iterator; '>
  >
 > # end of Para
 <Para 
  <Unique 27069>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <String `typedef const_iterator; '>
  >
 > # end of Para
 <Para 
  <Unique 6418>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <String `typedef Allocator<T\>::pointer pointer;'>
  >
 > # end of Para
 <Para 
  <Unique 6420>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <String `typedef Allocator<T\>::reference reference;'>
  >
 > # end of Para
 <Para 
  <Unique 6421>
  <PgfTag `program'>
  <ParaLine 
   <TextRectID 60>
   <Char Tab >
   <String `typedef Allocator<T\>::const_reference const_reference;'>
  >
 > # end of Para
 <Para 
  <Unique 27077>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <String `typedef size_type;'>
  >
 > # end of Para
 <Para 
  <Unique 27082>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <String `typedef difference_type;'>
  >
 > # end of Para
 <Para 
  <Unique 27087>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <String `typedef T value_type;'>
  >
 > # end of Para
 <Para 
  <Unique 6422>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <String `typedef reverse_iterator;'>
  >
 > # end of Para
 <Para 
  <Unique 6424>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <String `typedef const_reverse_iterator;'>
  >
 > # end of Para
 <Para 
  <Unique 27089>
  <PgfTag `program'>
  <ParaLine 
  >
 > # end of Para
 <Para 
  <Unique 27090>
  <PgfTag `program'>
  <ParaLine 
   <String `// allocation/deallocation:'>
  >
 > # end of Para
 <Para 
  <Unique 27091>
  <PgfTag `program'>
  <ParaLine 
  >
 > # end of Para
 <Para 
  <Unique 27092>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <String `deque();'>
  >
 > # end of Para
 <Para 
  <Unique 27093>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <String `deque(size_type n, const T& value = T());'>
  >
 > # end of Para
 <Para 
  <Unique 27094>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <String `deque(const deque<T, Allocator\>& x); '>
  >
 > # end of Para
 <Para 
  <Unique 27095>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <String `template <class InputIterator\>'>
  >
 > # end of Para
 <Para 
  <Unique 27096>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <String `deque(InputIterator first, InputIterator last);'>
  >
 > # end of Para
 <Para 
  <Unique 27097>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <String `~deque();'>
  >
 > # end of Para
 <Para 
  <Unique 27098>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <String `deque<T, Allocator\>& operator=(const deque<T, Allocator\>& x);'>
  >
 > # end of Para
 <Para 
  <Unique 4329>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <String `void swap(deque<T, Allocator\>& x);'>
  >
 > # end of Para
 <Para 
  <Unique 27099>
  <PgfTag `program'>
  <ParaLine 
  >
 > # end of Para
 <Para 
  <Unique 27100>
  <PgfTag `program'>
  <ParaLine 
   <String `// accessors:'>
  >
 > # end of Para
 <Para 
  <Unique 27101>
  <PgfTag `program'>
  <ParaLine 
  >
 > # end of Para
 <Para 
  <Unique 27102>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <String `iterator begin();'>
  >
 > # end of Para
 <Para 
  <Unique 27103>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <String `const_iterator begin() const;'>
  >
 > # end of Para
 <Para 
  <Unique 27104>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <String `iterator end();'>
  >
 > # end of Para
 <Para 
  <Unique 27105>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <String `const_iterator end() const;'>
  >
 > # end of Para
 <Para 
  <Unique 6425>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <String `reverse_iterator rbegin();'>
  >
 > # end of Para
 <Para 
  <Unique 6427>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <String `const_reverse_iterator rbegin();'>
  >
 > # end of Para
 <Para 
  <Unique 6428>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <String `reverse_iterator rend();'>
  >
 > # end of Para
 <Para 
  <Unique 6429>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <String `const_reverse_iterator rend();'>
  >
 > # end of Para
 <Para 
  <Unique 27106>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <String `size_type size() const;'>
  >
 > # end of Para
 <Para 
  <Unique 40738>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <String `size_type max_size() const;'>
  >
 > # end of Para
 <Para 
  <Unique 27107>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <String `bool empty() const;'>
  >
 > # end of Para
 <Para 
  <Unique 27108>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <String `reference o'>
   <String `perator[](size_type n);'>
  >
 > # end of Para
 <Para 
  <Unique 27109>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <String `const'>
   <String `_reference o'>
   <String `perator[](size_type n) const;'>
  >
 > # end of Para
 <Para 
  <Unique 27110>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <String `reference f'>
   <String `ront();'>
  >
 > # end of Para
 <Para 
  <Unique 27111>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <String `const_reference f'>
   <String `ront() const;'>
  >
 > # end of Para
 <Para 
  <Unique 27112>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <String `reference b'>
   <String `ack(); '>
  >
 > # end of Para
 <Para 
  <Unique 27113>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <String `const'>
   <String `_reference b'>
   <String `ack() const; '>
  >
 > # end of Para
 <Para 
  <Unique 27114>
  <PgfTag `program'>
  <ParaLine 
  >
 > # end of Para
 <Para 
  <Unique 27115>
  <PgfTag `program'>
  <ParaLine 
   <String `// insert/erase:'>
  >
 > # end of Para
 <Para 
  <Unique 27116>
  <PgfTag `program'>
  <ParaLine 
  >
 > # end of Para
 <Para 
  <Unique 27117>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <String `void push_front(const T& x);'>
  >
 > # end of Para
 <Para 
  <Unique 27118>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <String `void push_back(const T& x);'>
  >
 > # end of Para
 <Para 
  <Unique 27119>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <String `iterator insert(iterator position, const T& x = T());'>
  >
 > # end of Para
 <Para 
  <Unique 27120>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <String `void insert (iterator position, size_type n, const T& x'>
   <String `)'>
   <String `;'>
  >
 > # end of Para
 <Para 
  <Unique 27121>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <String `template <class InputIterator\> '>
  >
 > # end of Para
 <Para 
  <Unique 27122>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <String `void insert (iterator position, InputIterator first, InputIterator last);'>
  >
 > # end of Para
 <Para 
  <Unique 27123>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <String `void pop_front();'>
  >
 > # end of Para
 <Para 
  <Unique 27124>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <String `void pop_back();'>
  >
 > # end of Para
 <Para 
  <Unique 27125>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <String `void erase(iterator position);'>
  >
 > # end of Para
 <Para 
  <Unique 27126>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <String `void erase(iterator first, iterator last);'>
  >
 > # end of Para
 <Para 
  <Unique 27127>
  <PgfTag `program'>
  <ParaLine 
   <String `};'>
  >
 > # end of Para
 <Para 
  <Unique 27128>
  <PgfTag `program'>
  <ParaLine 
  >
 > # end of Para
 <Para 
  <Unique 27130>
  <PgfTag `program'>
  <ParaLine 
   <String `template <class T, class Allocator\>'>
  >
 > # end of Para
 <Para 
  <Unique 27131>
  <PgfTag `program'>
  <ParaLine 
   <String `bool operator==(const deque<T, Allocator\>& x, const deque<T, Allocator\>& y);'>
  >
 > # end of Para
 <Para 
  <Unique 27132>
  <PgfTag `program'>
  <ParaLine 
  >
 > # end of Para
 <Para 
  <Unique 27133>
  <PgfTag `program'>
  <ParaLine 
   <String `template <class T, class Allocator\>'>
  >
 > # end of Para
 <Para 
  <Unique 27134>
  <PgfTag `program'>
  <ParaLine 
   <String `bool operator<(const deque<T, Allocator\>& x, const deque<T, Allocator\>& y);'>
  >
 > # end of Para
 <Para 
  <Unique 34792>
  <PgfTag `body'>
  <ParaLine 
   <TextRectID 61>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `iterator'>
   <Font 
    <FTag `'>
   > # end of Font
   <String ` is a random access iterator '>
   <Char Tab >
   <String `referring to '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `T'>
   <Font 
    <FTag `'>
   > # end of Font
   <String `. The exact type is implementation dependent and '>
  >
  <ParaLine 
   <String `determined by '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `Allocator'>
   <Font 
    <FTag `'>
   > # end of Font
   <String `. '>
   <Char Tab >
  >
 > # end of Para
 <Para 
  <Unique 34793>
  <PgfTag `body'>
  <ParaLine 
   <Font 
    <FTag `program'>
   > # end of Font
   <String `const_iterator'>
   <Font 
    <FTag `'>
   > # end of Font
   <String ` is a constant random access iterator referring to '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `const T'>
   <Font 
    <FTag `'>
   > # end of Font
   <String `.'>
   <Char Tab >
   <String ` The exact type is '>
  >
  <ParaLine 
   <String `implementation dependent and determined by '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `Allocator'>
   <Font 
    <FTag `'>
   > # end of Font
   <String `. It is guaranteed that there is a constructor for '>
  >
  <ParaLine 
   <Font 
    <FTag `program'>
   > # end of Font
   <String `const_iterator'>
   <Font 
    <FTag `'>
   > # end of Font
   <String ` out of '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `iterator'>
   <Font 
    <FTag `'>
   > # end of Font
   <String `.'>
  >
 > # end of Para
 <Para 
  <Unique 34794>
  <PgfTag `body'>
  <ParaLine 
   <Font 
    <FTag `program'>
   > # end of Font
   <Char Tab >
   <Char Tab >
   <String `size_type'>
   <Font 
    <FTag `'>
   > # end of Font
   <String ` is an unsigned integral type. The exact type is implementation dependent and determined by '>
  >
  <ParaLine 
   <Font 
    <FTag `program'>
   > # end of Font
   <String `Allocator'>
   <Font 
    <FTag `'>
   > # end of Font
   <String `.'>
  >
 > # end of Para
 <Para 
  <Unique 34795>
  <PgfTag `body'>
  <ParaLine 
   <Char Tab >
   <Font 
    <FTag `program'>
   > # end of Font
   <String `difference_type'>
   <Font 
    <FTag `'>
   > # end of Font
   <String ` is a signed integral type. The exact type is implementation dependent and determined '>
  >
  <ParaLine 
   <String `by '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `Allocator'>
   <Font 
    <FTag `'>
   > # end of Font
   <String `.'>
  >
 > # end of Para
 <Para 
  <Unique 27135>
  <PgfTag `body'>
  <ParaLine 
   <Font 
    <FTag `program'>
   > # end of Font
   <String `insert'>
   <Font 
    <FTag `'>
   > # end of Font
   <String ` in the middle of a deque invalidates all the iterators and references to the deque. '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `insert'>
   <Font 
    <FTag `'>
   > # end of Font
   <String ` and '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `push'>
   <Font 
    <FTag `'>
   > # end of Font
   <String ` '>
  >
  <ParaLine 
   <String `at either end of a deque invalidate all the iterators to the deque, but have no effect on the validity of all the '>
  >
  <ParaLine 
   <String `references to the deque.'>
   <String ` In the worst case, inserting a single element into a deque takes time linear in the '>
  >
  <ParaLine 
   <String `minimum of the distance from the insertion point to the beginning of the deque and the distance from the '>
  >
  <ParaLine 
   <String `insertion point to the end of the deque. Inserting a single element either at the beginning or end of a deque '>
  >
  <ParaLine 
   <String `always takes constant time and causes a single call to the copy constructor of '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `T'>
   <Font 
    <FTag `'>
   > # end of Font
   <String `. That is, a deque is especially '>
  >
  <ParaLine 
   <String `optimized for pushing and popping elements at the beginning and end.'>
  >
 > # end of Para
 <Para 
  <Unique 34886>
  <PgfTag `body'>
  <ParaLine 
   <Font 
    <FTag `program'>
   > # end of Font
   <String `erase'>
   <Font 
    <FTag `'>
   > # end of Font
   <String ` in the middle of a deque invalidates all the iterators and references to the deque. '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `erase'>
   <Font 
    <FTag `'>
   > # end of Font
   <String ` and '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `pop'>
   <Font 
    <FTag `'>
   > # end of Font
   <String ` at '>
  >
  <ParaLine 
   <String `either end of a deque invalidate only the iterators and the references to the erased element. T'>
   <String `he number of '>
  >
  <ParaLine 
   <String `calls to the destructor is the same as the number of elements erased, but the number of the calls to the '>
  >
  <ParaLine 
   <String `assignment operator is equal to the minimum of the number of elements before the erased elements and the '>
  >
  <ParaLine 
   <String `number of element after the erased elements.'>
  >
 > # end of Para
 <Para 
  <Unique 25178>
  <PgfTag `subsection'>
  <PgfNumString `8.2 '>
  <ParaLine 
   <String `Associative containers'>
  >
 > # end of Para
 <Para 
  <Unique 41018>
  <PgfTag `body'>
  <ParaLine 
   <String `Associative containers provide an ability for fast retrieval of data based on keys. The library provides four '>
  >
  <ParaLine 
   <String `basic kinds of associative containers: '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `set'>
   <Font 
    <FTag `'>
   > # end of Font
   <String `, '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `multiset'>
   <Font 
    <FTag `'>
   > # end of Font
   <String `, '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `map'>
   <Font 
    <FTag `'>
   > # end of Font
   <String ` and '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `multimap'>
   <Font 
    <FTag `'>
   > # end of Font
   <String `.'>
  >
 > # end of Para
 <Para 
  <Unique 36639>
  <PgfTag `body'>
  <ParaLine 
   <String `All of them are parameterized on '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `Key'>
   <Font 
    <FTag `'>
   > # end of Font
   <String ` and an ordering relation '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `Compare'>
   <Font 
    <FTag `'>
   > # end of Font
   <String ` that induces a total ordering on '>
  >
  <ParaLine 
   <String `elements of '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `Key'>
   <Font 
    <FTag `'>
   > # end of Font
   <String `. In addition, '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `map'>
   <Font 
    <FTag `'>
   > # end of Font
   <String ` and '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `multimap'>
   <Font 
    <FTag `'>
   > # end of Font
   <String ` associate an arbitrary type '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `T'>
   <Font 
    <FTag `'>
   > # end of Font
   <String ` with the '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `Key'>
   <Font 
    <FTag `'>
   > # end of Font
   <String `. The object of type '>
  >
  <ParaLine 
   <Font 
    <FTag `program'>
   > # end of Font
   <String `Compare'>
   <Font 
    <FTag `'>
   > # end of Font
   <String ` is called the'>
   <Font 
    <FTag `Emphasis'>
   > # end of Font
   <String ` comparison object'>
   <Font 
    <FTag `'>
   > # end of Font
   <String ` of a container.'>
  >
 > # end of Para
 <Para 
  <Unique 36746>
  <PgfTag `body'>
  <ParaLine 
   <String `In this section when we talk about equality of keys we mean the equivalence relation imposed by the '>
  >
  <ParaLine 
   <String `comparison and '>
   <Font 
    <FTag `Emphasis'>
   > # end of Font
   <String `not'>
   <Font 
    <FTag `'>
   > # end of Font
   <String ` the '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `operator=='>
   <Font 
    <FTag `'>
   > # end of Font
   <String ` on keys. That is, two keys '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `k1'>
   <Font 
    <FTag `'>
   > # end of Font
   <String ` and '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `k2'>
   <Font 
    <FTag `'>
   > # end of Font
   <String ` are considered to be equal if for '>
  >
  <ParaLine 
   <String `the comparison object '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `comp'>
   <Font 
    <FTag `'>
   > # end of Font
   <String `, '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `comp(k1, k2) == false && comp(k2, k1) == false'>
   <Font 
    <FTag `'>
   > # end of Font
   <String `.'>
  >
 > # end of Para
 <Para 
  <Unique 36645>
  <PgfTag `body'>
  <ParaLine 
   <String `An associative container supports '>
   <Font 
    <FTag `Emphasis'>
   > # end of Font
   <String `unique keys'>
   <Font 
    <FTag `'>
   > # end of Font
   <String ` if it may contain at most one element for each key. Otherwise, '>
  >
  <ParaLine 
   <String `it supports '>
   <Font 
    <FTag `Emphasis'>
   > # end of Font
   <String `equal keys'>
   <Font 
    <FTag `'>
   > # end of Font
   <String `. '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `set'>
   <Font 
    <FTag `'>
   > # end of Font
   <String ` and '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `map'>
   <Font 
    <FTag `'>
   > # end of Font
   <String ` support unique keys. '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `multiset'>
   <Font 
    <FTag `'>
   > # end of Font
   <String ` and '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `multimap'>
   <Font 
    <FTag `'>
   > # end of Font
   <String ` support equal keys.'>
  >
 > # end of Para
 <Para 
  <Unique 36646>
  <PgfTag `body'>
  <ParaLine 
   <String `For '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `set'>
   <Font 
    <FTag `'>
   > # end of Font
   <String ` and '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `multiset'>
   <Font 
    <FTag `'>
   > # end of Font
   <String ` the value type is the same as the key type. For '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `map'>
   <Font 
    <FTag `'>
   > # end of Font
   <String ` and '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `multimap'>
   <Font 
    <FTag `'>
   > # end of Font
   <String ` it is equal to '>
  >
  <ParaLine 
   <Font 
    <FTag `program'>
   > # end of Font
   <String `pair<const Key, T\>'>
   <Font 
    <FTag `'>
   > # end of Font
   <String `. '>
  >
 > # end of Para
 <Para 
  <Unique 4383>
  <PgfTag `body'>
  <ParaLine 
   <Font 
    <FTag `program'>
   > # end of Font
   <String `iterator'>
   <Font 
    <FTag `'>
   > # end of Font
   <String ` of an associative container is of the bidirectional iterator category. '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `insert'>
   <Font 
    <FTag `'>
   > # end of Font
   <String ` does not affect the '>
  >
  <ParaLine 
   <String `validity of iterators and references to the container, and '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `erase'>
   <Font 
    <FTag `'>
   > # end of Font
   <String ` invalidates only the iterators and references '>
  >
  <ParaLine 
   <String `to the erased elements.'>
  >
 > # end of Para
 <Para 
  <Unique 4384>
  <PgfTag `body'>
  <ParaLine 
   <String `In the following table, '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `X'>
   <Font 
    <FTag `'>
   > # end of Font
   <String ` is an associative container class, '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `a'>
   <Font 
    <FTag `'>
   > # end of Font
   <String ` is a value of '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `X'>
   <Font 
    <FTag `'>
   > # end of Font
   <String `, '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `a_uniq'>
   <Font 
    <FTag `'>
   > # end of Font
   <String ` is a value of '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `X'>
   <Font 
    <FTag `'>
   > # end of Font
   <String ` when '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `X'>
   <Font 
    <FTag `'>
   > # end of Font
   <String ` '>
  >
  <ParaLine 
   <String `supports unique keys, and '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `a_eq'>
   <Font 
    <FTag `'>
   > # end of Font
   <String ` is a value of '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `X'>
   <Font 
    <FTag `'>
   > # end of Font
   <String ` when '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `X'>
   <Font 
    <FTag `'>
   > # end of Font
   <String ` supports multiple keys, '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `i'>
   <Font 
    <FTag `'>
   > # end of Font
   <String ` and '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `j'>
   <Font 
    <FTag `'>
   > # end of Font
   <String ` satisfy input iterator '>
  >
  <ParaLine 
   <String `requirements and refer to elements of '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `value_type'>
   <Font 
    <FTag `'>
   > # end of Font
   <String `, '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `[i, j)'>
   <Font 
    <FTag `'>
   > # end of Font
   <String ` is a valid range, '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `p'>
   <Font 
    <FTag `'>
   > # end of Font
   <String ` is a valid iterator to '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `a'>
   <Font 
    <FTag `'>
   > # end of Font
   <String `, '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `q'>
   <Font 
    <FTag `'>
   > # end of Font
   <String ` is a '>
  >
  <ParaLine 
   <String `d'>
   <String `ereferenceable iterator'>
   <String ` t'>
   <String `o '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `a'>
   <Font 
    <FTag `'>
   > # end of Font
   <String `, '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `[q1, q2)'>
   <Font 
    <FTag `'>
   > # end of Font
   <String ` is a valid range'>
   <String ` in '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `a'>
   <Font 
    <FTag `'>
   > # end of Font
   <String `, '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `t'>
   <Font 
    <FTag `'>
   > # end of Font
   <String ` is a value of '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `X::value_type'>
   <Font 
    <FTag `'>
   > # end of Font
   <String ` and '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `k'>
   <Font 
    <FTag `'>
   > # end of Font
   <String ` is a value '>
  >
  <ParaLine 
   <String `of '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `X::key_type'>
   <Font 
    <FTag `'>
   > # end of Font
   <String `.'>
  >
 > # end of Para
 <Para 
  <Unique 35626>
  <PgfTag `body'>
  <ParaLine 
   <TextRectID 62>
   <ATbl 18>
  >
 > # end of Para
 <Para 
  <Unique 36829>
  <PgfTag `body'>
  <ParaLine 
   <TextRectID 63>
   <String `The fundamental property of iterators of associative containers is that they iterate through the containers '>
  >
  <ParaLine 
   <String `in the non-descending order of keys where non-descending is defined by the comparison that was used to '>
  >
  <ParaLine 
   <String `construct them. For any two dereferenceable iterators '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `i'>
   <Font 
    <FTag `'>
   > # end of Font
   <String ` and '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `j'>
   <Font 
    <FTag `'>
   > # end of Font
   <String ` such that distance from '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `i'>
   <Font 
    <FTag `'>
   > # end of Font
   <String ` to '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `j'>
   <Font 
    <FTag `'>
   > # end of Font
   <String ` is positive, '>
  >
 > # end of Para
 <Para 
  <Unique 36830>
  <PgfTag `program'>
  <ParaLine 
   <TextRectID 64>
  >
 > # end of Para
 <Para 
  <Unique 37235>
  <PgfTag `program'>
  <ParaLine 
   <String `value_comp(*j, *i) == false'>
  >
 > # end of Para
 <Para 
  <Unique 37238>
  <PgfTag `body'>
  <ParaLine 
   <String `For associative containers with unique keys the stronger condition holds,'>
  >
 > # end of Para
 <Para 
  <Unique 37239>
  <PgfTag `program'>
  <ParaLine 
  >
 > # end of Para
 <Para 
  <Unique 37243>
  <PgfTag `program'>
  <ParaLine 
   <String `value_comp(*i, *j) == true.'>
  >
 > # end of Para
 <Para 
  <Unique 37240>
  <PgfTag `subsubsection'>
  <PgfNumString `8.2.1 '>
  <ParaLine 
   <String `Set'>
  >
 > # end of Para
 <Para 
  <Unique 41040>
  <PgfTag `body'>
  <ParaLine 
   <Font 
    <FTag `program'>
   > # end of Font
   <String `set'>
   <Font 
    <FTag `'>
   > # end of Font
   <String ` is a kind of associative container that supports unique keys (contains at most one of each key value) '>
  >
  <ParaLine 
   <String `and provides for fast retrieval of the keys themselves.'>
  >
 > # end of Para
 <Para 
  <Unique 25059>
  <PgfTag `program'>
  <ParaLine 
  >
 > # end of Para
 <Para 
  <Unique 26355>
  <PgfTag `program'>
  <ParaLine 
   <String `template <class Key, class Compare = less<Key\>, '>
  >
 > # end of Para
 <Para 
  <Unique 32888>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <Char Tab >
   <String `template <class U\> class Allocator = allocator\>'>
  >
 > # end of Para
 <Para 
  <Unique 26356>
  <PgfTag `program'>
  <ParaLine 
   <String `class set {'>
  >
 > # end of Para
 <Para 
  <Unique 26357>
  <PgfTag `program'>
  <ParaLine 
   <String `public:'>
  >
 > # end of Para
 <Para 
  <Unique 26358>
  <PgfTag `program'>
  <ParaLine 
  >
 > # end of Para
 <Para 
  <Unique 26359>
  <PgfTag `program'>
  <ParaLine 
   <String `// typedefs:'>
  >
 > # end of Para
 <Para 
  <Unique 26360>
  <PgfTag `program'>
  <ParaLine 
  >
 > # end of Para
 <Para 
  <Unique 26361>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <String `typedef Key key_type;'>
  >
 > # end of Para
 <Para 
  <Unique 35462>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <String `typedef Key value_type;'>
  >
 > # end of Para
 <Para 
  <Unique 6458>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <String `typedef Allocator<Key\>::pointer pointer;'>
  >
 > # end of Para
 <Para 
  <Unique 6460>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <String `typedef Allocator<Key\>::reference reference;'>
  >
 > # end of Para
 <Para 
  <Unique 6461>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <String `typedef Allocator<Key\>::const_reference const_reference;'>
  >
 > # end of Para
 <Para 
  <Unique 36362>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <String `typedef Compare key_compare;'>
  >
 > # end of Para
 <Para 
  <Unique 36363>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <String `typedef Compare value_compare;'>
  >
 > # end of Para
 <Para 
  <Unique 36364>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <String `typedef iterator; '>
  >
 > # end of Para
 <Para 
  <Unique 26367>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <String `typedef iterator const_iterator;'>
  >
 > # end of Para
 <Para 
  <Unique 26369>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <String `typedef size_type;'>
  >
 > # end of Para
 <Para 
  <Unique 26374>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <String `typedef difference_type;'>
  >
 > # end of Para
 <Para 
  <Unique 6462>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <String `typedef reverse_iterator;'>
  >
 > # end of Para
 <Para 
  <Unique 6464>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <String `typedef const_reverse_iterator;'>
  >
 > # end of Para
 <Para 
  <Unique 26381>
  <PgfTag `program'>
  <ParaLine 
  >
 > # end of Para
 <Para 
  <Unique 26382>
  <PgfTag `program'>
  <ParaLine 
   <String `// allocation/deallocation:'>
  >
 > # end of Para
 <Para 
  <Unique 26383>
  <PgfTag `program'>
  <ParaLine 
  >
 > # end of Para
 <Para 
  <Unique 26384>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <String `set(const Compare& comp = Compare());'>
  >
 > # end of Para
 <Para 
  <Unique 26385>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <String `template <class InputIterator\> '>
  >
 > # end of Para
 <Para 
  <Unique 26386>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <String `set(InputIterator first, InputIterator last,'>
  >
 > # end of Para
 <Para 
  <Unique 29409>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <Char Tab >
   <String `const Compare& comp = Compare()); '>
  >
 > # end of Para
 <Para 
  <Unique 26387>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <String `set(const set<Key, Compare, Allocator\>& x);'>
  >
 > # end of Para
 <Para 
  <Unique 26388>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <String `~set(); '>
  >
 > # end of Para
 <Para 
  <Unique 26389>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <String `set<Key, Compare, Allocator\>& operator=(const set<Key, Compare, '>
  >
  <ParaLine 
   <String `Allocator\>& x);'>
  >
 > # end of Para
 <Para 
  <Unique 4331>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <String `void swap(set<Key, Compare, Allocator\>& x);'>
  >
 > # end of Para
 <Para 
  <Unique 26390>
  <PgfTag `program'>
  <ParaLine 
  >
 > # end of Para
 <Para 
  <Unique 26391>
  <PgfTag `program'>
  <ParaLine 
   <String `// accessors:'>
  >
 > # end of Para
 <Para 
  <Unique 26392>
  <PgfTag `program'>
  <ParaLine 
  >
 > # end of Para
 <Para 
  <Unique 36382>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <String `key_compare key_comp() const;'>
  >
 > # end of Para
 <Para 
  <Unique 36383>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <String `value_compare value_comp() const;'>
  >
 > # end of Para
 <Para 
  <Unique 26393>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <String `iterator begin() const;'>
  >
 > # end of Para
 <Para 
  <Unique 26394>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <String `iterator end() const;'>
  >
 > # end of Para
 <Para 
  <Unique 6465>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <String `reverse_iterator rbegin() const;'>
  >
 > # end of Para
 <Para 
  <Unique 6467>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <String `reverse_iterator rend() const;'>
  >
 > # end of Para
 <Para 
  <Unique 26395>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <String `bool empty() const; '>
  >
 > # end of Para
 <Para 
  <Unique 26396>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <String `size_type size() const;'>
  >
 > # end of Para
 <Para 
  <Unique 40744>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <String `size_type max_size() const;'>
  >
 > # end of Para
 <Para 
  <Unique 26397>
  <PgfTag `program'>
  <ParaLine 
  >
 > # end of Para
 <Para 
  <Unique 26398>
  <PgfTag `program'>
  <ParaLine 
   <String `// insert/erase:'>
  >
 > # end of Para
 <Para 
  <Unique 26399>
  <PgfTag `program'>
  <ParaLine 
  >
 > # end of Para
 <Para 
  <Unique 26400>
  <PgfTag `program'>
  <ParaLine 
   <TextRectID 65>
   <Char Tab >
   <String `pair<iterator, bool\> insert(const value_type& x);'>
  >
 > # end of Para
 <Para 
  <Unique 26401>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <String `iterator insert(iterator position, const value_type& x);'>
  >
 > # end of Para
 <Para 
  <Unique 26402>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <String `template <class InputIterator\> '>
  >
 > # end of Para
 <Para 
  <Unique 26403>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <String `void insert(InputIterator first, InputIterator last);'>
  >
 > # end of Para
 <Para 
  <Unique 26404>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <String `void erase(iterator position);'>
  >
 > # end of Para
 <Para 
  <Unique 26405>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <String `size_type erase(const key_type& x);'>
  >
 > # end of Para
 <Para 
  <Unique 26406>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <String `void erase(iterator first, iterator last);'>
  >
 > # end of Para
 <Para 
  <Unique 26407>
  <PgfTag `program'>
  <ParaLine 
  >
 > # end of Para
 <Para 
  <Unique 26408>
  <PgfTag `program'>
  <ParaLine 
   <String `// set operations:'>
  >
 > # end of Para
 <Para 
  <Unique 26409>
  <PgfTag `program'>
  <ParaLine 
  >
 > # end of Para
 <Para 
  <Unique 26410>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <String `iterator find(const key_type& x) const;'>
  >
 > # end of Para
 <Para 
  <Unique 26411>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <String `size_type count(const key_type& x) const;'>
  >
 > # end of Para
 <Para 
  <Unique 36180>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <String `iterator lower_bound(const key_type& x) const;'>
  >
 > # end of Para
 <Para 
  <Unique 26412>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <String `iterator upper_bound(const key_type& x) const;'>
  >
 > # end of Para
 <Para 
  <Unique 26413>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <String `pair<iterator, iterator\> equal_range(const key_type& x) const;'>
  >
 > # end of Para
 <Para 
  <Unique 26414>
  <PgfTag `program'>
  <ParaLine 
   <String `};'>
  >
 > # end of Para
 <Para 
  <Unique 26415>
  <PgfTag `program'>
  <ParaLine 
  >
 > # end of Para
 <Para 
  <Unique 26416>
  <PgfTag `program'>
  <ParaLine 
   <String `template <class Key, class Compare, class Allocator\>'>
  >
 > # end of Para
 <Para 
  <Unique 26417>
  <PgfTag `program'>
  <ParaLine 
   <String `bool operator==(const set<Key, Compare, Allocator\>& x,'>
  >
 > # end of Para
 <Para 
  <Unique 29384>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <Char Tab >
   <String `const set<Key, Compare, Allocator\>& y);'>
  >
 > # end of Para
 <Para 
  <Unique 26418>
  <PgfTag `program'>
  <ParaLine 
  >
 > # end of Para
 <Para 
  <Unique 26419>
  <PgfTag `program'>
  <ParaLine 
   <String `template <class Key, class Compare, class Allocator\>'>
  >
 > # end of Para
 <Para 
  <Unique 26420>
  <PgfTag `program'>
  <ParaLine 
   <String `bool operator<(const set<Key, Compare, Allocator\>& x,'>
  >
 > # end of Para
 <Para 
  <Unique 29385>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <Char Tab >
   <String `const set<Key, Compare, Allocator\>& y);'>
  >
 > # end of Para
 <Para 
  <Unique 36518>
  <PgfTag `body'>
  <ParaLine 
   <Font 
    <FTag `program'>
   > # end of Font
   <String `iterator'>
   <Font 
    <FTag `'>
   > # end of Font
   <String ` is a constant bidirectional iterator referring to '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `const value_type'>
   <Font 
    <FTag `'>
   > # end of Font
   <String `. The exact type is '>
  >
  <ParaLine 
   <String `implementation dependent and determined by '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `Allocator.'>
  >
 > # end of Para
 <Para 
  <Unique 36535>
  <PgfTag `body'>
  <ParaLine 
   <Font 
    <FTag `program'>
   > # end of Font
   <String `const_iterator'>
   <Font 
    <FTag `'>
   > # end of Font
   <String ` is the same type as '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `iterator'>
   <Font 
    <FTag `'>
   > # end of Font
   <String `.'>
  >
 > # end of Para
 <Para 
  <Unique 36543>
  <PgfTag `body'>
  <ParaLine 
   <Font 
    <FTag `program'>
   > # end of Font
   <Char Tab >
   <Char Tab >
   <String `size_type'>
   <Font 
    <FTag `'>
   > # end of Font
   <String ` is an unsigned integral type. The exact type is implementation dependent and determined by '>
  >
  <ParaLine 
   <Font 
    <FTag `program'>
   > # end of Font
   <String `Allocator'>
   <Font 
    <FTag `'>
   > # end of Font
   <String `.'>
  >
 > # end of Para
 <Para 
  <Unique 36544>
  <PgfTag `body'>
  <ParaLine 
   <Char Tab >
   <Font 
    <FTag `program'>
   > # end of Font
   <String `difference_type'>
   <Font 
    <FTag `'>
   > # end of Font
   <String ` is a signed integral type. The exact type is implementation dependent and determined '>
  >
  <ParaLine 
   <String `by '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `Allocator'>
   <Font 
    <FTag `'>
   > # end of Font
   <String `.'>
  >
 > # end of Para
 <Para 
  <Unique 25058>
  <PgfTag `subsubsection'>
  <PgfNumString `8.2.2 '>
  <ParaLine 
   <String `Multiset'>
  >
 > # end of Para
 <Para 
  <Unique 41046>
  <PgfTag `body'>
  <ParaLine 
   <Font 
    <FTag `program'>
   > # end of Font
   <String `multiset'>
   <Font 
    <FTag `'>
   > # end of Font
   <String ` is a kind of associative container that supports equal keys (possibly contains multiple copies of '>
  >
  <ParaLine 
   <String `the same key value) and provides for fast retrieval of the keys themselves.'>
  >
 > # end of Para
 <Para 
  <Unique 21169>
  <PgfTag `program'>
  <ParaLine 
  >
 > # end of Para
 <Para 
  <Unique 26428>
  <PgfTag `program'>
  <ParaLine 
   <String `template <class Key, class Compare = less<Key\>,'>
  >
 > # end of Para
 <Para 
  <Unique 32893>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <Char Tab >
   <String `template <class U\> class Allocator = allocator\>'>
  >
 > # end of Para
 <Para 
  <Unique 26429>
  <PgfTag `program'>
  <ParaLine 
   <String `class multiset {'>
  >
 > # end of Para
 <Para 
  <Unique 26430>
  <PgfTag `program'>
  <ParaLine 
   <String `public:'>
  >
 > # end of Para
 <Para 
  <Unique 26431>
  <PgfTag `program'>
  <ParaLine 
  >
 > # end of Para
 <Para 
  <Unique 26432>
  <PgfTag `program'>
  <ParaLine 
   <String `// typedefs:'>
  >
 > # end of Para
 <Para 
  <Unique 26433>
  <PgfTag `program'>
  <ParaLine 
  >
 > # end of Para
 <Para 
  <Unique 35482>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <String `typedef Key key_type;'>
  >
 > # end of Para
 <Para 
  <Unique 35483>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <String `typedef Key value_type;'>
  >
 > # end of Para
 <Para 
  <Unique 6469>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <String `typedef Allocator<Key\>::pointer pointer;'>
  >
 > # end of Para
 <Para 
  <Unique 6471>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <String `typedef Allocator<Key\>::reference reference;'>
  >
 > # end of Para
 <Para 
  <Unique 6472>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <String `typedef Allocator<Key\>::const_reference const_reference;'>
  >
 > # end of Para
 <Para 
  <Unique 26434>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <String `typedef Compare key_compare;'>
  >
 > # end of Para
 <Para 
  <Unique 36368>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <String `typedef Compare value_compare;'>
  >
 > # end of Para
 <Para 
  <Unique 36369>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <String `typedef iterator; '>
  >
 > # end of Para
 <Para 
  <Unique 26440>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <String `typedef iterator const_iterator;'>
  >
 > # end of Para
 <Para 
  <Unique 26442>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <String `typedef size_type;'>
  >
 > # end of Para
 <Para 
  <Unique 26447>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <String `typedef difference_type;'>
  >
 > # end of Para
 <Para 
  <Unique 6473>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <String `typedef reverse_iterator;'>
  >
 > # end of Para
 <Para 
  <Unique 6475>
  <PgfTag `program'>
  <ParaLine 
   <TextRectID 66>
   <Char Tab >
   <String `typedef const_reverse_iterator;'>
  >
 > # end of Para
 <Para 
  <Unique 26454>
  <PgfTag `program'>
  <ParaLine 
  >
 > # end of Para
 <Para 
  <Unique 26455>
  <PgfTag `program'>
  <ParaLine 
   <String `// allocation/deallocation:'>
  >
 > # end of Para
 <Para 
  <Unique 26456>
  <PgfTag `program'>
  <ParaLine 
  >
 > # end of Para
 <Para 
  <Unique 26457>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <String `multiset(const Compare& comp = Compare());'>
  >
 > # end of Para
 <Para 
  <Unique 26458>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <String `template <class InputIterator\> '>
  >
 > # end of Para
 <Para 
  <Unique 26459>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <String `multiset(InputIterator first, InputIterator last,'>
  >
 > # end of Para
 <Para 
  <Unique 29365>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <Char Tab >
   <String `const Compare& comp = Compare()); '>
  >
 > # end of Para
 <Para 
  <Unique 26460>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <String `multiset(const multiset<Key, Compare, Allocator\>& x);'>
  >
 > # end of Para
 <Para 
  <Unique 26461>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <String `~multiset(); '>
  >
 > # end of Para
 <Para 
  <Unique 26462>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <String `multiset<Key, Compare, Allocator\>& operator=(const multiset<Key, Compare, '>
  >
  <ParaLine 
   <String `Allocator\>& x);'>
  >
 > # end of Para
 <Para 
  <Unique 4333>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <String `void swap(multiset<Key, Compare, Allocator\>& x);'>
  >
 > # end of Para
 <Para 
  <Unique 26463>
  <PgfTag `program'>
  <ParaLine 
  >
 > # end of Para
 <Para 
  <Unique 26464>
  <PgfTag `program'>
  <ParaLine 
   <String `// accessors:'>
  >
 > # end of Para
 <Para 
  <Unique 26465>
  <PgfTag `program'>
  <ParaLine 
  >
 > # end of Para
 <Para 
  <Unique 26466>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <String `key_compare key_comp() const;'>
  >
 > # end of Para
 <Para 
  <Unique 36385>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <String `value_compare value_comp() const;'>
  >
 > # end of Para
 <Para 
  <Unique 36386>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <String `iterator begin() const;'>
  >
 > # end of Para
 <Para 
  <Unique 26467>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <String `iterator end() const;'>
  >
 > # end of Para
 <Para 
  <Unique 6476>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <String `reverse_iterator rbegin();'>
  >
 > # end of Para
 <Para 
  <Unique 6479>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <String `reverse_iterator rend();'>
  >
 > # end of Para
 <Para 
  <Unique 26468>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <String `bool empty() const; '>
  >
 > # end of Para
 <Para 
  <Unique 26469>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <String `size_type size() const;'>
  >
 > # end of Para
 <Para 
  <Unique 40748>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <String `size_type max_size() const;'>
  >
 > # end of Para
 <Para 
  <Unique 26470>
  <PgfTag `program'>
  <ParaLine 
  >
 > # end of Para
 <Para 
  <Unique 26471>
  <PgfTag `program'>
  <ParaLine 
   <String `// insert/erase:'>
  >
 > # end of Para
 <Para 
  <Unique 26472>
  <PgfTag `program'>
  <ParaLine 
  >
 > # end of Para
 <Para 
  <Unique 26473>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <String `iterator insert(const value_type& x);'>
  >
 > # end of Para
 <Para 
  <Unique 26474>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <String `iterator insert(iterator position, const value_type& x);'>
  >
 > # end of Para
 <Para 
  <Unique 26475>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <String `template <class InputIterator\> '>
  >
 > # end of Para
 <Para 
  <Unique 26476>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <String `void insert(InputIterator first, InputIterator last);'>
  >
 > # end of Para
 <Para 
  <Unique 26477>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <String `void erase(iterator position);'>
  >
 > # end of Para
 <Para 
  <Unique 26478>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <String `size_type erase(const key_type& x);'>
  >
 > # end of Para
 <Para 
  <Unique 26479>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <String `void erase(iterator first, iterator last);'>
  >
 > # end of Para
 <Para 
  <Unique 26480>
  <PgfTag `program'>
  <ParaLine 
  >
 > # end of Para
 <Para 
  <Unique 26481>
  <PgfTag `program'>
  <ParaLine 
   <String `// multiset operations:'>
  >
 > # end of Para
 <Para 
  <Unique 26482>
  <PgfTag `program'>
  <ParaLine 
  >
 > # end of Para
 <Para 
  <Unique 26483>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <String `iterator find(const key_type& x) const;'>
  >
 > # end of Para
 <Para 
  <Unique 26484>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <String `size_type count(const key_type& x) const;'>
  >
 > # end of Para
 <Para 
  <Unique 26485>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <String `iterator lower_bound(const key_type& x) const;'>
  >
 > # end of Para
 <Para 
  <Unique 26486>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <String `iterator upper_bound(const key_type& x) const;'>
  >
 > # end of Para
 <Para 
  <Unique 26487>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <String `pair<iterator, iterator\> equal_range(const key_type& x) const;'>
  >
 > # end of Para
 <Para 
  <Unique 26488>
  <PgfTag `program'>
  <ParaLine 
   <String `};'>
  >
 > # end of Para
 <Para 
  <Unique 26489>
  <PgfTag `program'>
  <ParaLine 
  >
 > # end of Para
 <Para 
  <Unique 26490>
  <PgfTag `program'>
  <ParaLine 
   <String `template <class Key, class Compare, class Allocator\>'>
  >
 > # end of Para
 <Para 
  <Unique 26491>
  <PgfTag `program'>
  <ParaLine 
   <String `bool operator==(const multiset<Key, Compare, Allocator\>& x,'>
  >
 > # end of Para
 <Para 
  <Unique 29386>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <Char Tab >
   <String `const multiset<Key, Compare, Allocator\>& y);'>
  >
 > # end of Para
 <Para 
  <Unique 26492>
  <PgfTag `program'>
  <ParaLine 
  >
 > # end of Para
 <Para 
  <Unique 26493>
  <PgfTag `program'>
  <ParaLine 
   <String `template <class Key, class Compare, class Allocator\>'>
  >
 > # end of Para
 <Para 
  <Unique 26494>
  <PgfTag `program'>
  <ParaLine 
   <String `bool operator<(const multiset<Key, Compare, Allocator\>& x,'>
  >
 > # end of Para
 <Para 
  <Unique 29387>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <Char Tab >
   <String `const multiset<Key, Compare, Allocator\>& y);'>
  >
 > # end of Para
 <Para 
  <Unique 36551>
  <PgfTag `body'>
  <ParaLine 
   <Font 
    <FTag `program'>
   > # end of Font
   <String `iterator'>
   <Font 
    <FTag `'>
   > # end of Font
   <String ` is a constant bidirectional iterator referring to '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `const value_type'>
   <Font 
    <FTag `'>
   > # end of Font
   <String `. The exact type is '>
  >
  <ParaLine 
   <String `implementation dependent and determined by '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `Allocator.'>
  >
 > # end of Para
 <Para 
  <Unique 36552>
  <PgfTag `body'>
  <ParaLine 
   <Font 
    <FTag `program'>
   > # end of Font
   <String `const_iterator'>
   <Font 
    <FTag `'>
   > # end of Font
   <String ` is the same type as '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `iterator'>
   <Font 
    <FTag `'>
   > # end of Font
   <String `.'>
  >
 > # end of Para
 <Para 
  <Unique 36553>
  <PgfTag `body'>
  <ParaLine 
   <TextRectID 67>
   <Font 
    <FTag `program'>
   > # end of Font
   <Char Tab >
   <Char Tab >
   <String `size_type'>
   <Font 
    <FTag `'>
   > # end of Font
   <String ` is an unsigned integral type. The exact type is implementation dependent and determined by '>
  >
  <ParaLine 
   <Font 
    <FTag `program'>
   > # end of Font
   <String `Allocator'>
   <Font 
    <FTag `'>
   > # end of Font
   <String `.'>
  >
 > # end of Para
 <Para 
  <Unique 36554>
  <PgfTag `body'>
  <ParaLine 
   <Char Tab >
   <Font 
    <FTag `program'>
   > # end of Font
   <String `difference_type'>
   <Font 
    <FTag `'>
   > # end of Font
   <String ` is a signed integral type. The exact type is implementation dependent and determined '>
  >
  <ParaLine 
   <String `by '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `Allocator'>
   <Font 
    <FTag `'>
   > # end of Font
   <String `.'>
  >
 > # end of Para
 <Para 
  <Unique 20888>
  <PgfTag `subsubsection'>
  <PgfNumString `8.2.3 '>
  <ParaLine 
   <String `Map'>
  >
 > # end of Para
 <Para 
  <Unique 41064>
  <PgfTag `body'>
  <ParaLine 
   <Font 
    <FTag `program'>
   > # end of Font
   <String `map'>
   <Font 
    <FTag `'>
   > # end of Font
   <String ` is a kind of associative container that supports unique keys (contains at most one of each key value) '>
  >
  <ParaLine 
   <String `and provides for fast retrieval of values of another type '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `T'>
   <Font 
    <FTag `'>
   > # end of Font
   <String ` based on the keys.'>
  >
 > # end of Para
 <Para 
  <Unique 26501>
  <PgfTag `program'>
  <ParaLine 
  >
 > # end of Para
 <Para 
  <Unique 26502>
  <PgfTag `program'>
  <ParaLine 
   <String `template <class Key, class T, class Compare = less<Key\>,'>
  >
 > # end of Para
 <Para 
  <Unique 29371>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <Char Tab >
   <String `template <class U\> class Allocator = allocator\>'>
  >
 > # end of Para
 <Para 
  <Unique 26503>
  <PgfTag `program'>
  <ParaLine 
   <String `class map {'>
  >
 > # end of Para
 <Para 
  <Unique 26504>
  <PgfTag `program'>
  <ParaLine 
   <String `public:'>
  >
 > # end of Para
 <Para 
  <Unique 26505>
  <PgfTag `program'>
  <ParaLine 
  >
 > # end of Para
 <Para 
  <Unique 26506>
  <PgfTag `program'>
  <ParaLine 
   <String `// typedefs:'>
  >
 > # end of Para
 <Para 
  <Unique 26507>
  <PgfTag `program'>
  <ParaLine 
  >
 > # end of Para
 <Para 
  <Unique 35432>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <String `typedef Key key_type;'>
  >
 > # end of Para
 <Para 
  <Unique 35430>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <String `typedef pair<const Key, T\> value_type;'>
  >
 > # end of Para
 <Para 
  <Unique 26508>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <String `typedef Compare key_compare;'>
  >
 > # end of Para
 <Para 
  <Unique 36371>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <String `class value_compare '>
  >
 > # end of Para
 <Para 
  <Unique 36432>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <Char Tab >
   <String `: public binary_function<'>
   <Char Tab >
   <String `value_type, value_type, bool\> {'>
  >
 > # end of Para
 <Para 
  <Unique 8784>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <String `friend class map;'>
  >
 > # end of Para
 <Para 
  <Unique 36411>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <String `protected:'>
  >
 > # end of Para
 <Para 
  <Unique 36413>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <Char Tab >
   <String `Compare comp;'>
  >
 > # end of Para
 <Para 
  <Unique 36415>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <Char Tab >
   <String `value_compare(Compare c) : comp(c) {}'>
  >
 > # end of Para
 <Para 
  <Unique 36418>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <String `public:'>
  >
 > # end of Para
 <Para 
  <Unique 36419>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <Char Tab >
   <String `bool operator()(const value_type& x, const value_type& y) {'>
  >
 > # end of Para
 <Para 
  <Unique 36420>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <Char Tab >
   <Char Tab >
   <String `return comp(x.first, y.first);'>
  >
 > # end of Para
 <Para 
  <Unique 36421>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <Char Tab >
   <String `}'>
  >
 > # end of Para
 <Para 
  <Unique 36425>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <String `};'>
  >
 > # end of Para
 <Para 
  <Unique 36372>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <String `typedef iterator; '>
  >
 > # end of Para
 <Para 
  <Unique 26514>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <String `typedef const_iterator; '>
  >
 > # end of Para
 <Para 
  <Unique 6484>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <String `typedef Allocator<value_type\>::pointer pointer;'>
  >
 > # end of Para
 <Para 
  <Unique 6486>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <String `typedef Allocator<value_type\>::reference reference;'>
  >
 > # end of Para
 <Para 
  <Unique 6487>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <String `typedef Allocator<value_type\>::const_reference const_reference;'>
  >
 > # end of Para
 <Para 
  <Unique 26522>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <String `typedef size_type;'>
  >
 > # end of Para
 <Para 
  <Unique 26527>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <String `typedef difference_type;'>
  >
 > # end of Para
 <Para 
  <Unique 6490>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <String `typedef reverse_iterator;'>
  >
 > # end of Para
 <Para 
  <Unique 6492>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <String `typedef const_reverse_iterator;'>
  >
 > # end of Para
 <Para 
  <Unique 26543>
  <PgfTag `program'>
  <ParaLine 
  >
 > # end of Para
 <Para 
  <Unique 26544>
  <PgfTag `program'>
  <ParaLine 
   <String `// allocation/deallocation:'>
  >
 > # end of Para
 <Para 
  <Unique 26545>
  <PgfTag `program'>
  <ParaLine 
  >
 > # end of Para
 <Para 
  <Unique 26546>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <String `map(const Compare& comp = Compare());'>
  >
 > # end of Para
 <Para 
  <Unique 26547>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <String `template <class InputIterator\> '>
  >
 > # end of Para
 <Para 
  <Unique 26548>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <String `map(InputIterator first, InputIterator last,'>
  >
 > # end of Para
 <Para 
  <Unique 29372>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <Char Tab >
   <String `const Compare& comp = Compare()); '>
  >
 > # end of Para
 <Para 
  <Unique 26549>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <String `map(const map<Key, T, Compare, Allocator\>& x);'>
  >
 > # end of Para
 <Para 
  <Unique 26550>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <String `~map(); '>
  >
 > # end of Para
 <Para 
  <Unique 26551>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <String `map<Key, T, Compare, Allocator\>&'>
  >
 > # end of Para
 <Para 
  <Unique 29373>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <Char Tab >
   <String `operator=(const map<Key, T, Compare, Allocator\>& x);'>
  >
 > # end of Para
 <Para 
  <Unique 4335>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <String `void swap(map<Key, T, Compare, Allocator\>& x);'>
  >
 > # end of Para
 <Para 
  <Unique 26552>
  <PgfTag `program'>
  <ParaLine 
  >
 > # end of Para
 <Para 
  <Unique 26553>
  <PgfTag `program'>
  <ParaLine 
   <String `// accessors:'>
  >
 > # end of Para
 <Para 
  <Unique 26554>
  <PgfTag `program'>
  <ParaLine 
  >
 > # end of Para
 <Para 
  <Unique 26555>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <String `key_compare key_comp() const;'>
  >
 > # end of Para
 <Para 
  <Unique 36388>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <String `value_compare value_comp() const;'>
  >
 > # end of Para
 <Para 
  <Unique 36389>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <String `iterator begin();'>
  >
 > # end of Para
 <Para 
  <Unique 26556>
  <PgfTag `program'>
  <ParaLine 
   <TextRectID 68>
   <Char Tab >
   <String `const_iterator begin() const;'>
  >
 > # end of Para
 <Para 
  <Unique 26557>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <String `iterator end();'>
  >
 > # end of Para
 <Para 
  <Unique 26558>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <String `const_iterator end() const;'>
  >
 > # end of Para
 <Para 
  <Unique 6498>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <String `reverse_iterator rbegin();'>
  >
 > # end of Para
 <Para 
  <Unique 6500>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <String `const_reverse_iterator rbegin();'>
  >
 > # end of Para
 <Para 
  <Unique 6501>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <String `reverse_iterator rend();'>
  >
 > # end of Para
 <Para 
  <Unique 6502>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <String `const_reverse_iterator rend();'>
  >
 > # end of Para
 <Para 
  <Unique 26559>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <String `bool empty() const; '>
  >
 > # end of Para
 <Para 
  <Unique 26560>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <String `size_type size() const;'>
  >
 > # end of Para
 <Para 
  <Unique 40752>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <String `size_type max_size() const;'>
  >
 > # end of Para
 <Para 
  <Unique 26561>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <String `Allocator<T\>::reference o'>
   <String `perator[](const key_type& x);'>
  >
 > # end of Para
 <Para 
  <Unique 26563>
  <PgfTag `program'>
  <ParaLine 
  >
 > # end of Para
 <Para 
  <Unique 26564>
  <PgfTag `program'>
  <ParaLine 
   <String `// insert/erase:'>
  >
 > # end of Para
 <Para 
  <Unique 26565>
  <PgfTag `program'>
  <ParaLine 
  >
 > # end of Para
 <Para 
  <Unique 26566>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <String `pair<iterator, bool\> insert(const value_type& x);'>
  >
 > # end of Para
 <Para 
  <Unique 26567>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <String `iterator insert(iterator position, const value_type& x);'>
  >
 > # end of Para
 <Para 
  <Unique 26568>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <String `template <class InputIterator\> '>
  >
 > # end of Para
 <Para 
  <Unique 26569>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <String `void insert(InputIterator first, InputIterator last);'>
  >
 > # end of Para
 <Para 
  <Unique 26570>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <String `void erase(iterator position);'>
  >
 > # end of Para
 <Para 
  <Unique 26571>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <String `size_type erase(const key_type& x);'>
  >
 > # end of Para
 <Para 
  <Unique 26572>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <String `void erase(iterator first, iterator last);'>
  >
 > # end of Para
 <Para 
  <Unique 26573>
  <PgfTag `program'>
  <ParaLine 
  >
 > # end of Para
 <Para 
  <Unique 26574>
  <PgfTag `program'>
  <ParaLine 
   <String `// map operations:'>
  >
 > # end of Para
 <Para 
  <Unique 26575>
  <PgfTag `program'>
  <ParaLine 
  >
 > # end of Para
 <Para 
  <Unique 26576>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <String `iterator find(const key_type& x);'>
  >
 > # end of Para
 <Para 
  <Unique 26577>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <String `const_iterator find(const key_type& x) const;'>
  >
 > # end of Para
 <Para 
  <Unique 36193>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <String `size_type count(const key_type& x) const;'>
  >
 > # end of Para
 <Para 
  <Unique 26578>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <String `iterator lower_bound(const key_type& x);'>
  >
 > # end of Para
 <Para 
  <Unique 26579>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <String `const_iterator lower_bound(const key_type& x) const;'>
  >
 > # end of Para
 <Para 
  <Unique 26580>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <String `iterator upper_bound(const key_type& x);'>
  >
 > # end of Para
 <Para 
  <Unique 26581>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <String `const_iterator upper_bound(const key_type& x) const;'>
  >
 > # end of Para
 <Para 
  <Unique 26582>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <String `pair<iterator, iterator\> equal_range(const key_type& x);'>
  >
 > # end of Para
 <Para 
  <Unique 26583>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <String `pair<const_iterator, const_iterator\> equal_range(const key_type& x) const;'>
  >
 > # end of Para
 <Para 
  <Unique 26584>
  <PgfTag `program'>
  <ParaLine 
   <String `};'>
  >
 > # end of Para
 <Para 
  <Unique 26585>
  <PgfTag `program'>
  <ParaLine 
  >
 > # end of Para
 <Para 
  <Unique 26586>
  <PgfTag `program'>
  <ParaLine 
   <String `template <class Key, class T, class Compare, class Allocator\>'>
  >
 > # end of Para
 <Para 
  <Unique 26587>
  <PgfTag `program'>
  <ParaLine 
   <String `bool operator==(const map<Key, T, Compare, Allocator\>& x,'>
  >
 > # end of Para
 <Para 
  <Unique 29374>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <Char Tab >
   <String `const map<Key, T, Compare, Allocator\>& y);'>
  >
 > # end of Para
 <Para 
  <Unique 26588>
  <PgfTag `program'>
  <ParaLine 
  >
 > # end of Para
 <Para 
  <Unique 26589>
  <PgfTag `program'>
  <ParaLine 
   <String `template <class Key, class T, class Compare, class Allocator\>'>
  >
 > # end of Para
 <Para 
  <Unique 26590>
  <PgfTag `program'>
  <ParaLine 
   <String `bool operator<(const map<Key, T, Compare, Allocator\>& x,'>
  >
 > # end of Para
 <Para 
  <Unique 36572>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <Char Tab >
   <String `const map<Key, T, Compare, Allocator\>& y);'>
  >
 > # end of Para
 <Para 
  <Unique 36578>
  <PgfTag `body'>
  <ParaLine 
   <Font 
    <FTag `program'>
   > # end of Font
   <String `iterator'>
   <Font 
    <FTag `'>
   > # end of Font
   <String ` is a bidirectional iterator referring to '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `value_type'>
   <Font 
    <FTag `'>
   > # end of Font
   <String `. The exact type is implementation dependent '>
  >
  <ParaLine 
   <String `and determined by '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `Allocator.'>
  >
 > # end of Para
 <Para 
  <Unique 36579>
  <PgfTag `body'>
  <ParaLine 
   <Font 
    <FTag `program'>
   > # end of Font
   <String `const_iterator'>
   <Font 
    <FTag `'>
   > # end of Font
   <String ` is '>
   <String `a'>
   <String ` constant bidirectional iterator referring to '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `const value_type'>
   <Font 
    <FTag `'>
   > # end of Font
   <String `. The exact type is '>
  >
  <ParaLine 
   <String `implementation dependent and determined by '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `Allocator'>
   <Font 
    <FTag `'>
   > # end of Font
   <String `. It is guaranteed that there is a constructor for '>
  >
  <ParaLine 
   <Font 
    <FTag `program'>
   > # end of Font
   <String `const_iterator'>
   <Font 
    <FTag `'>
   > # end of Font
   <String ` out of '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `iterator'>
   <Font 
    <FTag `'>
   > # end of Font
   <String `.'>
  >
 > # end of Para
 <Para 
  <Unique 36580>
  <PgfTag `body'>
  <ParaLine 
   <Font 
    <FTag `program'>
   > # end of Font
   <Char Tab >
   <Char Tab >
   <String `size_type'>
   <Font 
    <FTag `'>
   > # end of Font
   <String ` is an unsigned integral type. The exact type is implementation dependent and determined by '>
  >
  <ParaLine 
   <Font 
    <FTag `program'>
   > # end of Font
   <String `Allocator'>
   <Font 
    <FTag `'>
   > # end of Font
   <String `.'>
  >
 > # end of Para
 <Para 
  <Unique 36581>
  <PgfTag `body'>
  <ParaLine 
   <Char Tab >
   <Font 
    <FTag `program'>
   > # end of Font
   <String `difference_type'>
   <Font 
    <FTag `'>
   > # end of Font
   <String ` is a signed integral type. The exact type is implementation dependent and determined '>
  >
  <ParaLine 
   <String `by '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `Allocator'>
   <Font 
    <FTag `'>
   > # end of Font
   <String `.'>
  >
 > # end of Para
 <Para 
  <Unique 36891>
  <PgfTag `body'>
  <ParaLine 
   <String `In addition to the standard set of member functions of associative containers, '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `map'>
   <Font 
    <FTag `'>
   > # end of Font
   <String ` provides '>
  >
  <ParaLine 
   <Font 
    <FTag `program'>
   > # end of Font
   <String `Allocator<T\>::'>
   <String `reference o'>
   <String `perator[](const key_type&)'>
   <Font 
    <FTag `'>
   > # end of Font
   <String `. For a map '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `m'>
   <Font 
    <FTag `'>
   > # end of Font
   <String ` and key '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `k'>
   <Font 
    <FTag `'>
   > # end of Font
   <String `, '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `m[k]'>
   <Font 
    <FTag `'>
   > # end of Font
   <String ` is semantically '>
  >
  <ParaLine 
   <String `equivalent to '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `(*((m.insert(make_pair(k, T()))).first)).second'>
   <Font 
    <FTag `'>
   > # end of Font
   <String `.'>
  >
 > # end of Para
 <Para 
  <Unique 36574>
  <PgfTag `subsubsection'>
  <PgfNumString `8.2.4 '>
  <ParaLine 
   <TextRectID 69>
   <String `Multimap'>
  >
 > # end of Para
 <Para 
  <Unique 41076>
  <PgfTag `body'>
  <ParaLine 
   <Font 
    <FTag `program'>
   > # end of Font
   <String `multimap'>
   <Font 
    <FTag `'>
   > # end of Font
   <String ` is a kind of associative container that supports equal keys (possibly contains multiple copies of '>
  >
  <ParaLine 
   <String `the same key value) and provides for fast retrieval of values of another type '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `T'>
   <Font 
    <FTag `'>
   > # end of Font
   <String ` based on the keys.'>
  >
 > # end of Para
 <Para 
  <Unique 26597>
  <PgfTag `program'>
  <ParaLine 
  >
 > # end of Para
 <Para 
  <Unique 26598>
  <PgfTag `program'>
  <ParaLine 
   <String `template <class Key, class T, class Compare = less<Key\>,'>
  >
 > # end of Para
 <Para 
  <Unique 29388>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <Char Tab >
   <String `template <class U\> class Allocator = allocator\>'>
  >
 > # end of Para
 <Para 
  <Unique 26599>
  <PgfTag `program'>
  <ParaLine 
   <String `class multimap {'>
  >
 > # end of Para
 <Para 
  <Unique 26600>
  <PgfTag `program'>
  <ParaLine 
   <String `public:'>
  >
 > # end of Para
 <Para 
  <Unique 26601>
  <PgfTag `program'>
  <ParaLine 
  >
 > # end of Para
 <Para 
  <Unique 26602>
  <PgfTag `program'>
  <ParaLine 
   <String `// typedefs:'>
  >
 > # end of Para
 <Para 
  <Unique 26603>
  <PgfTag `program'>
  <ParaLine 
  >
 > # end of Para
 <Para 
  <Unique 35492>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <String `typedef Key key_type;'>
  >
 > # end of Para
 <Para 
  <Unique 35493>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <String `typedef pair<const Key, T\> value_type;'>
  >
 > # end of Para
 <Para 
  <Unique 35494>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <String `typedef Compare key_compare;'>
  >
 > # end of Para
 <Para 
  <Unique 36380>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <String `class value_compare '>
  >
 > # end of Para
 <Para 
  <Unique 36434>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <Char Tab >
   <String `: public binary_function<'>
   <Char Tab >
   <String `value_type, value_type, bool\> {'>
  >
 > # end of Para
 <Para 
  <Unique 8789>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <String `friend class multimap;'>
  >
 > # end of Para
 <Para 
  <Unique 36436>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <String `protected:'>
  >
 > # end of Para
 <Para 
  <Unique 36437>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <Char Tab >
   <String `Compare comp;'>
  >
 > # end of Para
 <Para 
  <Unique 36438>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <Char Tab >
   <String `value_compare(Compare c) : comp(c) {}'>
  >
 > # end of Para
 <Para 
  <Unique 36439>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <String `public:'>
  >
 > # end of Para
 <Para 
  <Unique 36440>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <Char Tab >
   <String `bool operator()(const value_type& x, const value_type& y) {'>
  >
 > # end of Para
 <Para 
  <Unique 36441>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <Char Tab >
   <Char Tab >
   <String `return comp(x.first, y.first);'>
  >
 > # end of Para
 <Para 
  <Unique 36442>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <Char Tab >
   <String `}'>
  >
 > # end of Para
 <Para 
  <Unique 36443>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <String `};'>
  >
 > # end of Para
 <Para 
  <Unique 36381>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <String `typedef iterator; '>
  >
 > # end of Para
 <Para 
  <Unique 26610>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <String `typedef const_iterator; '>
  >
 > # end of Para
 <Para 
  <Unique 6503>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <String `typedef Allocator<value_type\>::pointer pointer;'>
  >
 > # end of Para
 <Para 
  <Unique 6505>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <String `typedef Allocator<value_type\>::reference reference;'>
  >
 > # end of Para
 <Para 
  <Unique 6506>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <String `typedef Allocator<value_type\>::const_reference const_reference;'>
  >
 > # end of Para
 <Para 
  <Unique 26618>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <String `typedef size_type;'>
  >
 > # end of Para
 <Para 
  <Unique 26623>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <String `typedef difference_type;'>
  >
 > # end of Para
 <Para 
  <Unique 6507>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <String `typedef reverse_iterator;'>
  >
 > # end of Para
 <Para 
  <Unique 6509>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <String `typedef const_reverse_iterator;'>
  >
 > # end of Para
 <Para 
  <Unique 26630>
  <PgfTag `program'>
  <ParaLine 
  >
 > # end of Para
 <Para 
  <Unique 26631>
  <PgfTag `program'>
  <ParaLine 
   <String `// allocation/deallocation:'>
  >
 > # end of Para
 <Para 
  <Unique 26632>
  <PgfTag `program'>
  <ParaLine 
  >
 > # end of Para
 <Para 
  <Unique 26633>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <String `multimap(const Compare& comp = Compare());'>
  >
 > # end of Para
 <Para 
  <Unique 26634>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <String `template <class InputIterator\> '>
  >
 > # end of Para
 <Para 
  <Unique 26635>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <String `multimap(InputIterator first, InputIterator last,'>
  >
 > # end of Para
 <Para 
  <Unique 29389>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <Char Tab >
   <String `const Compare& comp = Compare()); '>
  >
 > # end of Para
 <Para 
  <Unique 26636>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <String `multimap(const multimap<Key, T, Compare, Allocator\>& x);'>
  >
 > # end of Para
 <Para 
  <Unique 26637>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <String `~multimap(); '>
  >
 > # end of Para
 <Para 
  <Unique 26638>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <String `multimap<Key, T, Compare, Allocator\>&'>
  >
 > # end of Para
 <Para 
  <Unique 29390>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <Char Tab >
   <String `operator=(const multimap<Key, T, Compare, Allocator\>& x);'>
  >
 > # end of Para
 <Para 
  <Unique 4337>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <String `void swap(multimap<Key, T, Compare, Allocator\>& x);'>
  >
 > # end of Para
 <Para 
  <Unique 26639>
  <PgfTag `program'>
  <ParaLine 
  >
 > # end of Para
 <Para 
  <Unique 26640>
  <PgfTag `program'>
  <ParaLine 
   <String `// accessors:'>
  >
 > # end of Para
 <Para 
  <Unique 26641>
  <PgfTag `program'>
  <ParaLine 
  >
 > # end of Para
 <Para 
  <Unique 26642>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <String `key_compare key_comp() const;'>
  >
 > # end of Para
 <Para 
  <Unique 36391>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <String `value_compare value_comp() const;'>
  >
 > # end of Para
 <Para 
  <Unique 36392>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <String `iterator begin();'>
  >
 > # end of Para
 <Para 
  <Unique 26643>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <String `const_iterator begin() const;'>
  >
 > # end of Para
 <Para 
  <Unique 26644>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <String `iterator end();'>
  >
 > # end of Para
 <Para 
  <Unique 26645>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <String `const_iterator end() const;'>
  >
 > # end of Para
 <Para 
  <Unique 6510>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <String `reverse_iterator rbegin();'>
  >
 > # end of Para
 <Para 
  <Unique 6512>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <String `const_reverse_iterator rbegin();'>
  >
 > # end of Para
 <Para 
  <Unique 6513>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <String `reverse_iterator rend();'>
  >
 > # end of Para
 <Para 
  <Unique 6514>
  <PgfTag `program'>
  <ParaLine 
   <TextRectID 70>
   <Char Tab >
   <String `const_reverse_iterator rend();'>
  >
 > # end of Para
 <Para 
  <Unique 26646>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <String `bool empty() const; '>
  >
 > # end of Para
 <Para 
  <Unique 26647>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <String `size_type size() const;'>
  >
 > # end of Para
 <Para 
  <Unique 40756>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <String `size_type max_size() const;'>
  >
 > # end of Para
 <Para 
  <Unique 26648>
  <PgfTag `program'>
  <ParaLine 
  >
 > # end of Para
 <Para 
  <Unique 26649>
  <PgfTag `program'>
  <ParaLine 
   <String `// insert/erase:'>
  >
 > # end of Para
 <Para 
  <Unique 26650>
  <PgfTag `program'>
  <ParaLine 
  >
 > # end of Para
 <Para 
  <Unique 26651>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <String `iterator insert(const value_type& x);'>
  >
 > # end of Para
 <Para 
  <Unique 26652>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <String `iterator insert(iterator position, const value_type& x);'>
  >
 > # end of Para
 <Para 
  <Unique 26653>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <String `template <class InputIterator\> '>
  >
 > # end of Para
 <Para 
  <Unique 26654>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <String `void insert(InputIterator first, InputIterator last);'>
  >
 > # end of Para
 <Para 
  <Unique 26655>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <String `void erase(iterator position);'>
  >
 > # end of Para
 <Para 
  <Unique 26656>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <String `size_type erase(const key_type& x);'>
  >
 > # end of Para
 <Para 
  <Unique 26657>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <String `void erase(iterator first, iterator last);'>
  >
 > # end of Para
 <Para 
  <Unique 26658>
  <PgfTag `program'>
  <ParaLine 
  >
 > # end of Para
 <Para 
  <Unique 26659>
  <PgfTag `program'>
  <ParaLine 
   <String `// multimap operations:'>
  >
 > # end of Para
 <Para 
  <Unique 26660>
  <PgfTag `program'>
  <ParaLine 
  >
 > # end of Para
 <Para 
  <Unique 26661>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <String `iterator find(const key_type& x);'>
  >
 > # end of Para
 <Para 
  <Unique 26662>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <String `const_iterator find(const key_type& x) const;'>
  >
 > # end of Para
 <Para 
  <Unique 26663>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <String `size_type count(const key_type& x) const;'>
  >
 > # end of Para
 <Para 
  <Unique 26664>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <String `iterator lower_bound(const key_type& x);'>
  >
 > # end of Para
 <Para 
  <Unique 26665>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <String `const_iterator lower_bound(const key_type& x) const;'>
  >
 > # end of Para
 <Para 
  <Unique 26666>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <String `iterator upper_bound(const key_type& x);'>
  >
 > # end of Para
 <Para 
  <Unique 26667>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <String `const_iterator upper_bound(const key_type& x) const;'>
  >
 > # end of Para
 <Para 
  <Unique 26668>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <String `pair<iterator, iterator\> equal_range(const key_type& x);'>
  >
 > # end of Para
 <Para 
  <Unique 26669>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <String `pair<const_iterator, const_iterator\> equal_range(const key_type& x) const;'>
  >
 > # end of Para
 <Para 
  <Unique 26670>
  <PgfTag `program'>
  <ParaLine 
   <String `};'>
  >
 > # end of Para
 <Para 
  <Unique 35520>
  <PgfTag `program'>
  <ParaLine 
  >
 > # end of Para
 <Para 
  <Unique 35521>
  <PgfTag `program'>
  <ParaLine 
   <String `template <class Key, class T, class Compare, class Allocator\>'>
  >
 > # end of Para
 <Para 
  <Unique 35522>
  <PgfTag `program'>
  <ParaLine 
   <String `bool operator==(const multimap<Key, T, Compare, Allocator\>& x,'>
  >
 > # end of Para
 <Para 
  <Unique 29391>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <Char Tab >
   <String `const multimap<Key, T, Compare, Allocator\>& y);'>
  >
 > # end of Para
 <Para 
  <Unique 26674>
  <PgfTag `program'>
  <ParaLine 
  >
 > # end of Para
 <Para 
  <Unique 26675>
  <PgfTag `program'>
  <ParaLine 
   <String `template <class Key, class T, class Compare, class Allocator\>'>
  >
 > # end of Para
 <Para 
  <Unique 26676>
  <PgfTag `program'>
  <ParaLine 
   <String `bool operator<(const multimap<Key, T, Compare, Allocator\>& x,'>
  >
 > # end of Para
 <Para 
  <Unique 31486>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <Char Tab >
   <String `const multimap<Key, T, Compare, Allocator\>& y);'>
  >
 > # end of Para
 <Para 
  <Unique 36608>
  <PgfTag `body'>
  <ParaLine 
   <Font 
    <FTag `program'>
   > # end of Font
   <String `iterator'>
   <Font 
    <FTag `'>
   > # end of Font
   <String ` is a bidirectional iterator referring to '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `value_type'>
   <Font 
    <FTag `'>
   > # end of Font
   <String `. The exact type is implementation dependent '>
  >
  <ParaLine 
   <String `and determined by '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `Allocator.'>
  >
 > # end of Para
 <Para 
  <Unique 36609>
  <PgfTag `body'>
  <ParaLine 
   <Font 
    <FTag `program'>
   > # end of Font
   <String `const_iterator'>
   <Font 
    <FTag `'>
   > # end of Font
   <String ` is the a constant bidirectional iterator referring to '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `const value_type'>
   <Font 
    <FTag `'>
   > # end of Font
   <String `. The exact type is '>
  >
  <ParaLine 
   <String `implementation dependent and determined by '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `Allocator'>
   <Font 
    <FTag `'>
   > # end of Font
   <String `. It is guaranteed that there is a constructor for '>
  >
  <ParaLine 
   <Font 
    <FTag `program'>
   > # end of Font
   <String `const_iterator'>
   <Font 
    <FTag `'>
   > # end of Font
   <String ` out of '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `iterator'>
   <Font 
    <FTag `'>
   > # end of Font
   <String `.'>
  >
 > # end of Para
 <Para 
  <Unique 36610>
  <PgfTag `body'>
  <ParaLine 
   <Font 
    <FTag `program'>
   > # end of Font
   <Char Tab >
   <Char Tab >
   <String `size_type'>
   <Font 
    <FTag `'>
   > # end of Font
   <String ` is an unsigned integral type. The exact type is implementation dependent and determined by '>
  >
  <ParaLine 
   <Font 
    <FTag `program'>
   > # end of Font
   <String `Allocator'>
   <Font 
    <FTag `'>
   > # end of Font
   <String `.'>
  >
 > # end of Para
 <Para 
  <Unique 36611>
  <PgfTag `body'>
  <ParaLine 
   <Char Tab >
   <Font 
    <FTag `program'>
   > # end of Font
   <String `difference_type'>
   <Font 
    <FTag `'>
   > # end of Font
   <String ` is a signed integral type. The exact type is implementation dependent and determined '>
  >
  <ParaLine 
   <String `by '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `Allocator'>
   <Font 
    <FTag `'>
   > # end of Font
   <String `.'>
  >
 > # end of Para
 <Para 
  <Unique 31487>
  <PgfTag `section'>
  <PgfNumString `9  '>
  <ParaLine 
   <String `Stream iterators'>
  >
 > # end of Para
 <Para 
  <Unique 31492>
  <PgfTag `body'>
  <ParaLine 
   <String `To make it possible for algorithmic templates to work directly with input/output streams, appropriate '>
  >
  <ParaLine 
   <String `iterator-like template classes are provided. For example,'>
  >
 > # end of Para
 <Para 
  <Unique 31493>
  <PgfTag `program'>
  <ParaLine 
  >
 > # end of Para
 <Para 
  <Unique 33521>
  <PgfTag `program'>
  <ParaLine 
   <String `partial_sum_copy(istream_iterator<double\>(cin),'>
   <Char Tab >
   <String `istream_iterator<double\>(), '>
  >
 > # end of Para
 <Para 
  <Unique 31494>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <Char Tab >
   <String ` ostream_iterator<double\>(cout, \xd3 \\n\xd3 ));'>
  >
 > # end of Para
 <Para 
  <Unique 31495>
  <PgfTag `body'>
  <ParaLine 
   <String `reads a file containing floating point numbers from '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `cin'>
   <Font 
    <FTag `'>
   > # end of Font
   <String `, and prints the partial sums onto '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `cout'>
   <Font 
    <FTag `'>
   > # end of Font
   <String `.'>
  >
 > # end of Para
 <Para 
  <Unique 31488>
  <PgfTag `subsection'>
  <PgfNumString `9.1 '>
  <ParaLine 
   <TextRectID 71>
   <String `Istream Iterator'>
  >
 > # end of Para
 <Para 
  <Unique 124>
  <PgfTag `body'>
  <ParaLine 
   <Font 
    <FTag `'>
    <FFamily `Courier'>
    <FPostScriptName `Courier'>
    <FSize  9.0 pt>
   > # end of Font
   <String `istream_i'>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `terator<T\>'>
   <Font 
    <FTag `'>
   > # end of Font
   <String ` reads (using '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `operator\>\>'>
   <Font 
    <FTag `'>
   > # end of Font
   <String `) successive elements from the input stream for which it '>
  >
  <ParaLine 
   <String `was constructed. After it is constructed, and every time ++ is used, the iterator reads and stores a value of '>
  >
  <ParaLine 
   <Font 
    <FTag `program'>
   > # end of Font
   <String `T'>
   <Font 
    <FTag `'>
   > # end of Font
   <String `. If the end of stream is reached ('>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `operator void*()'>
   <Font 
    <FTag `'>
   > # end of Font
   <String ` on the stream returns '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `false'>
   <Font 
    <FTag `'>
   > # end of Font
   <String `), the iterator becomes '>
  >
  <ParaLine 
   <String `equal to the '>
   <Font 
    <FTag `Emphasis'>
   > # end of Font
   <String `end-of-stream'>
   <Font 
    <FTag `'>
   > # end of Font
   <String ` iterator value. The constructor with no arguments '>
   <Font 
    <FTag `'>
    <FFamily `Courier'>
    <FPostScriptName `Courier'>
    <FSize  9.0 pt>
   > # end of Font
   <String `istream_i'>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `terator()'>
   <Font 
    <FTag `'>
   > # end of Font
   <String ` always '>
  >
  <ParaLine 
   <String `constructs an end of stream input iterator object, which is the only legitimate iterator to be used for the end '>
  >
  <ParaLine 
   <String `condition. The result of '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `operator*'>
   <Font 
    <FTag `'>
   > # end of Font
   <String ` on an end of stream is not defined. For any other iterator value a '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `const '>
  >
  <ParaLine 
   <String `T&'>
   <Font 
    <FTag `'>
   > # end of Font
   <String ` is returned. It is impossible to store things into istream iterators. The main peculiarity of the istream '>
  >
  <ParaLine 
   <String `iterators is the fact that ++ operators are not equality preserving, that is, '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `i == j'>
   <Font 
    <FTag `'>
   > # end of Font
   <String ` does not guarantee at all '>
  >
  <ParaLine 
   <String `that '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `++i == ++j'>
   <Font 
    <FTag `'>
   > # end of Font
   <String `. Every time ++ is used a new value is read. '>
  >
 > # end of Para
 <Para 
  <Unique 31504>
  <PgfTag `body'>
  <ParaLine 
   <String `The practical consequence of this fact is that istream iterators can be used only for one-pass algorithms, '>
  >
  <ParaLine 
   <String `which actually makes perfect sense, since for multi-pass algorithms it is always more appropriate to use in-'>
  >
  <ParaLine 
   <String `memory data structures. Two end-of-stream iterators are always equal. An end-of-stream iterator is not '>
  >
  <ParaLine 
   <String `equal to a non-end-of-stream iterator. Two non-end-of-stream iterators are equal when they are constructed '>
  >
  <ParaLine 
   <String `from the same stream.'>
  >
 > # end of Para
 <Para 
  <Unique 31505>
  <PgfTag `program'>
  <ParaLine 
  >
 > # end of Para
 <Para 
  <Unique 1088>
  <PgfTag `program'>
  <ParaLine 
   <String `template <class T, class Distance = ptrdiff_t\>'>
  >
 > # end of Para
 <Para 
  <Unique 1089>
  <PgfTag `program'>
  <ParaLine 
   <String `class istream_iterator : '>
   <String `public i'>
   <String `nput_iterator<T, Distance\> {'>
  >
 > # end of Para
 <Para 
  <Unique 4590>
  <PgfTag `program'>
  <ParaLine 
   <String `friend bool operator==(const istream_iterator<T, Distance\>& x,'>
  >
 > # end of Para
 <Para 
  <Unique 4592>
  <PgfTag `program'>
  <ParaLine 
   <String `                       const istream_iterator<T, Distance\>& y);'>
  >
 > # end of Para
 <Para 
  <Unique 1090>
  <PgfTag `program'>
  <ParaLine 
   <String `public:'>
  >
 > # end of Para
 <Para 
  <Unique 1091>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <String `istream_iterator();'>
  >
 > # end of Para
 <Para 
  <Unique 1092>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <String `istream_iterator(istream& s);'>
  >
 > # end of Para
 <Para 
  <Unique 1094>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <String `istream_iterator(const istream_iterator<T, Distance\>& x);'>
  >
 > # end of Para
 <Para 
  <Unique 18715>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <String `~istream_iterator();'>
  >
 > # end of Para
 <Para 
  <Unique 1099>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <String `const T& operator*() const;'>
  >
 > # end of Para
 <Para 
  <Unique 1100>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <String `istream_iterator<T, Distance\>& operator++();'>
   <Char Tab >
  >
 > # end of Para
 <Para 
  <Unique 1101>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <String `istream_iterator<T, Distance\> operator++(int);'>
   <Char Tab >
  >
 > # end of Para
 <Para 
  <Unique 1102>
  <PgfTag `program'>
  <ParaLine 
   <String `};'>
  >
 > # end of Para
 <Para 
  <Unique 22749>
  <PgfTag `program'>
  <ParaLine 
   <String `template <class T, class Distance\>'>
  >
 > # end of Para
 <Para 
  <Unique 22752>
  <PgfTag `program'>
  <ParaLine 
   <String `bool operator==(const istream_iterator<T, Distance\>& x,'>
  >
 > # end of Para
 <Para 
  <Unique 31524>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <Char Tab >
   <String `const istream_iterator<T, Distance\>& y);'>
  >
 > # end of Para
 <Para 
  <Unique 1103>
  <PgfTag `subsection'>
  <PgfNumString `9.2 '>
  <ParaLine 
   <String `Ostream iterator'>
  >
 > # end of Para
 <Para 
  <Unique 125>
  <PgfTag `body'>
  <ParaLine 
   <Font 
    <FTag `program'>
   > # end of Font
   <String `ostream_iterator<T\>'>
   <Font 
    <FTag `'>
   > # end of Font
   <String ` writes (using '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `operator<<'>
   <Font 
    <FTag `'>
   > # end of Font
   <String `) successive elements onto the output stream from which '>
  >
  <ParaLine 
   <String `it was constructed. If it was constructed with '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `char*'>
   <Font 
    <FTag `'>
   > # end of Font
   <String ` as a constructor argument, this string, called a '>
   <Font 
    <FTag `Emphasis'>
   > # end of Font
   <String `delimiter '>
  >
  <ParaLine 
   <String `string'>
   <Font 
    <FTag `'>
   > # end of Font
   <String `, is written to the stream after every '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `T'>
   <Font 
    <FTag `'>
   > # end of Font
   <String ` is written. It is not possible to get a value out of the output '>
  >
  <ParaLine 
   <String `iterator. Its only use is as an output iterator in situations like '>
  >
 > # end of Para
 <Para 
  <Unique 32823>
  <PgfTag `program'>
  <ParaLine 
  >
 > # end of Para
 <Para 
  <Unique 32842>
  <PgfTag `program'>
  <ParaLine 
   <String `while (first != last) *result++ = *first++;'>
  >
 > # end of Para
 <Para 
  <Unique 162>
  <PgfTag `body'>
  <ParaLine 
   <Font 
    <FTag `program'>
   > # end of Font
   <String `ostream_iterator'>
   <Font 
    <FTag `'>
   > # end of Font
   <String ` is defined as:'>
  >
 > # end of Para
 <Para 
  <Unique 1104>
  <PgfTag `program'>
  <ParaLine 
  >
 > # end of Para
 <Para 
  <Unique 32843>
  <PgfTag `program'>
  <ParaLine 
   <String `template <class T\>'>
  >
 > # end of Para
 <Para 
  <Unique 1105>
  <PgfTag `program'>
  <ParaLine 
   <String `class ostream_iterator : public output_iterator {'>
  >
 > # end of Para
 <Para 
  <Unique 1106>
  <PgfTag `program'>
  <ParaLine 
   <String `public:'>
  >
 > # end of Para
 <Para 
  <Unique 1108>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <String `ostream_iterator(ostream& s);'>
   <Char Tab >
  >
 > # end of Para
 <Para 
  <Unique 1110>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <String `o'>
   <String `stream_iterator(ostream& s, const char* delimiter);'>
  >
 > # end of Para
 <Para 
  <Unique 1111>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <String `ostream_iterator(const ostream_iterator<T\>& x);'>
   <Char Tab >
   <Char Tab >
   <Char Tab >
   <Char Tab >
   <Char Tab >
   <Char Tab >
   <Char Tab >
  >
 > # end of Para
 <Para 
  <Unique 1112>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <String `~ostream_iterator();'>
  >
 > # end of Para
 <Para 
  <Unique 1116>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <String `ostream_iterator<T\>& operator=(const T& value);'>
   <Char Tab >
  >
 > # end of Para
 <Para 
  <Unique 1117>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <String `ostream_iterator<T\>& operator*();'>
  >
 > # end of Para
 <Para 
  <Unique 1118>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <String `ostream_iterator<T\>& operator++();'>
  >
 > # end of Para
 <Para 
  <Unique 1119>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <String `ostream_iterator<T\>'>
   <String `&'>
   <String ` operator++(int);'>
  >
 > # end of Para
 <Para 
  <Unique 1120>
  <PgfTag `program'>
  <ParaLine 
   <String `};'>
  >
 > # end of Para
 <Para 
  <Unique 6617>
  <PgfTag `section'>
  <PgfNumString `10  '>
  <ParaLine 
   <TextRectID 72>
   <String `Algorithms'>
  >
 > # end of Para
 <Para 
  <Unique 564>
  <PgfTag `body'>
  <ParaLine 
   <String `All of the algorithms are separated from the particular implementations of data structures and are '>
  >
  <ParaLine 
   <String `parameterized by iterator types. Because of this, they can work with user defined data structures, as long '>
  >
  <ParaLine 
   <String `as these data structures have iterator types satisfying the assumptions on the algorithms. '>
  >
 > # end of Para
 <Para 
  <Unique 565>
  <PgfTag `body'>
  <ParaLine 
   <String `Both in-place and copying versions are provided for certain algorithms. The decision whether to include a '>
  >
  <ParaLine 
   <String `copying version was usually based on complexity considerations. When the cost of doing the operation '>
  >
  <ParaLine 
   <String `dominates the cost of copy, the copying version is not included. For example, '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `sort_copy'>
   <Font 
    <FTag `'>
   > # end of Font
   <String ` is not included '>
  >
  <ParaLine 
   <String `since the cost of sorting is much more significant, and users might as well do '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `copy'>
   <Font 
    <FTag `'>
   > # end of Font
   <String ` followed by '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `sort'>
   <Font 
    <FTag `'>
   > # end of Font
   <String `. When '>
  >
  <ParaLine 
   <String `such a version is provided for '>
   <Font 
    <FTag `Emphasis'>
    <FFamily `Courier'>
    <FAngle `Oblique'>
    <FPostScriptName `Courier-Oblique'>
    <FSize  9.0 pt>
   > # end of Font
   <String `algorithm'>
   <Font 
    <FTag `program'>
   > # end of Font
   <String ` '>
   <Font 
    <FTag `'>
   > # end of Font
   <String `it is called '>
   <Font 
    <FTag `Emphasis'>
    <FFamily `Courier'>
    <FAngle `Oblique'>
    <FPostScriptName `Courier-Oblique'>
    <FSize  9.0 pt>
   > # end of Font
   <String `algorithm'>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `_copy. '>
   <Font 
    <FTag `'>
   > # end of Font
   <String `Algorithms that take predicates '>
  >
  <ParaLine 
   <String `end with the suffix '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `_if'>
   <Font 
    <FTag `'>
   > # end of Font
   <String ` (which follows the suffix '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `_copy'>
   <Font 
    <FTag `'>
   > # end of Font
   <String `). '>
  >
 > # end of Para
 <Para 
  <Unique 562>
  <PgfTag `body'>
  <ParaLine 
   <String `The '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `Predicate'>
   <Font 
    <FTag `'>
   > # end of Font
   <String ` class is used whenever an algorithm expects a function object that when applied to the '>
  >
  <ParaLine 
   <String `result of dereferencing the corresponding iterator returns a value '>
   <String `convertible to '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `bool'>
   <Font 
    <FTag `'>
   > # end of Font
   <String `.'>
   <String ` In other words, if an '>
  >
  <ParaLine 
   <String `algorithm takes '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `Predicate pred'>
   <Font 
    <FTag `'>
   > # end of Font
   <String ` as its argument and '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `first'>
   <Font 
    <FTag `'>
   > # end of Font
   <String ` as its iterator argument, it should work '>
  >
  <ParaLine 
   <String `correctly in the construct '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `if (pred(*first)){..'>
   <Font 
    <FTag `'>
   > # end of Font
   <String `.'>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `}'>
   <Font 
    <FTag `'>
   > # end of Font
   <String `. The function object '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `pred'>
   <Font 
    <FTag `'>
   > # end of Font
   <String ` is assumed not to apply any '>
  >
  <ParaLine 
   <String `non-constant function through the dereferenced iterator. '>
  >
 > # end of Para
 <Para 
  <Unique 41099>
  <PgfTag `body'>
  <ParaLine 
   <String `The '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `BinaryPredicate'>
   <Font 
    <FTag `'>
   > # end of Font
   <String ` class is used whenever an algorithm expects a function object that when applied to '>
  >
  <ParaLine 
   <String `the result of dereferencing two corresponding iterators or to dereferencing an iterator and type '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `T'>
   <Font 
    <FTag `'>
   > # end of Font
   <String ` when '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `T'>
   <Font 
    <FTag `'>
   > # end of Font
   <String ` is '>
  >
  <ParaLine 
   <String `part of the signature returns a value '>
   <String `convertible to '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `bool'>
   <Font 
    <FTag `'>
   > # end of Font
   <String `.'>
   <String ` In other words, if an algorithm takes '>
  >
  <ParaLine 
   <Font 
    <FTag `program'>
   > # end of Font
   <String `BinaryPredicate binary_pred'>
   <Font 
    <FTag `'>
   > # end of Font
   <String ` as its argument and '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `first1'>
   <Font 
    <FTag `'>
   > # end of Font
   <String ` and '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `first2'>
   <Font 
    <FTag `'>
   > # end of Font
   <String ` as its iterator arguments, it '>
  >
  <ParaLine 
   <String `should work correctly in the construct '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `if (binary_pred(*first, *first2)){...}'>
   <Font 
    <FTag `'>
   > # end of Font
   <String `. '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `BinaryPredicate'>
   <Font 
    <FTag `'>
   > # end of Font
   <String ` '>
  >
  <ParaLine 
   <String `always takes the first iterator type as its first argument, that is, in those cases when '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `T'>
   <Font 
    <FTag `'>
   > # end of Font
   <String ` '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `value'>
   <Font 
    <FTag `'>
   > # end of Font
   <String ` is part of the '>
  >
  <ParaLine 
   <String `signature, it should work correctly in the context of '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `if (binary_pred(*first, value)){...}'>
   <Font 
    <FTag `'>
   > # end of Font
   <String `. It is '>
  >
  <ParaLine 
   <String `expected that '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `binary_pred'>
   <Font 
    <FTag `'>
   > # end of Font
   <String ` will not apply any non-constant function through the dereferenced iterators.'>
  >
 > # end of Para
 <Para 
  <Unique 41110>
  <PgfTag `body'>
  <ParaLine 
   <String `In the description of the algorithms operators '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `+'>
   <Font 
    <FTag `'>
   > # end of Font
   <String ` and '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `-'>
   <Font 
    <FTag `'>
   > # end of Font
   <String ` are used for some of the iterator categories for which '>
  >
  <ParaLine 
   <String `they do not have to be defined. In these cases the semantics of '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `a+n'>
   <Font 
    <FTag `'>
   > # end of Font
   <String ` is the same '>
   <String `as t'>
   <String `hat of '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `{ X tmp = a; '>
  >
  <ParaLine 
   <String `advance(tmp, n); return tmp; }'>
   <Font 
    <FTag `'>
   > # end of Font
   <String ` and that of '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `a-b'>
   <Font 
    <FTag `'>
   > # end of Font
   <String ` is the same as '>
   <String `that '>
   <String `of '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `{ Distance n; distance(a, '>
  >
  <ParaLine 
   <String `b, n); return n; }'>
   <Font 
    <FTag `'>
   > # end of Font
   <String `.'>
  >
 > # end of Para
 <Para 
  <Unique 41116>
  <PgfTag `subsection'>
  <PgfNumString `10.1 '>
  <ParaLine 
   <String `Non-mutating sequence operations'>
  >
 > # end of Para
 <Para 
  <Unique 1296>
  <PgfTag `subsubsection'>
  <PgfNumString `10.1.1 '>
  <ParaLine 
   <String `For each'>
  >
 > # end of Para
 <Para 
  <Unique 201>
  <PgfTag `program'>
  <ParaLine 
  >
 > # end of Para
 <Para 
  <Unique 204>
  <PgfTag `program'>
  <ParaLine 
   <String `template <class InputIterator, class Function\>'>
  >
 > # end of Para
 <Para 
  <Unique 202>
  <PgfTag `program'>
  <ParaLine 
   <String `Function f'>
   <String `or_each(InputIterator first, InputIterator last, Function f);'>
  >
 > # end of Para
 <Para 
  <Unique 7118>
  <PgfTag `body'>
  <ParaLine 
   <Font 
    <FTag `program'>
   > # end of Font
   <String `for_each'>
   <Font 
    <FTag `'>
   > # end of Font
   <String ` applies '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `f'>
   <Font 
    <FTag `'>
   > # end of Font
   <String ` to the result of dereferencing every iterator in the range '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `[first, last)'>
   <Font 
    <FTag `'>
   > # end of Font
   <String ` and returns '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `f'>
   <Font 
    <FTag `'>
   > # end of Font
   <String `.'>
   <String ` '>
  >
  <ParaLine 
   <Font 
    <FTag `program'>
   > # end of Font
   <String `f'>
   <Font 
    <FTag `'>
   > # end of Font
   <String ` is assumed not to apply any non-constant function through the dereferenced iterator. '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `f'>
   <Font 
    <FTag `'>
   > # end of Font
   <String ` is applied exactly '>
  >
  <ParaLine 
   <Font 
    <FTag `program'>
   > # end of Font
   <String `last - first'>
   <Font 
    <FTag `'>
   > # end of Font
   <String ` times. If '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `f'>
   <Font 
    <FTag `'>
   > # end of Font
   <String ` returns a result, the result is ignored. '>
  >
 > # end of Para
 <Para 
  <Unique 7119>
  <PgfTag `subsubsection'>
  <PgfNumString `10.1.2 '>
  <ParaLine 
   <String `Find'>
  >
 > # end of Para
 <Para 
  <Unique 9415>
  <PgfTag `program'>
  <ParaLine 
  >
 > # end of Para
 <Para 
  <Unique 224>
  <PgfTag `program'>
  <ParaLine 
   <String `template <class InputIterator, class T\>'>
  >
 > # end of Para
 <Para 
  <Unique 225>
  <PgfTag `program'>
  <ParaLine 
   <String `InputIterator find(InputIterator first, InputIterator last, const T& value);'>
  >
 > # end of Para
 <Para 
  <Unique 226>
  <PgfTag `program'>
  <ParaLine 
  >
 > # end of Para
 <Para 
  <Unique 1314>
  <PgfTag `program'>
  <ParaLine 
   <String `template <class InputIterator, class Predicate\>'>
  >
 > # end of Para
 <Para 
  <Unique 234>
  <PgfTag `program'>
  <ParaLine 
   <String `InputIterator find_if(InputIterator first, InputIterator last, Predicate pred);'>
  >
 > # end of Para
 <Para 
  <Unique 9409>
  <PgfTag `body'>
  <ParaLine 
   <Font 
    <FTag `program'>
   > # end of Font
   <String `find'>
   <Font 
    <FTag `'>
   > # end of Font
   <String ` returns the first iterator '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `i'>
   <Font 
    <FTag `'>
   > # end of Font
   <String ` in the range '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `[first, last)'>
   <Font 
    <FTag `'>
   > # end of Font
   <String ` for which the following corresponding '>
  >
  <ParaLine 
   <String `conditions hold: '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `*i == value'>
   <Font 
    <FTag `'>
   > # end of Font
   <String `,'>
   <Font 
    <FTag `program'>
   > # end of Font
   <String ` pred(*i) == true'>
   <Font 
    <FTag `'>
   > # end of Font
   <String `. If no such iterator is found, '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `last'>
   <Font 
    <FTag `'>
   > # end of Font
   <String ` is returned. '>
   <String `Exactly '>
  >
  <ParaLine 
   <Font 
    <FTag `program'>
   > # end of Font
   <String `find(first, last, value)'>
   <String ` -'>
   <String ` first'>
   <Font 
    <FTag `'>
   > # end of Font
   <String ` applications of the corresponding predicate are done.'>
  >
 > # end of Para
 <Para 
  <Unique 9410>
  <PgfTag `subsubsection'>
  <PgfNumString `10.1.3 '>
  <ParaLine 
   <String `Adjacent find'>
  >
 > # end of Para
 <Para 
  <Unique 9411>
  <PgfTag `program'>
  <ParaLine 
  >
 > # end of Para
 <Para 
  <Unique 9397>
  <PgfTag `program'>
  <ParaLine 
   <String `template <class '>
   <String `ForwardI'>
   <String `terator\>'>
  >
 > # end of Para
 <Para 
  <Unique 9398>
  <PgfTag `program'>
  <ParaLine 
   <TextRectID 73>
   <String `ForwardI'>
   <String `terator adjacent_find('>
   <String `ForwardI'>
   <String `terator first, '>
   <String `ForwardI'>
   <String `terator last); '>
  >
 > # end of Para
 <Para 
  <Unique 9401>
  <PgfTag `program'>
  <ParaLine 
  >
 > # end of Para
 <Para 
  <Unique 9402>
  <PgfTag `program'>
  <ParaLine 
   <String `template <class '>
   <String `ForwardI'>
   <String `terator, class BinaryPredicate\>'>
  >
 > # end of Para
 <Para 
  <Unique 1318>
  <PgfTag `program'>
  <ParaLine 
   <String `ForwardI'>
   <String `terator adjacent_find('>
   <String `ForwardI'>
   <String `terator first, '>
   <String `ForwardI'>
   <String `terator last, '>
  >
  <ParaLine 
   <String `BinaryPredicate binary_pred);'>
  >
 > # end of Para
 <Para 
  <Unique 745>
  <PgfTag `body'>
  <ParaLine 
   <Font 
    <FTag `'>
    <FFamily `Courier'>
    <FPostScriptName `Courier'>
    <FSize  9.0 pt>
   > # end of Font
   <String `adjacent_find'>
   <Font 
    <FTag `'>
   > # end of Font
   <String ` returns the first iterator '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `i'>
   <Font 
    <FTag `'>
   > # end of Font
   <String ` such that both '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `i'>
   <Font 
    <FTag `'>
   > # end of Font
   <String ` and '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `i + 1'>
   <Font 
    <FTag `'>
   > # end of Font
   <String ` are in the range '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `[first, last)'>
   <Font 
    <FTag `'>
   > # end of Font
   <String ` for '>
  >
  <ParaLine 
   <String `which the following corresponding conditions hold: '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `*i == *(i + 1), binary_pred(*i, *(i + 1)) == '>
  >
  <ParaLine 
   <String `true'>
   <Font 
    <FTag `'>
   > # end of Font
   <String `. If no such iterator '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `i'>
   <Font 
    <FTag `'>
   > # end of Font
   <String ` is found, '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `last'>
   <Font 
    <FTag `'>
   > # end of Font
   <String ` is returned. At most '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `max((last - first)'>
   <Font 
    <FTag `'>
   > # end of Font
   <String ` '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `- 1, 0) '>
   <Font 
    <FTag `'>
   > # end of Font
   <String `applications '>
  >
  <ParaLine 
   <String `of the corresponding predicate are done.'>
  >
 > # end of Para
 <Para 
  <Unique 8340>
  <PgfTag `subsubsection'>
  <PgfNumString `10.1.4 '>
  <ParaLine 
   <String `Count'>
  >
 > # end of Para
 <Para 
  <Unique 8341>
  <PgfTag `program'>
  <ParaLine 
  >
 > # end of Para
 <Para 
  <Unique 8342>
  <PgfTag `program'>
  <ParaLine 
   <String `template <class InputIterator, class T, class Size\>'>
  >
 > # end of Para
 <Para 
  <Unique 8343>
  <PgfTag `program'>
  <ParaLine 
   <String `void count(InputIterator first, InputIterator last, const T& value, Size& n);'>
  >
 > # end of Para
 <Para 
  <Unique 8344>
  <PgfTag `program'>
  <ParaLine 
  >
 > # end of Para
 <Para 
  <Unique 8345>
  <PgfTag `program'>
  <ParaLine 
   <String `template <class InputIterator, class Predicate, class Size\>'>
  >
 > # end of Para
 <Para 
  <Unique 8346>
  <PgfTag `program'>
  <ParaLine 
   <String `void count_if(InputIterator first, InputIterator last, Predicate pred, Size& n);'>
  >
 > # end of Para
 <Para 
  <Unique 8347>
  <PgfTag `body'>
  <ParaLine 
   <Font 
    <FTag `program'>
   > # end of Font
   <String `count'>
   <Font 
    <FTag `'>
   > # end of Font
   <String ` adds to '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `n'>
   <Font 
    <FTag `'>
   > # end of Font
   <String ` the number of iterators '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `i'>
   <Font 
    <FTag `'>
   > # end of Font
   <String ` in the range '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `[first, last)'>
   <Font 
    <FTag `'>
   > # end of Font
   <String ` for which the following '>
  >
  <ParaLine 
   <String `corresponding conditions hold: '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `*i == value'>
   <Font 
    <FTag `'>
   > # end of Font
   <String `, '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `pred(*i) == true'>
   <Font 
    <FTag `'>
   > # end of Font
   <String `. Exactly '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `last - first'>
   <Font 
    <FTag `'>
   > # end of Font
   <String ` applications of '>
  >
  <ParaLine 
   <String `the corresponding predicate are done.'>
  >
 > # end of Para
 <Para 
  <Unique 40280>
  <PgfTag `body'>
  <ParaLine 
   <Font 
    <FTag `program'>
   > # end of Font
   <String `count'>
   <Font 
    <FTag `'>
   > # end of Font
   <String ` must store the result into a reference argument instead of returning the result because the size type '>
  >
  <ParaLine 
   <String `cannot be deduced from built-in iterator types such as '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `int*'>
   <Font 
    <FTag `'>
   > # end of Font
   <String `.'>
  >
 > # end of Para
 <Para 
  <Unique 7143>
  <PgfTag `subsubsection'>
  <PgfNumString `10.1.5 '>
  <ParaLine 
   <String `Mismatch'>
  >
 > # end of Para
 <Para 
  <Unique 243>
  <PgfTag `program'>
  <ParaLine 
  >
 > # end of Para
 <Para 
  <Unique 1321>
  <PgfTag `program'>
  <ParaLine 
   <String `template <class InputIterator1, class InputIterator2\>'>
  >
 > # end of Para
 <Para 
  <Unique 1322>
  <PgfTag `program'>
  <ParaLine 
   <String `pair<InputIterator1, InputIterator2\> mismatch(InputIterator1 first1, '>
  >
  <ParaLine 
   <String `InputIterator1 last1, InputIterator2 first2);'>
  >
 > # end of Para
 <Para 
  <Unique 246>
  <PgfTag `program'>
  <ParaLine 
  >
 > # end of Para
 <Para 
  <Unique 1323>
  <PgfTag `program'>
  <ParaLine 
   <String `template <class InputIterator1, class InputIterator2, class BinaryPredicate\>'>
  >
 > # end of Para
 <Para 
  <Unique 245>
  <PgfTag `program'>
  <ParaLine 
   <String `pair<InputIterator1, InputIterator2\> mismatch(InputIterator1 first1, '>
  >
  <ParaLine 
   <String `InputIterator1 last1, InputIterator2 first2, '>
  >
 > # end of Para
 <Para 
  <Unique 8467>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <Char Tab >
   <String `BinaryPredicate binary_pred);'>
  >
 > # end of Para
 <Para 
  <Unique 748>
  <PgfTag `body'>
  <ParaLine 
   <Font 
    <FTag `'>
    <FFamily `Courier'>
    <FPostScriptName `Courier'>
    <FSize  9.0 pt>
   > # end of Font
   <String `mismatch'>
   <Font 
    <FTag `'>
   > # end of Font
   <String ` returns a pair of iterators '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `i'>
   <Font 
    <FTag `'>
   > # end of Font
   <String ` and '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `j'>
   <Font 
    <FTag `'>
   > # end of Font
   <String ` such that '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `j == first2 + (i - first1)'>
   <Font 
    <FTag `'>
   > # end of Font
   <String ` and '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `i'>
   <Font 
    <FTag `'>
   > # end of Font
   <String ` is the first '>
  >
  <ParaLine 
   <String `iterator in the range '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `[first1, last1)'>
   <Font 
    <FTag `'>
   > # end of Font
   <String ` for which the following corresponding conditions hold: '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `!(*i == '>
  >
  <ParaLine 
   <String `*(first2 + (i - first1)))'>
   <Font 
    <FTag `'>
   > # end of Font
   <String `,'>
   <Font 
    <FTag `program'>
   > # end of Font
   <String ` binary_pred(*i, *(first2 + (i - first1))) == false'>
   <Font 
    <FTag `'>
   > # end of Font
   <String `. If such an '>
  >
  <ParaLine 
   <String `iterator '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `i'>
   <Font 
    <FTag `'>
   > # end of Font
   <String ` is not found, a pair of '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `last1'>
   <Font 
    <FTag `'>
   > # end of Font
   <String ` and '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `first2 + (last1 - first1)'>
   <Font 
    <FTag `'>
   > # end of Font
   <String ` is returned. At most '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `last1 - '>
  >
  <ParaLine 
   <String `first1 '>
   <Font 
    <FTag `'>
   > # end of Font
   <String `applications of the corresponding predicate are done.'>
  >
 > # end of Para
 <Para 
  <Unique 7144>
  <PgfTag `subsubsection'>
  <PgfNumString `10.1.6 '>
  <ParaLine 
   <String `Equal'>
  >
 > # end of Para
 <Para 
  <Unique 746>
  <PgfTag `program'>
  <ParaLine 
  >
 > # end of Para
 <Para 
  <Unique 203>
  <PgfTag `program'>
  <ParaLine 
   <String `template <class InputIterator1, class InputIterator2\>'>
  >
 > # end of Para
 <Para 
  <Unique 247>
  <PgfTag `program'>
  <ParaLine 
   <String `bool equal(InputIterator1 first1, InputIterator1 last1, InputIterator2 first2);'>
  >
 > # end of Para
 <Para 
  <Unique 248>
  <PgfTag `program'>
  <ParaLine 
  >
 > # end of Para
 <Para 
  <Unique 249>
  <PgfTag `program'>
  <ParaLine 
   <String `template <class InputIterator1, class InputIterator2, class BinaryPredicate\>'>
  >
 > # end of Para
 <Para 
  <Unique 1326>
  <PgfTag `program'>
  <ParaLine 
   <String `bool equal(InputIterator1 first1, InputIterator1 last1, InputIterator2 first2,'>
  >
 > # end of Para
 <Para 
  <Unique 596>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <Char Tab >
   <String `BinaryPredicate binary_pred);'>
  >
 > # end of Para
 <Para 
  <Unique 753>
  <PgfTag `body'>
  <ParaLine 
   <Font 
    <FTag `program'>
   > # end of Font
   <String `equal'>
   <Font 
    <FTag `'>
   > # end of Font
   <String ` returns '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `true'>
   <Font 
    <FTag `'>
   > # end of Font
   <String ` if for every iterator '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `i'>
   <Font 
    <FTag `'>
   > # end of Font
   <String ` in the range '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `[first1, last1)'>
   <Font 
    <FTag `'>
   > # end of Font
   <String ` the following corresponding '>
  >
  <ParaLine 
   <String `conditions hold: '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `*i == *(first2 + (i - first1))'>
   <Font 
    <FTag `'>
   > # end of Font
   <String `, '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `binary_pred(*i, *(first2 + (i - first1)))'>
   <Font 
    <FTag `'>
   > # end of Font
   <String ` '>
  >
  <ParaLine 
   <Font 
    <FTag `program'>
   > # end of Font
   <String `== true'>
   <Font 
    <FTag `'>
   > # end of Font
   <String `. Otherwise, it returns '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `false'>
   <Font 
    <FTag `'>
   > # end of Font
   <String `. At most '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `last1 - first1 '>
   <Font 
    <FTag `'>
   > # end of Font
   <String `applications of the corresponding predicate '>
  >
  <ParaLine 
   <String `are done.'>
  >
 > # end of Para
 <Para 
  <Unique 7145>
  <PgfTag `subsubsection'>
  <PgfNumString `10.1.7 '>
  <ParaLine 
   <String `Search'>
  >
 > # end of Para
 <Para 
  <Unique 750>
  <PgfTag `program'>
  <ParaLine 
  >
 > # end of Para
 <Para 
  <Unique 251>
  <PgfTag `program'>
  <ParaLine 
   <String `template <class ForwardIterator1, class ForwardIterator2\>'>
  >
 > # end of Para
 <Para 
  <Unique 1328>
  <PgfTag `program'>
  <ParaLine 
   <TextRectID 74>
   <String `ForwardIterator1 search(ForwardIterator1 first1, ForwardIterator1 last1, '>
  >
 > # end of Para
 <Para 
  <Unique 607>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <Char Tab >
   <String `ForwardIterator2 first2,'>
   <Char Tab >
   <String ` '>
   <Char Tab >
   <String `ForwardIterator2 last2);'>
  >
 > # end of Para
 <Para 
  <Unique 253>
  <PgfTag `program'>
  <ParaLine 
  >
 > # end of Para
 <Para 
  <Unique 1329>
  <PgfTag `program'>
  <ParaLine 
   <String `template <class ForwardIterator1, class ForwardIterator2, class BinaryPredicate\>'>
  >
 > # end of Para
 <Para 
  <Unique 250>
  <PgfTag `program'>
  <ParaLine 
   <String `ForwardIterator1 search(ForwardIterator1 first1, ForwardIterator1 last1, '>
  >
 > # end of Para
 <Para 
  <Unique 37>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <Char Tab >
   <String `ForwardIterator2 first2,'>
   <Char Tab >
   <String ` '>
   <Char Tab >
   <String `ForwardIterator2 last2, BinaryPredicate '>
  >
  <ParaLine 
   <String `binary_pred);'>
  >
 > # end of Para
 <Para 
  <Unique 561>
  <PgfTag `body'>
  <ParaLine 
   <Font 
    <FTag `program'>
   > # end of Font
   <String `search'>
   <Font 
    <FTag `'>
   > # end of Font
   <String ` finds a subsequence of equal values in a sequence. '>
   <Font 
    <FTag `'>
    <FFamily `Courier'>
    <FPostScriptName `Courier'>
    <FSize  9.0 pt>
   > # end of Font
   <String `search'>
   <Font 
    <FTag `'>
   > # end of Font
   <String ` returns the first iterator '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `i'>
   <Font 
    <FTag `'>
   > # end of Font
   <String ` in the range '>
  >
  <ParaLine 
   <Font 
    <FTag `program'>
   > # end of Font
   <String `[first1, last1 - (last2 - first2))'>
   <Font 
    <FTag `'>
   > # end of Font
   <String ` such that for any non-negative integer '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `n'>
   <Font 
    <FTag `'>
   > # end of Font
   <String ` less than '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `last2 - first2'>
   <Font 
    <FTag `'>
   > # end of Font
   <String ` '>
  >
  <ParaLine 
   <String `the following corresponding conditions hold: '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `*(i + n) == *(first2 + n)'>
   <Font 
    <FTag `'>
   > # end of Font
   <String `, '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `binary_pred(*(i + n), '>
  >
  <ParaLine 
   <String `*(first2 + n)) == true'>
   <Font 
    <FTag `'>
   > # end of Font
   <String `. If no such iterator is found, '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `last1'>
   <Font 
    <FTag `'>
   > # end of Font
   <String ` is returned. '>
   <String `At most '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `(last1 - first1) * '>
  >
  <ParaLine 
   <String `(last2 - first2)'>
   <Font 
    <FTag `'>
   > # end of Font
   <String ` applications of the corresponding predicate are done. The quadratic behavior, however, '>
  >
  <ParaLine 
   <String `is highly unlikely.'>
  >
 > # end of Para
 <Para 
  <Unique 7179>
  <PgfTag `subsection'>
  <PgfNumString `10.2 '>
  <ParaLine 
   <String `Mutating sequence operations'>
  >
 > # end of Para
 <Para 
  <Unique 1363>
  <PgfTag `subsubsection'>
  <PgfNumString `10.2.1 '>
  <ParaLine 
   <String `Copy'>
  >
 > # end of Para
 <Para 
  <Unique 1364>
  <PgfTag `program'>
  <ParaLine 
  >
 > # end of Para
 <Para 
  <Unique 323>
  <PgfTag `program'>
  <ParaLine 
   <String `template <class InputIterator, class OutputIterator\>'>
  >
 > # end of Para
 <Para 
  <Unique 324>
  <PgfTag `program'>
  <ParaLine 
   <String `OutputIterator copy(InputIterator first, InputIterator last, '>
  >
 > # end of Para
 <Para 
  <Unique 8208>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <Char Tab >
   <String `OutputIterator result);'>
  >
 > # end of Para
 <Para 
  <Unique 1357>
  <PgfTag `body'>
  <ParaLine 
   <Font 
    <FTag `program'>
   > # end of Font
   <String `copy'>
   <Font 
    <FTag `'>
   > # end of Font
   <String ` copies elements. For each non-negative integer '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `n < (last - first),'>
   <Font 
    <FTag `'>
   > # end of Font
   <String ` '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `*(result + n) = *(first + '>
  >
  <ParaLine 
   <String `n)'>
   <Font 
    <FTag `'>
   > # end of Font
   <String ` is performed. '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `copy'>
   <Font 
    <FTag `'>
   > # end of Font
   <String ` returns '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `result + (last - first)'>
   <Font 
    <FTag `'>
   > # end of Font
   <String `. Exactly '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `last - first '>
   <Font 
    <FTag `'>
   > # end of Font
   <String `assignments are done. '>
  >
  <ParaLine 
   <String `The result of '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `copy'>
   <Font 
    <FTag `'>
   > # end of Font
   <String ` is undefined if '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `result'>
   <Font 
    <FTag `'>
   > # end of Font
   <String ` is in the range '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `[first, last).'>
  >
 > # end of Para
 <Para 
  <Unique 1366>
  <PgfTag `program'>
  <ParaLine 
  >
 > # end of Para
 <Para 
  <Unique 1651>
  <PgfTag `program'>
  <ParaLine 
   <String `template <class BidirectionalIterator1, class BidirectionalIterator2\>'>
  >
 > # end of Para
 <Para 
  <Unique 196>
  <PgfTag `program'>
  <ParaLine 
   <String `BidirectionalIterator2 copy_backward(BidirectionalIterator1 first,'>
  >
 > # end of Para
 <Para 
  <Unique 1652>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <Char Tab >
   <String `BidirectionalIterator1 last, BidirectionalIterator2 result);'>
  >
 > # end of Para
 <Para 
  <Unique 1655>
  <PgfTag `body'>
  <ParaLine 
   <Font 
    <FTag `program'>
   > # end of Font
   <String `copy_backward'>
   <Font 
    <FTag `'>
   > # end of Font
   <String ` copies elements in the range '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `[first, last)'>
   <Font 
    <FTag `'>
   > # end of Font
   <String ` into the range '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `[result - (last - first), '>
  >
  <ParaLine 
   <String `result)'>
   <Font 
    <FTag `'>
   > # end of Font
   <String ` starting from '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `last - 1'>
   <Font 
    <FTag `'>
   > # end of Font
   <String ` and proceeding to '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `first'>
   <Font 
    <FTag `'>
   > # end of Font
   <String `. It should be used instead of '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `copy'>
   <Font 
    <FTag `'>
   > # end of Font
   <String ` when '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `last'>
   <Font 
    <FTag `'>
   > # end of Font
   <String ` is '>
  >
  <ParaLine 
   <String `in the range '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `[result - (last - first), result)'>
   <Font 
    <FTag `'>
   > # end of Font
   <String `. For each positive integer '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `n <= (last - first),'>
   <Font 
    <FTag `'>
   > # end of Font
   <String ` '>
  >
  <ParaLine 
   <Font 
    <FTag `program'>
   > # end of Font
   <String `*(result - n) = *(last - n) '>
   <Font 
    <FTag `'>
   > # end of Font
   <String `is performed. '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `copy_backward'>
   <Font 
    <FTag `'>
   > # end of Font
   <String ` returns '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `result - (last - first)'>
   <Font 
    <FTag `'>
   > # end of Font
   <String `. Exactly '>
  >
  <ParaLine 
   <Font 
    <FTag `program'>
   > # end of Font
   <String `last - first '>
   <Font 
    <FTag `'>
   > # end of Font
   <String `assignments are done. The result of '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `copy_backward'>
   <Font 
    <FTag `'>
   > # end of Font
   <String ` is undefined if '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `result'>
   <Font 
    <FTag `'>
   > # end of Font
   <String ` is in the range '>
  >
  <ParaLine 
   <Font 
    <FTag `program'>
   > # end of Font
   <String `[first, last).'>
  >
 > # end of Para
 <Para 
  <Unique 7175>
  <PgfTag `subsubsection'>
  <PgfNumString `10.2.2 '>
  <ParaLine 
   <String `Swap'>
  >
 > # end of Para
 <Para 
  <Unique 327>
  <PgfTag `program'>
  <ParaLine 
  >
 > # end of Para
 <Para 
  <Unique 8763>
  <PgfTag `program'>
  <ParaLine 
   <String `t'>
   <String `emplate <class T\>'>
  >
 > # end of Para
 <Para 
  <Unique 8764>
  <PgfTag `program'>
  <ParaLine 
   <String `void swap(T& a, T& b);'>
  >
 > # end of Para
 <Para 
  <Unique 8765>
  <PgfTag `body'>
  <ParaLine 
   <Font 
    <FTag `program'>
   > # end of Font
   <String `swap'>
   <Font 
    <FTag `'>
   > # end of Font
   <String ` exchanges values stored in two locations.'>
  >
 > # end of Para
 <Para 
  <Unique 8303>
  <PgfTag `program'>
  <ParaLine 
  >
 > # end of Para
 <Para 
  <Unique 8312>
  <PgfTag `program'>
  <ParaLine 
   <String `template <class ForwardIterator1, class ForwardIterator2\>'>
  >
 > # end of Para
 <Para 
  <Unique 8304>
  <PgfTag `program'>
  <ParaLine 
   <String `void iter_swap(ForwardIterator1 a, ForwardIterator2 b);'>
  >
 > # end of Para
 <Para 
  <Unique 8305>
  <PgfTag `body'>
  <ParaLine 
   <Font 
    <FTag `program'>
   > # end of Font
   <String `iter_swap'>
   <Font 
    <FTag `'>
   > # end of Font
   <String ` exchanges values pointed by the two iterators '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `a'>
   <Font 
    <FTag `'>
   > # end of Font
   <String ` and '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `b'>
   <Font 
    <FTag `'>
   > # end of Font
   <String `.'>
  >
 > # end of Para
 <Para 
  <Unique 8306>
  <PgfTag `program'>
  <ParaLine 
  >
 > # end of Para
 <Para 
  <Unique 8768>
  <PgfTag `program'>
  <ParaLine 
   <String `template <class ForwardIterator1, class ForwardIterator2\>'>
  >
 > # end of Para
 <Para 
  <Unique 1367>
  <PgfTag `program'>
  <ParaLine 
   <String `ForwardIterator2 swap_ranges(ForwardIterator1 first1, ForwardIterator1 last1, '>
  >
  <ParaLine 
   <String `ForwardIterator2 first2);'>
  >
 > # end of Para
 <Para 
  <Unique 998>
  <PgfTag `body'>
  <ParaLine 
   <String `For each non-negative integer '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `n < (last1 - first1)'>
   <Font 
    <FTag `'>
   > # end of Font
   <String ` the '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `swap'>
   <Font 
    <FTag `'>
   > # end of Font
   <String ` is performed: '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `swap(*(first1 + n), '>
  >
  <ParaLine 
   <String `*(first2 + n))'>
   <Font 
    <FTag `'>
   > # end of Font
   <String `. '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `swap_ranges'>
   <Font 
    <FTag `'>
   > # end of Font
   <String ` returns '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `first2 + (last1 - first1)'>
   <Font 
    <FTag `'>
   > # end of Font
   <String `. Exactly '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `last1 - first1 '>
   <Font 
    <FTag `'>
   > # end of Font
   <String `swaps '>
  >
  <ParaLine 
   <String `are done. The result of '>
   <Font 
    <FTag `'>
    <FFamily `Courier'>
    <FPostScriptName `Courier'>
    <FSize  9.0 pt>
   > # end of Font
   <String `swap_ranges'>
   <Font 
    <FTag `'>
   > # end of Font
   <String ` is undefined if the two ranges '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `[first1, last1)'>
   <Font 
    <FTag `'>
   > # end of Font
   <String ` and '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `[first2, '>
  >
  <ParaLine 
   <String `first2 + (last1 - first1))'>
   <Font 
    <FTag `'>
   > # end of Font
   <String ` overlap.'>
  >
 > # end of Para
 <Para 
  <Unique 7180>
  <PgfTag `subsubsection'>
  <PgfNumString `10.2.3 '>
  <ParaLine 
   <TextRectID 75>
   <String `Transform'>
  >
 > # end of Para
 <Para 
  <Unique 917>
  <PgfTag `program'>
  <ParaLine 
  >
 > # end of Para
 <Para 
  <Unique 331>
  <PgfTag `program'>
  <ParaLine 
   <String `template <class InputIterator, class OutputIterator, class UnaryOperation\>'>
  >
 > # end of Para
 <Para 
  <Unique 1372>
  <PgfTag `program'>
  <ParaLine 
   <String `OutputIterator transform(InputIterator first, InputIterator last,'>
  >
 > # end of Para
 <Para 
  <Unique 1597>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <Char Tab >
   <String `OutputIterator result, UnaryOperation op);'>
  >
 > # end of Para
 <Para 
  <Unique 332>
  <PgfTag `program'>
  <ParaLine 
  >
 > # end of Para
 <Para 
  <Unique 333>
  <PgfTag `program'>
  <ParaLine 
   <String `template <class InputIterator1, class InputIterator2, class OutputIterator,'>
  >
 > # end of Para
 <Para 
  <Unique 337>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <Char Tab >
   <String `class BinaryOperation\>'>
  >
 > # end of Para
 <Para 
  <Unique 1373>
  <PgfTag `program'>
  <ParaLine 
   <String `OutputIterator transform(InputIterator1 first1, InputIterator1 last1,'>
  >
 > # end of Para
 <Para 
  <Unique 1596>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <Char Tab >
   <String `InputIterator2 first2,'>
   <Char Tab >
   <String ` OutputIterator result, '>
  >
 > # end of Para
 <Para 
  <Unique 7535>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <Char Tab >
   <String `BinaryOperation binary_op);'>
  >
 > # end of Para
 <Para 
  <Unique 1361>
  <PgfTag `body'>
  <ParaLine 
   <Font 
    <FTag `'>
    <FFamily `Courier'>
    <FPostScriptName `Courier'>
    <FSize  9.0 pt>
   > # end of Font
   <String `transform'>
   <Font 
    <FTag `'>
   > # end of Font
   <String ` assigns through every iterator '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `i'>
   <Font 
    <FTag `'>
   > # end of Font
   <String ` in the range'>
   <Font 
    <FTag `program'>
   > # end of Font
   <String ` [result, result + (last1 - first1))'>
   <Font 
    <FTag `'>
   > # end of Font
   <String ` a new '>
  >
  <ParaLine 
   <String `corresponding value equal to '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `op(*(first1 + (i - result))'>
   <Font 
    <FTag `'>
   > # end of Font
   <String ` or '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `binary_op(*(first1 + (i - result), '>
  >
  <ParaLine 
   <String `*(first2 + (i - result)))'>
   <Font 
    <FTag `'>
   > # end of Font
   <String `. '>
   <Font 
    <FTag `'>
    <FFamily `Courier'>
    <FPostScriptName `Courier'>
    <FSize  9.0 pt>
   > # end of Font
   <String `transform'>
   <Font 
    <FTag `'>
   > # end of Font
   <String ` returns '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `result + (last1 - first1)'>
   <Font 
    <FTag `'>
   > # end of Font
   <String `. Exactly '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `last1 - first1'>
   <Font 
    <FTag `'>
   > # end of Font
   <String ` '>
  >
  <ParaLine 
   <String `applications of '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `op'>
   <Font 
    <FTag `'>
   > # end of Font
   <String ` or '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `binary_op '>
   <Font 
    <FTag `'>
   > # end of Font
   <String `are performed. '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `op'>
   <Font 
    <FTag `'>
   > # end of Font
   <String ` and '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `binary_op'>
   <Font 
    <FTag `'>
   > # end of Font
   <String ` are expected not to have any side '>
  >
  <ParaLine 
   <String `effects. '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `result'>
   <Font 
    <FTag `'>
   > # end of Font
   <String ` may be equal to '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `first'>
   <Font 
    <FTag `'>
   > # end of Font
   <String ` in case of unary transform, or to '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `first1'>
   <Font 
    <FTag `'>
   > # end of Font
   <String ` or '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `first2'>
   <Font 
    <FTag `'>
   > # end of Font
   <String ` in case of binary '>
  >
  <ParaLine 
   <String `transform.'>
  >
 > # end of Para
 <Para 
  <Unique 7197>
  <PgfTag `subsubsection'>
  <PgfNumString `10.2.4 '>
  <ParaLine 
   <String `Replace'>
  >
 > # end of Para
 <Para 
  <Unique 1358>
  <PgfTag `program'>
  <ParaLine 
  >
 > # end of Para
 <Para 
  <Unique 334>
  <PgfTag `program'>
  <ParaLine 
   <String `template <class ForwardIterator, class T\>'>
  >
 > # end of Para
 <Para 
  <Unique 1376>
  <PgfTag `program'>
  <ParaLine 
   <String `void replace(ForwardIterator first, ForwardIterator last, const T& old_value,'>
  >
 > # end of Para
 <Para 
  <Unique 223>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <Char Tab >
   <String `const T& new_value);'>
  >
 > # end of Para
 <Para 
  <Unique 335>
  <PgfTag `program'>
  <ParaLine 
  >
 > # end of Para
 <Para 
  <Unique 345>
  <PgfTag `program'>
  <ParaLine 
   <String `template <class ForwardIterator, class Predicate, class T\>'>
  >
 > # end of Para
 <Para 
  <Unique 1380>
  <PgfTag `program'>
  <ParaLine 
   <String `void replace_if(ForwardIterator first, ForwardIterator last, Predicate pred, '>
  >
 > # end of Para
 <Para 
  <Unique 59>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <Char Tab >
   <String `const T& new_value);'>
  >
 > # end of Para
 <Para 
  <Unique 1359>
  <PgfTag `body'>
  <ParaLine 
   <Font 
    <FTag `'>
    <FFamily `Courier'>
    <FPostScriptName `Courier'>
    <FSize  9.0 pt>
   > # end of Font
   <String `replace'>
   <Font 
    <FTag `'>
   > # end of Font
   <String ` substitutes elements referred by the iterator '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `i'>
   <Font 
    <FTag `'>
   > # end of Font
   <String ` in the range '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `[first, last)'>
   <Font 
    <FTag `'>
   > # end of Font
   <String ` with '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `new_value'>
   <Font 
    <FTag `'>
   > # end of Font
   <String `, when '>
  >
  <ParaLine 
   <String `the following corresponding conditions hold: '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `*i == old_value'>
   <Font 
    <FTag `'>
   > # end of Font
   <String `,'>
   <Font 
    <FTag `program'>
   > # end of Font
   <String ` pred(*i) == true'>
   <Font 
    <FTag `'>
   > # end of Font
   <String `. Exactly '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `last - '>
  >
  <ParaLine 
   <String `first'>
   <Font 
    <FTag `'>
   > # end of Font
   <String ` applications of the corresponding predicate are done.'>
  >
 > # end of Para
 <Para 
  <Unique 1360>
  <PgfTag `program'>
  <ParaLine 
  >
 > # end of Para
 <Para 
  <Unique 61>
  <PgfTag `program'>
  <ParaLine 
   <String `template <class InputIterator, class OutputIterator, class T\>'>
  >
 > # end of Para
 <Para 
  <Unique 348>
  <PgfTag `program'>
  <ParaLine 
   <String `OutputIterator replace_copy(InputIterator first, InputIterator last, '>
  >
  <ParaLine 
   <String `OutputIterator result, '>
   <Char Tab >
   <Char Tab >
   <String `const T& old_value, const T& new_value);'>
  >
 > # end of Para
 <Para 
  <Unique 349>
  <PgfTag `program'>
  <ParaLine 
  >
 > # end of Para
 <Para 
  <Unique 356>
  <PgfTag `program'>
  <ParaLine 
   <String `template <class Iterator, class OutputIterator, class Predicate, class T\>'>
  >
 > # end of Para
 <Para 
  <Unique 1389>
  <PgfTag `program'>
  <ParaLine 
   <String `OutputIterator replace_copy_if(Iterator first, Iterator last,'>
  >
 > # end of Para
 <Para 
  <Unique 67>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <Char Tab >
   <String `OutputIterator result, '>
   <Char Tab >
   <Char Tab >
   <String `Predicate pred, const T& new_value);'>
  >
 > # end of Para
 <Para 
  <Unique 328>
  <PgfTag `body'>
  <ParaLine 
   <Font 
    <FTag `'>
    <FFamily `Courier'>
    <FPostScriptName `Courier'>
    <FSize  9.0 pt>
   > # end of Font
   <String `replace'>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `_copy'>
   <Font 
    <FTag `'>
   > # end of Font
   <String ` assigns to every iterator '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `i'>
   <Font 
    <FTag `'>
   > # end of Font
   <String ` in the range '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `[result, result + (last - first)) '>
   <Font 
    <FTag `'>
   > # end of Font
   <String `either '>
  >
  <ParaLine 
   <Font 
    <FTag `program'>
   > # end of Font
   <String `new_value'>
   <Font 
    <FTag `'>
   > # end of Font
   <String ` or '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `*(first + (i - result))'>
   <Font 
    <FTag `'>
   > # end of Font
   <String ` depending on whether the following corresponding conditions '>
  >
  <ParaLine 
   <String `hold: '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `*(first + (i - result)) == old_value'>
   <Font 
    <FTag `'>
   > # end of Font
   <String `,'>
   <Font 
    <FTag `program'>
   > # end of Font
   <String ` pred(*(first + (i - result))) == true'>
   <Font 
    <FTag `'>
   > # end of Font
   <String `. '>
  >
  <ParaLine 
   <Font 
    <FTag `program'>
   > # end of Font
   <String `replace_copy'>
   <Font 
    <FTag `'>
   > # end of Font
   <String ` returns '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `result + (last - first)'>
   <Font 
    <FTag `'>
   > # end of Font
   <String `. Exactly '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `last - first'>
   <Font 
    <FTag `'>
   > # end of Font
   <String ` applications of the '>
  >
  <ParaLine 
   <String `corresponding predicate are done.'>
  >
 > # end of Para
 <Para 
  <Unique 7218>
  <PgfTag `subsubsection'>
  <PgfNumString `10.2.5 '>
  <ParaLine 
   <String `Fill'>
  >
 > # end of Para
 <Para 
  <Unique 7219>
  <PgfTag `program'>
  <ParaLine 
  >
 > # end of Para
 <Para 
  <Unique 1405>
  <PgfTag `program'>
  <ParaLine 
   <String `template <class ForwardIterator, class T\>'>
  >
 > # end of Para
 <Para 
  <Unique 1406>
  <PgfTag `program'>
  <ParaLine 
   <String `void fill(ForwardIterator first, ForwardIterator last, const T& value);'>
  >
 > # end of Para
 <Para 
  <Unique 742>
  <PgfTag `program'>
  <ParaLine 
  >
 > # end of Para
 <Para 
  <Unique 792>
  <PgfTag `program'>
  <ParaLine 
   <String `template <class OutputIterator, class Size, class T\>'>
  >
 > # end of Para
 <Para 
  <Unique 721>
  <PgfTag `program'>
  <ParaLine 
   <String `OutputIterator f'>
   <String `ill_n(OutputIterator first, Size n, const T& value);'>
  >
 > # end of Para
 <Para 
  <Unique 841>
  <PgfTag `body'>
  <ParaLine 
   <Font 
    <FTag `program'>
   > # end of Font
   <String `fill'>
   <Font 
    <FTag `'>
   > # end of Font
   <String ` assigns '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `value'>
   <Font 
    <FTag `'>
   > # end of Font
   <String ` through all the iterators in the range '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `[first, last)'>
   <Font 
    <FTag `'>
   > # end of Font
   <String ` or '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `[first, first + n)'>
   <Font 
    <FTag `'>
   > # end of Font
   <String `. '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `fill_n'>
   <Font 
    <FTag `'>
   > # end of Font
   <String ` '>
  >
  <ParaLine 
   <String `returns '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `first + n'>
   <Font 
    <FTag `'>
   > # end of Font
   <String `. E'>
   <String `xactly '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `last - first'>
   <Font 
    <FTag `'>
   > # end of Font
   <String ` (or '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `n'>
   <Font 
    <FTag `'>
   > # end of Font
   <String `) assignments are done. '>
  >
 > # end of Para
 <Para 
  <Unique 8824>
  <PgfTag `subsubsection'>
  <PgfNumString `10.2.6 '>
  <ParaLine 
   <String `Generate'>
  >
 > # end of Para
 <Para 
  <Unique 8825>
  <PgfTag `program'>
  <ParaLine 
  >
 > # end of Para
 <Para 
  <Unique 8827>
  <PgfTag `program'>
  <ParaLine 
   <TextRectID 76>
   <String `template <class ForwardIterator, class Generator\>'>
  >
 > # end of Para
 <Para 
  <Unique 8829>
  <PgfTag `program'>
  <ParaLine 
   <String `void generate(ForwardIterator first, ForwardIterator last, Generator gen);'>
  >
 > # end of Para
 <Para 
  <Unique 8879>
  <PgfTag `program'>
  <ParaLine 
  >
 > # end of Para
 <Para 
  <Unique 8826>
  <PgfTag `program'>
  <ParaLine 
   <Font 
    <FTag `program'>
   > # end of Font
   <String `template <class OutputIterator, class Size, class Generator\>'>
  >
 > # end of Para
 <Para 
  <Unique 8877>
  <PgfTag `program'>
  <ParaLine 
   <Font 
    <FTag `program'>
   > # end of Font
   <String `OutputIterator g'>
   <String `enerate_n(OutputIterator first, Size n, Generator gen);'>
  >
 > # end of Para
 <Para 
  <Unique 8878>
  <PgfTag `body'>
  <ParaLine 
   <Font 
    <FTag `program'>
   > # end of Font
   <String `generate'>
   <Font 
    <FTag `'>
   > # end of Font
   <String ` invokes the function object '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `gen'>
   <Font 
    <FTag `'>
   > # end of Font
   <String ` and assigns the return value of '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `gen'>
   <Font 
    <FTag `'>
   > # end of Font
   <String ` th'>
   <String `r'>
   <String `ough all the iterators in the '>
  >
  <ParaLine 
   <String `range '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `[first, last)'>
   <Font 
    <FTag `'>
   > # end of Font
   <String ` or '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `[first, first + n)'>
   <Font 
    <FTag `'>
   > # end of Font
   <String `. '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `gen'>
   <Font 
    <FTag `'>
   > # end of Font
   <String ` takes no arguments. '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `generate_n'>
   <Font 
    <FTag `'>
   > # end of Font
   <String ` returns '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `first + n'>
   <Font 
    <FTag `'>
   > # end of Font
   <String `. '>
  >
  <ParaLine 
   <String `Exactly '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `last - first'>
   <Font 
    <FTag `'>
   > # end of Font
   <String ` (or '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `n'>
   <Font 
    <FTag `'>
   > # end of Font
   <String `) invocations of '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `gen'>
   <Font 
    <FTag `'>
   > # end of Font
   <String ` and assignments are done. '>
  >
 > # end of Para
 <Para 
  <Unique 1410>
  <PgfTag `subsubsection'>
  <PgfNumString `10.2.7 '>
  <ParaLine 
   <String `Remove'>
  >
 > # end of Para
 <Para 
  <Unique 387>
  <PgfTag `program'>
  <ParaLine 
  >
 > # end of Para
 <Para 
  <Unique 8727>
  <PgfTag `program'>
  <ParaLine 
   <String `template <class ForwardIterator, class T\>'>
  >
 > # end of Para
 <Para 
  <Unique 8670>
  <PgfTag `program'>
  <ParaLine 
   <String `ForwardIterator remove(ForwardIterator first, ForwardIterator last,'>
  >
 > # end of Para
 <Para 
  <Unique 8671>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <Char Tab >
   <String `const T& value);'>
  >
 > # end of Para
 <Para 
  <Unique 8676>
  <PgfTag `program'>
  <ParaLine 
  >
 > # end of Para
 <Para 
  <Unique 8672>
  <PgfTag `program'>
  <ParaLine 
   <String `template <class ForwardIterator, class Predicate\>'>
  >
 > # end of Para
 <Para 
  <Unique 8674>
  <PgfTag `program'>
  <ParaLine 
   <String `ForwardIterator remove_if(ForwardIterator first, ForwardIterator last,'>
  >
 > # end of Para
 <Para 
  <Unique 8675>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <Char Tab >
   <String `Predicate pred);'>
  >
 > # end of Para
 <Para 
  <Unique 8685>
  <PgfTag `body'>
  <ParaLine 
   <Font 
    <FTag `'>
    <FFamily `Courier'>
    <FPostScriptName `Courier'>
    <FSize  9.0 pt>
   > # end of Font
   <String `remove'>
   <Font 
    <FTag `'>
   > # end of Font
   <String ` eliminates all the elements referred to by iterator '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `i'>
   <Font 
    <FTag `'>
   > # end of Font
   <String ` in the range '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `[first, last)'>
   <Font 
    <FTag `'>
   > # end of Font
   <String ` for which the '>
  >
  <ParaLine 
   <String `following corresponding conditions hold: '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `*i == value'>
   <Font 
    <FTag `'>
   > # end of Font
   <String `, '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `pred(*i) == true'>
   <Font 
    <FTag `'>
   > # end of Font
   <String `. '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `remove'>
   <Font 
    <FTag `'>
   > # end of Font
   <String ` returns the end of the '>
  >
  <ParaLine 
   <String `resulting range. '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `remove'>
   <Font 
    <FTag `'>
   > # end of Font
   <String ` is stable, that is, the relative order of the elements that are not removed is the same '>
  >
  <ParaLine 
   <String `as their relative order in the original range. Exactly '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `last - first'>
   <Font 
    <FTag `'>
   > # end of Font
   <String ` applications of the corresponding '>
  >
  <ParaLine 
   <String `predicate are done. '>
  >
 > # end of Para
 <Para 
  <Unique 1417>
  <PgfTag `program'>
  <ParaLine 
  >
 > # end of Para
 <Para 
  <Unique 8690>
  <PgfTag `program'>
  <ParaLine 
   <String `template <class InputIterator, class OutputIterator, class T\>'>
  >
 > # end of Para
 <Para 
  <Unique 8679>
  <PgfTag `program'>
  <ParaLine 
   <String `OutputIterator remove_copy(InputIterator first, InputIterator last, '>
  >
 > # end of Para
 <Para 
  <Unique 8680>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <Char Tab >
   <String `OutputIterator result, '>
   <Char Tab >
   <Char Tab >
   <String `const T& value);'>
  >
 > # end of Para
 <Para 
  <Unique 8681>
  <PgfTag `program'>
  <ParaLine 
  >
 > # end of Para
 <Para 
  <Unique 395>
  <PgfTag `program'>
  <ParaLine 
   <String `template <class InputIterator, class OutputIterator, class Predicate\>'>
  >
 > # end of Para
 <Para 
  <Unique 1423>
  <PgfTag `program'>
  <ParaLine 
   <String `OutputIterator remove_copy_if(InputIterator first, InputIterator last, '>
  >
  <ParaLine 
   <String `OutputIterator result, '>
   <Char Tab >
   <Char Tab >
   <String `Predicate pred);'>
  >
 > # end of Para
 <Para 
  <Unique 8631>
  <PgfTag `body'>
  <ParaLine 
   <Font 
    <FTag `'>
    <FFamily `Courier'>
    <FPostScriptName `Courier'>
    <FSize  9.0 pt>
   > # end of Font
   <String `remove_copy'>
   <Font 
    <FTag `'>
   > # end of Font
   <String ` copies all the elements referred to by the iterator '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `i'>
   <Font 
    <FTag `'>
   > # end of Font
   <String ` in the range '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `[first, last)'>
   <Font 
    <FTag `'>
   > # end of Font
   <String ` for which the '>
  >
  <ParaLine 
   <String `following corresponding conditions do not hold: '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `*i == value'>
   <Font 
    <FTag `'>
   > # end of Font
   <String `,'>
   <Font 
    <FTag `program'>
   > # end of Font
   <String ` pred(*i) == true'>
   <Font 
    <FTag `'>
   > # end of Font
   <String `. '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `remove_copy'>
   <Font 
    <FTag `'>
   > # end of Font
   <String ` returns '>
  >
  <ParaLine 
   <String `the end of the resulting range. '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `remove_copy'>
   <Font 
    <FTag `'>
   > # end of Font
   <String ` is stable, that is, the relative order of the elements in the '>
  >
  <ParaLine 
   <String `resulting range is the same as their relative order in the original range. Exactly '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `last - first'>
   <Font 
    <FTag `'>
   > # end of Font
   <String ` applications '>
  >
  <ParaLine 
   <String `of the corresponding predicate are done.'>
  >
 > # end of Para
 <Para 
  <Unique 8632>
  <PgfTag `subsubsection'>
  <PgfNumString `10.2.8 '>
  <ParaLine 
   <String `Unique'>
  >
 > # end of Para
 <Para 
  <Unique 398>
  <PgfTag `program'>
  <ParaLine 
  >
 > # end of Para
 <Para 
  <Unique 8703>
  <PgfTag `program'>
  <ParaLine 
   <String `template <class ForwardIterator\>'>
  >
 > # end of Para
 <Para 
  <Unique 8704>
  <PgfTag `program'>
  <ParaLine 
   <String `ForwardIterator unique(ForwardIterator first, ForwardIterator last);'>
  >
 > # end of Para
 <Para 
  <Unique 8705>
  <PgfTag `program'>
  <ParaLine 
  >
 > # end of Para
 <Para 
  <Unique 8706>
  <PgfTag `program'>
  <ParaLine 
   <String `template <class ForwardIterator, class BinaryPredicate\>'>
  >
 > # end of Para
 <Para 
  <Unique 8707>
  <PgfTag `program'>
  <ParaLine 
   <String `ForwardIterator unique(ForwardIterator first, ForwardIterator last, '>
  >
 > # end of Para
 <Para 
  <Unique 8708>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <Char Tab >
   <String `BinaryPredicate binary_pred);'>
  >
 > # end of Para
 <Para 
  <Unique 8709>
  <PgfTag `body'>
  <ParaLine 
   <Font 
    <FTag `'>
    <FFamily `Courier'>
    <FPostScriptName `Courier'>
    <FSize  9.0 pt>
   > # end of Font
   <String `unique'>
   <Font 
    <FTag `'>
   > # end of Font
   <String ` eliminates all but the first element from every consecutive group of equal elements referred to by '>
  >
  <ParaLine 
   <String `the iterator '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `i'>
   <Font 
    <FTag `'>
   > # end of Font
   <String ` in the range '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `[first, last)'>
   <Font 
    <FTag `'>
   > # end of Font
   <String ` for which the following corresponding conditions hold: '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `*i == '>
  >
  <ParaLine 
   <String `*(i'>
   <Font 
    <FTag `'>
   > # end of Font
   <String ` '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `- 1)'>
   <Font 
    <FTag `'>
   > # end of Font
   <String `or '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `binary_pred(*i, *(i - 1)) == true'>
   <Font 
    <FTag `'>
   > # end of Font
   <String `. '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `unique'>
   <Font 
    <FTag `'>
   > # end of Font
   <String ` returns the end of the resulting range. Exactly '>
  >
  <ParaLine 
   <Font 
    <FTag `program'>
   > # end of Font
   <String `(last - first) - 1'>
   <Font 
    <FTag `'>
   > # end of Font
   <String ` applications of the corresponding predicate are done.'>
  >
 > # end of Para
 <Para 
  <Unique 401>
  <PgfTag `program'>
  <ParaLine 
  >
 > # end of Para
 <Para 
  <Unique 8712>
  <PgfTag `program'>
  <ParaLine 
   <String `template <class InputIterator, class OutputIterator\>'>
  >
 > # end of Para
 <Para 
  <Unique 1429>
  <PgfTag `program'>
  <ParaLine 
   <String `OutputIterator unique_copy(InputIterator first, InputIterator last, '>
  >
  <ParaLine 
   <String `OutputIterator result);'>
  >
 > # end of Para
 <Para 
  <Unique 402>
  <PgfTag `program'>
  <ParaLine 
  >
 > # end of Para
 <Para 
  <Unique 403>
  <PgfTag `program'>
  <ParaLine 
   <String `template <class InputIterator, class OutputIterator, class BinaryPredicate\>'>
  >
 > # end of Para
 <Para 
  <Unique 1430>
  <PgfTag `program'>
  <ParaLine 
   <TextRectID 77>
   <String `OutputIterator unique_copy(InputIterator first, InputIterator last, '>
  >
  <ParaLine 
   <String `OutputIterator result, '>
   <Char Tab >
   <Char Tab >
   <String `BinaryPredicate binary_pred);'>
  >
 > # end of Para
 <Para 
  <Unique 8719>
  <PgfTag `body'>
  <ParaLine 
   <Font 
    <FTag `'>
    <FFamily `Courier'>
    <FPostScriptName `Courier'>
    <FSize  9.0 pt>
   > # end of Font
   <String `unique_copy'>
   <Font 
    <FTag `'>
   > # end of Font
   <String ` copies only the first element from every consecutive group of equal elements referred to by '>
  >
  <ParaLine 
   <String `the iterator '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `i'>
   <Font 
    <FTag `'>
   > # end of Font
   <String ` in the range '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `[first, last)'>
   <Font 
    <FTag `'>
   > # end of Font
   <String ` for which the following corresponding conditions hold: '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `*i == '>
  >
  <ParaLine 
   <String `*(i'>
   <Font 
    <FTag `'>
   > # end of Font
   <String ` '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `- 1)'>
   <Font 
    <FTag `'>
   > # end of Font
   <String `or '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `binary_pred(*i, *(i - 1)) == true'>
   <Font 
    <FTag `'>
   > # end of Font
   <String `. '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `unique_copy'>
   <Font 
    <FTag `'>
   > # end of Font
   <String ` returns the end of the resulting range. '>
  >
  <ParaLine 
   <String `Exactly '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `last - first'>
   <Font 
    <FTag `'>
   > # end of Font
   <String ` applications of the corresponding predicate are done.'>
  >
 > # end of Para
 <Para 
  <Unique 8720>
  <PgfTag `subsubsection'>
  <PgfNumString `10.2.9 '>
  <ParaLine 
   <String `Reverse'>
  >
 > # end of Para
 <Para 
  <Unique 1457>
  <PgfTag `program'>
  <ParaLine 
  >
 > # end of Para
 <Para 
  <Unique 427>
  <PgfTag `program'>
  <ParaLine 
   <String `template <class BidirectionalIterator\>'>
  >
 > # end of Para
 <Para 
  <Unique 428>
  <PgfTag `program'>
  <ParaLine 
   <String `void reverse(BidirectionalIterator first, BidirectionalIterator last);'>
  >
 > # end of Para
 <Para 
  <Unique 1451>
  <PgfTag `body'>
  <ParaLine 
   <String `For each non-negative integer '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `i <= (last - first)/2'>
   <Font 
    <FTag `'>
   > # end of Font
   <String `,'>
   <Font 
    <FTag `program'>
   > # end of Font
   <String ` reverse'>
   <Font 
    <FTag `'>
   > # end of Font
   <String ` applies swap to all pairs of iterators '>
  >
  <ParaLine 
   <Font 
    <FTag `program'>
   > # end of Font
   <String `first + i'>
   <Font 
    <FTag `'>
   > # end of Font
   <String `, '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `(last - i) - 1'>
   <Font 
    <FTag `'>
   > # end of Font
   <String `. Exactly '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `(last - first)/2 '>
   <Font 
    <FTag `'>
   > # end of Font
   <String `swaps are performed.'>
  >
 > # end of Para
 <Para 
  <Unique 429>
  <PgfTag `program'>
  <ParaLine 
  >
 > # end of Para
 <Para 
  <Unique 431>
  <PgfTag `program'>
  <ParaLine 
   <String `template <class BidirectionalIterator, class OutputIterator\>'>
  >
 > # end of Para
 <Para 
  <Unique 1458>
  <PgfTag `program'>
  <ParaLine 
   <String `OutputIterator reverse_copy(BidirectionalIterator first,'>
  >
 > # end of Para
 <Para 
  <Unique 1443>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <Char Tab >
   <String `BidirectionalIterator last, '>
   <Char Tab >
   <Char Tab >
   <String `OutputIterator result);'>
  >
 > # end of Para
 <Para 
  <Unique 29059>
  <PgfTag `body'>
  <ParaLine 
   <Font 
    <FTag `program'>
   > # end of Font
   <String `reverse_copy'>
   <Font 
    <FTag `'>
   > # end of Font
   <String ` copies the range '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `[first, last)'>
   <Font 
    <FTag `'>
   > # end of Font
   <String ` to the range'>
   <Font 
    <FTag `program'>
   > # end of Font
   <String ` [result, result + (last - first))'>
   <Font 
    <FTag `'>
   > # end of Font
   <String ` such '>
  >
  <ParaLine 
   <String `that for any non-negative integer'>
   <Font 
    <FTag `program'>
   > # end of Font
   <String ` i < (last - first)'>
   <Font 
    <FTag `'>
   > # end of Font
   <String ` the following assignment takes place: '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `*(result + '>
  >
  <ParaLine 
   <String `(last - first) - i) = *(first + i)'>
   <Font 
    <FTag `'>
   > # end of Font
   <String `. '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `reverse_copy'>
   <Font 
    <FTag `'>
   > # end of Font
   <String ` returns '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `result + (last - first)'>
   <Font 
    <FTag `'>
   > # end of Font
   <String `.Exactly '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `last '>
  >
  <ParaLine 
   <String `- first'>
   <Font 
    <FTag `'>
   > # end of Font
   <String ` assignments are done. The result of '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `reverse_copy'>
   <Font 
    <FTag `'>
   > # end of Font
   <String ` is undefined if '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `[first, last)'>
   <Font 
    <FTag `'>
   > # end of Font
   <String ` and '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `[result, '>
  >
  <ParaLine 
   <String `result + (last - first))'>
   <Font 
    <FTag `'>
   > # end of Font
   <String ` overlap.'>
  >
 > # end of Para
 <Para 
  <Unique 29061>
  <PgfTag `subsubsection'>
  <PgfNumString `10.2.10 '>
  <ParaLine 
   <String `Rotate'>
  >
 > # end of Para
 <Para 
  <Unique 1460>
  <PgfTag `program'>
  <ParaLine 
  >
 > # end of Para
 <Para 
  <Unique 435>
  <PgfTag `program'>
  <ParaLine 
   <String `template <class '>
   <String `ForwardI'>
   <String `terator\>'>
  >
 > # end of Para
 <Para 
  <Unique 432>
  <PgfTag `program'>
  <ParaLine 
   <String `void rotate('>
   <String `ForwardI'>
   <String `terator first, '>
   <String `ForwardI'>
   <String `terator middle'>
   <String `, ForwardI'>
   <String `terator last);'>
  >
 > # end of Para
 <Para 
  <Unique 1298>
  <PgfTag `body'>
  <ParaLine 
   <String `For each non-negative integer '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `i < (last - first)'>
   <Font 
    <FTag `'>
   > # end of Font
   <String `, '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `rotate'>
   <Font 
    <FTag `'>
   > # end of Font
   <String ` places the element from the position '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `first + '>
  >
  <ParaLine 
   <String `i'>
   <Font 
    <FTag `'>
   > # end of Font
   <String ` into '>
   <String `position '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `first + (i + (last - middle)) % (last - first)'>
   <Font 
    <FTag `'>
   > # end of Font
   <String `. '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `[first, middle)'>
   <Font 
    <FTag `'>
   > # end of Font
   <String ` and '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `[middle, '>
  >
  <ParaLine 
   <String `last)'>
   <Font 
    <FTag `'>
   > # end of Font
   <String ` are valid ranges. At most '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `last - first'>
   <Font 
    <FTag `'>
   > # end of Font
   <String ` swaps are done.'>
  >
 > # end of Para
 <Para 
  <Unique 433>
  <PgfTag `program'>
  <ParaLine 
  >
 > # end of Para
 <Para 
  <Unique 434>
  <PgfTag `program'>
  <ParaLine 
   <String `template <class ForwardIterator, class OutputIterator\>'>
  >
 > # end of Para
 <Para 
  <Unique 1461>
  <PgfTag `program'>
  <ParaLine 
   <String `OutputIterator rotate_copy(ForwardIterator first, ForwardIterator middle,'>
  >
 > # end of Para
 <Para 
  <Unique 415>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <Char Tab >
   <String `ForwardIterator last, OutputIterator result);'>
  >
 > # end of Para
 <Para 
  <Unique 1453>
  <PgfTag `body'>
  <ParaLine 
   <Font 
    <FTag `'>
    <FFamily `Courier'>
    <FPostScriptName `Courier'>
    <FSize  9.0 pt>
   > # end of Font
   <String `rotate'>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `_copy'>
   <Font 
    <FTag `'>
   > # end of Font
   <String ` copies the range '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `[first, last)'>
   <Font 
    <FTag `'>
   > # end of Font
   <String ` to the range'>
   <Font 
    <FTag `program'>
   > # end of Font
   <String ` [result, result + (last - first))'>
   <Font 
    <FTag `'>
   > # end of Font
   <String ` such '>
  >
  <ParaLine 
   <String `that for each non-negative integer'>
   <Font 
    <FTag `program'>
   > # end of Font
   <String ` i < (last - first)'>
   <Font 
    <FTag `'>
   > # end of Font
   <String ` the following assignment takes place: '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `*'>
   <String `(result '>
  >
  <ParaLine 
   <String `+ (i + ('>
   <String `last - '>
   <String `middle'>
   <String `)'>
   <String `) % (last - first))'>
   <String ` = '>
   <String `*(first + i)'>
   <Font 
    <FTag `'>
   > # end of Font
   <String `.'>
   <Font 
    <FTag `program'>
   > # end of Font
   <String ` rotate_copy'>
   <Font 
    <FTag `'>
   > # end of Font
   <String ` returns '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `result + (last '>
  >
  <ParaLine 
   <String `- first)'>
   <Font 
    <FTag `'>
   > # end of Font
   <String `. Exactly '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `last - first'>
   <Font 
    <FTag `'>
   > # end of Font
   <String ` assignments are done. The result of '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `rotate_copy'>
   <Font 
    <FTag `'>
   > # end of Font
   <String ` is undefined if '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `[first, '>
  >
  <ParaLine 
   <String `last)'>
   <Font 
    <FTag `'>
   > # end of Font
   <String ` and '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `[result, result + (last - first))'>
   <Font 
    <FTag `'>
   > # end of Font
   <String ` overlap.'>
  >
 > # end of Para
 <Para 
  <Unique 7257>
  <PgfTag `subsubsection'>
  <PgfNumString `10.2.11 '>
  <ParaLine 
   <String `Random shuffle'>
  >
 > # end of Para
 <Para 
  <Unique 474>
  <PgfTag `program'>
  <ParaLine 
  >
 > # end of Para
 <Para 
  <Unique 563>
  <PgfTag `program'>
  <ParaLine 
   <String `template <class RandomAccessIterator\>'>
  >
 > # end of Para
 <Para 
  <Unique 1244>
  <PgfTag `program'>
  <ParaLine 
   <String `void random_shuffle(RandomAccessIterator first, RandomAccessIterator last);'>
  >
 > # end of Para
 <Para 
  <Unique 1507>
  <PgfTag `program'>
  <ParaLine 
  >
 > # end of Para
 <Para 
  <Unique 1508>
  <PgfTag `program'>
  <ParaLine 
   <String `template <class RandomAccessIterator, class RandomNumberGenerator\>'>
  >
 > # end of Para
 <Para 
  <Unique 1538>
  <PgfTag `program'>
  <ParaLine 
   <String `void random_shuffle(RandomAccessIterator first, RandomAccessIterator last, '>
  >
  <ParaLine 
   <String `RandomNumberGenerator& rand);'>
  >
 > # end of Para
 <Para 
  <Unique 1544>
  <PgfTag `body'>
  <ParaLine 
   <Font 
    <FTag `'>
    <FFamily `Courier'>
    <FPostScriptName `Courier'>
    <FSize  9.0 pt>
   > # end of Font
   <String `random_shuffle'>
   <Font 
    <FTag `'>
   > # end of Font
   <String ` shuffles the elements in the range '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `[first, last)'>
   <Font 
    <FTag `'>
   > # end of Font
   <String ` with uniform distribution. Exactly '>
  >
  <ParaLine 
   <Font 
    <FTag `program'>
   > # end of Font
   <String `(last - first) - 1 '>
   <Font 
    <FTag `'>
   > # end of Font
   <String `swaps are done. '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `random_shuffle'>
   <Font 
    <FTag `'>
   > # end of Font
   <String ` can take a particular random number generating '>
  >
  <ParaLine 
   <String `function object '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `rand'>
   <Font 
    <FTag `'>
   > # end of Font
   <String ` such that '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `rand'>
   <Font 
    <FTag `'>
   > # end of Font
   <String ` '>
   <String `takes a positive argument '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `n'>
   <Font 
    <FTag `'>
   > # end of Font
   <String ` of distance type of the '>
  >
  <ParaLine 
   <Font 
    <FTag `program'>
   > # end of Font
   <String `RandomAccessIterator'>
   <Font 
    <FTag `'>
   > # end of Font
   <String ` and r'>
   <String `eturns a randomly chosen '>
   <String `value between '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `0'>
   <Font 
    <FTag `'>
   > # end of Font
   <String ` and '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `n-1'>
   <Font 
    <FTag `'>
   > # end of Font
   <String `.'>
   <String ` '>
  >
 > # end of Para
 <Para 
  <Unique 28952>
  <PgfTag `subsubsection'>
  <PgfNumString `10.2.12 '>
  <ParaLine 
   <TextRectID 78>
   <String `Partitions'>
  >
 > # end of Para
 <Para 
  <Unique 28953>
  <PgfTag `program'>
  <ParaLine 
  >
 > # end of Para
 <Para 
  <Unique 28954>
  <PgfTag `program'>
  <ParaLine 
   <String `template <class BidirectionalIterator, class Predicate\>'>
  >
 > # end of Para
 <Para 
  <Unique 28955>
  <PgfTag `program'>
  <ParaLine 
   <String `BidirectionalIterator partition(BidirectionalIterator first,'>
  >
 > # end of Para
 <Para 
  <Unique 28956>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <Char Tab >
   <String `BidirectionalIterator last, '>
   <Char Tab >
   <Char Tab >
   <String `Predicate pred);'>
  >
 > # end of Para
 <Para 
  <Unique 28961>
  <PgfTag `body'>
  <ParaLine 
   <Font 
    <FTag `'>
    <FFamily `Courier'>
    <FPostScriptName `Courier'>
    <FSize  9.0 pt>
   > # end of Font
   <String `partition'>
   <Font 
    <FTag `'>
   > # end of Font
   <String ` places all the elements in the range '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `[first, last)'>
   <Font 
    <FTag `'>
   > # end of Font
   <String ` that satisfy '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `pred'>
   <Font 
    <FTag `'>
   > # end of Font
   <String ` before all the elements that '>
  >
  <ParaLine 
   <String `do not satisfy it. It returns an iterator '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `i'>
   <Font 
    <FTag `'>
   > # end of Font
   <String ` such that for any iterator '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `j'>
   <Font 
    <FTag `'>
   > # end of Font
   <String ` in the range '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `[first, i)'>
   <Font 
    <FTag `'>
   > # end of Font
   <String `,'>
   <Font 
    <FTag `program'>
   > # end of Font
   <String ` pred(*j) == '>
  >
  <ParaLine 
   <String `true'>
   <Font 
    <FTag `'>
   > # end of Font
   <String `, and for any iterator '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `k'>
   <Font 
    <FTag `'>
   > # end of Font
   <String ` in the range '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `[i, last)'>
   <Font 
    <FTag `'>
   > # end of Font
   <String `, '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `pred(*j) == false'>
   <Font 
    <FTag `'>
   > # end of Font
   <String `. It does at most '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `(last - first)/'>
  >
  <ParaLine 
   <String `2 '>
   <Font 
    <FTag `'>
   > # end of Font
   <String `swaps. Exactly '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `last - first'>
   <Font 
    <FTag `'>
   > # end of Font
   <String ` applications of the predicate is done.'>
  >
 > # end of Para
 <Para 
  <Unique 28962>
  <PgfTag `program'>
  <ParaLine 
  >
 > # end of Para
 <Para 
  <Unique 28963>
  <PgfTag `program'>
  <ParaLine 
   <String `template <class BidirectionalIterator, class Predicate\>'>
  >
 > # end of Para
 <Para 
  <Unique 28964>
  <PgfTag `program'>
  <ParaLine 
   <String `Bidirectional'>
   <String `Iterator stable_partition(BidirectionalIterator first, '>
  >
 > # end of Para
 <Para 
  <Unique 34090>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <Char Tab >
   <String `Bidirectional'>
   <Char Tab >
   <String `Iterator last, '>
   <Char Tab >
   <Char Tab >
   <String `Predicate pred);'>
  >
 > # end of Para
 <Para 
  <Unique 28970>
  <PgfTag `body'>
  <ParaLine 
   <Font 
    <FTag `'>
    <FFamily `Courier'>
    <FPostScriptName `Courier'>
    <FSize  9.0 pt>
   > # end of Font
   <String `stable_partition'>
   <Font 
    <FTag `'>
   > # end of Font
   <String ` places all the elements in the range '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `[first, last)'>
   <Font 
    <FTag `'>
   > # end of Font
   <String ` that satisfy '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `pred'>
   <Font 
    <FTag `'>
   > # end of Font
   <String ` before all the '>
  >
  <ParaLine 
   <String `elements that do not satisfy it. It returns an iterator '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `i'>
   <Font 
    <FTag `'>
   > # end of Font
   <String ` such that for any iterator '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `j'>
   <Font 
    <FTag `'>
   > # end of Font
   <String ` in the range '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `[first, i)'>
   <Font 
    <FTag `'>
   > # end of Font
   <String `,'>
   <Font 
    <FTag `program'>
   > # end of Font
   <String ` '>
  >
  <ParaLine 
   <String `pred(*j) == true'>
   <Font 
    <FTag `'>
   > # end of Font
   <String `, and for any iterator '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `k'>
   <Font 
    <FTag `'>
   > # end of Font
   <String ` in the range '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `[i, last)'>
   <Font 
    <FTag `'>
   > # end of Font
   <String `, '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `pred(*j) == false'>
   <Font 
    <FTag `'>
   > # end of Font
   <String `. The relative order '>
  >
  <ParaLine 
   <String `of the elements in both groups is preserved. It does at most '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `(last - first) * log(last - first)'>
   <Font 
    <FTag `'>
   > # end of Font
   <String ` swaps, '>
  >
  <ParaLine 
   <String `but only linear number of swaps if there is enough extra memory. Exactly '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `last - first'>
   <Font 
    <FTag `'>
   > # end of Font
   <String ` applications of '>
  >
  <ParaLine 
   <String `the predicate are done.'>
  >
 > # end of Para
 <Para 
  <Unique 1489>
  <PgfTag `subsection'>
  <PgfNumString `10.3 '>
  <ParaLine 
   <String `Sorting and related operations'>
  >
 > # end of Para
 <Para 
  <Unique 8464>
  <PgfTag `body'>
  <ParaLine 
   <String `All the operations in this section have two versions: one that takes a function object of type '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `Compare '>
   <Font 
    <FTag `'>
   > # end of Font
   <String `and '>
  >
  <ParaLine 
   <String `one that uses an '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `operator<'>
   <Font 
    <FTag `'>
   > # end of Font
   <String `.'>
  >
 > # end of Para
 <Para 
  <Unique 8312>
  <PgfTag `body'>
  <ParaLine 
   <Font 
    <FTag `program'>
   > # end of Font
   <String `Compare'>
   <Font 
    <FTag `'>
   > # end of Font
   <String ` is a function object which returns '>
   <String `a value convertible to '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `bool'>
   <Font 
    <FTag `'>
   > # end of Font
   <String `. '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `C'>
   <String `ompare'>
   <Font 
    <FTag `'>
   > # end of Font
   <String ` '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `comp'>
   <Font 
    <FTag `'>
   > # end of Font
   <String ` is used throughout '>
  >
  <ParaLine 
   <String `for algorithms assuming an ordering relation. '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `comp'>
   <Font 
    <FTag `'>
   > # end of Font
   <String ` satisfies the standard axioms for total ordering and it '>
  >
  <ParaLine 
   <String `does n'>
   <String `ot apply any non-constant function through the dereferenced iterator. For all algorithms that take '>
  >
  <ParaLine 
   <Font 
    <FTag `program'>
   > # end of Font
   <String `Compare,'>
   <Font 
    <FTag `'>
   > # end of Font
   <String ` there is a version that uses '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `operator<'>
   <Font 
    <FTag `'>
   > # end of Font
   <String ` instead. That is, '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `comp(*i, *j) == true '>
   <Font 
    <FTag `'>
   > # end of Font
   <String `defaults to '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `*i < '>
  >
  <ParaLine 
   <String `*j == true'>
   <Font 
    <FTag `'>
   > # end of Font
   <String `.'>
  >
 > # end of Para
 <Para 
  <Unique 9080>
  <PgfTag `body'>
  <ParaLine 
   <String `A sequence is sorted with respect to a comparator '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `comp'>
   <Font 
    <FTag `'>
   > # end of Font
   <String ` if for any iterator '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `i'>
   <Font 
    <FTag `'>
   > # end of Font
   <String ` pointing to '>
   <String `an element in a'>
   <String ` '>
  >
  <ParaLine 
   <String `sequence and any non-negative integer '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `n'>
   <Font 
    <FTag `'>
   > # end of Font
   <String ` such that '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `i + n'>
   <Font 
    <FTag `'>
   > # end of Font
   <String ` is a valid iterator pointing to an element of the '>
  >
  <ParaLine 
   <String `same '>
   <String `sequence, '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `comp(*(i + n), *i) == false'>
   <Font 
    <FTag `'>
   > # end of Font
   <String `.'>
  >
 > # end of Para
 <Para 
  <Unique 8313>
  <PgfTag `body'>
  <ParaLine 
   <String `In the descriptions of the functions that deal with ordering relationships we frequently use a notion of '>
  >
  <ParaLine 
   <String `equality to describe concepts such as stability. The equality to which we refer is not necessarily an '>
  >
  <ParaLine 
   <Font 
    <FTag `program'>
   > # end of Font
   <String `operator=='>
   <Font 
    <FTag `'>
   > # end of Font
   <String `, but an equality relation induced by the total ordering. That is, two element '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `a'>
   <Font 
    <FTag `'>
   > # end of Font
   <String ` and '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `b'>
   <Font 
    <FTag `'>
   > # end of Font
   <String ` are '>
  >
  <ParaLine 
   <String `considered equal if and only if '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `!(a < b) && !(b < a)'>
   <Font 
    <FTag `'>
   > # end of Font
   <String `.'>
  >
 > # end of Para
 <Para 
  <Unique 7038>
  <PgfTag `subsubsection'>
  <PgfNumString `10.3.1 '>
  <ParaLine 
   <String `Sort'>
  >
 > # end of Para
 <Para 
  <Unique 1490>
  <PgfTag `program'>
  <ParaLine 
  >
 > # end of Para
 <Para 
  <Unique 437>
  <PgfTag `program'>
  <ParaLine 
   <String `template <class RandomAccessIterator\>'>
  >
 > # end of Para
 <Para 
  <Unique 450>
  <PgfTag `program'>
  <ParaLine 
   <String `void sort(RandomAccessIterator first, RandomAccessIterator last);'>
  >
 > # end of Para
 <Para 
  <Unique 1491>
  <PgfTag `program'>
  <ParaLine 
  >
 > # end of Para
 <Para 
  <Unique 451>
  <PgfTag `program'>
  <ParaLine 
   <String `template <class RandomAccessIterator, class Compare\>'>
  >
 > # end of Para
 <Para 
  <Unique 452>
  <PgfTag `program'>
  <ParaLine 
   <String `void sort(RandomAccessIterator first, RandomAccessIterator last, Compare comp);'>
  >
 > # end of Para
 <Para 
  <Unique 804>
  <PgfTag `body'>
  <ParaLine 
   <Font 
    <FTag `program'>
   > # end of Font
   <String `sort'>
   <Font 
    <FTag `'>
   > # end of Font
   <String ` sorts the elements in the range '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `[first, last).'>
   <Font 
    <FTag `'>
   > # end of Font
   <String ` It does approximately '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `NlogN'>
   <Font 
    <FTag `'>
   > # end of Font
   <String ` (where'>
   <Font 
    <FTag `Equation Number'>
   > # end of Font
   <String ` '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `N'>
   <Font 
    <FTag `'>
   > # end of Font
   <String ` equals to '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `last '>
  >
  <ParaLine 
   <String `- first'>
   <Font 
    <FTag `'>
   > # end of Font
   <String `) comparisons on the average. If the worst case behavior is important '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `stable_sort'>
   <Font 
    <FTag `'>
   > # end of Font
   <String ` or '>
  >
  <ParaLine 
   <Font 
    <FTag `program'>
   > # end of Font
   <String `partial_sort'>
   <Font 
    <FTag `'>
   > # end of Font
   <String ` should be used.'>
  >
 > # end of Para
 <Para 
  <Unique 1305>
  <PgfTag `program'>
  <ParaLine 
  >
 > # end of Para
 <Para 
  <Unique 31472>
  <PgfTag `program'>
  <ParaLine 
   <String `template <class RandomAccessIterator\>'>
  >
 > # end of Para
 <Para 
  <Unique 453>
  <PgfTag `program'>
  <ParaLine 
   <String `void stable_sort(RandomAccessIterator first, RandomAccessIterator last);'>
  >
 > # end of Para
 <Para 
  <Unique 1494>
  <PgfTag `program'>
  <ParaLine 
  >
 > # end of Para
 <Para 
  <Unique 454>
  <PgfTag `program'>
  <ParaLine 
   <String `template <class RandomAccessIterator, class Compare\>'>
  >
 > # end of Para
 <Para 
  <Unique 460>
  <PgfTag `program'>
  <ParaLine 
   <String `void stable_sort(RandomAccessIterator first, RandomAccessIterator last,'>
  >
 > # end of Para
 <Para 
  <Unique 480>
  <PgfTag `program'>
  <ParaLine 
   <TextRectID 79>
   <Char Tab >
   <Char Tab >
   <String `Compare comp);'>
  >
 > # end of Para
 <Para 
  <Unique 1306>
  <PgfTag `body'>
  <ParaLine 
   <Font 
    <FTag `'>
    <FFamily `Courier'>
    <FPostScriptName `Courier'>
    <FSize  9.0 pt>
   > # end of Font
   <String `stable_sort'>
   <Font 
    <FTag `'>
   > # end of Font
   <String ` sorts the elements in the range '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `[first, last)'>
   <Font 
    <FTag `'>
   > # end of Font
   <String `. It is stable, that is, the relative order of the '>
  >
  <ParaLine 
   <String `equal elements is preserved. It does at most '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `N'>
   <String `('>
   <String `log'>
   <String `N)'>
   <Font 
    <FTag `Superscript'>
   > # end of Font
   <String `2'>
   <Font 
    <FTag `'>
   > # end of Font
   <String ` (where'>
   <Font 
    <FTag `Equation Number'>
   > # end of Font
   <String ` '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `N'>
   <Font 
    <FTag `'>
   > # end of Font
   <String ` equals to '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `last - first'>
   <Font 
    <FTag `'>
   > # end of Font
   <String `) comparisons; if '>
  >
  <ParaLine 
   <String `enough extra memory is available, it is '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `NlogN'>
   <Font 
    <FTag `Equation Number'>
   > # end of Font
   <String `.'>
  >
 > # end of Para
 <Para 
  <Unique 1473>
  <PgfTag `program'>
  <ParaLine 
  >
 > # end of Para
 <Para 
  <Unique 1480>
  <PgfTag `program'>
  <ParaLine 
   <String `template <class RandomAccessIterator\>'>
  >
 > # end of Para
 <Para 
  <Unique 1474>
  <PgfTag `program'>
  <ParaLine 
   <String `void partial_sort(RandomAccessIterator first, RandomAccessIterator middle,'>
  >
 > # end of Para
 <Para 
  <Unique 1483>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <Char Tab >
   <String `RandomAccessIterator last);'>
  >
 > # end of Para
 <Para 
  <Unique 1475>
  <PgfTag `program'>
  <ParaLine 
  >
 > # end of Para
 <Para 
  <Unique 1477>
  <PgfTag `program'>
  <ParaLine 
   <String `template <class RandomAccessIterator, class Compare\>'>
  >
 > # end of Para
 <Para 
  <Unique 1478>
  <PgfTag `program'>
  <ParaLine 
   <String `void partial_sort(RandomAccessIterator first, RandomAccessIterator middle,'>
  >
 > # end of Para
 <Para 
  <Unique 1484>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <Char Tab >
   <String `RandomAccessIterator last, '>
   <Char Tab >
   <Char Tab >
   <String `Compare comp);'>
  >
 > # end of Para
 <Para 
  <Unique 1485>
  <PgfTag `body'>
  <ParaLine 
   <Font 
    <FTag `program'>
   > # end of Font
   <String `partial_sort'>
   <Font 
    <FTag `'>
   > # end of Font
   <String ` places the first '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `middle - first'>
   <Font 
    <FTag `'>
   > # end of Font
   <String ` sorted elements from the range '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `[first, last)'>
   <Font 
    <FTag `'>
   > # end of Font
   <String ` into the '>
  >
  <ParaLine 
   <String `range '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `[first, middle)'>
   <Font 
    <FTag `'>
   > # end of Font
   <String `. The rest of the elements in the range '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `[middle, last)'>
   <Font 
    <FTag `'>
   > # end of Font
   <String ` are placed in an undefined '>
  >
  <ParaLine 
   <String `order. It takes approximately '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `(last - first) * log(middle - first) '>
   <Font 
    <FTag `'>
   > # end of Font
   <String `comparisons. '>
  >
 > # end of Para
 <Para 
  <Unique 1496>
  <PgfTag `program'>
  <ParaLine 
  >
 > # end of Para
 <Para 
  <Unique 9550>
  <PgfTag `program'>
  <ParaLine 
   <String `template <class InputIterator, class RandomAccessIterator\>'>
  >
 > # end of Para
 <Para 
  <Unique 462>
  <PgfTag `program'>
  <ParaLine 
   <String `RandomAccessIterator partial_sort_copy(InputIterator first, InputIterator last,'>
  >
 > # end of Para
 <Para 
  <Unique 481>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <Char Tab >
   <String `RandomAccessIterator result_first, RandomAccessIterator '>
  >
  <ParaLine 
   <String `result_last);'>
  >
 > # end of Para
 <Para 
  <Unique 1497>
  <PgfTag `program'>
  <ParaLine 
  >
 > # end of Para
 <Para 
  <Unique 463>
  <PgfTag `program'>
  <ParaLine 
   <String `template <class InputIterator, class RandomAccessIterator, class Compare\>'>
  >
 > # end of Para
 <Para 
  <Unique 464>
  <PgfTag `program'>
  <ParaLine 
   <String `RandomAccessIterator partial_sort_copy(InputIterator first, InputIterator last, '>
  >
  <ParaLine 
   <String `RandomAccessIterator result_first, RandomAccessIterator '>
  >
  <ParaLine 
   <String `result_last, '>
   <Char Tab >
   <Char Tab >
   <String `Compare comp);'>
  >
 > # end of Para
 <Para 
  <Unique 1486>
  <PgfTag `body'>
  <ParaLine 
   <Font 
    <FTag `'>
    <FFamily `Courier'>
    <FPostScriptName `Courier'>
    <FSize  9.0 pt>
   > # end of Font
   <String `partial_sort'>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `_copy'>
   <Font 
    <FTag `'>
   > # end of Font
   <String ` places the first '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `min(last - first, result_last - result_first)'>
   <Font 
    <FTag `'>
   > # end of Font
   <String ` sorted elements '>
  >
  <ParaLine 
   <String `into the range '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `[result_first, result_first + min(last - first, result_last - result_first))'>
   <Font 
    <FTag `'>
   > # end of Font
   <String `. '>
  >
  <ParaLine 
   <String `It returns either '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `result_last'>
   <Font 
    <FTag `'>
   > # end of Font
   <String ` or '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `result_first + (last - first)'>
   <Font 
    <FTag `'>
   > # end of Font
   <String ` whichever is smaller. It takes '>
  >
  <ParaLine 
   <String `approximately'>
   <Font 
    <FTag `program'>
   > # end of Font
   <String ` (last - first) * log(min(last - first, result_last - result_first)) '>
  >
  <ParaLine 
   <Font 
    <FTag `'>
   > # end of Font
   <String `comparisons.'>
  >
 > # end of Para
 <Para 
  <Unique 7035>
  <PgfTag `subsubsection'>
  <PgfNumString `10.3.2 '>
  <ParaLine 
   <String `Nth element'>
  >
 > # end of Para
 <Para 
  <Unique 1487>
  <PgfTag `program'>
  <ParaLine 
  >
 > # end of Para
 <Para 
  <Unique 467>
  <PgfTag `program'>
  <ParaLine 
   <String `template <class RandomAccessIterator\>'>
  >
 > # end of Para
 <Para 
  <Unique 468>
  <PgfTag `program'>
  <ParaLine 
   <String `void nth_element(RandomAccessIterator first, '>
   <Char Tab >
   <Char Tab >
   <String `RandomAccessIterator nth,'>
  >
 > # end of Para
 <Para 
  <Unique 469>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <Char Tab >
   <String `RandomAccessIterator last);'>
  >
 > # end of Para
 <Para 
  <Unique 1506>
  <PgfTag `program'>
  <ParaLine 
  >
 > # end of Para
 <Para 
  <Unique 478>
  <PgfTag `program'>
  <ParaLine 
   <String `template <class RandomAccessIterator, class Compare\>'>
  >
 > # end of Para
 <Para 
  <Unique 479>
  <PgfTag `program'>
  <ParaLine 
   <String `void nth_element(RandomAccessIterator first, RandomAccessIterator nth, '>
  >
  <ParaLine 
   <String `RandomAccessIterator last, Compare comp);'>
  >
 > # end of Para
 <Para 
  <Unique 1316>
  <PgfTag `body'>
  <ParaLine 
   <String `After '>
   <Font 
    <FTag `'>
    <FFamily `Courier'>
    <FPostScriptName `Courier'>
    <FSize  9.0 pt>
   > # end of Font
   <String `nth_element'>
   <Font 
    <FTag `'>
   > # end of Font
   <String ` the element in the position pointed to by '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `nth'>
   <Font 
    <FTag `'>
   > # end of Font
   <String ` is the element that would be in that '>
  >
  <ParaLine 
   <String `position if the whole range were sorted. Also for any iterator '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `i'>
   <Font 
    <FTag `'>
   > # end of Font
   <String ` in the range '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `[first, nth)'>
   <Font 
    <FTag `'>
   > # end of Font
   <String ` and any iterator '>
  >
  <ParaLine 
   <Font 
    <FTag `program'>
   > # end of Font
   <String `j'>
   <Font 
    <FTag `'>
   > # end of Font
   <String ` in the range '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `[nth, last)'>
   <Font 
    <FTag `'>
   > # end of Font
   <String ` it holds that '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `!(*i \> *j) '>
   <Font 
    <FTag `'>
   > # end of Font
   <String `or '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `comp(*i, *j) == false'>
   <Font 
    <FTag `'>
   > # end of Font
   <String `. It is linear on the average. '>
  >
 > # end of Para
 <Para 
  <Unique 7069>
  <PgfTag `subsubsection'>
  <PgfNumString `10.3.3 '>
  <ParaLine 
   <String `Binary search'>
  >
 > # end of Para
 <Para 
  <Unique 7070>
  <PgfTag `body'>
  <ParaLine 
   <String `All of the algorithms in this section are versions of binary search. They work on non-random access iterators '>
  >
  <ParaLine 
   <String `minimizing the number of comparisons, which will be logarithmic for all types of iterators. They are '>
  >
  <ParaLine 
   <String `especially appropriate for random access iterators, since these algorithms do a logarithmic number of steps '>
  >
  <ParaLine 
   <String `through the data structure. For non-random access iterators they execute a linear number of steps.'>
  >
 > # end of Para
 <Para 
  <Unique 7071>
  <PgfTag `program'>
  <ParaLine 
  >
 > # end of Para
 <Para 
  <Unique 7072>
  <PgfTag `program'>
  <ParaLine 
   <String `template <class ForwardIterator, class T\>'>
  >
 > # end of Para
 <Para 
  <Unique 7073>
  <PgfTag `program'>
  <ParaLine 
   <String `ForwardIterator lower_bound(ForwardIterator first, ForwardIterator last, '>
  >
 > # end of Para
 <Para 
  <Unique 7074>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <Char Tab >
   <String `const T& value);'>
  >
 > # end of Para
 <Para 
  <Unique 7075>
  <PgfTag `program'>
  <ParaLine 
  >
 > # end of Para
 <Para 
  <Unique 7076>
  <PgfTag `program'>
  <ParaLine 
   <TextRectID 80>
   <String `template <class ForwardIterator, class T, class Compare\>'>
  >
 > # end of Para
 <Para 
  <Unique 7077>
  <PgfTag `program'>
  <ParaLine 
   <String `ForwardIterator lower_bound(ForwardIterator first, ForwardIterator last, '>
  >
 > # end of Para
 <Para 
  <Unique 7078>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <Char Tab >
   <String `const T& value, Compare comp);'>
  >
 > # end of Para
 <Para 
  <Unique 7079>
  <PgfTag `body'>
  <ParaLine 
   <Font 
    <FTag `program'>
   > # end of Font
   <String `lower_bound'>
   <Font 
    <FTag `'>
   > # end of Font
   <String ` finds the first position into which '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `value'>
   <Font 
    <FTag `'>
   > # end of Font
   <String ` can be inserted without violating the ordering.'>
   <Font 
    <FTag `program'>
   > # end of Font
   <String ` '>
  >
  <ParaLine 
   <String `lower_bound'>
   <Font 
    <FTag `'>
   > # end of Font
   <String ` returns the furthermost iterator '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `i'>
   <Font 
    <FTag `'>
   > # end of Font
   <String ` in the range '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `[first, last)'>
   <Font 
    <FTag `'>
   > # end of Font
   <String ` such that for any iterator '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `j'>
   <Font 
    <FTag `'>
   > # end of Font
   <String ` in '>
  >
  <ParaLine 
   <String `the range '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `[first, i)'>
   <Font 
    <FTag `'>
   > # end of Font
   <String ` the following corresponding conditions hold: '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `*j < value'>
   <Font 
    <FTag `'>
   > # end of Font
   <String ` or '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `comp(*j, value) == '>
  >
  <ParaLine 
   <String `true'>
   <Font 
    <FTag `'>
   > # end of Font
   <String `. At most '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `log(last - first) + 1'>
   <Font 
    <FTag `'>
   > # end of Font
   <String ` comparisons are done.'>
  >
 > # end of Para
 <Para 
  <Unique 7080>
  <PgfTag `program'>
  <ParaLine 
  >
 > # end of Para
 <Para 
  <Unique 7081>
  <PgfTag `program'>
  <ParaLine 
   <String `template <class ForwardIterator, class T\>'>
  >
 > # end of Para
 <Para 
  <Unique 7082>
  <PgfTag `program'>
  <ParaLine 
   <String `ForwardIterator upper_bound(ForwardIterator first, ForwardIterator last, '>
  >
 > # end of Para
 <Para 
  <Unique 7083>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <Char Tab >
   <String `const T& value);'>
  >
 > # end of Para
 <Para 
  <Unique 7084>
  <PgfTag `program'>
  <ParaLine 
  >
 > # end of Para
 <Para 
  <Unique 7085>
  <PgfTag `program'>
  <ParaLine 
   <String `template <class ForwardIterator, class T, class Compare\>'>
  >
 > # end of Para
 <Para 
  <Unique 7086>
  <PgfTag `program'>
  <ParaLine 
   <String `ForwardIterator upper_bound(ForwardIterator first, ForwardIterator last, '>
  >
 > # end of Para
 <Para 
  <Unique 7087>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <Char Tab >
   <String `const T& value, '>
   <Char Tab >
   <Char Tab >
   <String `Compare comp);'>
  >
 > # end of Para
 <Para 
  <Unique 7088>
  <PgfTag `body'>
  <ParaLine 
   <Font 
    <FTag `program'>
   > # end of Font
   <String `upper_bound'>
   <Font 
    <FTag `'>
   > # end of Font
   <String ` finds the furthermost position into which '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `value'>
   <Font 
    <FTag `'>
   > # end of Font
   <String ` can be inserted without violating the '>
  >
  <ParaLine 
   <String `ordering.'>
   <Font 
    <FTag `program'>
   > # end of Font
   <String ` upper_bound'>
   <Font 
    <FTag `'>
   > # end of Font
   <String ` returns the furthermost iterator '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `i'>
   <Font 
    <FTag `'>
   > # end of Font
   <String ` in the range '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `[first, last)'>
   <Font 
    <FTag `'>
   > # end of Font
   <String ` such that for any '>
  >
  <ParaLine 
   <String `iterator '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `j'>
   <Font 
    <FTag `'>
   > # end of Font
   <String ` in the range '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `[first, i)'>
   <Font 
    <FTag `'>
   > # end of Font
   <String ` the following corresponding conditions hold: '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `!(value < *j)'>
   <Font 
    <FTag `'>
   > # end of Font
   <String ` or '>
  >
  <ParaLine 
   <Font 
    <FTag `program'>
   > # end of Font
   <String `comp(value, *j) == false'>
   <Font 
    <FTag `'>
   > # end of Font
   <String `. At most '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `log(last - first) + 1'>
   <Font 
    <FTag `'>
   > # end of Font
   <String ` comparisons are done.'>
  >
 > # end of Para
 <Para 
  <Unique 7089>
  <PgfTag `program'>
  <ParaLine 
  >
 > # end of Para
 <Para 
  <Unique 7090>
  <PgfTag `program'>
  <ParaLine 
   <String `template <class ForwardIterator, class T\>'>
  >
 > # end of Para
 <Para 
  <Unique 7091>
  <PgfTag `program'>
  <ParaLine 
   <String `pair<ForwardIterator, ForwardIterator\> equal_range(ForwardIterator first, '>
  >
 > # end of Para
 <Para 
  <Unique 7092>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <Char Tab >
   <String `ForwardIterator last, '>
   <Char Tab >
   <Char Tab >
   <String `const T& value);'>
  >
 > # end of Para
 <Para 
  <Unique 7093>
  <PgfTag `program'>
  <ParaLine 
  >
 > # end of Para
 <Para 
  <Unique 7094>
  <PgfTag `program'>
  <ParaLine 
   <String `template <class ForwardIterator, class T, class Compare\>'>
  >
 > # end of Para
 <Para 
  <Unique 7095>
  <PgfTag `program'>
  <ParaLine 
   <String `pair<ForwardIterator, ForwardIterator\> equal_range(ForwardIterator first, '>
  >
  <ParaLine 
   <String `ForwardIterator last, const T& value, Compare comp);'>
  >
 > # end of Para
 <Para 
  <Unique 7096>
  <PgfTag `body'>
  <ParaLine 
   <Font 
    <FTag `program'>
   > # end of Font
   <String `equal_range'>
   <Font 
    <FTag `'>
   > # end of Font
   <String ` finds the largest subrange'>
   <Font 
    <FTag `program'>
   > # end of Font
   <String ` [i, j)'>
   <Font 
    <FTag `'>
   > # end of Font
   <String ` such that the value can be inserted at any iterator'>
   <Font 
    <FTag `program'>
   > # end of Font
   <String ` k'>
   <Font 
    <FTag `'>
   > # end of Font
   <String ` in it. '>
  >
  <ParaLine 
   <Font 
    <FTag `program'>
   > # end of Font
   <String `k'>
   <Font 
    <FTag `'>
   > # end of Font
   <String ` satisfies the corresponding conditions: '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `!(*k < value) && !(value < *k) '>
   <Font 
    <FTag `'>
   > # end of Font
   <String `or '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `comp(*k, value) == '>
  >
  <ParaLine 
   <String `false && comp(value, *k) == false'>
   <Font 
    <FTag `'>
   > # end of Font
   <String `. At most '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `2 * log(last - first) '>
   <String `+ 1'>
   <Font 
    <FTag `'>
   > # end of Font
   <String ` c'>
   <String `omparisons are done.'>
  >
 > # end of Para
 <Para 
  <Unique 7097>
  <PgfTag `program'>
  <ParaLine 
  >
 > # end of Para
 <Para 
  <Unique 7098>
  <PgfTag `program'>
  <ParaLine 
   <String `template <class ForwardIterator, class T\>'>
  >
 > # end of Para
 <Para 
  <Unique 7099>
  <PgfTag `program'>
  <ParaLine 
   <String `bool binary_search(ForwardIterator first, ForwardIterator last, const T& value);'>
  >
 > # end of Para
 <Para 
  <Unique 7100>
  <PgfTag `program'>
  <ParaLine 
  >
 > # end of Para
 <Para 
  <Unique 7101>
  <PgfTag `program'>
  <ParaLine 
   <String `template <class ForwardIterator, class T, class Compare\>'>
  >
 > # end of Para
 <Para 
  <Unique 7102>
  <PgfTag `program'>
  <ParaLine 
   <String `bool binary_search(ForwardIterator first, ForwardIterator last, '>
   <Char Tab >
   <Char Tab >
   <String `const T& value,'>
  >
 > # end of Para
 <Para 
  <Unique 7103>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <Char Tab >
   <String `Compare comp);'>
  >
 > # end of Para
 <Para 
  <Unique 7104>
  <PgfTag `body'>
  <ParaLine 
   <Font 
    <FTag `program'>
   > # end of Font
   <String `binary_search'>
   <Font 
    <FTag `'>
   > # end of Font
   <String ` returns '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `true'>
   <Font 
    <FTag `'>
   > # end of Font
   <String ` if there is an iterator '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `i'>
   <Font 
    <FTag `'>
   > # end of Font
   <String ` in the range'>
   <Font 
    <FTag `program'>
   > # end of Font
   <String ` [first last)'>
   <Font 
    <FTag `'>
   > # end of Font
   <String ` that satisfies the '>
  >
  <ParaLine 
   <String `corresponding conditions: '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `!(*i < value) && !(value < *i) '>
   <Font 
    <FTag `'>
   > # end of Font
   <String `or '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `comp(*i, value) == false && '>
  >
  <ParaLine 
   <String `comp(value, *i) == false'>
   <Font 
    <FTag `'>
   > # end of Font
   <String `. At most '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `log(last - first)'>
   <Font 
    <FTag `'>
   > # end of Font
   <String ` '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `+ '>
   <String `2'>
   <Font 
    <FTag `'>
   > # end of Font
   <String ` c'>
   <String `omparisons are done.'>
  >
 > # end of Para
 <Para 
  <Unique 7049>
  <PgfTag `subsubsection'>
  <PgfNumString `10.3.4 '>
  <ParaLine 
   <String `Merge'>
  >
 > # end of Para
 <Para 
  <Unique 7050>
  <PgfTag `program'>
  <ParaLine 
  >
 > # end of Para
 <Para 
  <Unique 7051>
  <PgfTag `program'>
  <ParaLine 
   <String `template <class InputIterator1, class InputIterator2, class OutputIterator\>'>
  >
 > # end of Para
 <Para 
  <Unique 7052>
  <PgfTag `program'>
  <ParaLine 
   <String `OutputIterator merge(InputIterator1 first1, InputIterator1 last1, '>
  >
 > # end of Para
 <Para 
  <Unique 8277>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <Char Tab >
   <String `InputIterator2 first2, '>
   <Char Tab >
   <Char Tab >
   <String `InputIterator2 last2, '>
   <Char Tab >
   <Char Tab >
   <Char Tab >
  >
 > # end of Para
 <Para 
  <Unique 7726>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <Char Tab >
   <String `OutputIterator result);'>
  >
 > # end of Para
 <Para 
  <Unique 7054>
  <PgfTag `program'>
  <ParaLine 
  >
 > # end of Para
 <Para 
  <Unique 7055>
  <PgfTag `program'>
  <ParaLine 
   <String `template <class InputIterator1, class InputIterator2, class OutputIterator, '>
  >
 > # end of Para
 <Para 
  <Unique 7731>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <String `class Compare\>'>
  >
 > # end of Para
 <Para 
  <Unique 7056>
  <PgfTag `program'>
  <ParaLine 
   <String `OutputIterator merge(InputIterator1 first1, InputIterator1 last1, '>
  >
 > # end of Para
 <Para 
  <Unique 8278>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <Char Tab >
   <String `InputIterator2 first2, '>
   <Char Tab >
   <Char Tab >
   <String `InputIterator2 last2,'>
  >
 > # end of Para
 <Para 
  <Unique 7744>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <Char Tab >
   <String `OutputIterator result, Compare comp);'>
  >
 > # end of Para
 <Para 
  <Unique 7058>
  <PgfTag `body'>
  <ParaLine 
   <TextRectID 81>
   <Font 
    <FTag `'>
    <FFamily `Courier'>
    <FPostScriptName `Courier'>
    <FSize  9.0 pt>
   > # end of Font
   <String `merge'>
   <Font 
    <FTag `'>
   > # end of Font
   <String ` merges two sorted ranges '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `[first1, last1)'>
   <Font 
    <FTag `'>
   > # end of Font
   <String ` and '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `[first2, last2)'>
   <Font 
    <FTag `'>
   > # end of Font
   <String ` into the range '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `[result, result '>
  >
  <ParaLine 
   <String `+ (last1 - first1) + (last2 - first2))'>
   <Font 
    <FTag `'>
   > # end of Font
   <String `. The merge is '>
   <Font 
    <FTag `Emphasis'>
   > # end of Font
   <String `stable'>
   <Font 
    <FTag `'>
   > # end of Font
   <String `, that is, for equal elements in the two '>
  >
  <ParaLine 
   <String `ranges, the elements from the first range always precede the elements from the second. '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `merge'>
   <Font 
    <FTag `'>
   > # end of Font
   <String ` returns '>
  >
  <ParaLine 
   <Font 
    <FTag `program'>
   > # end of Font
   <String `result + (last1 - first1) + (last2 - first2)'>
   <Font 
    <FTag `'>
   > # end of Font
   <String `. At most '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `(last1 - first1) + (last2 - first2) '>
  >
  <ParaLine 
   <String `- 1'>
   <Font 
    <FTag `'>
   > # end of Font
   <String ` comparisons are performed. The result of '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `merge'>
   <Font 
    <FTag `'>
   > # end of Font
   <String ` is undefined if the resulting range overlaps with either '>
  >
  <ParaLine 
   <String `of the original ranges.'>
  >
 > # end of Para
 <Para 
  <Unique 28910>
  <PgfTag `program'>
  <ParaLine 
  >
 > # end of Para
 <Para 
  <Unique 28920>
  <PgfTag `program'>
  <ParaLine 
   <String `template <class BidirectionalIterator\>'>
  >
 > # end of Para
 <Para 
  <Unique 28911>
  <PgfTag `program'>
  <ParaLine 
   <String `void inplace_merge(BidirectionalIterator first, BidirectionalIterator middle,'>
  >
 > # end of Para
 <Para 
  <Unique 28912>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <Char Tab >
   <String `BidirectionalIterator last);'>
  >
 > # end of Para
 <Para 
  <Unique 28913>
  <PgfTag `program'>
  <ParaLine 
  >
 > # end of Para
 <Para 
  <Unique 28914>
  <PgfTag `program'>
  <ParaLine 
   <String `template <class BidirectionalIterator, class Compare\>'>
  >
 > # end of Para
 <Para 
  <Unique 28915>
  <PgfTag `program'>
  <ParaLine 
   <String `void inplace_merge(BidirectionalIterator first, BidirectionalIterator middle,'>
  >
 > # end of Para
 <Para 
  <Unique 28916>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <Char Tab >
   <String `BidirectionalIterator last, Compare comp);'>
  >
 > # end of Para
 <Para 
  <Unique 28917>
  <PgfTag `body'>
  <ParaLine 
   <Font 
    <FTag `program'>
   > # end of Font
   <String `inplace_merge'>
   <Font 
    <FTag `'>
   > # end of Font
   <String ` merges two sorted consecutive ranges '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `[first, middle)'>
   <Font 
    <FTag `'>
   > # end of Font
   <String ` and '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `[middle, last)'>
   <Font 
    <FTag `'>
   > # end of Font
   <String ` putting the '>
  >
  <ParaLine 
   <String `result of the merge into the range '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `[first, last)'>
   <Font 
    <FTag `'>
   > # end of Font
   <String `. The merge is '>
   <Font 
    <FTag `Emphasis'>
   > # end of Font
   <String `stable, '>
   <Font 
    <FTag `'>
   > # end of Font
   <String `that is, for equal elements in the two '>
  >
  <ParaLine 
   <String `ranges, the elements from the first range always precede the elements from the second. '>
   <String `When enough '>
  >
  <ParaLine 
   <String `additional memory is available, a'>
   <String `t most '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `('>
   <String `last - first'>
   <String `)'>
   <String ` '>
   <String `- 1'>
   <Font 
    <FTag `'>
   > # end of Font
   <String ` c'>
   <String `omparisons are performed. If no additional '>
  >
  <ParaLine 
   <String `memory is available, '>
   <String `an algorithm with '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `O(N'>
   <String `logN'>
   <String `)'>
   <Font 
    <FTag `'>
   > # end of Font
   <String ` '>
   <String `complexity may be used'>
   <String `. '>
  >
 > # end of Para
 <Para 
  <Unique 6981>
  <PgfTag `subsubsection'>
  <PgfNumString `10.3.5 '>
  <ParaLine 
   <String `Set operations on sorted structures'>
  >
 > # end of Para
 <Para 
  <Unique 6982>
  <PgfTag `body'>
  <ParaLine 
   <String `This section defines all the basic set operations on sorted structures. They even work with multisets '>
  >
  <ParaLine 
   <String `containing multiple copies of equal elements. The semantics of the set operations is generalized to multisets '>
  >
  <ParaLine 
   <String `in a standard way by defining union to contain the maximum number of occurrences of every element, '>
  >
  <ParaLine 
   <String `intersection to contain the minimum, and so on. '>
  >
 > # end of Para
 <Para 
  <Unique 6983>
  <PgfTag `program'>
  <ParaLine 
  >
 > # end of Para
 <Para 
  <Unique 6984>
  <PgfTag `program'>
  <ParaLine 
   <String `template <class InputIterator1, class InputIterator2\>'>
  >
 > # end of Para
 <Para 
  <Unique 6985>
  <PgfTag `program'>
  <ParaLine 
   <String `bool includes(InputIterator1 first1, InputIterator1 last1, '>
  >
 > # end of Para
 <Para 
  <Unique 7753>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <Char Tab >
   <String `InputIterator2 first2, '>
   <Char Tab >
   <Char Tab >
   <String `InputIterator2 last2);'>
  >
 > # end of Para
 <Para 
  <Unique 6987>
  <PgfTag `program'>
  <ParaLine 
  >
 > # end of Para
 <Para 
  <Unique 6988>
  <PgfTag `program'>
  <ParaLine 
   <String `template <class InputIterator1, class InputIterator2, class Compare\>'>
  >
 > # end of Para
 <Para 
  <Unique 6989>
  <PgfTag `program'>
  <ParaLine 
   <String `bool includes(InputIterator1 first1, InputIterator1 last1,'>
  >
 > # end of Para
 <Para 
  <Unique 7763>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <Char Tab >
   <String `InputIterator2 first2, '>
   <Char Tab >
   <Char Tab >
   <String `InputIterator2 last2, '>
   <Char Tab >
   <Char Tab >
   <String `Compare comp);'>
  >
 > # end of Para
 <Para 
  <Unique 6991>
  <PgfTag `body'>
  <ParaLine 
   <Font 
    <FTag `'>
    <FFamily `Courier'>
    <FPostScriptName `Courier'>
    <FSize  9.0 pt>
   > # end of Font
   <String `includes'>
   <Font 
    <FTag `'>
   > # end of Font
   <String ` returns '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `true'>
   <Font 
    <FTag `'>
   > # end of Font
   <String ` if every element in the range'>
   <Font 
    <FTag `program'>
   > # end of Font
   <String ` [first2, last2)'>
   <Font 
    <FTag `'>
   > # end of Font
   <String ` is contained in the range '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `[first1, '>
  >
  <ParaLine 
   <String `last1)'>
   <Font 
    <FTag `'>
   > # end of Font
   <String `. It returns '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `false'>
   <Font 
    <FTag `'>
   > # end of Font
   <String ` otherwise. At most '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `((last1 - first1) + (last2 - first2)) * 2 - 1'>
   <Font 
    <FTag `'>
   > # end of Font
   <String ` '>
  >
  <ParaLine 
   <String `comparisons are performed.'>
  >
 > # end of Para
 <Para 
  <Unique 6992>
  <PgfTag `program'>
  <ParaLine 
  >
 > # end of Para
 <Para 
  <Unique 8187>
  <PgfTag `program'>
  <ParaLine 
   <String `template <class InputIterator1, class InputIterator2, class OutputIterator\>'>
  >
 > # end of Para
 <Para 
  <Unique 8188>
  <PgfTag `program'>
  <ParaLine 
   <String `OutputIterator set_union(InputIterator1 first1, InputIterator1 last1, '>
  >
  <ParaLine 
   <String `InputIterator2 first2, '>
   <Char Tab >
   <Char Tab >
   <String `InputIterator2 last2, '>
  >
 > # end of Para
 <Para 
  <Unique 7778>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <Char Tab >
   <String `OutputIterator result);'>
  >
 > # end of Para
 <Para 
  <Unique 6996>
  <PgfTag `program'>
  <ParaLine 
  >
 > # end of Para
 <Para 
  <Unique 6997>
  <PgfTag `program'>
  <ParaLine 
   <String `template <class InputIterator1, class InputIterator2, class OutputIterator, class '>
  >
  <ParaLine 
   <String `Compare\>'>
  >
 > # end of Para
 <Para 
  <Unique 6998>
  <PgfTag `program'>
  <ParaLine 
   <String `OutputIterator set_union(InputIterator1 first1, InputIterator1 last1, '>
  >
  <ParaLine 
   <String `InputIterator2 first2, '>
   <Char Tab >
   <Char Tab >
   <String `InputIterator2 last2,'>
  >
 > # end of Para
 <Para 
  <Unique 7794>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <Char Tab >
   <String `OutputIterator result, Compare comp);'>
  >
 > # end of Para
 <Para 
  <Unique 7000>
  <PgfTag `body'>
  <ParaLine 
   <Font 
    <FTag `'>
    <FFamily `Courier'>
    <FPostScriptName `Courier'>
    <FSize  9.0 pt>
   > # end of Font
   <String `set_union'>
   <Font 
    <FTag `'>
   > # end of Font
   <String ` constructs a sorted union of the elements from the two ranges. It returns the end of the '>
  >
  <ParaLine 
   <String `constructed range. '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `set_union'>
   <Font 
    <FTag `'>
   > # end of Font
   <String ` is stable, that is, if an element is present in both ranges, the one from the first '>
  >
  <ParaLine 
   <String `range is copied. At most '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `((last1 - first1) + (last2 - first2)) * 2 - 1'>
   <Font 
    <FTag `'>
   > # end of Font
   <String ` comparisons are performed. '>
  >
  <ParaLine 
   <String `The result of '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `set_union'>
   <Font 
    <FTag `'>
   > # end of Font
   <String ` is undefined if the resulting range overlaps with either of the original ranges.'>
  >
 > # end of Para
 <Para 
  <Unique 7001>
  <PgfTag `program'>
  <ParaLine 
  >
 > # end of Para
 <Para 
  <Unique 7002>
  <PgfTag `program'>
  <ParaLine 
   <String `template <class InputIterator1, class InputIterator2, class OutputIterator\>'>
  >
 > # end of Para
 <Para 
  <Unique 7003>
  <PgfTag `program'>
  <ParaLine 
   <String `OutputIterator set_intersection(InputIterator1 first1, InputIterator1 last1,'>
  >
 > # end of Para
 <Para 
  <Unique 7004>
  <PgfTag `program'>
  <ParaLine 
   <TextRectID 82>
   <Char Tab >
   <Char Tab >
   <String `InputIterator2 first2, '>
   <Char Tab >
   <Char Tab >
   <String `InputIterator2 last2, '>
  >
 > # end of Para
 <Para 
  <Unique 7806>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <Char Tab >
   <String `OutputIterator result);'>
  >
 > # end of Para
 <Para 
  <Unique 7005>
  <PgfTag `program'>
  <ParaLine 
  >
 > # end of Para
 <Para 
  <Unique 7006>
  <PgfTag `program'>
  <ParaLine 
   <String `template <class InputIterator1, class InputIterator2, class OutputIterator, '>
  >
 > # end of Para
 <Para 
  <Unique 7810>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <String `class Compare\>'>
  >
 > # end of Para
 <Para 
  <Unique 7007>
  <PgfTag `program'>
  <ParaLine 
   <String `OutputIterator set_intersection(InputIterator1 first1, InputIterator1 last1,'>
  >
 > # end of Para
 <Para 
  <Unique 7008>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <Char Tab >
   <String `InputIterator2 first2,'>
   <Char HardSpace >
   <Char Tab >
   <Char Tab >
   <String `InputIterator2 last2, '>
   <Char Tab >
   <Char Tab >
   <Char Tab >
   <String `OutputIterator result, '>
   <Char Tab >
   <Char Tab >
  >
  <ParaLine 
   <String `Compare comp);'>
  >
 > # end of Para
 <Para 
  <Unique 7010>
  <PgfTag `body'>
  <ParaLine 
   <Font 
    <FTag `'>
    <FFamily `Courier'>
    <FPostScriptName `Courier'>
    <FSize  9.0 pt>
   > # end of Font
   <String `set_intersection'>
   <Font 
    <FTag `'>
   > # end of Font
   <String ` constructs a sorted intersection of the elements from the two ranges. It returns the end '>
  >
  <ParaLine 
   <String `of the constructed range. '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `set_intersection'>
   <Font 
    <FTag `'>
   > # end of Font
   <String ` is guaranteed to be stable, that is, if an element is present in '>
  >
  <ParaLine 
   <String `both ranges, the one from the first range is copied. At most '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `((last1 - first1) + (last2 - first2)) * '>
  >
  <ParaLine 
   <String `2 - 1'>
   <Font 
    <FTag `'>
   > # end of Font
   <String ` comparisons are performed. The result of '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `set_intersection'>
   <Font 
    <FTag `'>
   > # end of Font
   <String ` is undefined if the resulting range '>
  >
  <ParaLine 
   <String `overlaps with either of the original ranges.'>
  >
 > # end of Para
 <Para 
  <Unique 7011>
  <PgfTag `program'>
  <ParaLine 
  >
 > # end of Para
 <Para 
  <Unique 7012>
  <PgfTag `program'>
  <ParaLine 
   <String `template <class InputIterator1, class InputIterator2, class OutputIterator\>'>
  >
 > # end of Para
 <Para 
  <Unique 7013>
  <PgfTag `program'>
  <ParaLine 
   <String `OutputIterator set_difference(InputIterator1 first1, InputIterator1 last1,'>
  >
 > # end of Para
 <Para 
  <Unique 7014>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <Char Tab >
   <String `InputIterator2 first2, '>
   <Char Tab >
   <Char Tab >
   <String `InputIterator2 last2, '>
   <Char Tab >
   <Char Tab >
   <Char Tab >
  >
 > # end of Para
 <Para 
  <Unique 7828>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <Char Tab >
   <String `OutputIterator result);'>
  >
 > # end of Para
 <Para 
  <Unique 7015>
  <PgfTag `program'>
  <ParaLine 
  >
 > # end of Para
 <Para 
  <Unique 7016>
  <PgfTag `program'>
  <ParaLine 
   <String `template <class InputIterator1, class InputIterator2, class OutputIterator, '>
  >
 > # end of Para
 <Para 
  <Unique 7833>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <String `class Compare\>'>
  >
 > # end of Para
 <Para 
  <Unique 7017>
  <PgfTag `program'>
  <ParaLine 
   <String `OutputIterator set_difference(InputIterator1 first1, InputIterator1 last1,'>
  >
 > # end of Para
 <Para 
  <Unique 7018>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <Char Tab >
   <String `InputIterator2 first2, '>
   <Char Tab >
   <Char Tab >
   <String `InputIterator2 last2, '>
  >
 > # end of Para
 <Para 
  <Unique 7840>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <Char Tab >
   <String `OutputIterator result, '>
   <Char Tab >
   <Char Tab >
   <String `Compare comp);'>
  >
 > # end of Para
 <Para 
  <Unique 7020>
  <PgfTag `body'>
  <ParaLine 
   <Font 
    <FTag `'>
    <FFamily `Courier'>
    <FPostScriptName `Courier'>
    <FSize  9.0 pt>
   > # end of Font
   <String `set_difference'>
   <Font 
    <FTag `'>
   > # end of Font
   <String ` constructs a sorted difference of the elements from the two ranges. It returns the end of '>
  >
  <ParaLine 
   <String `the constructed range. At most '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `((last1 - first1) + (last2 - first2)) * 2 - 1'>
   <Font 
    <FTag `'>
   > # end of Font
   <String ` comparisons are '>
  >
  <ParaLine 
   <String `performed. The result of '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `set_difference'>
   <Font 
    <FTag `'>
   > # end of Font
   <String ` is undefined if the resulting range overlaps with either of the '>
  >
  <ParaLine 
   <String `original ranges.'>
  >
 > # end of Para
 <Para 
  <Unique 7021>
  <PgfTag `program'>
  <ParaLine 
  >
 > # end of Para
 <Para 
  <Unique 7022>
  <PgfTag `program'>
  <ParaLine 
   <String `template <class InputIterator1, class InputIterator2, class OutputIterator\>'>
  >
 > # end of Para
 <Para 
  <Unique 7023>
  <PgfTag `program'>
  <ParaLine 
   <String `OutputIterator set_symmetric_difference(InputIterator1 first1, InputIterator1 '>
  >
  <ParaLine 
   <String `last1, '>
   <Char Tab >
   <Char Tab >
   <String `InputIterator2 first2, '>
   <Char Tab >
   <Char Tab >
   <Char Tab >
   <String `InputIterator2 last2, '>
  >
 > # end of Para
 <Para 
  <Unique 7854>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <Char Tab >
   <String `OutputIterator result);'>
  >
 > # end of Para
 <Para 
  <Unique 7025>
  <PgfTag `program'>
  <ParaLine 
  >
 > # end of Para
 <Para 
  <Unique 7026>
  <PgfTag `program'>
  <ParaLine 
   <String `template <class InputIterator1, class InputIterator2, class OutputIterator, '>
  >
 > # end of Para
 <Para 
  <Unique 7859>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <String `class Compare\>'>
  >
 > # end of Para
 <Para 
  <Unique 7027>
  <PgfTag `program'>
  <ParaLine 
   <String `OutputIterator set_symmetric_difference(InputIterator1 first1, InputIterator1 '>
  >
  <ParaLine 
   <String `last1, '>
   <Char Tab >
   <Char Tab >
   <String `InputIterator2 first2, '>
   <Char Tab >
   <Char Tab >
   <Char Tab >
   <String `InputIterator2 last2, '>
  >
 > # end of Para
 <Para 
  <Unique 7866>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <Char Tab >
   <String `OutputIterator result, '>
   <Char Tab >
   <Char Tab >
   <String `Compare comp);'>
  >
 > # end of Para
 <Para 
  <Unique 7030>
  <PgfTag `body'>
  <ParaLine 
   <Font 
    <FTag `'>
    <FFamily `Courier'>
    <FPostScriptName `Courier'>
    <FSize  9.0 pt>
   > # end of Font
   <String `set_symmetric_difference'>
   <Font 
    <FTag `'>
   > # end of Font
   <String ` constructs a sorted symmetric difference of the elements from the two ranges. '>
  >
  <ParaLine 
   <String `It returns the end of the constructed range. At most '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `((last1 - first1) + (last2 - first2)) * 2 - 1'>
   <Font 
    <FTag `'>
   > # end of Font
   <String ` '>
  >
  <ParaLine 
   <String `comparisons are performed. The result of '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `set_symmetric_difference'>
   <Font 
    <FTag `'>
   > # end of Font
   <String ` is undefined if the resulting range '>
  >
  <ParaLine 
   <String `overlaps with either of the original ranges.'>
  >
 > # end of Para
 <Para 
  <Unique 1295>
  <PgfTag `subsubsection'>
  <PgfNumString `10.3.6 '>
  <ParaLine 
   <String `Heap operations'>
  >
 > # end of Para
 <Para 
  <Unique 590>
  <PgfTag `body'>
  <ParaLine 
   <String `A heap is a particular organization of elements in a range between two random access iterators '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `[a, b)'>
   <Font 
    <FTag `'>
   > # end of Font
   <String `. Its '>
  >
  <ParaLine 
   <String `two key properties are: (1) '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `*a'>
   <Font 
    <FTag `'>
   > # end of Font
   <String ` is the largest element in the range and (2) '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `*a'>
   <Font 
    <FTag `'>
   > # end of Font
   <String ` may be removed by '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `pop_heap'>
   <Font 
    <FTag `'>
   > # end of Font
   <String `, '>
  >
  <ParaLine 
   <String `or a new element added by '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `push_heap'>
   <Font 
    <FTag `'>
   > # end of Font
   <String `, in O('>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `logN'>
   <Font 
    <FTag `'>
   > # end of Font
   <String `) time. These properties make heaps useful as priority '>
  >
  <ParaLine 
   <String `queues. '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `make_heap'>
   <Font 
    <FTag `'>
   > # end of Font
   <String ` converts a range into a heap and '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `sort_heap'>
   <Font 
    <FTag `'>
   > # end of Font
   <String ` turns a heap into a sorted sequence.'>
  >
 > # end of Para
 <Para 
  <Unique 752>
  <PgfTag `program'>
  <ParaLine 
  >
 > # end of Para
 <Para 
  <Unique 1657>
  <PgfTag `program'>
  <ParaLine 
   <String `template <class RandomAccessIterator\>'>
  >
 > # end of Para
 <Para 
  <Unique 1656>
  <PgfTag `program'>
  <ParaLine 
   <String `void push_heap(RandomAccessIterator first, RandomAccessIterator last);'>
  >
 > # end of Para
 <Para 
  <Unique 1658>
  <PgfTag `program'>
  <ParaLine 
  >
 > # end of Para
 <Para 
  <Unique 1667>
  <PgfTag `program'>
  <ParaLine 
   <String `template <class RandomAccessIterator, class Compare\>'>
  >
 > # end of Para
 <Para 
  <Unique 1668>
  <PgfTag `program'>
  <ParaLine 
   <String `void push_heap(RandomAccessIterator first, RandomAccessIterator last,'>
  >
 > # end of Para
 <Para 
  <Unique 1671>
  <PgfTag `program'>
  <ParaLine 
   <TextRectID 83>
   <Char Tab >
   <Char Tab >
   <String `Compare comp);'>
  >
 > # end of Para
 <Para 
  <Unique 1433>
  <PgfTag `body'>
  <ParaLine 
   <Font 
    <FTag `program'>
   > # end of Font
   <String `push_heap'>
   <Font 
    <FTag `'>
   > # end of Font
   <String ` assumes the range '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `[first, last - 1)'>
   <Font 
    <FTag `'>
   > # end of Font
   <String ` is a valid heap and properly places the value in the '>
  >
  <ParaLine 
   <String `location '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `last - 1'>
   <Font 
    <FTag `'>
   > # end of Font
   <String ` into the resulting heap '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `[first, last)'>
   <Font 
    <FTag `'>
   > # end of Font
   <String `. At most '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `log(last - first)'>
   <Font 
    <FTag `'>
   > # end of Font
   <String ` comparisons are '>
  >
  <ParaLine 
   <String `performed.'>
  >
 > # end of Para
 <Para 
  <Unique 1670>
  <PgfTag `program'>
  <ParaLine 
  >
 > # end of Para
 <Para 
  <Unique 1659>
  <PgfTag `program'>
  <ParaLine 
   <String `template <class RandomAccessIterator\>'>
  >
 > # end of Para
 <Para 
  <Unique 1660>
  <PgfTag `program'>
  <ParaLine 
   <String `void pop_heap(RandomAccessIterator first, RandomAccessIterator last);'>
  >
 > # end of Para
 <Para 
  <Unique 1673>
  <PgfTag `program'>
  <ParaLine 
  >
 > # end of Para
 <Para 
  <Unique 1661>
  <PgfTag `program'>
  <ParaLine 
   <String `template <class RandomAccessIterator, class Compare\>'>
  >
 > # end of Para
 <Para 
  <Unique 1669>
  <PgfTag `program'>
  <ParaLine 
   <String `void pop_heap(RandomAccessIterator first, RandomAccessIterator last,'>
  >
 > # end of Para
 <Para 
  <Unique 1672>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <Char Tab >
   <String `Compare comp);'>
  >
 > # end of Para
 <Para 
  <Unique 1761>
  <PgfTag `body'>
  <ParaLine 
   <Font 
    <FTag `program'>
   > # end of Font
   <String `pop_heap'>
   <Font 
    <FTag `'>
   > # end of Font
   <String ` assumes the range '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `[first, last)'>
   <Font 
    <FTag `'>
   > # end of Font
   <String ` is a valid heap, then swaps the value in the location '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `first'>
   <Font 
    <FTag `'>
   > # end of Font
   <String ` '>
  >
  <ParaLine 
   <String `with the value in the location '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `last - 1'>
   <Font 
    <FTag `'>
   > # end of Font
   <String ` and makes '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `[first, last - 1)'>
   <Font 
    <FTag `'>
   > # end of Font
   <String ` into a heap. At most '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `2 * log(last '>
  >
  <ParaLine 
   <String `- first)'>
   <Font 
    <FTag `'>
   > # end of Font
   <String ` comparisons are performed.'>
  >
 > # end of Para
 <Para 
  <Unique 1682>
  <PgfTag `program'>
  <ParaLine 
  >
 > # end of Para
 <Para 
  <Unique 1662>
  <PgfTag `program'>
  <ParaLine 
   <String `template <class RandomAccessIterator\>'>
  >
 > # end of Para
 <Para 
  <Unique 1663>
  <PgfTag `program'>
  <ParaLine 
   <String `void make_heap(RandomAccessIterator first, RandomAccessIterator last);'>
  >
 > # end of Para
 <Para 
  <Unique 1680>
  <PgfTag `program'>
  <ParaLine 
  >
 > # end of Para
 <Para 
  <Unique 1664>
  <PgfTag `program'>
  <ParaLine 
   <String `template <class RandomAccessIterator, class Compare\>'>
  >
 > # end of Para
 <Para 
  <Unique 1678>
  <PgfTag `program'>
  <ParaLine 
   <String `void make_heap(RandomAccessIterator first, RandomAccessIterator last,'>
  >
 > # end of Para
 <Para 
  <Unique 1679>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <Char Tab >
   <String `Compare comp);'>
  >
 > # end of Para
 <Para 
  <Unique 1762>
  <PgfTag `body'>
  <ParaLine 
   <Font 
    <FTag `program'>
   > # end of Font
   <String `make_heap'>
   <Font 
    <FTag `'>
   > # end of Font
   <String ` constructs a heap out of the range '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `[first, last)'>
   <Font 
    <FTag `'>
   > # end of Font
   <String `. At most '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `3*(last - first)'>
   <Font 
    <FTag `'>
   > # end of Font
   <String ` comparisons '>
  >
  <ParaLine 
   <String `are performed.'>
  >
 > # end of Para
 <Para 
  <Unique 1681>
  <PgfTag `program'>
  <ParaLine 
  >
 > # end of Para
 <Para 
  <Unique 1665>
  <PgfTag `program'>
  <ParaLine 
   <String `template <class RandomAccessIterator\>'>
  >
 > # end of Para
 <Para 
  <Unique 1666>
  <PgfTag `program'>
  <ParaLine 
   <String `void sort_heap(RandomAccessIterator first, RandomAccessIterator last);'>
  >
 > # end of Para
 <Para 
  <Unique 1677>
  <PgfTag `program'>
  <ParaLine 
  >
 > # end of Para
 <Para 
  <Unique 1674>
  <PgfTag `program'>
  <ParaLine 
   <String `template <class RandomAccessIterator, class Compare\>'>
  >
 > # end of Para
 <Para 
  <Unique 1675>
  <PgfTag `program'>
  <ParaLine 
   <String `void sort_heap(RandomAccessIterator first, RandomAccessIterator last,'>
  >
 > # end of Para
 <Para 
  <Unique 1676>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <Char Tab >
   <String `Compare comp);'>
  >
 > # end of Para
 <Para 
  <Unique 8370>
  <PgfTag `body'>
  <ParaLine 
   <Font 
    <FTag `program'>
   > # end of Font
   <String `sort_heap'>
   <Font 
    <FTag `'>
   > # end of Font
   <String ` sorts elements in the heap '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `[first, last)'>
   <Font 
    <FTag `'>
   > # end of Font
   <String `. At most '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `NlogN'>
   <Font 
    <FTag `'>
   > # end of Font
   <String ` comparisons are performed where '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `N'>
   <Font 
    <FTag `'>
   > # end of Font
   <String ` '>
  >
  <ParaLine 
   <String `is equal to '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `last - first'>
   <Font 
    <FTag `'>
   > # end of Font
   <String `. '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `sort_heap'>
   <Font 
    <FTag `'>
   > # end of Font
   <String ` is not stable.'>
  >
 > # end of Para
 <Para 
  <Unique 8375>
  <PgfTag `subsubsection'>
  <PgfNumString `10.3.7 '>
  <ParaLine 
   <String `Minimum and maximum'>
  >
 > # end of Para
 <Para 
  <Unique 8376>
  <PgfTag `program'>
  <ParaLine 
  >
 > # end of Para
 <Para 
  <Unique 8774>
  <PgfTag `program'>
  <ParaLine 
   <String `template <class T\>'>
  >
 > # end of Para
 <Para 
  <Unique 8775>
  <PgfTag `program'>
  <ParaLine 
   <String `const T& m'>
   <String `in(const T& a, const T& b);'>
  >
 > # end of Para
 <Para 
  <Unique 8776>
  <PgfTag `program'>
  <ParaLine 
  >
 > # end of Para
 <Para 
  <Unique 8777>
  <PgfTag `program'>
  <ParaLine 
   <String `template <class T, class Compare\>'>
  >
 > # end of Para
 <Para 
  <Unique 8778>
  <PgfTag `program'>
  <ParaLine 
   <String `const T& m'>
   <String `in(const T& a, const T& b, Compare comp);'>
  >
 > # end of Para
 <Para 
  <Unique 8779>
  <PgfTag `program'>
  <ParaLine 
  >
 > # end of Para
 <Para 
  <Unique 8780>
  <PgfTag `program'>
  <ParaLine 
   <String `template <class T\>'>
  >
 > # end of Para
 <Para 
  <Unique 8781>
  <PgfTag `program'>
  <ParaLine 
   <String `const T& m'>
   <String `ax(const T& a, const T& b);'>
  >
 > # end of Para
 <Para 
  <Unique 8782>
  <PgfTag `program'>
  <ParaLine 
  >
 > # end of Para
 <Para 
  <Unique 8783>
  <PgfTag `program'>
  <ParaLine 
   <String `template <class T, class Compare\>'>
  >
 > # end of Para
 <Para 
  <Unique 8784>
  <PgfTag `program'>
  <ParaLine 
   <String `const T& m'>
   <String `ax(const T& a, const T& b, Compare comp);'>
  >
 > # end of Para
 <Para 
  <Unique 8785>
  <PgfTag `body'>
  <ParaLine 
   <Font 
    <FTag `program'>
   > # end of Font
   <String `min'>
   <Font 
    <FTag `'>
   > # end of Font
   <String ` returns the smaller and '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `max'>
   <Font 
    <FTag `'>
   > # end of Font
   <String ` the larger. '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `min'>
   <Font 
    <FTag `'>
   > # end of Font
   <String ` and '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `max'>
   <Font 
    <FTag `'>
   > # end of Font
   <String ` return the first argument when their arguments are '>
  >
  <ParaLine 
   <String `equal.'>
  >
 > # end of Para
 <Para 
  <Unique 8377>
  <PgfTag `program'>
  <ParaLine 
  >
 > # end of Para
 <Para 
  <Unique 8800>
  <PgfTag `program'>
  <ParaLine 
   <String `template <class '>
   <String `ForwardIterator\>'>
  >
 > # end of Para
 <Para 
  <Unique 8378>
  <PgfTag `program'>
  <ParaLine 
   <String `ForwardIterator m'>
   <String `ax_element('>
   <String `ForwardIterator f'>
   <String `irst, '>
   <String `ForwardIterator l'>
   <String `ast);'>
  >
 > # end of Para
 <Para 
  <Unique 8379>
  <PgfTag `program'>
  <ParaLine 
  >
 > # end of Para
 <Para 
  <Unique 8380>
  <PgfTag `program'>
  <ParaLine 
   <String `template <class '>
   <String `ForwardIterator,'>
   <String ` class Compare\>'>
  >
 > # end of Para
 <Para 
  <Unique 8381>
  <PgfTag `program'>
  <ParaLine 
   <String `ForwardIterator m'>
   <String `ax_element('>
   <String `ForwardIterator f'>
   <String `irst, '>
   <String `ForwardIterator l'>
   <String `ast'>
   <String `,'>
  >
 > # end of Para
 <Para 
  <Unique 9278>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <Char Tab >
   <String `C'>
   <String `ompare comp);'>
  >
 > # end of Para
 <Para 
  <Unique 8382>
  <PgfTag `body'>
  <ParaLine 
   <TextRectID 84>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `max_element'>
   <Font 
    <FTag `'>
   > # end of Font
   <String ` returns the first iterator '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `i'>
   <Font 
    <FTag `'>
   > # end of Font
   <String ` in the range '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `[first, last)'>
   <Font 
    <FTag `'>
   > # end of Font
   <String ` such that for any iterator'>
   <Font 
    <FTag `program'>
   > # end of Font
   <String ` j'>
   <Font 
    <FTag `'>
   > # end of Font
   <String ` in the range '>
  >
  <ParaLine 
   <Font 
    <FTag `program'>
   > # end of Font
   <String `[first, last)'>
   <Font 
    <FTag `'>
   > # end of Font
   <String ` the following corresponding conditions hold:'>
   <Font 
    <FTag `program'>
   > # end of Font
   <String ` !(*i < *j) '>
   <Font 
    <FTag `'>
   > # end of Font
   <String `or '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `comp(*i, *j) == false'>
   <Font 
    <FTag `'>
   > # end of Font
   <String `. '>
  >
  <ParaLine 
   <String `Exactly '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `max((last - first) - 1, 0)'>
   <Font 
    <FTag `'>
   > # end of Font
   <String ` applications of the corresponding comparisons are done.'>
  >
 > # end of Para
 <Para 
  <Unique 8383>
  <PgfTag `program'>
  <ParaLine 
  >
 > # end of Para
 <Para 
  <Unique 8384>
  <PgfTag `program'>
  <ParaLine 
   <String `template <class '>
   <String `ForwardIterator\>'>
  >
 > # end of Para
 <Para 
  <Unique 8385>
  <PgfTag `program'>
  <ParaLine 
   <String `ForwardIterator m'>
   <String `in_element('>
   <String `ForwardIterator f'>
   <String `irst, '>
   <String `ForwardIterator l'>
   <String `ast);'>
  >
 > # end of Para
 <Para 
  <Unique 8386>
  <PgfTag `program'>
  <ParaLine 
  >
 > # end of Para
 <Para 
  <Unique 8387>
  <PgfTag `program'>
  <ParaLine 
   <String `template <class '>
   <String `ForwardIterator,'>
   <String ` class Compare\>'>
  >
 > # end of Para
 <Para 
  <Unique 8388>
  <PgfTag `program'>
  <ParaLine 
   <String `ForwardIterator m'>
   <String `in_element('>
   <String `ForwardIterator f'>
   <String `irst, '>
   <String `ForwardIterator l'>
   <String `ast'>
   <String `,'>
  >
 > # end of Para
 <Para 
  <Unique 9280>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <Char Tab >
   <String `C'>
   <String `ompare comp);'>
  >
 > # end of Para
 <Para 
  <Unique 8389>
  <PgfTag `body'>
  <ParaLine 
   <Font 
    <FTag `program'>
   > # end of Font
   <String `min_element'>
   <Font 
    <FTag `'>
   > # end of Font
   <String ` returns the first iterator '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `i'>
   <Font 
    <FTag `'>
   > # end of Font
   <String ` in the range '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `[first, last)'>
   <Font 
    <FTag `'>
   > # end of Font
   <String ` such that for any iterator'>
   <Font 
    <FTag `program'>
   > # end of Font
   <String ` j'>
   <Font 
    <FTag `'>
   > # end of Font
   <String ` in the range '>
  >
  <ParaLine 
   <Font 
    <FTag `program'>
   > # end of Font
   <String `[first, last)'>
   <Font 
    <FTag `'>
   > # end of Font
   <String ` the following corresponding conditions hold:'>
   <Font 
    <FTag `program'>
   > # end of Font
   <String ` !(*j < *i) '>
   <Font 
    <FTag `'>
   > # end of Font
   <String `or '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `comp(*j, *i) == false'>
   <Font 
    <FTag `'>
   > # end of Font
   <String `. '>
  >
  <ParaLine 
   <String `Exactly '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `max((last - first) - 1, 0)'>
   <Font 
    <FTag `'>
   > # end of Font
   <String `applications of the corresponding comparisons are done.'>
  >
 > # end of Para
 <Para 
  <Unique 8416>
  <PgfTag `subsubsection'>
  <PgfNumString `10.3.8 '>
  <ParaLine 
   <String `Lexicographical comparison'>
  >
 > # end of Para
 <Para 
  <Unique 8417>
  <PgfTag `program'>
  <ParaLine 
  >
 > # end of Para
 <Para 
  <Unique 8418>
  <PgfTag `program'>
  <ParaLine 
   <String `template <class InputIterator1, class InputIterator2\>'>
  >
 > # end of Para
 <Para 
  <Unique 8419>
  <PgfTag `program'>
  <ParaLine 
   <String `bool lexicographical_compare(InputIterator1 first1, InputIterator1 last1, '>
  >
 > # end of Para
 <Para 
  <Unique 8420>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <Char Tab >
   <String `InputIterator2 first2, '>
   <Char Tab >
   <Char Tab >
   <Char Tab >
   <String `InputIterator2 last2);'>
  >
 > # end of Para
 <Para 
  <Unique 8421>
  <PgfTag `program'>
  <ParaLine 
  >
 > # end of Para
 <Para 
  <Unique 8422>
  <PgfTag `program'>
  <ParaLine 
   <String `template <class InputIterator1, class InputIterator2, class Compare\>'>
  >
 > # end of Para
 <Para 
  <Unique 8423>
  <PgfTag `program'>
  <ParaLine 
   <String `bool lexicographical_compare(InputIterator1 first1, InputIterator1 last1, '>
  >
 > # end of Para
 <Para 
  <Unique 8424>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <Char Tab >
   <String `InputIterator2 first2,'>
   <Char Tab >
   <Char Tab >
   <Char Tab >
   <String ` InputIterator2 last2, Compare comp);'>
  >
 > # end of Para
 <Para 
  <Unique 8425>
  <PgfTag `body'>
  <ParaLine 
   <Font 
    <FTag `'>
    <FFamily `Courier'>
    <FPostScriptName `Courier'>
    <FSize  9.0 pt>
   > # end of Font
   <String `lexicographical_compare'>
   <Font 
    <FTag `'>
   > # end of Font
   <String ` returns'>
   <String ` '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `true'>
   <Font 
    <FTag `'>
   > # end of Font
   <String ` if the sequence of elements defined by the range '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `[first1, '>
  >
  <ParaLine 
   <String `last1) '>
   <Font 
    <FTag `'>
   > # end of Font
   <String `is lexicographically less than the sequence of elements defined by the range '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `[first2, last2)'>
   <Font 
    <FTag `'>
   > # end of Font
   <String `. It '>
  >
  <ParaLine 
   <String `returns '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `false'>
   <Font 
    <FTag `'>
   > # end of Font
   <String ` otherwise. At most '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `2 * '>
   <String `min((last1 - first1), (last2 - first2))'>
   <Font 
    <FTag `'>
   > # end of Font
   <String ` applications of the '>
  >
  <ParaLine 
   <String `corresponding comparison are done.'>
  >
 > # end of Para
 <Para 
  <Unique 28926>
  <PgfTag `subsubsection'>
  <PgfNumString `10.3.9 '>
  <ParaLine 
   <String `Permutation generators'>
  >
 > # end of Para
 <Para 
  <Unique 28927>
  <PgfTag `program'>
  <ParaLine 
  >
 > # end of Para
 <Para 
  <Unique 28928>
  <PgfTag `program'>
  <ParaLine 
   <String `template <class BidirectionalIterator\>'>
  >
 > # end of Para
 <Para 
  <Unique 28929>
  <PgfTag `program'>
  <ParaLine 
   <String `bool next_permutation(BidirectionalIterator first, BidirectionalIterator last);'>
  >
 > # end of Para
 <Para 
  <Unique 28930>
  <PgfTag `program'>
  <ParaLine 
  >
 > # end of Para
 <Para 
  <Unique 28931>
  <PgfTag `program'>
  <ParaLine 
   <String `template <class BidirectionalIterator, class Compare\>'>
  >
 > # end of Para
 <Para 
  <Unique 28932>
  <PgfTag `program'>
  <ParaLine 
   <String `bool next_permutation(BidirectionalIterator first, BidirectionalIterator last,'>
  >
 > # end of Para
 <Para 
  <Unique 28933>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <Char Tab >
   <String `Compare comp);'>
  >
 > # end of Para
 <Para 
  <Unique 28934>
  <PgfTag `body'>
  <ParaLine 
   <Font 
    <FTag `'>
    <FFamily `Courier'>
    <FPostScriptName `Courier'>
    <FSize  9.0 pt>
   > # end of Font
   <String `next_permutation'>
   <Font 
    <FTag `'>
   > # end of Font
   <String ` takes a sequence defined by the range '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `[first, last)'>
   <Font 
    <FTag `'>
   > # end of Font
   <String ` and transforms it into the '>
   <Font 
    <FTag `Emphasis'>
   > # end of Font
   <String `next'>
   <Font 
    <FTag `'>
   > # end of Font
   <String ` '>
  >
  <ParaLine 
   <String `permutation. The next permutation is found by assuming that the set of all permutations is '>
  >
  <ParaLine 
   <String `lexicographically sorted with respect to '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `operator<'>
   <Font 
    <FTag `'>
   > # end of Font
   <String ` or '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `comp'>
   <Font 
    <FTag `'>
   > # end of Font
   <String `. If such a permutation exists, it returns '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `true'>
   <Font 
    <FTag `'>
   > # end of Font
   <String `. '>
  >
  <ParaLine 
   <String `Otherwise, it transforms the sequence into the smallest permutation, that is, the ascendingly sorted one, and '>
  >
  <ParaLine 
   <String `returns '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `false'>
   <Font 
    <FTag `'>
   > # end of Font
   <String `. At most '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `(last - first'>
   <Font 
    <FTag `'>
   > # end of Font
   <String `)/'>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `2'>
   <Font 
    <FTag `'>
   > # end of Font
   <String ` swaps are performed.'>
  >
 > # end of Para
 <Para 
  <Unique 28935>
  <PgfTag `program'>
  <ParaLine 
  >
 > # end of Para
 <Para 
  <Unique 28936>
  <PgfTag `program'>
  <ParaLine 
   <String `template <class BidirectionalIterator\>'>
  >
 > # end of Para
 <Para 
  <Unique 28937>
  <PgfTag `program'>
  <ParaLine 
   <String `bool prev_permutation(BidirectionalIterator first, BidirectionalIterator last);'>
  >
 > # end of Para
 <Para 
  <Unique 28938>
  <PgfTag `program'>
  <ParaLine 
  >
 > # end of Para
 <Para 
  <Unique 28939>
  <PgfTag `program'>
  <ParaLine 
   <String `template <class BidirectionalIterator, class Compare\>'>
  >
 > # end of Para
 <Para 
  <Unique 28940>
  <PgfTag `program'>
  <ParaLine 
   <String `bool prev_permutation(BidirectionalIterator first, BidirectionalIterator last,'>
  >
 > # end of Para
 <Para 
  <Unique 31466>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <Char Tab >
   <String `Compare comp);'>
  >
 > # end of Para
 <Para 
  <Unique 31467>
  <PgfTag `body'>
  <ParaLine 
   <Font 
    <FTag `'>
    <FFamily `Courier'>
    <FPostScriptName `Courier'>
    <FSize  9.0 pt>
   > # end of Font
   <String `prev_permutation'>
   <Font 
    <FTag `'>
   > # end of Font
   <String ` takes a sequence defined by the range '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `[first, last)'>
   <Font 
    <FTag `'>
   > # end of Font
   <String ` and transforms it into the '>
  >
  <ParaLine 
   <Font 
    <FTag `Emphasis'>
   > # end of Font
   <String `previous'>
   <Font 
    <FTag `'>
   > # end of Font
   <String ` permutation. The previous permutation is found by assuming that the set of all permutations is '>
  >
  <ParaLine 
   <String `lexicographically sorted with respect to '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `operator<'>
   <Font 
    <FTag `'>
   > # end of Font
   <String ` or '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `comp'>
   <Font 
    <FTag `'>
   > # end of Font
   <String `. If such a permutation exists, it returns '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `true'>
   <Font 
    <FTag `'>
   > # end of Font
   <String `. '>
  >
  <ParaLine 
   <String `Otherwise, it transforms the sequence into the largest permutation, that is, the descendingly sorted one, and '>
  >
  <ParaLine 
   <String `returns '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `false'>
   <Font 
    <FTag `'>
   > # end of Font
   <String `. At most '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `(last - first'>
   <Font 
    <FTag `'>
   > # end of Font
   <String `)/'>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `2'>
   <Font 
    <FTag `'>
   > # end of Font
   <String ` swaps are performed.'>
  >
 > # end of Para
 <Para 
  <Unique 6633>
  <PgfTag `subsection'>
  <PgfNumString `10.4 '>
  <ParaLine 
   <TextRectID 85>
   <String `Generalized numeric operations'>
  >
 > # end of Para
 <Para 
  <Unique 6656>
  <PgfTag `subsubsection'>
  <PgfNumString `10.4.1 '>
  <ParaLine 
   <String `Accumulate'>
  >
 > # end of Para
 <Para 
  <Unique 6638>
  <PgfTag `program'>
  <ParaLine 
  >
 > # end of Para
 <Para 
  <Unique 6639>
  <PgfTag `program'>
  <ParaLine 
   <String `template <class InputIterator, class T\>'>
  >
 > # end of Para
 <Para 
  <Unique 6640>
  <PgfTag `program'>
  <ParaLine 
   <String `T accumulate(InputIterator first, InputIterator last, T init);'>
  >
 > # end of Para
 <Para 
  <Unique 6641>
  <PgfTag `program'>
  <ParaLine 
  >
 > # end of Para
 <Para 
  <Unique 6642>
  <PgfTag `program'>
  <ParaLine 
   <String `template <class InputIterator, class T, class BinaryOperation\>'>
  >
 > # end of Para
 <Para 
  <Unique 6643>
  <PgfTag `program'>
  <ParaLine 
   <String `T accumulate(InputIterator first, InputIterator last, T init, '>
  >
 > # end of Para
 <Para 
  <Unique 9206>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <Char Tab >
   <String `BinaryOperation binary_op);'>
  >
 > # end of Para
 <Para 
  <Unique 6644>
  <PgfTag `body'>
  <ParaLine 
   <Font 
    <FTag `program'>
   > # end of Font
   <String `accumulate'>
   <Font 
    <FTag `'>
   > # end of Font
   <String ` is similar to the APL '>
   <Font 
    <FTag `Emphasis'>
   > # end of Font
   <String `reduction'>
   <Font 
    <FTag `'>
   > # end of Font
   <String ` operator and Common Lisp '>
   <Font 
    <FTag `Emphasis'>
   > # end of Font
   <String `reduce'>
   <Font 
    <FTag `'>
   > # end of Font
   <String ` function, but it avoids the '>
  >
  <ParaLine 
   <String `difficulty of defining the result of reduction on an empty sequence by always requiring an initial value. '>
  >
  <ParaLine 
   <String `Accumulation is done '>
   <Char Tab >
   <String `by initializing the accumulator '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `acc'>
   <Font 
    <FTag `'>
   > # end of Font
   <String ` with the initial value '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `init'>
   <Font 
    <FTag `'>
   > # end of Font
   <String ` and then modifying it '>
  >
  <ParaLine 
   <String `with '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `acc = acc + *i'>
   <Font 
    <FTag `'>
   > # end of Font
   <String ` or '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `acc = binary_op(acc, *i)'>
   <Font 
    <FTag `'>
   > # end of Font
   <String ` for every iterator '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `i'>
   <Font 
    <FTag `'>
   > # end of Font
   <String ` in the range'>
   <Font 
    <FTag `program'>
   > # end of Font
   <String ` [first, last)'>
   <Font 
    <FTag `'>
   > # end of Font
   <String ` in '>
  >
  <ParaLine 
   <String `order. '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `binary_op'>
   <Font 
    <FTag `'>
   > # end of Font
   <String ` is assumed not to cause side effects.'>
  >
 > # end of Para
 <Para 
  <Unique 6657>
  <PgfTag `subsubsection'>
  <PgfNumString `10.4.2 '>
  <ParaLine 
   <String `Inner product'>
  >
 > # end of Para
 <Para 
  <Unique 6645>
  <PgfTag `program'>
  <ParaLine 
  >
 > # end of Para
 <Para 
  <Unique 6646>
  <PgfTag `program'>
  <ParaLine 
   <String `template <class InputIterator1, class InputIterator2, class T\>'>
  >
 > # end of Para
 <Para 
  <Unique 6647>
  <PgfTag `program'>
  <ParaLine 
   <String `T inner_product(InputIterator1 first1, InputIterator1 last1, '>
  >
 > # end of Para
 <Para 
  <Unique 6722>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <Char Tab >
   <String `InputIterator2 first2, '>
   <Char Tab >
   <Char Tab >
   <String `T init);'>
  >
 > # end of Para
 <Para 
  <Unique 6649>
  <PgfTag `program'>
  <ParaLine 
  >
 > # end of Para
 <Para 
  <Unique 6650>
  <PgfTag `program'>
  <ParaLine 
   <String `template <class InputIterator1, class InputIterator2, class T, '>
  >
 > # end of Para
 <Para 
  <Unique 6725>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <Char Tab >
   <String `class BinaryOperation1, '>
   <Char Tab >
   <Char Tab >
   <String `class BinaryOperation2\>'>
  >
 > # end of Para
 <Para 
  <Unique 6651>
  <PgfTag `program'>
  <ParaLine 
   <String `T inner_product(InputIterator1 first1, InputIterator1 last1, '>
   <Char Tab >
   <Char Tab >
  >
 > # end of Para
 <Para 
  <Unique 9211>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <Char Tab >
   <String `InputIterator2 '>
   <Char Tab >
   <Char Tab >
   <String `first2, '>
   <Char Tab >
   <String `T init, '>
  >
 > # end of Para
 <Para 
  <Unique 9212>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <Char Tab >
   <String `BinaryOperation1 binary_op1, BinaryOperation2 binary_op2);'>
  >
 > # end of Para
 <Para 
  <Unique 6653>
  <PgfTag `body'>
  <ParaLine 
   <Font 
    <FTag `program'>
   > # end of Font
   <String `inner_product'>
   <Font 
    <FTag `'>
   > # end of Font
   <String ` computes its result by initializing the accumulator '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `acc'>
   <Font 
    <FTag `'>
   > # end of Font
   <String ` with the initial value '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `init'>
   <Font 
    <FTag `'>
   > # end of Font
   <String ` and then '>
  >
  <ParaLine 
   <String `modifying it with '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `acc = acc + (*i1) * (*i2)'>
   <Font 
    <FTag `'>
   > # end of Font
   <String ` or '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `acc = binary_op1(acc, binary_op2(*i1, *i2))'>
   <Font 
    <FTag `'>
   > # end of Font
   <String ` '>
  >
  <ParaLine 
   <String `for every iterator '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `i1 '>
   <Font 
    <FTag `'>
   > # end of Font
   <String `in the range'>
   <Font 
    <FTag `program'>
   > # end of Font
   <String ` [first, last)'>
   <Font 
    <FTag `'>
   > # end of Font
   <String ` and iterator '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `i2'>
   <Font 
    <FTag `'>
   > # end of Font
   <String ` in the range '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `[first2, first2 + (last '>
  >
  <ParaLine 
   <String `- first))'>
   <Font 
    <FTag `'>
   > # end of Font
   <String ` in order. '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `binary_op1 '>
   <Font 
    <FTag `'>
   > # end of Font
   <String `and '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `binary_op2 '>
   <Font 
    <FTag `'>
   > # end of Font
   <String `are assumed not to cause side effects.'>
  >
 > # end of Para
 <Para 
  <Unique 6697>
  <PgfTag `subsubsection'>
  <PgfNumString `10.4.3 '>
  <ParaLine 
   <String `Partial sum'>
  >
 > # end of Para
 <Para 
  <Unique 6661>
  <PgfTag `program'>
  <ParaLine 
  >
 > # end of Para
 <Para 
  <Unique 6669>
  <PgfTag `program'>
  <ParaLine 
   <String `template <class InputIterator, class OutputIterator\>'>
  >
 > # end of Para
 <Para 
  <Unique 6670>
  <PgfTag `program'>
  <ParaLine 
   <String `OutputIterator partial_sum(InputIterator first, InputIterator last, '>
  >
 > # end of Para
 <Para 
  <Unique 6671>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <Char Tab >
   <String `OutputIterator result);'>
  >
 > # end of Para
 <Para 
  <Unique 6672>
  <PgfTag `program'>
  <ParaLine 
  >
 > # end of Para
 <Para 
  <Unique 6673>
  <PgfTag `program'>
  <ParaLine 
   <String `template <class InputIterator, class OutputIterator, class BinaryOperation\>'>
  >
 > # end of Para
 <Para 
  <Unique 6674>
  <PgfTag `program'>
  <ParaLine 
   <String `OutputIterator partial_sum(InputIterator first, InputIterator last,'>
  >
 > # end of Para
 <Para 
  <Unique 6675>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <Char Tab >
   <String `OutputIterator result, '>
   <Char Tab >
   <Char Tab >
   <String `BinaryOperation binary_op);'>
  >
 > # end of Para
 <Para 
  <Unique 8564>
  <PgfTag `body'>
  <ParaLine 
   <Font 
    <FTag `program'>
   > # end of Font
   <String `partial_sum'>
   <Font 
    <FTag `'>
   > # end of Font
   <String ` assigns to every iterator '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `i'>
   <Font 
    <FTag `'>
   > # end of Font
   <String ` in the range '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `[result, result + (last - first))'>
   <Font 
    <FTag `'>
   > # end of Font
   <String ` a value '>
  >
  <ParaLine 
   <String `correspondingly equal to '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `((...(*first + *(first + 1)) + ... )+ *(first'>
   <Font 
    <FTag `'>
   > # end of Font
   <String ` '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `+ (i - result)))'>
   <Font 
    <FTag `'>
   > # end of Font
   <String ` or '>
  >
  <ParaLine 
   <Font 
    <FTag `program'>
   > # end of Font
   <String `binary_op(binary_op(..., binary_op(*first, *(first + 1)),...), *(first + (i - result)))'>
   <Font 
    <FTag `'>
   > # end of Font
   <String `. '>
  >
  <ParaLine 
   <Font 
    <FTag `program'>
   > # end of Font
   <String `partial_sum'>
   <Font 
    <FTag `'>
   > # end of Font
   <String ` returns '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `result + (last - first)'>
   <Font 
    <FTag `'>
   > # end of Font
   <String `. Exactly '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `(last - first)'>
   <Font 
    <FTag `'>
   > # end of Font
   <String ` '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `- 1 '>
   <Font 
    <FTag `'>
   > # end of Font
   <String `applications of '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `binary_op '>
  >
  <ParaLine 
   <Font 
    <FTag `'>
   > # end of Font
   <String `are performed. '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `binary_op '>
   <Font 
    <FTag `'>
   > # end of Font
   <String `is expected not to have any side effects. '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `result'>
   <Font 
    <FTag `'>
   > # end of Font
   <String ` may be equal to '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `first'>
   <Font 
    <FTag `'>
   > # end of Font
   <String `. '>
  >
 > # end of Para
 <Para 
  <Unique 8565>
  <PgfTag `subsubsection'>
  <PgfNumString `10.4.4 '>
  <ParaLine 
   <String `Adjacent difference'>
  >
 > # end of Para
 <Para 
  <Unique 6685>
  <PgfTag `program'>
  <ParaLine 
  >
 > # end of Para
 <Para 
  <Unique 6686>
  <PgfTag `program'>
  <ParaLine 
   <String `template <class InputIterator, class OutputIterator\>'>
  >
 > # end of Para
 <Para 
  <Unique 6687>
  <PgfTag `program'>
  <ParaLine 
   <String `OutputIterator adjacent_difference(InputIterator first, InputIterator last, '>
  >
 > # end of Para
 <Para 
  <Unique 6688>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <Char Tab >
   <String `OutputIterator result);'>
  >
 > # end of Para
 <Para 
  <Unique 6689>
  <PgfTag `program'>
  <ParaLine 
  >
 > # end of Para
 <Para 
  <Unique 6690>
  <PgfTag `program'>
  <ParaLine 
   <String `template <class InputIterator, class OutputIterator, class BinaryOperation\>'>
  >
 > # end of Para
 <Para 
  <Unique 6691>
  <PgfTag `program'>
  <ParaLine 
   <String `OutputIterator adjacent_difference(InputIterator first, InputIterator last, '>
  >
 > # end of Para
 <Para 
  <Unique 6692>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <Char Tab >
   <String `OutputIterator result, '>
   <Char Tab >
   <Char Tab >
   <String `BinaryOperation binary_op);'>
  >
 > # end of Para
 <Para 
  <Unique 6693>
  <PgfTag `body'>
  <ParaLine 
   <TextRectID 86>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `adjacent_difference'>
   <Font 
    <FTag `'>
   > # end of Font
   <String ` assigns to every element referred to by iterator '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `i'>
   <Font 
    <FTag `'>
   > # end of Font
   <String ` in the range '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `[result + 1, result '>
  >
  <ParaLine 
   <String `+ (last - first))'>
   <Font 
    <FTag `'>
   > # end of Font
   <String ` a value correspondingly equal to '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `*(first + (i - result)) - *(first + (i - '>
  >
  <ParaLine 
   <String `result) - 1)'>
   <Font 
    <FTag `'>
   > # end of Font
   <String `or '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `binary_op(*(first + (i - result)), *(first + (i - result) - 1))'>
   <Font 
    <FTag `'>
   > # end of Font
   <String `. '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `result'>
   <Font 
    <FTag `'>
   > # end of Font
   <String ` gets '>
  >
  <ParaLine 
   <String `the value of'>
   <Font 
    <FTag `program'>
   > # end of Font
   <String ` *first'>
   <Font 
    <FTag `'>
   > # end of Font
   <String `. '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `adjacent_difference'>
   <Font 
    <FTag `'>
   > # end of Font
   <String ` returns '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `result + (last - first)'>
   <Font 
    <FTag `'>
   > # end of Font
   <String `. Exactly '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `(last - first)'>
   <Font 
    <FTag `'>
   > # end of Font
   <String ` '>
  >
  <ParaLine 
   <Font 
    <FTag `program'>
   > # end of Font
   <String `- 1 '>
   <Font 
    <FTag `'>
   > # end of Font
   <String `applications of '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `binary_op '>
   <Font 
    <FTag `'>
   > # end of Font
   <String `are performed. '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `binary_op '>
   <Font 
    <FTag `'>
   > # end of Font
   <String `is expected not to have any side effects. '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `result'>
   <Font 
    <FTag `'>
   > # end of Font
   <String ` '>
  >
  <ParaLine 
   <String `may be equal to '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `first'>
   <Font 
    <FTag `'>
   > # end of Font
   <String `.'>
  >
 > # end of Para
 <Para 
  <Unique 25185>
  <PgfTag `section'>
  <PgfNumString `11  '>
  <ParaLine 
   <String `Adaptors'>
  >
 > # end of Para
 <Para 
  <Unique 29086>
  <PgfTag `body'>
  <ParaLine 
   <String `Adaptors are template classes that provide interface mappings. For example, '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `insert_iterator'>
   <Font 
    <FTag `'>
   > # end of Font
   <String ` provides a '>
  >
  <ParaLine 
   <String `container with an output iterator interface.'>
  >
 > # end of Para
 <Para 
  <Unique 27241>
  <PgfTag `subsection'>
  <PgfNumString `11.1 '>
  <ParaLine 
   <String `Container adaptors'>
  >
 > # end of Para
 <Para 
  <Unique 8948>
  <PgfTag `body'>
  <ParaLine 
   <String `It is often useful to provide restricted interfaces to containers. The library provides '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `stack'>
   <Font 
    <FTag `'>
   > # end of Font
   <String `, '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `queue'>
   <Font 
    <FTag `'>
   > # end of Font
   <String ` and '>
  >
  <ParaLine 
   <Font 
    <FTag `program'>
   > # end of Font
   <String `priority_queue'>
   <Font 
    <FTag `'>
   > # end of Font
   <String ` through the adaptors that can work with different sequence types.'>
  >
 > # end of Para
 <Para 
  <Unique 8949>
  <PgfTag `subsubsection'>
  <PgfNumString `11.1.1 '>
  <ParaLine 
   <String `Stack'>
  >
 > # end of Para
 <Para 
  <Unique 8950>
  <PgfTag `body'>
  <ParaLine 
   <String `Any sequence supporting operations '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `back'>
   <Font 
    <FTag `'>
   > # end of Font
   <String `, '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `push_back'>
   <Font 
    <FTag `'>
   > # end of Font
   <String ` and '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `pop_back'>
   <Font 
    <FTag `'>
   > # end of Font
   <String ` can be used to instantiate '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `stack'>
   <Font 
    <FTag `'>
   > # end of Font
   <String `. In '>
  >
  <ParaLine 
   <String `particular, '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `vector'>
   <Font 
    <FTag `'>
   > # end of Font
   <String `, '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `list'>
   <Font 
    <FTag `'>
   > # end of Font
   <String ` and '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `deque'>
   <Font 
    <FTag `'>
   > # end of Font
   <String ` can be used.'>
  >
 > # end of Para
 <Para 
  <Unique 8951>
  <PgfTag `program'>
  <ParaLine 
  >
 > # end of Para
 <Para 
  <Unique 8952>
  <PgfTag `program'>
  <ParaLine 
   <String `template <class Container\>'>
  >
 > # end of Para
 <Para 
  <Unique 8953>
  <PgfTag `program'>
  <ParaLine 
   <String `class stack {'>
  >
 > # end of Para
 <Para 
  <Unique 8954>
  <PgfTag `program'>
  <ParaLine 
   <String `friend bool operator==(const stack<Container\>& x, const stack<Container\>& y);'>
  >
 > # end of Para
 <Para 
  <Unique 8955>
  <PgfTag `program'>
  <ParaLine 
   <String `friend bool operator<(const stack<Container\>& x, const stack<Container\>& y);'>
  >
 > # end of Para
 <Para 
  <Unique 8956>
  <PgfTag `program'>
  <ParaLine 
   <String `p'>
   <String `ublic:'>
  >
 > # end of Para
 <Para 
  <Unique 8957>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <String `typedef Container::value_type value_type;'>
  >
 > # end of Para
 <Para 
  <Unique 8958>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <String `typedef Container::size_type size_type;'>
  >
 > # end of Para
 <Para 
  <Unique 8959>
  <PgfTag `program'>
  <ParaLine 
   <String `protected:'>
  >
 > # end of Para
 <Para 
  <Unique 8960>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <String `Container c;'>
  >
 > # end of Para
 <Para 
  <Unique 8961>
  <PgfTag `program'>
  <ParaLine 
   <String `public:'>
  >
 > # end of Para
 <Para 
  <Unique 8962>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <String `bool empty() const { return c.empty(); }'>
  >
 > # end of Para
 <Para 
  <Unique 8963>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <String `size_type size() const { return c.size(); }'>
  >
 > # end of Para
 <Para 
  <Unique 8964>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <String `value_type& top() { return c.back(); }'>
  >
 > # end of Para
 <Para 
  <Unique 8965>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <String `const value_type& top() const { return c.back(); }'>
  >
 > # end of Para
 <Para 
  <Unique 8966>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <String `void push(const value_type& x) { c.push_back(x); }'>
  >
 > # end of Para
 <Para 
  <Unique 8967>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <String `void pop() { c.pop_back(); }'>
  >
 > # end of Para
 <Para 
  <Unique 8968>
  <PgfTag `program'>
  <ParaLine 
   <String `};'>
  >
 > # end of Para
 <Para 
  <Unique 8969>
  <PgfTag `program'>
  <ParaLine 
  >
 > # end of Para
 <Para 
  <Unique 8970>
  <PgfTag `program'>
  <ParaLine 
   <String `template <class Container\>'>
  >
 > # end of Para
 <Para 
  <Unique 8971>
  <PgfTag `program'>
  <ParaLine 
   <String `bool operator==(const stack<Container\>& x, const stack<Container\>& y) {'>
  >
 > # end of Para
 <Para 
  <Unique 8972>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <String `return x.c == y.c;'>
  >
 > # end of Para
 <Para 
  <Unique 8973>
  <PgfTag `program'>
  <ParaLine 
   <String `}'>
  >
 > # end of Para
 <Para 
  <Unique 8974>
  <PgfTag `program'>
  <ParaLine 
  >
 > # end of Para
 <Para 
  <Unique 8975>
  <PgfTag `program'>
  <ParaLine 
   <String `template <class Container\>'>
  >
 > # end of Para
 <Para 
  <Unique 8976>
  <PgfTag `program'>
  <ParaLine 
   <String `bool operator<(const stack<Container\>& x, const stack<Container\>& y) {'>
  >
 > # end of Para
 <Para 
  <Unique 8977>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <String `return x.c < y.c;'>
  >
 > # end of Para
 <Para 
  <Unique 8978>
  <PgfTag `program'>
  <ParaLine 
   <String `}'>
  >
 > # end of Para
 <Para 
  <Unique 8979>
  <PgfTag `body'>
  <ParaLine 
   <String `For example, '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `stack<vector<int\> \>'>
   <Font 
    <FTag `'>
   > # end of Font
   <String ` is an integer stack made out of '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `vector'>
   <Font 
    <FTag `'>
   > # end of Font
   <String `, and '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `stack<deque<char\> \>'>
   <Font 
    <FTag `'>
   > # end of Font
   <String ` is '>
  >
  <ParaLine 
   <String `a character stack made out of '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `deque'>
   <Font 
    <FTag `'>
   > # end of Font
   <String `.'>
  >
 > # end of Para
 <Para 
  <Unique 8980>
  <PgfTag `subsubsection'>
  <PgfNumString `11.1.2 '>
  <ParaLine 
   <String `Queue'>
  >
 > # end of Para
 <Para 
  <Unique 8981>
  <PgfTag `body'>
  <ParaLine 
   <String `Any sequence supporting operations '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `front'>
   <Font 
    <FTag `'>
   > # end of Font
   <String `, '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `back'>
   <Font 
    <FTag `'>
   > # end of Font
   <String `, '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `push_back'>
   <Font 
    <FTag `'>
   > # end of Font
   <String ` and '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `pop_front'>
   <Font 
    <FTag `'>
   > # end of Font
   <String ` can be used to instantiate '>
  >
  <ParaLine 
   <Font 
    <FTag `program'>
   > # end of Font
   <String `queue'>
   <Font 
    <FTag `'>
   > # end of Font
   <String `. In particular, '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `list'>
   <Font 
    <FTag `'>
   > # end of Font
   <String ` and '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `deque'>
   <Font 
    <FTag `'>
   > # end of Font
   <String ` can be used.'>
  >
 > # end of Para
 <Para 
  <Unique 8982>
  <PgfTag `program'>
  <ParaLine 
  >
 > # end of Para
 <Para 
  <Unique 8983>
  <PgfTag `program'>
  <ParaLine 
   <String `template <class Container\>'>
  >
 > # end of Para
 <Para 
  <Unique 8984>
  <PgfTag `program'>
  <ParaLine 
   <TextRectID 87>
   <String `class queue {'>
  >
 > # end of Para
 <Para 
  <Unique 8985>
  <PgfTag `program'>
  <ParaLine 
   <String `friend bool operator==(const queue<Container\>& x, const queue<Container\>& y);'>
  >
 > # end of Para
 <Para 
  <Unique 8986>
  <PgfTag `program'>
  <ParaLine 
   <String `friend bool operator<(const queue<Container\>& x, const queue<Container\>& y);'>
  >
 > # end of Para
 <Para 
  <Unique 8987>
  <PgfTag `program'>
  <ParaLine 
   <String `p'>
   <String `ublic:'>
  >
 > # end of Para
 <Para 
  <Unique 8988>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <String `typedef Container::value_type value_type;'>
  >
 > # end of Para
 <Para 
  <Unique 8989>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <String `typedef Container::size_type size_type;'>
  >
 > # end of Para
 <Para 
  <Unique 8990>
  <PgfTag `program'>
  <ParaLine 
   <String `protected:'>
  >
 > # end of Para
 <Para 
  <Unique 8991>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <String `Container c;'>
  >
 > # end of Para
 <Para 
  <Unique 8992>
  <PgfTag `program'>
  <ParaLine 
   <String `public:'>
  >
 > # end of Para
 <Para 
  <Unique 8993>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <String `bool empty() const { return c.empty(); }'>
  >
 > # end of Para
 <Para 
  <Unique 8994>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <String `size_type size() const { return c.size(); }'>
  >
 > # end of Para
 <Para 
  <Unique 8995>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <String `value_type& front() { return c.front(); }'>
  >
 > # end of Para
 <Para 
  <Unique 8996>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <String `const value_type& front() const { return c.front(); }'>
  >
 > # end of Para
 <Para 
  <Unique 8997>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <String `value_type& back() { return c.back(); }'>
  >
 > # end of Para
 <Para 
  <Unique 8998>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <String `const value_type& back() const { return c.back(); }'>
  >
 > # end of Para
 <Para 
  <Unique 8999>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <String `void push(const value_type& x) { c.push_back(x); }'>
  >
 > # end of Para
 <Para 
  <Unique 9000>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <String `void pop() { c.pop_front(); }'>
  >
 > # end of Para
 <Para 
  <Unique 9001>
  <PgfTag `program'>
  <ParaLine 
   <String `};'>
  >
 > # end of Para
 <Para 
  <Unique 9002>
  <PgfTag `program'>
  <ParaLine 
  >
 > # end of Para
 <Para 
  <Unique 9003>
  <PgfTag `program'>
  <ParaLine 
   <String `template <class Container\>'>
  >
 > # end of Para
 <Para 
  <Unique 9004>
  <PgfTag `program'>
  <ParaLine 
   <String `bool operator==(const queue<Container\>& x, const queue<Container\>& y) {'>
  >
 > # end of Para
 <Para 
  <Unique 9005>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <String `return x.c == y.c;'>
  >
 > # end of Para
 <Para 
  <Unique 9006>
  <PgfTag `program'>
  <ParaLine 
   <String `}'>
  >
 > # end of Para
 <Para 
  <Unique 9007>
  <PgfTag `program'>
  <ParaLine 
  >
 > # end of Para
 <Para 
  <Unique 9008>
  <PgfTag `program'>
  <ParaLine 
   <String `template <class Container\>'>
  >
 > # end of Para
 <Para 
  <Unique 9009>
  <PgfTag `program'>
  <ParaLine 
   <String `bool operator<(const queue<Container\>& x, const queue<Container\>& y) {'>
  >
 > # end of Para
 <Para 
  <Unique 9010>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <String `return x.c < y.c;'>
  >
 > # end of Para
 <Para 
  <Unique 9011>
  <PgfTag `program'>
  <ParaLine 
   <String `}'>
  >
 > # end of Para
 <Para 
  <Unique 9012>
  <PgfTag `subsubsection'>
  <PgfNumString `11.1.3 '>
  <ParaLine 
   <String `Priority queue'>
  >
 > # end of Para
 <Para 
  <Unique 9013>
  <PgfTag `body'>
  <ParaLine 
   <String `Any sequence with random access iterator and supporting operations '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `front'>
   <Font 
    <FTag `'>
   > # end of Font
   <String `, '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `push_back'>
   <Font 
    <FTag `'>
   > # end of Font
   <String ` and '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `pop_back'>
   <Font 
    <FTag `'>
   > # end of Font
   <String ` can '>
  >
  <ParaLine 
   <String `be used to instantiate '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `priority_queue'>
   <Font 
    <FTag `'>
   > # end of Font
   <String `. In particular, '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `vector'>
   <Font 
    <FTag `'>
   > # end of Font
   <String ` and '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `deque'>
   <Font 
    <FTag `'>
   > # end of Font
   <String ` can be used.'>
  >
 > # end of Para
 <Para 
  <Unique 9014>
  <PgfTag `program'>
  <ParaLine 
  >
 > # end of Para
 <Para 
  <Unique 9015>
  <PgfTag `program'>
  <ParaLine 
   <String `template <class Container, class Compare = less<Container::value_type\> \>'>
  >
 > # end of Para
 <Para 
  <Unique 9016>
  <PgfTag `program'>
  <ParaLine 
   <String `class priority_queue {'>
  >
 > # end of Para
 <Para 
  <Unique 9017>
  <PgfTag `program'>
  <ParaLine 
   <String `public:'>
  >
 > # end of Para
 <Para 
  <Unique 9018>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <String `typedef Container::value_type value_type;'>
  >
 > # end of Para
 <Para 
  <Unique 9019>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <String `typedef Container::size_type size_type;'>
  >
 > # end of Para
 <Para 
  <Unique 9020>
  <PgfTag `program'>
  <ParaLine 
   <String `protected:'>
  >
 > # end of Para
 <Para 
  <Unique 9021>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <String `Container c;'>
  >
 > # end of Para
 <Para 
  <Unique 9022>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <String `Compare comp;'>
  >
 > # end of Para
 <Para 
  <Unique 9023>
  <PgfTag `program'>
  <ParaLine 
   <String `public:'>
  >
 > # end of Para
 <Para 
  <Unique 9024>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <String `priority_queue(const Compare& x = Compare()) : c(), comp(x) {}'>
  >
 > # end of Para
 <Para 
  <Unique 9025>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <String `template <class InputIterator\>'>
  >
 > # end of Para
 <Para 
  <Unique 9026>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <String `priority_queue(InputIterator first, InputIterator last, '>
  >
 > # end of Para
 <Para 
  <Unique 9027>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <Char Tab >
   <Char Tab >
   <String `const Compare& x = Compare()) : c(first, last), comp(x) {'>
  >
 > # end of Para
 <Para 
  <Unique 9028>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <Char Tab >
   <String `make_heap(c.begin(), c.end(), comp);'>
  >
 > # end of Para
 <Para 
  <Unique 9029>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <String `}'>
  >
 > # end of Para
 <Para 
  <Unique 9030>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <String `bool empty() const { return c.empty(); }'>
  >
 > # end of Para
 <Para 
  <Unique 9031>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <String `size_type size() const { return c.size(); }'>
  >
 > # end of Para
 <Para 
  <Unique 9032>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <String `const value_type& top() const { return c.front(); }'>
  >
 > # end of Para
 <Para 
  <Unique 9033>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <String `void push(const value_type& x) { '>
  >
 > # end of Para
 <Para 
  <Unique 9034>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <Char Tab >
   <String `c.push_back(x);'>
   <Char Tab >
   <Char Tab >
  >
 > # end of Para
 <Para 
  <Unique 9035>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <Char Tab >
   <String `push_heap(c.begin(), c.end(), comp);'>
  >
 > # end of Para
 <Para 
  <Unique 9036>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <String `}'>
  >
 > # end of Para
 <Para 
  <Unique 9037>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <String `void pop() {'>
  >
 > # end of Para
 <Para 
  <Unique 9038>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <Char Tab >
   <String `pop_heap(c.begin(), c.end(), comp);'>
  >
 > # end of Para
 <Para 
  <Unique 9039>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <Char Tab >
   <String `c.pop_back();'>
  >
 > # end of Para
 <Para 
  <Unique 9040>
  <PgfTag `program'>
  <ParaLine 
   <TextRectID 88>
   <Char Tab >
   <String `}'>
  >
 > # end of Para
 <Para 
  <Unique 9041>
  <PgfTag `program'>
  <ParaLine 
   <String `};'>
  >
 > # end of Para
 <Para 
  <Unique 9042>
  <PgfTag `program'>
  <ParaLine 
  >
 > # end of Para
 <Para 
  <Unique 9043>
  <PgfTag `program'>
  <ParaLine 
   <String `// no equality is provided'>
  >
 > # end of Para
 <Para 
  <Unique 9044>
  <PgfTag `subsection'>
  <PgfNumString `11.2 '>
  <ParaLine 
   <String `Iterator adaptors'>
  >
 > # end of Para
 <Para 
  <Unique 25188>
  <PgfTag `subsubsection'>
  <PgfNumString `11.2.1 '>
  <ParaLine 
   <String `Reverse iterators'>
  >
 > # end of Para
 <Para 
  <Unique 25189>
  <PgfTag `body'>
  <ParaLine 
   <String `Bidirectional and random access iterators have corresponding reverse iterator adaptors that iterate through '>
  >
  <ParaLine 
   <String `the data structure in the opposite direction. They have the same signatures as the corresponding iterators. '>
  >
  <ParaLine 
   <String `The fundamental relation between a reverse iterator and its corresponding iterator '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `i'>
   <Font 
    <FTag `'>
   > # end of Font
   <String ` is established by the '>
  >
  <ParaLine 
   <String `identity'>
  >
 > # end of Para
 <Para 
  <Unique 25190>
  <PgfTag `program'>
  <ParaLine 
   <Font 
    <FTag `program'>
   > # end of Font
   <String `&*(reverse_iterator(i)) == &*(i - 1)'>
   <Font 
    <FTag `'>
   > # end of Font
   <String `.'>
  >
 > # end of Para
 <Para 
  <Unique 25191>
  <PgfTag `body'>
  <ParaLine 
   <String `This mapping is dictated by the fact that while there is always a pointer past the end of an array, there might '>
  >
  <ParaLine 
   <String `not be a valid pointer before the beginning of an array'>
   <String `.'>
  >
 > # end of Para
 <Para 
  <Unique 27949>
  <PgfTag `program'>
  <ParaLine 
  >
 > # end of Para
 <Para 
  <Unique 27950>
  <PgfTag `program'>
  <ParaLine 
   <String `template <class BidirectionalIterator, class T, '>
   <String `class Reference = T&,'>
  >
 > # end of Para
 <Para 
  <Unique 7535>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <String `c'>
   <String `lass Distance = ptrdiff_t\>'>
  >
 > # end of Para
 <Para 
  <Unique 27951>
  <PgfTag `program'>
  <ParaLine 
   <String `class reverse_bidirectional_iterator '>
  >
 > # end of Para
 <Para 
  <Unique 27952>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <String `: public bidirectional_iterator<T, Distance\> {'>
  >
 > # end of Para
 <Para 
  <Unique 27953>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <String `typedef reverse_bidirectional_iterator<BidirectionalIterator, T,'>
  >
 > # end of Para
 <Para 
  <Unique 7563>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <Char Tab >
   <Char Tab >
   <Char Tab >
   <Char Tab >
   <Char Tab >
   <Char Tab >
   <String `Reference, '>
   <Char Tab >
   <String `Distance\> self;'>
  >
 > # end of Para
 <Para 
  <Unique 7466>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <String `friend bool operator==(const self& x, const self& y);'>
  >
 > # end of Para
 <Para 
  <Unique 4425>
  <PgfTag `program'>
  <ParaLine 
   <String `p'>
   <String `rotected:'>
  >
 > # end of Para
 <Para 
  <Unique 27954>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <String `BidirectionalIterator current;'>
  >
 > # end of Para
 <Para 
  <Unique 27955>
  <PgfTag `program'>
  <ParaLine 
   <String `public:'>
  >
 > # end of Para
 <Para 
  <Unique 27956>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <String `reverse_bidirectional_iterator() {}'>
  >
 > # end of Para
 <Para 
  <Unique 27957>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <String `reverse_bidirectional_iterator(BidirectionalIterator x) : current(x) {}'>
  >
 > # end of Para
 <Para 
  <Unique 27958>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <String `B'>
   <String `idirectionalIterator'>
   <String ` base'>
   <String `() { return current; }'>
  >
 > # end of Para
 <Para 
  <Unique 27959>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <String `Reference o'>
   <String `perator*() '>
   <String `const '>
   <String `{'>
  >
 > # end of Para
 <Para 
  <Unique 27960>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <Char Tab >
   <String `BidirectionalIterator tmp = current;'>
  >
 > # end of Para
 <Para 
  <Unique 27961>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <Char Tab >
   <String `return *--tmp;'>
  >
 > # end of Para
 <Para 
  <Unique 27962>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <String `}'>
  >
 > # end of Para
 <Para 
  <Unique 27963>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <String `self& operator++()'>
   <String ` {'>
  >
 > # end of Para
 <Para 
  <Unique 27964>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <Char Tab >
   <String `--current;'>
  >
 > # end of Para
 <Para 
  <Unique 27965>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <Char Tab >
   <String `return *this;'>
  >
 > # end of Para
 <Para 
  <Unique 27966>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <String `}'>
  >
 > # end of Para
 <Para 
  <Unique 27967>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <String `self o'>
   <String `perator++(int) {'>
  >
 > # end of Para
 <Para 
  <Unique 27968>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <Char Tab >
   <String `self t'>
   <String `mp = *this;'>
  >
 > # end of Para
 <Para 
  <Unique 27969>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <Char Tab >
   <String `--current;'>
  >
 > # end of Para
 <Para 
  <Unique 27970>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <Char Tab >
   <String `return tmp;'>
  >
 > # end of Para
 <Para 
  <Unique 27971>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <String `}'>
  >
 > # end of Para
 <Para 
  <Unique 27972>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <String `self&'>
   <String ` operator--() {'>
  >
 > # end of Para
 <Para 
  <Unique 27973>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <Char Tab >
   <String `++current;'>
  >
 > # end of Para
 <Para 
  <Unique 27974>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <Char Tab >
   <String `return *this;'>
  >
 > # end of Para
 <Para 
  <Unique 27975>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <String `}'>
  >
 > # end of Para
 <Para 
  <Unique 27976>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <String `self o'>
   <String `perator--(int) '>
   <String `{'>
  >
 > # end of Para
 <Para 
  <Unique 27977>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <Char Tab >
   <String `self t'>
   <String `mp = *this;'>
  >
 > # end of Para
 <Para 
  <Unique 27978>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <Char Tab >
   <String `++current;'>
  >
 > # end of Para
 <Para 
  <Unique 27979>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <Char Tab >
   <String `return tmp;'>
  >
 > # end of Para
 <Para 
  <Unique 27980>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <String `}'>
  >
 > # end of Para
 <Para 
  <Unique 27981>
  <PgfTag `program'>
  <ParaLine 
   <String `};'>
  >
 > # end of Para
 <Para 
  <Unique 27982>
  <PgfTag `program'>
  <ParaLine 
  >
 > # end of Para
 <Para 
  <Unique 27983>
  <PgfTag `program'>
  <ParaLine 
   <String `template <class BidirectionalIterator, class T, '>
   <String `class Reference, '>
   <String `class Distance\>'>
  >
 > # end of Para
 <Para 
  <Unique 27984>
  <PgfTag `program'>
  <ParaLine 
   <String `inline boo'>
   <String `l o'>
   <String `perator=='>
   <String `('>
  >
 > # end of Para
 <Para 
  <Unique 4487>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <Char Tab >
   <String `c'>
   <String `ons'>
   <String `t r'>
   <String `everse_bidirectional_iterator<BidirectionalIterator, T,'>
  >
 > # end of Para
 <Para 
  <Unique 40363>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <Char Tab >
   <Char Tab >
   <Char Tab >
   <Char Tab >
   <Char Tab >
   <Char Tab >
   <Char Tab >
   <String `Reference, '>
   <String `Distance\>& x, '>
  >
 > # end of Para
 <Para 
  <Unique 27986>
  <PgfTag `program'>
  <ParaLine 
   <TextRectID 89>
   <Char Tab >
   <Char Tab >
   <String `const reverse_bidirectional_iterator<BidirectionalIterator, T,'>
  >
 > # end of Para
 <Para 
  <Unique 40365>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <Char Tab >
   <Char Tab >
   <Char Tab >
   <Char Tab >
   <Char Tab >
   <Char Tab >
   <Char Tab >
   <String `Reference, '>
   <String `Distance\>& y) {'>
  >
 > # end of Para
 <Para 
  <Unique 27987>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <String `return x.current == y.current;'>
  >
 > # end of Para
 <Para 
  <Unique 27988>
  <PgfTag `program'>
  <ParaLine 
   <String `}'>
  >
 > # end of Para
 <Para 
  <Unique 40355>
  <PgfTag `program'>
  <ParaLine 
  >
 > # end of Para
 <Para 
  <Unique 40356>
  <PgfTag `program'>
  <ParaLine 
   <String `template <class RandomAccessIterator, class T, '>
   <String `class Reference = T&,'>
  >
 > # end of Para
 <Para 
  <Unique 7562>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <String `c'>
   <String `lass Distance = ptrdiff_t\>'>
  >
 > # end of Para
 <Para 
  <Unique 40357>
  <PgfTag `program'>
  <ParaLine 
   <String `class reverse_iterator : public random_access_iterator<T, Distance\> {'>
  >
 > # end of Para
 <Para 
  <Unique 27992>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <String `typedef reverse_iterator<RandomAccessIterator, T, Reference, Distance\>'>
  >
 > # end of Para
 <Para 
  <Unique 7568>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <Char Tab >
   <String `self;'>
  >
 > # end of Para
 <Para 
  <Unique 7569>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <String `friend bool operator==(const self& x, const self& y);'>
  >
 > # end of Para
 <Para 
  <Unique 7570>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <String `friend bool operator<(const self& x, const self& y);'>
  >
 > # end of Para
 <Para 
  <Unique 7571>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <String `friend Distance operator-(const self& x, const self& y);'>
  >
 > # end of Para
 <Para 
  <Unique 7572>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <String `friend self operator+(Distance n, const self& x);'>
  >
 > # end of Para
 <Para 
  <Unique 4466>
  <PgfTag `program'>
  <ParaLine 
   <String `pr'>
   <String `otected:'>
  >
 > # end of Para
 <Para 
  <Unique 27993>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <String `RandomAccessIterator current;'>
  >
 > # end of Para
 <Para 
  <Unique 27994>
  <PgfTag `program'>
  <ParaLine 
   <String `public:'>
  >
 > # end of Para
 <Para 
  <Unique 27995>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <String `reverse_iterator() {}'>
  >
 > # end of Para
 <Para 
  <Unique 27996>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <String `reverse_iterator(RandomAccessIterator x) : current(x) {}'>
  >
 > # end of Para
 <Para 
  <Unique 27997>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <String `R'>
   <String `andomAccessIterator'>
   <String ` base'>
   <String `() { return current; }'>
  >
 > # end of Para
 <Para 
  <Unique 27998>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <String `Reference o'>
   <String `perator*() '>
   <String `const '>
   <String `{'>
  >
 > # end of Para
 <Para 
  <Unique 27999>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <Char Tab >
   <String `RandomAccessIterator tmp = current;'>
  >
 > # end of Para
 <Para 
  <Unique 28000>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <Char Tab >
   <String `return *--tmp;'>
  >
 > # end of Para
 <Para 
  <Unique 28001>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <String `}'>
  >
 > # end of Para
 <Para 
  <Unique 28002>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <String `self&'>
   <String ` operator++() {'>
  >
 > # end of Para
 <Para 
  <Unique 28003>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <Char Tab >
   <String `--current;'>
  >
 > # end of Para
 <Para 
  <Unique 28004>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <Char Tab >
   <String `return *this;'>
  >
 > # end of Para
 <Para 
  <Unique 28005>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <String `}'>
  >
 > # end of Para
 <Para 
  <Unique 28006>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <String `self o'>
   <String `perator++(int) {'>
  >
 > # end of Para
 <Para 
  <Unique 28007>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <Char Tab >
   <String `self t'>
   <String `mp = *this;'>
  >
 > # end of Para
 <Para 
  <Unique 28008>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <Char Tab >
   <String `--current;'>
  >
 > # end of Para
 <Para 
  <Unique 28009>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <Char Tab >
   <String `return tmp;'>
  >
 > # end of Para
 <Para 
  <Unique 28010>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <String `}'>
  >
 > # end of Para
 <Para 
  <Unique 28011>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <String `self&'>
   <String ` operator--() {'>
  >
 > # end of Para
 <Para 
  <Unique 28012>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <Char Tab >
   <String `++current;'>
  >
 > # end of Para
 <Para 
  <Unique 28013>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <Char Tab >
   <String `return *this;'>
  >
 > # end of Para
 <Para 
  <Unique 28014>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <String `}'>
  >
 > # end of Para
 <Para 
  <Unique 28015>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <String `self o'>
   <String `perator--(int) {'>
  >
 > # end of Para
 <Para 
  <Unique 28016>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <Char Tab >
   <String `self t'>
   <String `mp = *this;'>
  >
 > # end of Para
 <Para 
  <Unique 28017>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <Char Tab >
   <String `++current;'>
  >
 > # end of Para
 <Para 
  <Unique 28018>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <Char Tab >
   <String `return tmp;'>
  >
 > # end of Para
 <Para 
  <Unique 28019>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <String `}'>
  >
 > # end of Para
 <Para 
  <Unique 28020>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <String `self o'>
   <String `perator+(Distance n) '>
   <Char Tab >
   <String `const {'>
  >
 > # end of Para
 <Para 
  <Unique 28021>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <Char Tab >
   <String `return '>
   <String `self('>
   <String `current - n);'>
  >
 > # end of Para
 <Para 
  <Unique 28022>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <String `}'>
  >
 > # end of Para
 <Para 
  <Unique 28023>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <String `self& '>
   <Char Tab >
   <String `o'>
   <String `perator+=(Distance n) '>
   <String `{'>
  >
 > # end of Para
 <Para 
  <Unique 28612>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <Char Tab >
   <String `current -= n;'>
  >
 > # end of Para
 <Para 
  <Unique 28615>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <Char Tab >
   <String `return *this;'>
  >
 > # end of Para
 <Para 
  <Unique 28613>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <String `}'>
  >
 > # end of Para
 <Para 
  <Unique 40405>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <String `self o'>
   <String `perator-(Distance n) const {'>
  >
 > # end of Para
 <Para 
  <Unique 28024>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <Char Tab >
   <String `return '>
   <String `self('>
   <String `current + n);'>
  >
 > # end of Para
 <Para 
  <Unique 28025>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <String `}'>
  >
 > # end of Para
 <Para 
  <Unique 40411>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <String `self& o'>
   <String `perator-'>
   <String `='>
   <String `(Distance n) '>
   <String `{'>
  >
 > # end of Para
 <Para 
  <Unique 28619>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <Char Tab >
   <String `current += n;'>
  >
 > # end of Para
 <Para 
  <Unique 28622>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <Char Tab >
   <String `return *this;'>
  >
 > # end of Para
 <Para 
  <Unique 28620>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <String `}'>
  >
 > # end of Para
 <Para 
  <Unique 28621>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <String `Reference o'>
   <String `perator[](Distance n) { return *(*this + n); }'>
  >
 > # end of Para
 <Para 
  <Unique 28027>
  <PgfTag `program'>
  <ParaLine 
   <String `};'>
  >
 > # end of Para
 <Para 
  <Unique 28028>
  <PgfTag `program'>
  <ParaLine 
  >
 > # end of Para
 <Para 
  <Unique 28029>
  <PgfTag `program'>
  <ParaLine 
   <TextRectID 90>
   <String `template <class RandomAccessIterator, class T, '>
   <String `class Reference, c'>
   <String `lass Distance\>'>
  >
 > # end of Para
 <Para 
  <Unique 28030>
  <PgfTag `program'>
  <ParaLine 
   <String `inline bool operator==('>
  >
 > # end of Para
 <Para 
  <Unique 40416>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <String `c'>
   <String `onst reverse_iterator<RandomAccessIterator, '>
   <Char Tab >
   <Char Tab >
   <Char Tab >
   <Char Tab >
   <Char Tab >
   <Char Tab >
   <String `T'>
   <String `, '>
   <String `Reference, '>
   <String `Distance\>& x, '>
  >
 > # end of Para
 <Para 
  <Unique 28031>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <String `c'>
   <String `onst reverse_iterator<RandomAccessIterator, T, '>
   <String `Reference, '>
   <String `Distance\>& y) {'>
  >
 > # end of Para
 <Para 
  <Unique 28032>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <String `return x.current == y.current;'>
  >
 > # end of Para
 <Para 
  <Unique 28033>
  <PgfTag `program'>
  <ParaLine 
   <String `}'>
  >
 > # end of Para
 <Para 
  <Unique 28034>
  <PgfTag `program'>
  <ParaLine 
  >
 > # end of Para
 <Para 
  <Unique 28035>
  <PgfTag `program'>
  <ParaLine 
   <String `template <class RandomAccessIterator, class T,'>
   <String ` class Reference,'>
   <String ` class Distance\>'>
  >
 > # end of Para
 <Para 
  <Unique 28036>
  <PgfTag `program'>
  <ParaLine 
   <String `inline bool operator<('>
  >
 > # end of Para
 <Para 
  <Unique 40417>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <String `c'>
   <String `onst reverse_iterator<RandomAccessIterator, T,'>
   <String ` Reference,'>
   <String ` Distance\>& x, '>
  >
 > # end of Para
 <Para 
  <Unique 28037>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <String `c'>
   <String `onst reverse_iterator<RandomAccessIterator, T,'>
   <String ` Reference,'>
   <String ` Distance\>& y) {'>
  >
 > # end of Para
 <Para 
  <Unique 28038>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <String `return y.current < x.current;'>
  >
 > # end of Para
 <Para 
  <Unique 28039>
  <PgfTag `program'>
  <ParaLine 
   <String `}'>
  >
 > # end of Para
 <Para 
  <Unique 28040>
  <PgfTag `program'>
  <ParaLine 
  >
 > # end of Para
 <Para 
  <Unique 28041>
  <PgfTag `program'>
  <ParaLine 
   <String `template <class RandomAccessIterator, class T,'>
   <String ` class Reference,'>
   <String ` class Distance\>'>
  >
 > # end of Para
 <Para 
  <Unique 28042>
  <PgfTag `program'>
  <ParaLine 
   <String `inline Distance operator-('>
  >
 > # end of Para
 <Para 
  <Unique 40418>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <String `c'>
   <String `onst reverse_iterator<RandomAccessIterator, T,'>
   <String ` Reference,'>
   <String ` Distance\>& x, '>
  >
 > # end of Para
 <Para 
  <Unique 28043>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <String `c'>
   <String `onst reverse_iterator<RandomAccessIterator, T,'>
   <String ` Reference,'>
   <String ` Distance\>& y) {'>
  >
 > # end of Para
 <Para 
  <Unique 28044>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <String `return y.current - x.current;'>
  >
 > # end of Para
 <Para 
  <Unique 28045>
  <PgfTag `program'>
  <ParaLine 
   <String `}'>
  >
 > # end of Para
 <Para 
  <Unique 28046>
  <PgfTag `program'>
  <ParaLine 
  >
 > # end of Para
 <Para 
  <Unique 28047>
  <PgfTag `program'>
  <ParaLine 
   <String `template <class RandomAccessIterator, class T,'>
   <String ` class Reference,'>
   <String ` class Distance\>'>
  >
 > # end of Para
 <Para 
  <Unique 28048>
  <PgfTag `program'>
  <ParaLine 
   <String `inline reverse_iterator<RandomAccessIterator, T,'>
   <String ` Reference,'>
   <String ` Distance\> operator+('>
  >
 > # end of Para
 <Para 
  <Unique 40422>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <String `D'>
   <String `istance n, '>
  >
 > # end of Para
 <Para 
  <Unique 40419>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <String `c'>
   <String `onst reverse_iterator<RandomAccessIterator, T,'>
   <String ` Reference,'>
   <String ` Distance\>& x) {'>
  >
 > # end of Para
 <Para 
  <Unique 28050>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <String `return reverse_iterator<RandomAccessIterator, T,'>
   <String ` Reference, '>
   <Char Tab >
   <Char Tab >
   <Char Tab >
   <Char Tab >
   <Char Tab >
   <String `D'>
   <String `istance'>
   <String `\>'>
  >
 > # end of Para
 <Para 
  <Unique 7693>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <Char Tab >
   <String `(x.'>
   <String `current - n);'>
  >
 > # end of Para
 <Para 
  <Unique 28051>
  <PgfTag `program'>
  <ParaLine 
   <String `}'>
  >
 > # end of Para
 <Para 
  <Unique 25319>
  <PgfTag `subsubsection'>
  <PgfNumString `11.2.2 '>
  <ParaLine 
   <String `I'>
   <String `nsert iterators'>
  >
 > # end of Para
 <Para 
  <Unique 25320>
  <PgfTag `body'>
  <ParaLine 
   <String `To make it possible to deal with insertion in the same way as writing into an array, a special kind of iterator '>
  >
  <ParaLine 
   <String `adaptors, called '>
   <Font 
    <FTag `Emphasis'>
   > # end of Font
   <String `insert iterators'>
   <Font 
    <FTag `'>
   > # end of Font
   <String `, are provided in the library. With regular iterator classes,'>
  >
 > # end of Para
 <Para 
  <Unique 25321>
  <PgfTag `program'>
  <ParaLine 
  >
 > # end of Para
 <Para 
  <Unique 32847>
  <PgfTag `program'>
  <ParaLine 
   <String `while (first != last) *result++ = *first++;'>
  >
 > # end of Para
 <Para 
  <Unique 25322>
  <PgfTag `body'>
  <ParaLine 
   <String `causes a range '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `[first, last)'>
   <Font 
    <FTag `'>
   > # end of Font
   <String ` to be copied into a range starting with '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `result'>
   <Font 
    <FTag `'>
   > # end of Font
   <String `. The same code with '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `result'>
   <Font 
    <FTag `'>
   > # end of Font
   <String ` '>
  >
  <ParaLine 
   <String `being an insert iterator will insert corresponding elements into the container. This device allows all of the '>
  >
  <ParaLine 
   <String `copying algorithms in the library to work in the '>
   <Font 
    <FTag `Emphasis'>
   > # end of Font
   <String `insert mod'>
   <Font 
    <FTag `'>
   > # end of Font
   <String `e instead of the regular overwrite mode. '>
  >
 > # end of Para
 <Para 
  <Unique 25333>
  <PgfTag `body'>
  <ParaLine 
   <String `An insert iterator is constructed from a container and possibly one of its iterators pointing to where '>
  >
  <ParaLine 
   <String `insertion takes place if it is neither at the beginning nor at the end of the container. Insert iterators satisfy '>
  >
  <ParaLine 
   <String `the requirements of output iterators. '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `operator*'>
   <Font 
    <FTag `'>
   > # end of Font
   <String ` returns the insert iterator itself. The assignment '>
  >
  <ParaLine 
   <Font 
    <FTag `program'>
   > # end of Font
   <String `operator=(const T& x)'>
   <Font 
    <FTag `'>
   > # end of Font
   <String ` is defined on insert iterators to allow writing into them, it inserts '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `x'>
   <Font 
    <FTag `'>
   > # end of Font
   <String ` right before '>
  >
  <ParaLine 
   <String `where the insert iterator is pointing. In other words, an insert iterator is like a cursor pointing into the '>
  >
  <ParaLine 
   <String `container where the insertion takes place. '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `back_insert_iterator'>
   <Font 
    <FTag `'>
   > # end of Font
   <String ` inserts elements at the end of a '>
  >
  <ParaLine 
   <String `container, '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `front_insert_iterator'>
   <Font 
    <FTag `'>
   > # end of Font
   <String ` inserts elements at the beginning of a container, and '>
  >
  <ParaLine 
   <Font 
    <FTag `program'>
   > # end of Font
   <String `insert_iterator'>
   <Font 
    <FTag `'>
   > # end of Font
   <String ` inserts elements where the iterator points to in a container. '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `back_inserter'>
   <Font 
    <FTag `'>
   > # end of Font
   <String `, '>
  >
  <ParaLine 
   <Font 
    <FTag `program'>
   > # end of Font
   <String `front_inserter'>
   <Font 
    <FTag `'>
   > # end of Font
   <String `, and '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `inserter'>
   <Font 
    <FTag `'>
   > # end of Font
   <String ` are three functions making the insert iterators out of a container.'>
  >
 > # end of Para
 <Para 
  <Unique 28092>
  <PgfTag `program'>
  <ParaLine 
  >
 > # end of Para
 <Para 
  <Unique 28177>
  <PgfTag `program'>
  <ParaLine 
   <String `template <class Container\>'>
  >
 > # end of Para
 <Para 
  <Unique 28093>
  <PgfTag `program'>
  <ParaLine 
   <String `class back_insert_iterator : public output_iterator {'>
  >
 > # end of Para
 <Para 
  <Unique 28094>
  <PgfTag `program'>
  <ParaLine 
   <String `protected:'>
  >
 > # end of Para
 <Para 
  <Unique 28095>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <String `Container& container;'>
  >
 > # end of Para
 <Para 
  <Unique 28096>
  <PgfTag `program'>
  <ParaLine 
   <String `public:'>
  >
 > # end of Para
 <Para 
  <Unique 28097>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <String `back_insert_iterator(Container& x) : container(x) {}'>
  >
 > # end of Para
 <Para 
  <Unique 28098>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <String `back_insert_iterator<Container\>& '>
  >
 > # end of Para
 <Para 
  <Unique 28184>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <String `operator=('>
   <Char Tab >
   <String `const Container::value_type& value) {'>
  >
 > # end of Para
 <Para 
  <Unique 28099>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <Char Tab >
   <String `container.push_back(value);'>
  >
 > # end of Para
 <Para 
  <Unique 28100>
  <PgfTag `program'>
  <ParaLine 
   <TextRectID 91>
   <Char Tab >
   <Char Tab >
   <String `return *this;'>
  >
 > # end of Para
 <Para 
  <Unique 28101>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <String `}'>
  >
 > # end of Para
 <Para 
  <Unique 28102>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <String `back_insert_iterator<Container\>& operator*() { return *this; }'>
  >
 > # end of Para
 <Para 
  <Unique 28103>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <String `back_insert_iterator<Container\>& operator++() { return *this; }'>
  >
 > # end of Para
 <Para 
  <Unique 28104>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <String `back_insert_iterator<Container\>'>
   <String `&'>
   <String ` operator++(int) { return *this; }'>
  >
 > # end of Para
 <Para 
  <Unique 28105>
  <PgfTag `program'>
  <ParaLine 
   <String `};'>
  >
 > # end of Para
 <Para 
  <Unique 28106>
  <PgfTag `program'>
  <ParaLine 
  >
 > # end of Para
 <Para 
  <Unique 28107>
  <PgfTag `program'>
  <ParaLine 
   <String `template <class Container\>'>
  >
 > # end of Para
 <Para 
  <Unique 32776>
  <PgfTag `program'>
  <ParaLine 
   <String `back_insert_iterator<Container\> back_inserter(Container& x) {'>
  >
 > # end of Para
 <Para 
  <Unique 32779>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <String `return back_insert_iterator<Container\>(x);'>
  >
 > # end of Para
 <Para 
  <Unique 32782>
  <PgfTag `program'>
  <ParaLine 
   <String `}'>
  >
 > # end of Para
 <Para 
  <Unique 32783>
  <PgfTag `program'>
  <ParaLine 
  >
 > # end of Para
 <Para 
  <Unique 28108>
  <PgfTag `program'>
  <ParaLine 
   <String `template <class Container\>'>
  >
 > # end of Para
 <Para 
  <Unique 28109>
  <PgfTag `program'>
  <ParaLine 
   <String `class front_insert_iterator : public output_iterator {'>
  >
 > # end of Para
 <Para 
  <Unique 28110>
  <PgfTag `program'>
  <ParaLine 
   <String `protected:'>
  >
 > # end of Para
 <Para 
  <Unique 28111>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <String `Container& container;'>
  >
 > # end of Para
 <Para 
  <Unique 28112>
  <PgfTag `program'>
  <ParaLine 
   <String `public:'>
  >
 > # end of Para
 <Para 
  <Unique 28113>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <String `front_insert_iterator(Container& x) : container(x) {}'>
  >
 > # end of Para
 <Para 
  <Unique 28114>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <String `front_insert_iterator<Container\>&'>
  >
 > # end of Para
 <Para 
  <Unique 28187>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <String `operator=(const Container::value_type& value) {'>
  >
 > # end of Para
 <Para 
  <Unique 28115>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <Char Tab >
   <String `container.push_front(value);'>
  >
 > # end of Para
 <Para 
  <Unique 28116>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <Char Tab >
   <String `return *this;'>
  >
 > # end of Para
 <Para 
  <Unique 28117>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <String `}'>
  >
 > # end of Para
 <Para 
  <Unique 28118>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <String `front_insert_iterator<Container\>& operator*() { return *this; }'>
  >
 > # end of Para
 <Para 
  <Unique 28119>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <String `front_insert_iterator<Container\>& operator++() { return *this; }'>
  >
 > # end of Para
 <Para 
  <Unique 28120>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <String `front_insert_iterator<Container\>'>
   <String `&'>
   <String ` operator++(int) { return *this; }'>
  >
 > # end of Para
 <Para 
  <Unique 28121>
  <PgfTag `program'>
  <ParaLine 
   <String `};'>
  >
 > # end of Para
 <Para 
  <Unique 28123>
  <PgfTag `program'>
  <ParaLine 
  >
 > # end of Para
 <Para 
  <Unique 28124>
  <PgfTag `program'>
  <ParaLine 
   <String `template <class Container\>'>
  >
 > # end of Para
 <Para 
  <Unique 32785>
  <PgfTag `program'>
  <ParaLine 
   <String `front_insert_iterator<Container\> front_inserter(Container& x) {'>
  >
 > # end of Para
 <Para 
  <Unique 32786>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <String `return front_insert_iterator<Container\>(x);'>
  >
 > # end of Para
 <Para 
  <Unique 32787>
  <PgfTag `program'>
  <ParaLine 
   <String `}'>
  >
 > # end of Para
 <Para 
  <Unique 32788>
  <PgfTag `program'>
  <ParaLine 
  >
 > # end of Para
 <Para 
  <Unique 32789>
  <PgfTag `program'>
  <ParaLine 
   <String `template <class Container\>'>
  >
 > # end of Para
 <Para 
  <Unique 28125>
  <PgfTag `program'>
  <ParaLine 
   <String `class insert_iterator : public output_iterator {'>
  >
 > # end of Para
 <Para 
  <Unique 28126>
  <PgfTag `program'>
  <ParaLine 
   <String `protected:'>
  >
 > # end of Para
 <Para 
  <Unique 28127>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <String `Container& container;'>
  >
 > # end of Para
 <Para 
  <Unique 28128>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <String `Container::iterator iter;'>
  >
 > # end of Para
 <Para 
  <Unique 28129>
  <PgfTag `program'>
  <ParaLine 
   <String `public:'>
  >
 > # end of Para
 <Para 
  <Unique 28130>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <String `insert_iterator(Container& x, Container::iterator i)'>
  >
 > # end of Para
 <Para 
  <Unique 34493>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <Char Tab >
   <String `: container(x), iter(i) {}'>
  >
 > # end of Para
 <Para 
  <Unique 28131>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <String `insert_iterator<Container\>& '>
   <Char Tab >
   <String `operator=(const Container::value_type& value) {'>
  >
 > # end of Para
 <Para 
  <Unique 28132>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <Char Tab >
   <String `iter = container.insert(iter, value);'>
  >
 > # end of Para
 <Para 
  <Unique 28133>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <Char Tab >
   <String `++iter;'>
  >
 > # end of Para
 <Para 
  <Unique 28134>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <Char Tab >
   <String `return *this;'>
  >
 > # end of Para
 <Para 
  <Unique 28135>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <String `}'>
  >
 > # end of Para
 <Para 
  <Unique 28136>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <String `insert_iterator<Container\>& operator*() { return *this; }'>
  >
 > # end of Para
 <Para 
  <Unique 28137>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <String `insert_iterator<Container\>& operator++() { return *this; }'>
  >
 > # end of Para
 <Para 
  <Unique 28138>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <String `insert_iterator<Container\>'>
   <String `&'>
   <String ` operator++(int) { return *this; }'>
  >
 > # end of Para
 <Para 
  <Unique 28139>
  <PgfTag `program'>
  <ParaLine 
   <String `};'>
  >
 > # end of Para
 <Para 
  <Unique 31924>
  <PgfTag `program'>
  <ParaLine 
  >
 > # end of Para
 <Para 
  <Unique 31925>
  <PgfTag `program'>
  <ParaLine 
   <String `template <class Container, class Iterator\>'>
  >
 > # end of Para
 <Para 
  <Unique 31926>
  <PgfTag `program'>
  <ParaLine 
   <String `insert_iterator<Container\> inserter(Container& x, Iterator i) {'>
  >
 > # end of Para
 <Para 
  <Unique 31930>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <String `return insert_iterator<Container\>(x, Container::iterator(i));'>
  >
 > # end of Para
 <Para 
  <Unique 31932>
  <PgfTag `program'>
  <ParaLine 
   <String `}'>
  >
 > # end of Para
 <Para 
  <Unique 27247>
  <PgfTag `subsection'>
  <PgfNumString `11.3 '>
  <ParaLine 
   <String `F'>
   <String `unction adaptors'>
  >
 > # end of Para
 <Para 
  <Unique 31056>
  <PgfTag `body'>
  <ParaLine 
   <String `Function adaptors work only with function object classes with argument types and result type defined. '>
  >
 > # end of Para
 <Para 
  <Unique 27248>
  <PgfTag `subsubsection'>
  <PgfNumString `11.3.1 '>
  <ParaLine 
   <TextRectID 92>
   <String `Negators'>
  >
 > # end of Para
 <Para 
  <Unique 39477>
  <PgfTag `body'>
  <ParaLine 
   <String `Negators '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `not1'>
   <Font 
    <FTag `'>
   > # end of Font
   <String ` and '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `not2'>
   <Font 
    <FTag `'>
   > # end of Font
   <String ` take a unary and a binary predicate correspondingly and return their '>
  >
  <ParaLine 
   <String `complements.'>
  >
 > # end of Para
 <Para 
  <Unique 27850>
  <PgfTag `program'>
  <ParaLine 
  >
 > # end of Para
 <Para 
  <Unique 27851>
  <PgfTag `program'>
  <ParaLine 
   <String `template <class Predicate\>'>
  >
 > # end of Para
 <Para 
  <Unique 27852>
  <PgfTag `program'>
  <ParaLine 
   <String `class unary_negate : public unary_function<Predicate::argument_type, bool\>'>
   <String ` {'>
  >
 > # end of Para
 <Para 
  <Unique 7717>
  <PgfTag `program'>
  <ParaLine 
   <String `protected:'>
  >
 > # end of Para
 <Para 
  <Unique 7719>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <String `Predicate pred;'>
  >
 > # end of Para
 <Para 
  <Unique 27853>
  <PgfTag `program'>
  <ParaLine 
   <String `public:'>
  >
 > # end of Para
 <Para 
  <Unique 27855>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <String `unary_negate(const Predicate& x) : '>
   <String `pred('>
   <String `x) {}'>
  >
 > # end of Para
 <Para 
  <Unique 27856>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <String `bool operator()(const argument_type& x) const { return !'>
   <String `pred('>
   <String `x); }'>
  >
 > # end of Para
 <Para 
  <Unique 27857>
  <PgfTag `program'>
  <ParaLine 
   <String `};'>
  >
 > # end of Para
 <Para 
  <Unique 27858>
  <PgfTag `program'>
  <ParaLine 
  >
 > # end of Para
 <Para 
  <Unique 27859>
  <PgfTag `program'>
  <ParaLine 
   <String `template <class Predicate\>'>
  >
 > # end of Para
 <Para 
  <Unique 31456>
  <PgfTag `program'>
  <ParaLine 
   <String `unary_negate<Predicate\> not1(const Predicate& pred) {'>
  >
 > # end of Para
 <Para 
  <Unique 31457>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <String `return unary_negate<Predicate\>(pred);'>
  >
 > # end of Para
 <Para 
  <Unique 31458>
  <PgfTag `program'>
  <ParaLine 
   <String `}'>
  >
 > # end of Para
 <Para 
  <Unique 31459>
  <PgfTag `program'>
  <ParaLine 
  >
 > # end of Para
 <Para 
  <Unique 31460>
  <PgfTag `program'>
  <ParaLine 
   <String `template <class Predicate\> '>
  >
 > # end of Para
 <Para 
  <Unique 27860>
  <PgfTag `program'>
  <ParaLine 
   <String `class binary_negate : public binary_function<Predicate::first_argument_type,'>
  >
 > # end of Para
 <Para 
  <Unique 34330>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <Char Tab >
   <Char Tab >
   <Char Tab >
   <Char Tab >
   <Char Tab >
   <String `Predicate::second_argument_type, bool\>'>
   <String ` {'>
  >
 > # end of Para
 <Para 
  <Unique 7729>
  <PgfTag `program'>
  <ParaLine 
   <String `protected:'>
  >
 > # end of Para
 <Para 
  <Unique 7731>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <String `Predicate pred;'>
  >
 > # end of Para
 <Para 
  <Unique 27861>
  <PgfTag `program'>
  <ParaLine 
   <String `public:'>
  >
 > # end of Para
 <Para 
  <Unique 27863>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <String `binary_negate(const Predicate& x) : '>
   <String `pred('>
   <String `x) {}'>
  >
 > # end of Para
 <Para 
  <Unique 27864>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <String `bool operator()(const first_argument_type& x, '>
  >
 > # end of Para
 <Para 
  <Unique 31690>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <Char Tab >
   <Char Tab >
   <String ` c'>
   <String `onst second_argument_type& y) const {'>
  >
 > # end of Para
 <Para 
  <Unique 31185>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <Char Tab >
   <String `return !'>
   <String `pred('>
   <String `x, y); '>
  >
 > # end of Para
 <Para 
  <Unique 31186>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <String `}'>
  >
 > # end of Para
 <Para 
  <Unique 27865>
  <PgfTag `program'>
  <ParaLine 
   <String `};'>
  >
 > # end of Para
 <Para 
  <Unique 31025>
  <PgfTag `program'>
  <ParaLine 
  >
 > # end of Para
 <Para 
  <Unique 31046>
  <PgfTag `program'>
  <ParaLine 
   <String `template <class Predicate\>'>
  >
 > # end of Para
 <Para 
  <Unique 31043>
  <PgfTag `program'>
  <ParaLine 
   <String `binary_negate<Predicate\> not2(const Predicate& pred) {'>
  >
 > # end of Para
 <Para 
  <Unique 31044>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <String `return binary_negate<Predicate\>(pred);'>
  >
 > # end of Para
 <Para 
  <Unique 31041>
  <PgfTag `program'>
  <ParaLine 
   <String `}'>
  >
 > # end of Para
 <Para 
  <Unique 27894>
  <PgfTag `subsubsection'>
  <PgfNumString `11.3.2 '>
  <ParaLine 
   <String `Binders'>
  >
 > # end of Para
 <Para 
  <Unique 39503>
  <PgfTag `body'>
  <ParaLine 
   <String `Binders '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `bind1st'>
   <Font 
    <FTag `'>
   > # end of Font
   <String ` and '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `bind2nd'>
   <Font 
    <FTag `'>
   > # end of Font
   <String ` take a function object '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `f'>
   <Font 
    <FTag `'>
   > # end of Font
   <String ` of two arguments and a value '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `x'>
   <Font 
    <FTag `'>
   > # end of Font
   <String ` and return a function '>
  >
  <ParaLine 
   <String `object of one argument constructed out of '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `f'>
   <Font 
    <FTag `'>
   > # end of Font
   <String ` with the first or second argument correspondingly bound to '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `x'>
   <Font 
    <FTag `'>
   > # end of Font
   <String `.'>
  >
 > # end of Para
 <Para 
  <Unique 27866>
  <PgfTag `program'>
  <ParaLine 
  >
 > # end of Para
 <Para 
  <Unique 31062>
  <PgfTag `program'>
  <ParaLine 
   <String `template <class Operation\> '>
  >
 > # end of Para
 <Para 
  <Unique 27868>
  <PgfTag `program'>
  <ParaLine 
   <String `class binder1st : public unary_function<'>
   <Char Tab >
   <Char Tab >
   <Char Tab >
   <Char Tab >
   <Char Tab >
   <String `Operation::second_argument_type,'>
  >
 > # end of Para
 <Para 
  <Unique 33032>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <Char Tab >
   <Char Tab >
   <Char Tab >
   <Char Tab >
   <Char Tab >
   <String `Operation::result_type\> {'>
  >
 > # end of Para
 <Para 
  <Unique 27869>
  <PgfTag `program'>
  <ParaLine 
   <String `protected:'>
  >
 > # end of Para
 <Para 
  <Unique 27870>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <String `Operation op;'>
  >
 > # end of Para
 <Para 
  <Unique 27871>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <String `Operation::first_'>
   <String `argument_type value;'>
  >
 > # end of Para
 <Para 
  <Unique 27872>
  <PgfTag `program'>
  <ParaLine 
   <String `public:'>
  >
 > # end of Para
 <Para 
  <Unique 27874>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <String `binder1st(const Operation& x, const Operation::first_argument_type& y)'>
   <Char Tab >
  >
 > # end of Para
 <Para 
  <Unique 31745>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <Char Tab >
   <String `: op(x), value(y) {}'>
  >
 > # end of Para
 <Para 
  <Unique 27875>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <String `result_type operator()(const argument_type& x) const {'>
  >
 > # end of Para
 <Para 
  <Unique 31711>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <Char Tab >
   <String `return op(value, x); '>
  >
 > # end of Para
 <Para 
  <Unique 31712>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <String `}'>
  >
 > # end of Para
 <Para 
  <Unique 27876>
  <PgfTag `program'>
  <ParaLine 
   <String `};'>
  >
 > # end of Para
 <Para 
  <Unique 31373>
  <PgfTag `program'>
  <ParaLine 
  >
 > # end of Para
 <Para 
  <Unique 31381>
  <PgfTag `program'>
  <ParaLine 
   <String `template <class Operation, class T\>'>
  >
 > # end of Para
 <Para 
  <Unique 31382>
  <PgfTag `program'>
  <ParaLine 
   <String `binder1st<Operation\> bind1st(const Operation& op, '>
   <Char Tab >
   <Char Tab >
   <String `const T& x) {'>
  >
 > # end of Para
 <Para 
  <Unique 31341>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <String `return binder1st<Operation\>(op, Operation::first_argument_type(x));'>
  >
 > # end of Para
 <Para 
  <Unique 31342>
  <PgfTag `program'>
  <ParaLine 
   <TextRectID 93>
   <String `}'>
  >
 > # end of Para
 <Para 
  <Unique 31343>
  <PgfTag `program'>
  <ParaLine 
  >
 > # end of Para
 <Para 
  <Unique 27878>
  <PgfTag `program'>
  <ParaLine 
   <String `template <class Operation\> '>
  >
 > # end of Para
 <Para 
  <Unique 27879>
  <PgfTag `program'>
  <ParaLine 
   <String `class binder2nd : public unary_function<Operation::first_argument_type,'>
  >
 > # end of Para
 <Para 
  <Unique 33051>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <Char Tab >
   <Char Tab >
   <Char Tab >
   <Char Tab >
   <Char Tab >
   <String `Operation::result_type\> {'>
  >
 > # end of Para
 <Para 
  <Unique 27880>
  <PgfTag `program'>
  <ParaLine 
   <String `protected:'>
  >
 > # end of Para
 <Para 
  <Unique 27881>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <String `Operation op;'>
  >
 > # end of Para
 <Para 
  <Unique 27882>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <String `Operation::second_'>
   <String `argument_type value;'>
  >
 > # end of Para
 <Para 
  <Unique 31168>
  <PgfTag `program'>
  <ParaLine 
   <String `public:'>
  >
 > # end of Para
 <Para 
  <Unique 31170>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <String `binder2nd(const Operation& x, const Operation::second_argument_type& y) '>
  >
 > # end of Para
 <Para 
  <Unique 31727>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <Char Tab >
   <String `: op(x), value(y) {}'>
  >
 > # end of Para
 <Para 
  <Unique 27886>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <String `result_type operator()(const argument_type& x) const {'>
  >
 > # end of Para
 <Para 
  <Unique 31730>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <Char Tab >
   <String `return op(x, value); '>
  >
 > # end of Para
 <Para 
  <Unique 31731>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <String `}'>
  >
 > # end of Para
 <Para 
  <Unique 27887>
  <PgfTag `program'>
  <ParaLine 
   <String `};'>
  >
 > # end of Para
 <Para 
  <Unique 31336>
  <PgfTag `program'>
  <ParaLine 
  >
 > # end of Para
 <Para 
  <Unique 31331>
  <PgfTag `program'>
  <ParaLine 
   <String `template <class Operation, class T\>'>
  >
 > # end of Para
 <Para 
  <Unique 31391>
  <PgfTag `program'>
  <ParaLine 
   <String `binder2nd<Operation\> bind2nd(const Operation& op, '>
   <Char Tab >
   <Char Tab >
   <String `const T& x) {'>
  >
 > # end of Para
 <Para 
  <Unique 31393>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <String `return binder2nd<Operation\>(op, Operation::second_argument_type(x));'>
  >
 > # end of Para
 <Para 
  <Unique 32560>
  <PgfTag `program'>
  <ParaLine 
   <String `}'>
  >
 > # end of Para
 <Para 
  <Unique 39523>
  <PgfTag `body'>
  <ParaLine 
   <String `For example, '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `find'>
   <String `_if'>
   <String `(v.begin(), v.end(), bind2nd(greater<int\>(), 5))'>
   <Font 
    <FTag `'>
   > # end of Font
   <String ` finds the first integer in '>
  >
  <ParaLine 
   <String `vector '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `v'>
   <Font 
    <FTag `'>
   > # end of Font
   <String ` greater than 5; '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `find'>
   <String `_if'>
   <String `(v.begin(), v.end(), bind1st(greater<int\>(), 5))'>
   <Font 
    <FTag `'>
   > # end of Font
   <String ` finds the first '>
  >
  <ParaLine 
   <String `integer in '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `v'>
   <Font 
    <FTag `'>
   > # end of Font
   <String ` '>
   <String `less t'>
   <String `han 5'>
   <String `.'>
  >
 > # end of Para
 <Para 
  <Unique 32561>
  <PgfTag `subsubsection'>
  <PgfNumString `11.3.3 '>
  <ParaLine 
   <String `Adaptors for pointers to functions '>
  >
 > # end of Para
 <Para 
  <Unique 32562>
  <PgfTag `body'>
  <ParaLine 
   <String `To allow pointers to (unary and binary) functions to work with function adaptors the library provides:'>
  >
 > # end of Para
 <Para 
  <Unique 32396>
  <PgfTag `program'>
  <ParaLine 
  >
 > # end of Para
 <Para 
  <Unique 32397>
  <PgfTag `program'>
  <ParaLine 
   <String `template <class Arg, class Result\>'>
  >
 > # end of Para
 <Para 
  <Unique 32398>
  <PgfTag `program'>
  <ParaLine 
   <String `class pointer_to_unary_function : public unary_function<Arg, Result\>'>
   <String ` {'>
  >
 > # end of Para
 <Para 
  <Unique 7909>
  <PgfTag `program'>
  <ParaLine 
   <String `protected:'>
  >
 > # end of Para
 <Para 
  <Unique 9398>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <String `Result (*'>
   <String `ptr'>
   <String `)(Arg)'>
   <String `;'>
  >
 > # end of Para
 <Para 
  <Unique 9399>
  <PgfTag `program'>
  <ParaLine 
   <String `public:'>
  >
 > # end of Para
 <Para 
  <Unique 9400>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <String `pointer_to_unary_function() {}'>
  >
 > # end of Para
 <Para 
  <Unique 32402>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <String `pointer_to_unary_function(Result (*x)(Arg)'>
   <String `) '>
   <Char Tab >
   <Char Tab >
   <String `:'>
   <String ` '>
   <String `ptr('>
   <String `x) {}'>
  >
 > # end of Para
 <Para 
  <Unique 32404>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <String `Result operator()('>
   <String `A'>
   <String `rg'>
   <String ` x'>
   <String `) const { return '>
   <String `ptr('>
   <String `x); }'>
  >
 > # end of Para
 <Para 
  <Unique 32405>
  <PgfTag `program'>
  <ParaLine 
   <String `};'>
  >
 > # end of Para
 <Para 
  <Unique 32406>
  <PgfTag `program'>
  <ParaLine 
  >
 > # end of Para
 <Para 
  <Unique 32407>
  <PgfTag `program'>
  <ParaLine 
   <String `template <class Arg, class Result\>'>
  >
 > # end of Para
 <Para 
  <Unique 32408>
  <PgfTag `program'>
  <ParaLine 
   <String `pointer_to_unary_function<Arg, Result\> ptr_fun(Result (*x)(Arg)) {'>
  >
 > # end of Para
 <Para 
  <Unique 32409>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <String `return pointer_to_unary_function<Arg, Result\>(x);'>
  >
 > # end of Para
 <Para 
  <Unique 32410>
  <PgfTag `program'>
  <ParaLine 
   <String `}'>
  >
 > # end of Para
 <Para 
  <Unique 32411>
  <PgfTag `program'>
  <ParaLine 
  >
 > # end of Para
 <Para 
  <Unique 32412>
  <PgfTag `program'>
  <ParaLine 
   <String `template <class Arg1, class Arg2, class Result\>'>
  >
 > # end of Para
 <Para 
  <Unique 32413>
  <PgfTag `program'>
  <ParaLine 
   <String `class pointer_to_binary_function : public binary_function<Arg1, Arg2, Result\>'>
   <String ` {'>
  >
 > # end of Para
 <Para 
  <Unique 7923>
  <PgfTag `program'>
  <ParaLine 
   <String `protected:'>
  >
 > # end of Para
 <Para 
  <Unique 7925>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <String `Result (*'>
   <String `ptr'>
   <String `)(Arg1, Arg2)'>
   <String `;'>
  >
 > # end of Para
 <Para 
  <Unique 32414>
  <PgfTag `program'>
  <ParaLine 
   <String `public:'>
  >
 > # end of Para
 <Para 
  <Unique 9404>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <String `pointer_to_binary_function() {}'>
  >
 > # end of Para
 <Para 
  <Unique 32418>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <String `pointer_to_binary_function(Result (*x)(Arg1, Arg2)'>
   <String `) '>
   <Char Tab >
   <Char Tab >
   <String `:'>
   <String ` '>
   <String `ptr('>
   <String `x) {}'>
  >
 > # end of Para
 <Para 
  <Unique 32420>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <String `Result operator()('>
   <String `A'>
   <String `rg1'>
   <String ` x'>
   <String `, '>
   <String `A'>
   <String `rg2'>
   <String ` y'>
   <String `) const '>
   <String `{ '>
   <Char Tab >
   <Char Tab >
   <String `r'>
   <String `eturn '>
   <String `ptr('>
   <String `x, y)'>
   <String `; }'>
  >
 > # end of Para
 <Para 
  <Unique 32421>
  <PgfTag `program'>
  <ParaLine 
   <String `};'>
  >
 > # end of Para
 <Para 
  <Unique 32422>
  <PgfTag `program'>
  <ParaLine 
  >
 > # end of Para
 <Para 
  <Unique 32423>
  <PgfTag `program'>
  <ParaLine 
   <String `template <class Arg1, class Arg2, class Result\>'>
  >
 > # end of Para
 <Para 
  <Unique 32424>
  <PgfTag `program'>
  <ParaLine 
   <String `pointer_to_binary_function<Arg1, Arg2, Result\> '>
  >
 > # end of Para
 <Para 
  <Unique 32425>
  <PgfTag `program'>
  <ParaLine 
   <String `ptr_fun(Result (*x)(Arg1, Arg2)) {'>
  >
 > # end of Para
 <Para 
  <Unique 32426>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <String `return pointer_to_binary_function<Arg1, Arg2, Result\>(x);'>
  >
 > # end of Para
 <Para 
  <Unique 32427>
  <PgfTag `program'>
  <ParaLine 
   <String `}'>
  >
 > # end of Para
 <Para 
  <Unique 40518>
  <PgfTag `body'>
  <ParaLine 
   <TextRectID 94>
   <String `For example, '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `replace_if(v.begin(), v.end(), not1(bind2nd(ptr_fun(strcmp), \xd3 C\xd3 )), \xd3 C++\xd3 )'>
   <Font 
    <FTag `'>
   > # end of Font
   <String ` '>
  >
  <ParaLine 
   <String `replaces all the '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `\xd3 C\xd3 '>
   <Font 
    <FTag `'>
   > # end of Font
   <String ` with '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `\xd3 C++\xd3 '>
   <Font 
    <FTag `'>
   > # end of Font
   <String ` in sequence '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `v'>
   <Font 
    <FTag `'>
   > # end of Font
   <String `.'>
  >
 > # end of Para
 <Para 
  <Unique 40519>
  <PgfTag `body'>
  <ParaLine 
   <String `Compilation systems that have multiple pointer to function types have to provide additional '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `ptr_fun'>
   <Font 
    <FTag `'>
   > # end of Font
   <String ` '>
  >
  <ParaLine 
   <String `template functions. '>
  >
 > # end of Para
 <Para 
  <Unique 6632>
  <PgfTag `section'>
  <PgfNumString `12  '>
  <ParaLine 
   <String `Memory Handlin'>
   <String `g P'>
   <String `rimitives'>
  >
 > # end of Para
 <Para 
  <Unique 38379>
  <PgfTag `body'>
  <ParaLine 
   <String `To obtain a typed pointer to an uninitialized memory buffer of a given size the following function is '>
  >
  <ParaLine 
   <String `defined:'>
  >
 > # end of Para
 <Para 
  <Unique 28899>
  <PgfTag `program'>
  <ParaLine 
  >
 > # end of Para
 <Para 
  <Unique 28856>
  <PgfTag `program'>
  <ParaLine 
   <String `template <class T\>'>
  >
 > # end of Para
 <Para 
  <Unique 28857>
  <PgfTag `program'>
  <ParaLine 
   <String `inline T* allocate(ptrdiff_t n, T*); // n \>= 0'>
  >
 > # end of Para
 <Para 
  <Unique 38445>
  <PgfTag `body'>
  <ParaLine 
   <String `The size (in bytes) of the allocated buffer is no less than '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `n*sizeof(T)'>
   <Font 
    <FTag `'>
   > # end of Font
   <String `. '>
  >
 > # end of Para
 <Para 
  <Unique 38448>
  <PgfTag `body'>
  <ParaLine 
   <String `For every memory model there is a corresponding '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `allocate'>
   <Font 
    <FTag `'>
   > # end of Font
   <String ` template function defined with the first '>
  >
  <ParaLine 
   <String `argument type being the distance type of the pointers in the memory model.'>
  >
 > # end of Para
 <Para 
  <Unique 38455>
  <PgfTag `body'>
  <ParaLine 
   <String `For example, if a compilation system supports '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `__huge'>
   <Font 
    <FTag `'>
   > # end of Font
   <String ` p'>
   <String `ointers with the distance type being '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `long long'>
   <Font 
    <FTag `'>
   > # end of Font
   <String `, the '>
  >
  <ParaLine 
   <String `following template function is provided:'>
  >
 > # end of Para
 <Para 
  <Unique 38456>
  <PgfTag `program'>
  <ParaLine 
  >
 > # end of Para
 <Para 
  <Unique 38457>
  <PgfTag `program'>
  <ParaLine 
   <String `template <class T\>'>
  >
 > # end of Para
 <Para 
  <Unique 38458>
  <PgfTag `program'>
  <ParaLine 
   <String `inline T '>
   <String `__huge*'>
   <String ` allocate(long long n, T'>
   <String ` __huge '>
   <String `*);'>
  >
 > # end of Para
 <Para 
  <Unique 38459>
  <PgfTag `body'>
  <ParaLine 
   <String `Also, the following functions are provided'>
   <String `:'>
  >
 > # end of Para
 <Para 
  <Unique 38439>
  <PgfTag `program'>
  <ParaLine 
  >
 > # end of Para
 <Para 
  <Unique 40300>
  <PgfTag `program'>
  <ParaLine 
   <String `template <class T\>'>
  >
 > # end of Para
 <Para 
  <Unique 38432>
  <PgfTag `program'>
  <ParaLine 
   <String `inline void deallocate(T* buffer);'>
  >
 > # end of Para
 <Para 
  <Unique 38376>
  <PgfTag `program'>
  <ParaLine 
  >
 > # end of Para
 <Para 
  <Unique 28862>
  <PgfTag `program'>
  <ParaLine 
   <String `template <class T1, class T2\>'>
  >
 > # end of Para
 <Para 
  <Unique 28863>
  <PgfTag `program'>
  <ParaLine 
   <String `inline void construct(T1* p, const T2& value) {'>
  >
 > # end of Para
 <Para 
  <Unique 28864>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <String `new (p) T1(value);'>
  >
 > # end of Para
 <Para 
  <Unique 28865>
  <PgfTag `program'>
  <ParaLine 
   <String `}'>
  >
 > # end of Para
 <Para 
  <Unique 38297>
  <PgfTag `program'>
  <ParaLine 
  >
 > # end of Para
 <Para 
  <Unique 38316>
  <PgfTag `program'>
  <ParaLine 
   <String `template <class T\>'>
  >
 > # end of Para
 <Para 
  <Unique 28868>
  <PgfTag `program'>
  <ParaLine 
   <String `inline void destroy(T* pointer) {'>
  >
 > # end of Para
 <Para 
  <Unique 28869>
  <PgfTag `program'>
  <ParaLine 
   <Char Tab >
   <String `pointer-\>'>
   <String `~'>
   <String `T();'>
  >
 > # end of Para
 <Para 
  <Unique 28870>
  <PgfTag `program'>
  <ParaLine 
   <String `}'>
  >
 > # end of Para
 <Para 
  <Unique 38414>
  <PgfTag `body'>
  <ParaLine 
   <Font 
    <FTag `program'>
   > # end of Font
   <String `deallocate'>
   <Font 
    <FTag `'>
   > # end of Font
   <String ` frees the buffer allocated by '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `allocate'>
   <Font 
    <FTag `'>
   > # end of Font
   <String `. '>
   <String `For every memory model there are corresponding '>
  >
  <ParaLine 
   <Font 
    <FTag `program'>
   > # end of Font
   <String `deallocate'>
   <Font 
    <FTag `'>
   > # end of Font
   <String `, '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `construct'>
   <Font 
    <FTag `'>
   > # end of Font
   <String ` and '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `destroy'>
   <Font 
    <FTag `'>
   > # end of Font
   <String ` template functions defined with the first argument type being the '>
  >
  <ParaLine 
   <String `pointer type of the memory model.'>
  >
 > # end of Para
 <Para 
  <Unique 38322>
  <PgfTag `program'>
  <ParaLine 
  >
 > # end of Para
 <Para 
  <Unique 38428>
  <PgfTag `program'>
  <ParaLine 
   <String `template <class T\>'>
  >
 > # end of Para
 <Para 
  <Unique 4247>
  <PgfTag `program'>
  <ParaLine 
   <String `pair<T*, ptrdiff_t\> get_temporary_buffer(ptrdiff_t n, T*);'>
  >
 > # end of Para
 <Para 
  <Unique 4248>
  <PgfTag `program'>
  <ParaLine 
  >
 > # end of Para
 <Para 
  <Unique 4249>
  <PgfTag `program'>
  <ParaLine 
   <String `template <class T\>'>
  >
 > # end of Para
 <Para 
  <Unique 4250>
  <PgfTag `program'>
  <ParaLine 
   <String `void return_temporary_buffer(T* p);'>
  >
 > # end of Para
 <Para 
  <Unique 10515>
  <PgfTag `body'>
  <ParaLine 
   <Font 
    <FTag `program'>
   > # end of Font
   <String `get_temporary_buffer'>
   <Font 
    <FTag `'>
   > # end of Font
   <String ` finds the largest buffer not greater than '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `n*sizeof(T)'>
   <Font 
    <FTag `'>
   > # end of Font
   <String `, and returns a pair '>
  >
  <ParaLine 
   <String `consisting of the address and the capacity (in the units of '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `sizeof(T)'>
   <Font 
    <FTag `'>
   > # end of Font
   <String `) of the buffer. '>
  >
  <ParaLine 
   <Font 
    <FTag `program'>
   > # end of Font
   <String `return_temporary_buffer'>
   <Font 
    <FTag `'>
   > # end of Font
   <String ` returns the buffer allocated by '>
   <Font 
    <FTag `program'>
   > # end of Font
   <String `get_temporary_buffer'>
   <Font 
    <FTag `'>
   > # end of Font
   <String `.'>
  >
 > # end of Para
 <Para 
  <Unique 10526>
  <PgfTag `section'>
  <PgfNumString `13  '>
  <ParaLine 
   <String `B'>
   <String `ibliography'>
  >
 > # end of Para
 <Para 
  <Unique 29099>
  <PgfTag `body'>
  <ParaLine 
   <String `M. Ellis and B. Stroustrup, '>
   <Font 
    <FTag `Emphasis'>
   > # end of Font
   <String `The Annotated C++ Reference Manual'>
   <Font 
    <FTag `'>
   > # end of Font
   <String `, Addison-Wesley, '>
   <String `Massachusetts,'>
   <String ` 1990.'>
  >
 > # end of Para
 <Para 
  <Unique 37050>
  <PgfTag `body'>
  <ParaLine 
   <TextRectID 95>
   <String `D. Kapur, D. R. Musser, and A. A. Stepanov, \xd2 Tecton, A Language for Manipulating Generic Objects,\xd3  '>
   <Font 
    <FTag `Emphasis'>
   > # end of Font
   <String `Proc. '>
  >
  <ParaLine 
   <String `of Workshop on Program Specification'>
   <Font 
    <FTag `'>
   > # end of Font
   <String `, Aarhus, Denmark, August 1981, '>
   <Font 
    <FTag `Emphasis'>
   > # end of Font
   <String `Lecture Notes in Computer Science'>
   <Font 
    <FTag `'>
   > # end of Font
   <String `, '>
  >
  <ParaLine 
   <String `Springer-Verlag, vol. 134, 1982.'>
  >
 > # end of Para
 <Para 
  <Unique 34169>
  <PgfTag `body'>
  <ParaLine 
   <String `D. Kapur, D. R. Musser, and A. A. Stepanov, \xd2 Operators and Algebraic Structures,\xd3  '>
   <Font 
    <FTag `Emphasis'>
   > # end of Font
   <String `Proc. of the Conference '>
  >
  <ParaLine 
   <String `on Functional Programming Languages and Computer Architecture'>
   <Font 
    <FTag `'>
   > # end of Font
   <String `, Portsmouth, New Hampshire, October '>
  >
  <ParaLine 
   <String `1981.'>
  >
 > # end of Para
 <Para 
  <Unique 34168>
  <PgfTag `body'>
  <ParaLine 
   <String `A. Kershenbaum, D. R. Musser, and A. A. Stepanov, \xd2 Higher Order Imperative Programming,\xd3  Technical '>
  >
  <ParaLine 
   <String `Report 88-10, Rensselaer Polytechnic Institute, April 1988.'>
  >
 > # end of Para
 <Para 
  <Unique 37124>
  <PgfTag `body'>
  <ParaLine 
   <String `A. Koenig, \xd2 Associative arrays in C++,\xd3  '>
   <Font 
    <FTag `Emphasis'>
   > # end of Font
   <String `Proc. USENIX Conference'>
   <Font 
    <FTag `'>
   > # end of Font
   <String `, San Francisco, CA, June 1988.'>
  >
 > # end of Para
 <Para 
  <Unique 37125>
  <PgfTag `body'>
  <ParaLine 
   <String `A. Koenig, \xd2 Applicators, Manipulators, and Function Objects,\xd3  '>
   <Font 
    <FTag `Emphasis'>
   > # end of Font
   <String `C++ Journal'>
   <Font 
    <FTag `'>
   > # end of Font
   <String `, vol. 1, #1, Summer 1990.'>
  >
 > # end of Para
 <Para 
  <Unique 33558>
  <PgfTag `body'>
  <ParaLine 
   <String `D. R. Musser and A. A. Stepanov, \xd2 A Library of Generic Algorithms in Ada,\xd3  '>
   <Font 
    <FTag `Emphasis'>
   > # end of Font
   <String `Proc. of 1987 ACM SIGAda '>
  >
  <ParaLine 
   <String `International Conference'>
   <Font 
    <FTag `'>
   > # end of Font
   <String `, Boston, December, 1987.'>
  >
 > # end of Para
 <Para 
  <Unique 33568>
  <PgfTag `body'>
  <ParaLine 
   <String `D. R. Musser and A. A. Stepanov, \xd2 Generic Programming,\xd3  invited paper, in P. Gianni, Ed., '>
   <Font 
    <FTag `Emphasis'>
   > # end of Font
   <String `ISSAC \xd4 88 '>
  >
  <ParaLine 
   <String `Symbolic and Algebraic Computation Proceedings, Lecture Notes in Computer Science'>
   <Font 
    <FTag `'>
   > # end of Font
   <String `, Springer-Verlag, vol. 358, '>
  >
  <ParaLine 
   <String `1989.'>
  >
 > # end of Para
 <Para 
  <Unique 33569>
  <PgfTag `body'>
  <ParaLine 
   <String `D. R. Musser and A. A. Stepanov, '>
   <Font 
    <FTag `Emphasis'>
   > # end of Font
   <String `Ada Generic Library'>
   <Font 
    <FTag `'>
   > # end of Font
   <String `, Springer-Verlag, 1989.'>
  >
 > # end of Para
 <Para 
  <Unique 33570>
  <PgfTag `body'>
  <ParaLine 
   <String `D. R. Musser and A. A. Stepanov, \xd2 Algorithm-Oriented Generic Libraries,\xd3  '>
   <Font 
    <FTag `Emphasis'>
   > # end of Font
   <String `S'>
   <String `oftware Practice and Experience'>
   <Font 
    <FTag `'>
   > # end of Font
   <String `, '>
  >
  <ParaLine 
   <String `vol. 24(7), July 1994.'>
  >
 > # end of Para
 <Para 
  <Unique 37127>
  <PgfTag `body'>
  <ParaLine 
   <String `M. Stahl and U. Steinm\x9f ller, \xd2 Generic Dynamic Arrays,\xd3  '>
   <Font 
    <FTag `Emphasis'>
   > # end of Font
   <String `The C++ Report'>
   <Font 
    <FTag `'>
   > # end of Font
   <String `, October 1993.'>
  >
 > # end of Para
 <Para 
  <Unique 37128>
  <PgfTag `body'>
  <ParaLine 
   <String `J. E. Shopiro, \xd2 Strings and Lists for C++,\xd3  '>
   <Font 
    <FTag `Emphasis'>
   > # end of Font
   <String `AT&T Bell Labs Internal Technical Memorandum'>
   <Font 
    <FTag `'>
   > # end of Font
   <String `, July 1985.'>
  >
 > # end of Para
 <Para 
  <Unique 37126>
  <PgfTag `body'>
  <ParaLine 
   <String `A. A. Stepanov and M. Lee, \xd2 The Standard Template Library,\xd3  Technical Report HPL-94-34, Hewlett-'>
  >
  <ParaLine 
   <String `Packard Laboratories, April 1994.'>
  >
 > # end of Para
 <Para 
  <Unique 38356>
  <PgfTag `body'>
  <ParaLine 
   <String `B. Stroustrup, '>
   <Font 
    <FTag `Emphasis'>
   > # end of Font
   <String `The Design and Evolution of C++'>
   <Font 
    <FTag `'>
   > # end of Font
   <String `, Addison-Wesley, '>
   <String `Massachusetts'>
   <String `, 1994.'>
  >
 > # end of Para
> # end of TextFlow
# End of MIFFile
