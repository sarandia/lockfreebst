%!PS-Adobe-3.0
%%BoundingBox: (atend)
%%Pages: (atend)
%%PageOrder: (atend)
%%DocumentFonts: (atend)
%%Creator: Frame 4.0
%%DocumentData: Clean7Bit
%%EndComments
%%BeginProlog
%
% Frame ps_prolog 4.0, for use with Frame 4.0 products
% This ps_prolog file is Copyright (c) 1986-1993 Frame Technology
% Corporation.  All rights reserved.  This ps_prolog file may be
% freely copied and distributed in conjunction with documents created
% using FrameMaker, FrameBuilder and FrameViewer as long as this 
% copyright notice is preserved.
%
% Frame products normally print colors as their true color on a color printer
% or as shades of gray, based on luminance, on a black-and white printer. The
% following flag, if set to True, forces all non-white colors to print as pure
% black. This has no effect on bitmap images.
/FMPrintAllColorsAsBlack             false def
%
% Frame products can either set their own line screens or use a printer's 
% default settings. Three flags below control this separately for no 
% separations, spot separations and process separations. If a flag
% is true, then the default printer settings will not be changed. If it is
% false, Frame products will use their own settings from a table based on
% the printer's resolution.
/FMUseDefaultNoSeparationScreen      true  def
/FMUseDefaultSpotSeparationScreen    true  def
/FMUseDefaultProcessSeparationScreen false def
%
% For any given PostScript printer resolution, Frame products have two sets of 
% screen angles and frequencies for printing process separations, which are 
% recomended by Adobe. The following variable chooses the higher frequencies
% when set to true or the lower frequencies when set to false. This is only
% effective if the appropriate FMUseDefault...SeparationScreen flag is false.
/FMUseHighFrequencyScreens true def
%
% PostScript Level 2 printers contain an "Accurate Screens" feature which can
% improve process separation rendering at the expense of compute time. This 
% flag is ignored by PostScript Level 1 printers.
/FMUseAcccurateScreens true def
%
% The following PostScript procedure defines the spot function that Frame
% products will use for process separations. You may un-comment-out one of
% the alternative functions below, or use your own.
%
% Dot function
/FMSpotFunction {abs exch abs 2 copy add 1 gt 
		{1 sub dup mul exch 1 sub dup mul add 1 sub }
		{dup mul exch dup mul add 1 exch sub }ifelse } def
%
% Line function
% /FMSpotFunction { pop } def
%
% Elipse function
% /FMSpotFunction { dup 5 mul 8 div mul exch dup mul exch add 
%		sqrt 1 exch sub } def
%
%
/FMversion (4.0) def 
/FMLevel1 /languagelevel where {pop languagelevel} {1} ifelse 2 lt def
/FMPColor
	FMLevel1 {
		false
		/colorimage where {pop pop true} if
	} {
		true
	} ifelse
def
/FrameDict 400 dict def 
systemdict /errordict known not {/errordict 10 dict def
		errordict /rangecheck {stop} put} if
% The readline in PS 23.0 doesn't recognize cr's as nl's on AppleTalk
FrameDict /tmprangecheck errordict /rangecheck get put 
errordict /rangecheck {FrameDict /bug true put} put 
FrameDict /bug false put 
mark 
% Some PS machines read past the CR, so keep the following 3 lines together!
currentfile 5 string readline
00
0000000000
cleartomark 
errordict /rangecheck FrameDict /tmprangecheck get put 
FrameDict /bug get { 
	/readline {
		/gstring exch def
		/gfile exch def
		/gindex 0 def
		{
			gfile read pop 
			dup 10 eq {exit} if 
			dup 13 eq {exit} if 
			gstring exch gindex exch put 
			/gindex gindex 1 add def 
		} loop
		pop 
		gstring 0 gindex getinterval true 
		} bind def
	} if
/FMshowpage /showpage load def
/FMquit /quit load def
/FMFAILURE { 
	dup = flush 
	FMshowpage 
	/Helvetica findfont 12 scalefont setfont
	72 200 moveto
	show FMshowpage 
	FMquit 
	} def 
/FMVERSION {
	FMversion ne {
		(Frame product version does not match ps_prolog!) FMFAILURE
		} if
	} def 
/FMBADEPSF { 
	(PostScript Lang. Ref. Man., 2nd Ed., H.2.4 says EPS must not call X              )
	dup dup (X) search pop exch pop exch pop length 
	4 -1 roll 
	putinterval 
	FMFAILURE
	} def
/FMLOCAL {
	FrameDict begin
	0 def 
	end 
	} def 
/concatprocs
	{
	/proc2 exch cvlit def/proc1 exch cvlit def/newproc proc1 length proc2 length add array def
	newproc 0 proc1 putinterval newproc proc1 length proc2 putinterval newproc cvx
}def
FrameDict begin 
/FMnone 0 def
/FMcyan 1 def
/FMmagenta 2 def
/FMyellow 3 def
/FMblack 4 def
/FMcustom 5 def
/FrameNegative false def 
/FrameSepIs FMnone def 
/FrameSepBlack 0 def
/FrameSepYellow 0 def
/FrameSepMagenta 0 def
/FrameSepCyan 0 def
/FrameSepRed 1 def
/FrameSepGreen 1 def
/FrameSepBlue 1 def
/FrameCurGray 1 def
/FrameCurPat null def
/FrameCurColors [ 0 0 0 1 0 0 0 ] def 
/FrameColorEpsilon .001 def	
/eqepsilon {		
	sub dup 0 lt {neg} if
	FrameColorEpsilon le
} bind def
/FrameCmpColorsCMYK { 
	2 copy 0 get exch 0 get eqepsilon {
		2 copy 1 get exch 1 get eqepsilon {
			2 copy 2 get exch 2 get eqepsilon {
				3 get exch 3 get eqepsilon
			} {pop pop false} ifelse
		}{pop pop false} ifelse
	} {pop pop false} ifelse
} bind def
/FrameCmpColorsRGB { 
	2 copy 4 get exch 0 get eqepsilon {
		2 copy 5 get exch 1 get eqepsilon {
			6 get exch 2 get eqepsilon
		}{pop pop false} ifelse
	} {pop pop false} ifelse
} bind def
/RGBtoCMYK { 
	1 exch sub 
	3 1 roll 
	1 exch sub 
	3 1 roll 
	1 exch sub 
	3 1 roll 
	3 copy 
	2 copy 
	le { pop } { exch pop } ifelse 
	2 copy 
	le { pop } { exch pop } ifelse 
	dup dup dup 
	6 1 roll 
	4 1 roll 
	7 1 roll 
	sub 
	6 1 roll 
	sub 
	5 1 roll 
	sub 
	4 1 roll 
} bind def
/CMYKtoRGB { 
	dup dup 4 -1 roll add 						  
	5 1 roll 3 -1 roll add 						  
	4 1 roll add 								  
	1 exch sub dup 0 lt {pop 0} if 3 1 roll 	  
	1 exch sub dup 0 lt {pop 0} if exch 	      
	1 exch sub dup 0 lt {pop 0} if exch	  		  
} bind def
/FrameSepInit {
	1.0 RealSetgray
} bind def
/FrameSetSepColor { 
	/FrameSepBlue exch def
	/FrameSepGreen exch def
	/FrameSepRed exch def
	/FrameSepBlack exch def
	/FrameSepYellow exch def
	/FrameSepMagenta exch def
	/FrameSepCyan exch def
	/FrameSepIs FMcustom def
	setCurrentScreen	
} bind def
/FrameSetCyan {
	/FrameSepBlue 1.0 def
	/FrameSepGreen 1.0 def
	/FrameSepRed 0.0 def
	/FrameSepBlack 0.0 def
	/FrameSepYellow 0.0 def
	/FrameSepMagenta 0.0 def
	/FrameSepCyan 1.0 def
	/FrameSepIs FMcyan def
	setCurrentScreen	
} bind def
 
/FrameSetMagenta {
	/FrameSepBlue 1.0 def
	/FrameSepGreen 0.0 def
	/FrameSepRed 1.0 def
	/FrameSepBlack 0.0 def
	/FrameSepYellow 0.0 def
	/FrameSepMagenta 1.0 def
	/FrameSepCyan 0.0 def
	/FrameSepIs FMmagenta def
	setCurrentScreen
} bind def
 
/FrameSetYellow {
	/FrameSepBlue 0.0 def
	/FrameSepGreen 1.0 def
	/FrameSepRed 1.0 def
	/FrameSepBlack 0.0 def
	/FrameSepYellow 1.0 def
	/FrameSepMagenta 0.0 def
	/FrameSepCyan 0.0 def
	/FrameSepIs FMyellow def
	setCurrentScreen
} bind def
 
/FrameSetBlack {
	/FrameSepBlue 0.0 def
	/FrameSepGreen 0.0 def
	/FrameSepRed 0.0 def
	/FrameSepBlack 1.0 def
	/FrameSepYellow 0.0 def
	/FrameSepMagenta 0.0 def
	/FrameSepCyan 0.0 def
	/FrameSepIs FMblack def
	setCurrentScreen
} bind def
 
/FrameNoSep { 
	/FrameSepIs FMnone def
	setCurrentScreen
} bind def
/FrameSetSepColors { 
	FrameDict begin
	[ exch 1 add 1 roll ]
	/FrameSepColors  
	exch def end
	} bind def
/FrameColorInSepListCMYK { 
	FrameSepColors {  
       		exch dup 3 -1 roll 
       		FrameCmpColorsCMYK 
       		{ pop true exit } if
    	} forall 
	dup true ne {pop false} if
	} bind def
/FrameColorInSepListRGB { 
	FrameSepColors {  
       		exch dup 3 -1 roll 
       		FrameCmpColorsRGB 
       		{ pop true exit } if
    	} forall 
	dup true ne {pop false} if
	} bind def
/RealSetgray /setgray load def
/RealSetrgbcolor /setrgbcolor load def
/RealSethsbcolor /sethsbcolor load def
end 
/setgray { 
	FrameDict begin
	FrameSepIs FMnone eq
		{ RealSetgray } 
		{ 
		FrameSepIs FMblack eq 
			{ RealSetgray } 
			{ FrameSepIs FMcustom eq 
			  FrameSepRed 0 eq and
			  FrameSepGreen 0 eq and
			  FrameSepBlue 0 eq and {
			  	RealSetgray
			  } {
				1 RealSetgray pop 
			  } ifelse
			} ifelse
		} ifelse
	end
} bind def
/setrgbcolor { 
	FrameDict begin
	FrameSepIs FMnone eq
	{  RealSetrgbcolor }
	{
		3 copy [ 4 1 roll ] 
		FrameColorInSepListRGB
		{
				FrameSepBlue eq exch 
			 	FrameSepGreen eq and exch 
			 	FrameSepRed eq and
			 	{ 0 } { 1 } ifelse
		}
		{
			FMPColor {
				RealSetrgbcolor
				currentcmykcolor
			} {
				RGBtoCMYK
			} ifelse
			FrameSepIs FMblack eq
			{1.0 exch sub 4 1 roll pop pop pop} {
			FrameSepIs FMyellow eq
			{pop 1.0 exch sub 3 1 roll pop pop} {
			FrameSepIs FMmagenta eq
			{pop pop 1.0 exch sub exch pop } {
			FrameSepIs FMcyan eq
			{pop pop pop 1.0 exch sub } 
			{pop pop pop pop 1} ifelse } ifelse } ifelse } ifelse 
		} ifelse
		RealSetgray
	} 
	ifelse
	end
} bind def
/sethsbcolor {
	FrameDict begin
	FrameSepIs FMnone eq 
	{ RealSethsbcolor } 
	{
		RealSethsbcolor 
		currentrgbcolor  
		setrgbcolor 
	} 
	ifelse
	end
} bind def
FrameDict begin
/setcmykcolor where {
	pop /RealSetcmykcolor /setcmykcolor load def
} {
	/RealSetcmykcolor {
		4 1 roll
		3 { 3 index add 0 max 1 min 1 exch sub 3 1 roll} repeat 
		setrgbcolor pop
	} bind def
} ifelse
userdict /setcmykcolor { 
		FrameDict begin
		FrameSepIs FMnone eq
		{ RealSetcmykcolor } 
		{
			4 copy [ 5 1 roll ]
			FrameColorInSepListCMYK
			{
				FrameSepBlack eq exch 
				FrameSepYellow eq and exch 
				FrameSepMagenta eq and exch 
				FrameSepCyan eq and 
				{ 0 } { 1 } ifelse
			}
			{
				FrameSepIs FMblack eq
				{1.0 exch sub 4 1 roll pop pop pop} {
				FrameSepIs FMyellow eq
				{pop 1.0 exch sub 3 1 roll pop pop} {
				FrameSepIs FMmagenta eq
				{pop pop 1.0 exch sub exch pop } {
				FrameSepIs FMcyan eq
				{pop pop pop 1.0 exch sub } 
				{pop pop pop pop 1} ifelse } ifelse } ifelse } ifelse 
			} ifelse
			RealSetgray
		}
		ifelse
		end
	} bind put
FMLevel1 not { 
	
	/patProcDict 5 dict dup begin
		<0f1e3c78f0e1c387> { 3 setlinewidth -1 -1 moveto 9 9 lineto stroke 
											4 -4 moveto 12 4 lineto stroke
											-4 4 moveto 4 12 lineto stroke} bind def
		<0f87c3e1f0783c1e> { 3 setlinewidth -1 9 moveto 9 -1 lineto stroke 
											-4 4 moveto 4 -4 lineto stroke
											4 12 moveto 12 4 lineto stroke} bind def
		<8142241818244281> { 1 setlinewidth -1 9 moveto 9 -1 lineto stroke
											-1 -1 moveto 9 9 lineto stroke } bind def
		<03060c183060c081> { 1 setlinewidth -1 -1 moveto 9 9 lineto stroke 
											4 -4 moveto 12 4 lineto stroke
											-4 4 moveto 4 12 lineto stroke} bind def
		<8040201008040201> { 1 setlinewidth -1 9 moveto 9 -1 lineto stroke 
											-4 4 moveto 4 -4 lineto stroke
											4 12 moveto 12 4 lineto stroke} bind def
	end def
	/patDict 15 dict dup begin
		/PatternType 1 def		
		/PaintType 2 def		
		/TilingType 3 def		
		/BBox [ 0 0 8 8 ] def 	
		/XStep 8 def			
		/YStep 8 def			
		/PaintProc {
			begin
			patProcDict bstring known {
				patProcDict bstring get exec
			} {
				8 8 true [1 0 0 -1 0 8] bstring imagemask
			} ifelse
			end
		} bind def
	end def
} if
/combineColor {
    FrameSepIs FMnone eq
	{
		graymode FMLevel1 or not {
			
			[/Pattern [/DeviceCMYK]] setcolorspace
			FrameCurColors 0 4 getinterval aload pop FrameCurPat setcolor
		} {
			FrameCurColors 3 get 1.0 ge {
				FrameCurGray RealSetgray
			} {
				FMPColor graymode and {
					0 1 3 { 
						FrameCurColors exch get
						1 FrameCurGray sub mul
					} for
					RealSetcmykcolor
				} {
					4 1 6 {
						FrameCurColors exch get
						graymode {
							1 exch sub 1 FrameCurGray sub mul 1 exch sub
						} {
							1.0 lt {FrameCurGray} {1} ifelse
						} ifelse
					} for
					RealSetrgbcolor
				} ifelse
			} ifelse
		} ifelse
	} { 
		FrameCurColors 0 4 getinterval aload
		FrameColorInSepListCMYK {
			FrameSepBlack eq exch 
			FrameSepYellow eq and exch 
			FrameSepMagenta eq and exch 
			FrameSepCyan eq and
			FrameSepIs FMcustom eq and
			{ FrameCurGray } { 1 } ifelse
		} {
			FrameSepIs FMblack eq
			{FrameCurGray 1.0 exch sub mul 1.0 exch sub 4 1 roll pop pop pop} {
			FrameSepIs FMyellow eq
			{pop FrameCurGray 1.0 exch sub mul 1.0 exch sub 3 1 roll pop pop} {
			FrameSepIs FMmagenta eq
			{pop pop FrameCurGray 1.0 exch sub mul 1.0 exch sub exch pop } {
			FrameSepIs FMcyan eq
			{pop pop pop FrameCurGray 1.0 exch sub mul 1.0 exch sub } 
			{pop pop pop pop 1} ifelse } ifelse } ifelse } ifelse 
		} ifelse
		graymode FMLevel1 or not {
			
			[/Pattern [/DeviceGray]] setcolorspace
			FrameCurPat setcolor
		} { 
			graymode not FMLevel1 and {
				
				dup 1 lt {pop FrameCurGray} if
			} if
			RealSetgray
		} ifelse
	} ifelse
} bind def
/savematrix {
	orgmatrix currentmatrix pop
	} bind def
/restorematrix {
	orgmatrix setmatrix
	} bind def
/dmatrix matrix def
/dpi    72 0 dmatrix defaultmatrix dtransform
    dup mul exch   dup mul add   sqrt def
	
/freq dpi dup 72 div round dup 0 eq {pop 1} if 8 mul div def
/sangle 1 0 dmatrix defaultmatrix dtransform exch atan def
/dpiranges   [  2540    2400    1693     1270    1200     635      600      0      ] def
/CMLowFreqs  [ 100.402  94.8683 89.2289 100.402  94.8683  66.9349  63.2456 47.4342 ] def
/YLowFreqs   [  95.25   90.0    84.65    95.25   90.0     70.5556  66.6667 50.0    ] def
/KLowFreqs   [  89.8026 84.8528 79.8088  89.8026 84.8528  74.8355  70.7107 53.033  ] def
/CLowAngles  [  71.5651 71.5651 71.5651 71.5651  71.5651  71.5651  71.5651 71.5651 ] def
/MLowAngles  [  18.4349 18.4349 18.4349 18.4349  18.4349  18.4349  18.4349 18.4349 ] def
/YLowTDot    [  true    true    false    true    true     false    false   false   ] def
/CMHighFreqs [ 133.87  126.491 133.843  108.503 102.523  100.402   94.8683 63.2456 ] def
/YHighFreqs  [ 127.0   120.0   126.975  115.455 109.091   95.25    90.0    60.0    ] def
/KHighFreqs  [ 119.737 113.137 119.713  128.289 121.218   89.8026  84.8528 63.6395 ] def
/CHighAngles [  71.5651 71.5651 71.5651  70.0169 70.0169  71.5651  71.5651 71.5651 ] def
/MHighAngles [  18.4349 18.4349 18.4349  19.9831 19.9831  18.4349  18.4349 18.4349 ] def
/YHighTDot   [  false   false   true     false   false    true     true    false   ] def
/PatFreq     [	10.5833 10.0     9.4055  10.5833 10.0	  10.5833  10.0	   9.375   ] def
/screenIndex {
	0 1 dpiranges length 1 sub { dup dpiranges exch get 1 sub dpi le {exit} {pop} ifelse } for
} bind def
/getCyanScreen {
	FMUseHighFrequencyScreens { CHighAngles CMHighFreqs} {CLowAngles CMLowFreqs} ifelse
		screenIndex dup 3 1 roll get 3 1 roll get /FMSpotFunction load
} bind def
/getMagentaScreen {
	FMUseHighFrequencyScreens { MHighAngles CMHighFreqs } {MLowAngles CMLowFreqs} ifelse
		screenIndex dup 3 1 roll get 3 1 roll get /FMSpotFunction load
} bind def
/getYellowScreen {
	FMUseHighFrequencyScreens { YHighTDot YHighFreqs} { YLowTDot YLowFreqs } ifelse
		screenIndex dup 3 1 roll get 3 1 roll get { 3 div
			{2 { 1 add 2 div 3 mul dup floor sub 2 mul 1 sub exch} repeat
			FMSpotFunction } } {/FMSpotFunction load } ifelse
			0.0 exch
} bind def
/getBlackScreen  {
	FMUseHighFrequencyScreens { KHighFreqs } { KLowFreqs } ifelse
		screenIndex get 45.0 /FMSpotFunction load 
} bind def
/getSpotScreen {
	getBlackScreen
} bind def
/getCompositeScreen {
	getBlackScreen
} bind def
/FMSetScreen 
	FMLevel1 { /setscreen load 
	}{ {
		8 dict begin
		/HalftoneType 1 def
		/SpotFunction exch def
		/Angle exch def
		/Frequency exch def
		/AccurateScreens FMUseAcccurateScreens def
		currentdict end sethalftone
	} bind } ifelse
def
/setDefaultScreen {
	FMPColor {
		orgrxfer cvx orggxfer cvx orgbxfer cvx orgxfer cvx setcolortransfer
	}
	{
		orgxfer cvx settransfer
	} ifelse
	orgfreq organgle orgproc cvx setscreen
} bind def
/setCurrentScreen {
	FrameSepIs FMnone eq {
		FMUseDefaultNoSeparationScreen {
			setDefaultScreen
		} {
			getCompositeScreen FMSetScreen
		} ifelse
	} {
		FrameSepIs FMcustom eq {
			FMUseDefaultSpotSeparationScreen {
				setDefaultScreen
			} {
				getSpotScreen FMSetScreen
			} ifelse
		} {
			FMUseDefaultProcessSeparationScreen {
				setDefaultScreen
			} {
				FrameSepIs FMcyan eq {
					getCyanScreen FMSetScreen
				} {
					FrameSepIs FMmagenta eq {
						getMagentaScreen FMSetScreen
					} {
						FrameSepIs FMyellow eq {
							getYellowScreen FMSetScreen
						} {
							getBlackScreen FMSetScreen
						} ifelse
					} ifelse
				} ifelse
			} ifelse
		} ifelse
	} ifelse 
} bind def
end
	/gstring FMLOCAL
	/gfile FMLOCAL
	/gindex FMLOCAL
	/orgrxfer FMLOCAL
	/orggxfer FMLOCAL
	/orgbxfer FMLOCAL
	/orgxfer FMLOCAL
	/orgproc FMLOCAL
	/orgrproc FMLOCAL
	/orggproc FMLOCAL
	/orgbproc FMLOCAL
	/organgle FMLOCAL
	/orgrangle FMLOCAL
	/orggangle FMLOCAL
	/orgbangle FMLOCAL
	/orgfreq FMLOCAL
	/orgrfreq FMLOCAL
	/orggfreq FMLOCAL
	/orgbfreq FMLOCAL
	/yscale FMLOCAL
	/xscale FMLOCAL
	/edown FMLOCAL
	/manualfeed FMLOCAL
	/paperheight FMLOCAL
	/paperwidth FMLOCAL
/FMDOCUMENT { 
	array /FMfonts exch def 
	/#copies exch def
	FrameDict begin
	0 ne /manualfeed exch def
	/paperheight exch def
	/paperwidth exch def
	0 ne /FrameNegative exch def 
	0 ne /edown exch def 
	/yscale exch def
	/xscale exch def
	FMLevel1 {
		manualfeed {setmanualfeed} if
		/FMdicttop countdictstack 1 add def 
		/FMoptop count def 
		setpapername 
		manualfeed {true} {papersize} ifelse 
		{manualpapersize} {false} ifelse 
		{desperatepapersize} {false} ifelse 
pop	%%%	{ (Can't select requested paper size for Frame print job!) FMFAILURE } if
		count -1 FMoptop {pop pop} for
		countdictstack -1 FMdicttop {pop end} for 
		}
		{{1 dict dup /PageSize [paperwidth paperheight]put setpagedevice}stopped
pop	%%%	{ (Can't select requested paper size for Frame print job!) FMFAILURE } if
		 {1 dict dup /ManualFeed manualfeed put setpagedevice } stopped pop }
	ifelse 
	
	FMPColor {
		currentcolorscreen
			cvlit /orgproc exch def
				  /organgle exch def 
				  /orgfreq exch def
			cvlit /orgbproc exch def
				  /orgbangle exch def 
				  /orgbfreq exch def
			cvlit /orggproc exch def
				  /orggangle exch def 
				  /orggfreq exch def
			cvlit /orgrproc exch def
				  /orgrangle exch def 
				  /orgrfreq exch def
			currentcolortransfer 
			FrameNegative {
				1 1 4 { 
					pop { 1 exch sub } concatprocs 4 1 roll
				} for
				4 copy
				setcolortransfer
			} if
			cvlit /orgxfer exch def
			cvlit /orgbxfer exch def
			cvlit /orggxfer exch def
			cvlit /orgrxfer exch def
	} {
		currentscreen 
			cvlit /orgproc exch def
				  /organgle exch def 
				  /orgfreq exch def
				  
		currenttransfer 
		FrameNegative {
			{ 1 exch sub } concatprocs
			dup settransfer
		} if 
		cvlit /orgxfer exch def
	} ifelse
	end 
} def 
/pagesave FMLOCAL
/orgmatrix FMLOCAL
/landscape FMLOCAL
/pwid FMLOCAL
/FMBEGINPAGE { 
	FrameDict begin 
	/pagesave save def
	3.86 setmiterlimit
	/landscape exch 0 ne def
	landscape { 
		90 rotate 0 exch dup /pwid exch def neg translate pop 
	}{
		pop /pwid exch def
	} ifelse
	edown { [-1 0 0 1 pwid 0] concat } if
	0 0 moveto paperwidth 0 lineto paperwidth paperheight lineto 
	0 paperheight lineto 0 0 lineto 1 setgray fill
	xscale yscale scale
	/orgmatrix matrix def
	gsave 
} def 
/FMENDPAGE {
	grestore 
	pagesave restore
	end 
	showpage
	} def 
/FMFONTDEFINE { 
	FrameDict begin
	findfont 
	ReEncode 
	1 index exch 
	definefont 
	FMfonts 3 1 roll 
	put
	end 
	} def 
/FMFILLS {
	FrameDict begin dup
	array /fillvals exch def
	dict /patCache exch def
	end 
	} def 
/FMFILL {
	FrameDict begin
	 fillvals 3 1 roll put
	end 
	} def 
/FMNORMALIZEGRAPHICS { 
	newpath
	0.0 0.0 moveto
	1 setlinewidth
	0 setlinecap
	0 0 0 sethsbcolor
	0 setgray 
	} bind def
	/fx FMLOCAL
	/fy FMLOCAL
	/fh FMLOCAL
	/fw FMLOCAL
	/llx FMLOCAL
	/lly FMLOCAL
	/urx FMLOCAL
	/ury FMLOCAL
/FMBEGINEPSF { 
	end 
	/FMEPSF save def 
	/showpage {} def 
% See Adobe's "PostScript Language Reference Manual, 2nd Edition", page 714.
% "...the following operators MUST NOT be used in an EPS file:" (emphasis ours)
	/banddevice {(banddevice) FMBADEPSF} def
	/clear {(clear) FMBADEPSF} def
	/cleardictstack {(cleardictstack) FMBADEPSF} def 
	/copypage {(copypage) FMBADEPSF} def
	/erasepage {(erasepage) FMBADEPSF} def
	/exitserver {(exitserver) FMBADEPSF} def
	/framedevice {(framedevice) FMBADEPSF} def
	/grestoreall {(grestoreall) FMBADEPSF} def
	/initclip {(initclip) FMBADEPSF} def
	/initgraphics {(initgraphics) FMBADEPSF} def
	/initmatrix {(initmatrix) FMBADEPSF} def
	/quit {(quit) FMBADEPSF} def
	/renderbands {(renderbands) FMBADEPSF} def
	/setglobal {(setglobal) FMBADEPSF} def
	/setpagedevice {(setpagedevice) FMBADEPSF} def
	/setshared {(setshared) FMBADEPSF} def
	/startjob {(startjob) FMBADEPSF} def
	/lettertray {(lettertray) FMBADEPSF} def
	/letter {(letter) FMBADEPSF} def
	/lettersmall {(lettersmall) FMBADEPSF} def
	/11x17tray {(11x17tray) FMBADEPSF} def
	/11x17 {(11x17) FMBADEPSF} def
	/ledgertray {(ledgertray) FMBADEPSF} def
	/ledger {(ledger) FMBADEPSF} def
	/legaltray {(legaltray) FMBADEPSF} def
	/legal {(legal) FMBADEPSF} def
	/statementtray {(statementtray) FMBADEPSF} def
	/statement {(statement) FMBADEPSF} def
	/executivetray {(executivetray) FMBADEPSF} def
	/executive {(executive) FMBADEPSF} def
	/a3tray {(a3tray) FMBADEPSF} def
	/a3 {(a3) FMBADEPSF} def
	/a4tray {(a4tray) FMBADEPSF} def
	/a4 {(a4) FMBADEPSF} def
	/a4small {(a4small) FMBADEPSF} def
	/b4tray {(b4tray) FMBADEPSF} def
	/b4 {(b4) FMBADEPSF} def
	/b5tray {(b5tray) FMBADEPSF} def
	/b5 {(b5) FMBADEPSF} def
	FMNORMALIZEGRAPHICS 
	[/fy /fx /fh /fw /ury /urx /lly /llx] {exch def} forall 
	fx fw 2 div add fy fh 2 div add  translate
	rotate
	fw 2 div neg fh 2 div neg translate
	fw urx llx sub div fh ury lly sub div scale 
	llx neg lly neg translate 
	/FMdicttop countdictstack 1 add def 
	/FMoptop count def 
	} bind def
/FMENDEPSF {
	count -1 FMoptop {pop pop} for 
	countdictstack -1 FMdicttop {pop end} for 
	FMEPSF restore
	FrameDict begin 
	} bind def
FrameDict begin 
/setmanualfeed {
%%BeginFeature *ManualFeed True
	 statusdict /manualfeed true put
%%EndFeature
	} bind def
/max {2 copy lt {exch} if pop} bind def
/min {2 copy gt {exch} if pop} bind def
/inch {72 mul} def
/pagedimen { 
	paperheight sub abs 16 lt exch 
	paperwidth sub abs 16 lt and
	{/papername exch def} {pop} ifelse
	} bind def
	/papersizedict FMLOCAL
/setpapername { 
	/papersizedict 14 dict def 
	papersizedict begin
	/papername /unknown def 
		/Letter 8.5 inch 11.0 inch pagedimen
		/LetterSmall 7.68 inch 10.16 inch pagedimen
		/Tabloid 11.0 inch 17.0 inch pagedimen
		/Ledger 17.0 inch 11.0 inch pagedimen
		/Legal 8.5 inch 14.0 inch pagedimen
		/Statement 5.5 inch 8.5 inch pagedimen
		/Executive 7.5 inch 10.0 inch pagedimen
		/A3 11.69 inch 16.5 inch pagedimen
		/A4 8.26 inch 11.69 inch pagedimen
		/A4Small 7.47 inch 10.85 inch pagedimen
		/B4 10.125 inch 14.33 inch pagedimen
		/B5 7.16 inch 10.125 inch pagedimen
	end
	} bind def
/papersize {
	papersizedict begin
		/Letter {lettertray letter} def
		/LetterSmall {lettertray lettersmall} def
		/Tabloid {11x17tray 11x17} def
		/Ledger {ledgertray ledger} def
		/Legal {legaltray legal} def
		/Statement {statementtray statement} def
		/Executive {executivetray executive} def
		/A3 {a3tray a3} def
		/A4 {a4tray a4} def
		/A4Small {a4tray a4small} def
		/B4 {b4tray b4} def
		/B5 {b5tray b5} def
		/unknown {unknown} def
	papersizedict dup papername known {papername} {/unknown} ifelse get
	end
	statusdict begin stopped end 
	} bind def
/manualpapersize {
	papersizedict begin
		/Letter {letter} def
		/LetterSmall {lettersmall} def
		/Tabloid {11x17} def
		/Ledger {ledger} def
		/Legal {legal} def
		/Statement {statement} def
		/Executive {executive} def
		/A3 {a3} def
		/A4 {a4} def
		/A4Small {a4small} def
		/B4 {b4} def
		/B5 {b5} def
		/unknown {unknown} def
	papersizedict dup papername known {papername} {/unknown} ifelse get
	end
	stopped 
	} bind def
/desperatepapersize {
	statusdict /setpageparams known
		{
		paperwidth paperheight 0 1 
		statusdict begin
		{setpageparams} stopped 
		end
		} {true} ifelse 
	} bind def
/DiacriticEncoding [
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /space /exclam /quotedbl
/numbersign /dollar /percent /ampersand /quotesingle /parenleft
/parenright /asterisk /plus /comma /hyphen /period /slash /zero /one
/two /three /four /five /six /seven /eight /nine /colon /semicolon
/less /equal /greater /question /at /A /B /C /D /E /F /G /H /I /J /K
/L /M /N /O /P /Q /R /S /T /U /V /W /X /Y /Z /bracketleft /backslash
/bracketright /asciicircum /underscore /grave /a /b /c /d /e /f /g /h
/i /j /k /l /m /n /o /p /q /r /s /t /u /v /w /x /y /z /braceleft /bar
/braceright /asciitilde /.notdef /Adieresis /Aring /Ccedilla /Eacute
/Ntilde /Odieresis /Udieresis /aacute /agrave /acircumflex /adieresis
/atilde /aring /ccedilla /eacute /egrave /ecircumflex /edieresis
/iacute /igrave /icircumflex /idieresis /ntilde /oacute /ograve
/ocircumflex /odieresis /otilde /uacute /ugrave /ucircumflex
/udieresis /dagger /.notdef /cent /sterling /section /bullet
/paragraph /germandbls /registered /copyright /trademark /acute
/dieresis /.notdef /AE /Oslash /.notdef /.notdef /.notdef /.notdef
/yen /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/ordfeminine /ordmasculine /.notdef /ae /oslash /questiondown
/exclamdown /logicalnot /.notdef /florin /.notdef /.notdef
/guillemotleft /guillemotright /ellipsis /.notdef /Agrave /Atilde
/Otilde /OE /oe /endash /emdash /quotedblleft /quotedblright
/quoteleft /quoteright /.notdef /.notdef /ydieresis /Ydieresis
/fraction /currency /guilsinglleft /guilsinglright /fi /fl /daggerdbl
/periodcentered /quotesinglbase /quotedblbase /perthousand
/Acircumflex /Ecircumflex /Aacute /Edieresis /Egrave /Iacute
/Icircumflex /Idieresis /Igrave /Oacute /Ocircumflex /.notdef /Ograve
/Uacute /Ucircumflex /Ugrave /dotlessi /circumflex /tilde /macron
/breve /dotaccent /ring /cedilla /hungarumlaut /ogonek /caron
] def
/ReEncode { 
	dup 
	length 
	dict begin 
	{
	1 index /FID ne 
		{def} 
		{pop pop} ifelse 
	} forall 
	0 eq {/Encoding DiacriticEncoding def} if 
	currentdict 
	end 
	} bind def
FMPColor 
	
	{
	/BEGINBITMAPCOLOR { 
		BITMAPCOLOR} def
	/BEGINBITMAPCOLORc { 
		BITMAPCOLORc} def
	/BEGINBITMAPTRUECOLOR { 
		BITMAPTRUECOLOR } def
	/BEGINBITMAPTRUECOLORc { 
		BITMAPTRUECOLORc } def
	}
	
	{
	/BEGINBITMAPCOLOR { 
		BITMAPGRAY} def
	/BEGINBITMAPCOLORc { 
		BITMAPGRAYc} def
	/BEGINBITMAPTRUECOLOR { 
		BITMAPTRUEGRAY } def
	/BEGINBITMAPTRUECOLORc { 
		BITMAPTRUEGRAYc } def
	}
ifelse
/K { 
	FMPrintAllColorsAsBlack {
		dup 1 eq 2 index 1 eq and 3 index 1 eq and not
			{7 {pop} repeat 0 0 0 1 0 0 0} if
	} if 
	FrameCurColors astore 
	pop combineColor
} bind def
/graymode true def
	/bwidth FMLOCAL
	/bpside FMLOCAL
	/bstring FMLOCAL
	/onbits FMLOCAL
	/offbits FMLOCAL
	/xindex FMLOCAL
	/yindex FMLOCAL
	/x FMLOCAL
	/y FMLOCAL
/setPatternMode {
	FMLevel1 {
		/bwidth  exch def
		/bpside  exch def
		/bstring exch def
		/onbits 0 def  /offbits 0 def
		freq sangle landscape {90 add} if 
			{/y exch def
			 /x exch def
			 /xindex x 1 add 2 div bpside mul cvi def
			 /yindex y 1 add 2 div bpside mul cvi def
			 bstring yindex bwidth mul xindex 8 idiv add get
			 1 7 xindex 8 mod sub bitshift and 0 ne FrameNegative {not} if
			 {/onbits  onbits  1 add def 1}
			 {/offbits offbits 1 add def 0}
			 ifelse
			}
			setscreen
		offbits offbits onbits add div FrameNegative {1.0 exch sub} if
		/FrameCurGray exch def
	} { 
		pop pop
		dup patCache exch known {
			patCache exch get
		} { 
			dup
			patDict /bstring 3 -1 roll put
			patDict 
			9 PatFreq screenIndex get div dup matrix scale
			makepattern
			dup 
			patCache 4 -1 roll 3 -1 roll put
		} ifelse
		/FrameCurGray 0 def
		/FrameCurPat exch def
	} ifelse
	/graymode false def
	combineColor
} bind def
/setGrayScaleMode {
	graymode not {
		/graymode true def
		FMLevel1 {
			setCurrentScreen
		} if
	} if
	/FrameCurGray exch def
	combineColor
} bind def
/normalize {
	transform round exch round exch itransform
	} bind def
/dnormalize {
	dtransform round exch round exch idtransform
	} bind def
/lnormalize { 
	0 dtransform exch cvi 2 idiv 2 mul 1 add exch idtransform pop
	} bind def
/H { 
	lnormalize setlinewidth
	} bind def
/Z {
	setlinecap
	} bind def
	
/PFill {
	graymode FMLevel1 or not {
		gsave 1 setgray eofill grestore
	} if
} bind def
/PStroke {
	graymode FMLevel1 or not {
		gsave 1 setgray stroke grestore
	} if
	stroke
} bind def
	/fillvals FMLOCAL
/X { 
	fillvals exch get
	dup type /stringtype eq
	{8 1 setPatternMode} 
	{setGrayScaleMode}
	ifelse
	} bind def
/V { 
	PFill gsave eofill grestore
	} bind def
/Vclip {
	clip
	} bind def
/Vstrk {
	currentlinewidth exch setlinewidth PStroke setlinewidth
	} bind def
/N { 
	PStroke
	} bind def
/Nclip {
	strokepath clip newpath
	} bind def
/Nstrk {
	currentlinewidth exch setlinewidth PStroke setlinewidth
	} bind def
/M {newpath moveto} bind def
/E {lineto} bind def
/D {curveto} bind def
/O {closepath} bind def
	/n FMLOCAL
/L { 
 	/n exch def
	newpath
	normalize
	moveto 
	2 1 n {pop normalize lineto} for
	} bind def
/Y { 
	L 
	closepath
	} bind def
	/x1 FMLOCAL
	/x2 FMLOCAL
	/y1 FMLOCAL
	/y2 FMLOCAL
/R { 
	/y2 exch def
	/x2 exch def
	/y1 exch def
	/x1 exch def
	x1 y1
	x2 y1
	x2 y2
	x1 y2
	4 Y 
	} bind def
	/rad FMLOCAL
/rarc 
	{rad 
	 arcto
	} bind def
/RR { 
	/rad exch def
	normalize
	/y2 exch def
	/x2 exch def
	normalize
	/y1 exch def
	/x1 exch def
	mark
	newpath
	{
	x1 y1 rad add moveto
	x1 y2 x2 y2 rarc
	x2 y2 x2 y1 rarc
	x2 y1 x1 y1 rarc
	x1 y1 x1 y2 rarc
	closepath
	} stopped {x1 y1 x2 y2 R} if 
	cleartomark
	} bind def
/RRR { 
	/rad exch def
	normalize /y4 exch def /x4 exch def
	normalize /y3 exch def /x3 exch def
	normalize /y2 exch def /x2 exch def
	normalize /y1 exch def /x1 exch def
	newpath
	normalize moveto 
	mark
	{
	x2 y2 x3 y3 rarc
	x3 y3 x4 y4 rarc
	x4 y4 x1 y1 rarc
	x1 y1 x2 y2 rarc
	closepath
	} stopped
	 {x1 y1 x2 y2 x3 y3 x4 y4 newpath moveto lineto lineto lineto closepath} if
	cleartomark
	} bind def
/C { 
	grestore
	gsave
	R 
	clip
	setCurrentScreen
} bind def
/CP { 
	grestore
	gsave
	Y 
	clip
	setCurrentScreen
} bind def
	/FMpointsize FMLOCAL
/F { 
	FMfonts exch get
	FMpointsize scalefont
	setfont
	} bind def
/Q { 
	/FMpointsize exch def
	F 
	} bind def
/T { 
	moveto show
	} bind def
/RF { 
	rotate
	0 ne {-1 1 scale} if
	} bind def
/TF { 
	gsave
	moveto 
	RF
	show
	grestore
	} bind def
/P { 
	moveto
	0 32 3 2 roll widthshow
	} bind def
/PF { 
	gsave
	moveto 
	RF
	0 32 3 2 roll widthshow
	grestore
	} bind def
/S { 
	moveto
	0 exch ashow
	} bind def
/SF { 
	gsave
	moveto
	RF
	0 exch ashow
	grestore
	} bind def
/B { 
	moveto
	0 32 4 2 roll 0 exch awidthshow
	} bind def
/BF { 
	gsave
	moveto
	RF
	0 32 4 2 roll 0 exch awidthshow
	grestore
	} bind def
/G { 
	gsave
	newpath
	normalize translate 0.0 0.0 moveto 
	dnormalize scale 
	0.0 0.0 1.0 5 3 roll arc 
	closepath 
	PFill fill
	grestore
	} bind def
/Gstrk {
	savematrix
    newpath
    2 index 2 div add exch 3 index 2 div sub exch 
    normalize 2 index 2 div sub exch 3 index 2 div add exch 
    translate
    scale 
    0.0 0.0 1.0 5 3 roll arc 
    restorematrix
    currentlinewidth exch setlinewidth PStroke setlinewidth
    } bind def
/Gclip { 
	newpath
	savematrix
	normalize translate 0.0 0.0 moveto 
	dnormalize scale 
	0.0 0.0 1.0 5 3 roll arc 
	closepath 
	clip newpath
	restorematrix
	} bind def
/GG { 
	gsave
	newpath
	normalize translate 0.0 0.0 moveto 
	rotate 
	dnormalize scale 
	0.0 0.0 1.0 5 3 roll arc 
	closepath
	PFill
	fill
	grestore
	} bind def
/GGclip { 
	savematrix
	newpath
    normalize translate 0.0 0.0 moveto 
    rotate 
    dnormalize scale 
    0.0 0.0 1.0 5 3 roll arc 
    closepath
	clip newpath
	restorematrix
	} bind def
/GGstrk { 
	savematrix
    newpath
    normalize translate 0.0 0.0 moveto 
    rotate 
    dnormalize scale 
    0.0 0.0 1.0 5 3 roll arc 
    closepath 
	restorematrix
    currentlinewidth exch setlinewidth PStroke setlinewidth
	} bind def
/A { 
	gsave
	savematrix
	newpath
	2 index 2 div add exch 3 index 2 div sub exch 
	normalize 2 index 2 div sub exch 3 index 2 div add exch 
	translate 
	scale 
	0.0 0.0 1.0 5 3 roll arc 
	restorematrix
	PStroke
	grestore
	} bind def
/Aclip {
	newpath
	savematrix
	normalize translate 0.0 0.0 moveto 
	dnormalize scale 
	0.0 0.0 1.0 5 3 roll arc 
	closepath 
	strokepath clip newpath
	restorematrix
} bind def
/Astrk {
	Gstrk
} bind def
/AA { 
	gsave
	savematrix
	newpath
	
	3 index 2 div add exch 4 index 2 div sub exch 
	
	normalize 3 index 2 div sub exch 4 index 2 div add exch
	translate 
	rotate 
	scale 
	0.0 0.0 1.0 5 3 roll arc 
	restorematrix
	PStroke
	grestore
	} bind def
/AAclip {
	savematrix
	newpath
    normalize translate 0.0 0.0 moveto 
    rotate 
    dnormalize scale 
    0.0 0.0 1.0 5 3 roll arc 
    closepath
	strokepath clip newpath
	restorematrix
} bind def
/AAstrk {
	GGstrk
} bind def
	/x FMLOCAL
	/y FMLOCAL
	/w FMLOCAL
	/h FMLOCAL
	/xx FMLOCAL
	/yy FMLOCAL
	/ww FMLOCAL
	/hh FMLOCAL
	/FMsaveobject FMLOCAL
	/FMoptop FMLOCAL
	/FMdicttop FMLOCAL
/BEGINPRINTCODE { 
	/FMdicttop countdictstack 1 add def 
	/FMoptop count 7 sub def 
	/FMsaveobject save def
	userdict begin 
	/showpage {} def 
	FMNORMALIZEGRAPHICS 
	3 index neg 3 index neg translate
	} bind def
/ENDPRINTCODE {
	count -1 FMoptop {pop pop} for 
	countdictstack -1 FMdicttop {pop end} for 
	FMsaveobject restore 
	} bind def
/gn { 
	0 
	{	46 mul 
		cf read pop 
		32 sub 
		dup 46 lt {exit} if 
		46 sub add 
		} loop
	add 
	} bind def
	/str FMLOCAL
/cfs { 
	/str sl string def 
	0 1 sl 1 sub {str exch val put} for 
	str def 
	} bind def
/ic [ 
	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0223
	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0223
	0
	{0 hx} {1 hx} {2 hx} {3 hx} {4 hx} {5 hx} {6 hx} {7 hx} {8 hx} {9 hx}
	{10 hx} {11 hx} {12 hx} {13 hx} {14 hx} {15 hx} {16 hx} {17 hx} {18 hx}
	{19 hx} {gn hx} {0} {1} {2} {3} {4} {5} {6} {7} {8} {9} {10} {11} {12}
	{13} {14} {15} {16} {17} {18} {19} {gn} {0 wh} {1 wh} {2 wh} {3 wh}
	{4 wh} {5 wh} {6 wh} {7 wh} {8 wh} {9 wh} {10 wh} {11 wh} {12 wh}
	{13 wh} {14 wh} {gn wh} {0 bl} {1 bl} {2 bl} {3 bl} {4 bl} {5 bl} {6 bl}
	{7 bl} {8 bl} {9 bl} {10 bl} {11 bl} {12 bl} {13 bl} {14 bl} {gn bl}
	{0 fl} {1 fl} {2 fl} {3 fl} {4 fl} {5 fl} {6 fl} {7 fl} {8 fl} {9 fl}
	{10 fl} {11 fl} {12 fl} {13 fl} {14 fl} {gn fl}
	] def
	/sl FMLOCAL
	/val FMLOCAL
	/ws FMLOCAL
	/im FMLOCAL
	/bs FMLOCAL
	/cs FMLOCAL
	/len FMLOCAL
	/pos FMLOCAL
/ms { 
	/sl exch def 
	/val 255 def 
	/ws cfs 
	/im cfs 
	/val 0 def 
	/bs cfs 
	/cs cfs 
	} bind def
400 ms 
/ip { 
	is 
	0 
	cf cs readline pop 
	{	ic exch get exec 
		add 
		} forall 
	pop 
	
	} bind def
/rip { 
	   
	  
	  bis ris copy pop 
      is
      0
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
	  pop pop 
	  ris gis copy pop 
	  dup is exch 
	  
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
	  pop pop
	  gis bis copy pop 
	  dup add is exch 
	  
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
      pop 
      
      } bind def
/wh { 
	/len exch def 
	/pos exch def 
	ws 0 len getinterval im pos len getinterval copy pop
	pos len 
	} bind def
/bl { 
	/len exch def 
	/pos exch def 
	bs 0 len getinterval im pos len getinterval copy pop
	pos len 
	} bind def
/s1 1 string def
/fl { 
	/len exch def 
	/pos exch def 
	/val cf s1 readhexstring pop 0 get def
	pos 1 pos len add 1 sub {im exch val put} for
	pos len 
	} bind def
/hx { 
	3 copy getinterval 
	cf exch readhexstring pop pop 
	} bind def
	/h FMLOCAL
	/w FMLOCAL
	/d FMLOCAL
	/lb FMLOCAL
	/bitmapsave FMLOCAL
	/is FMLOCAL
	/cf FMLOCAL
/wbytes { 
      dup dup
      24 eq { pop pop 3 mul }
      { 8 eq {pop} {1 eq {7 add 8 idiv} {3 add 4 idiv} ifelse} ifelse } ifelse
	} bind def
/BEGINBITMAPBWc { 
	1 {} COMMONBITMAPc
	} bind def
/BEGINBITMAPGRAYc { 
	8 {} COMMONBITMAPc
	} bind def
/BEGINBITMAP2BITc { 
	2 {} COMMONBITMAPc
	} bind def
/COMMONBITMAPc { 
		 
	/r exch def
	/d exch def
	gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/h exch def /w exch def
	/lb w d wbytes def 
	sl lb lt {lb ms} if 
	/bitmapsave save def 
	r                    
	/is im 0 lb getinterval def 
	ws 0 lb getinterval is copy pop 
	/cf currentfile def 
	w h d [w 0 0 h neg 0 h] 
	{ip} image 
	bitmapsave restore 
	grestore
	} bind def
/BEGINBITMAPBW { 
	1 {} COMMONBITMAP
	} bind def
/BEGINBITMAPGRAY { 
	8 {} COMMONBITMAP
	} bind def
/BEGINBITMAP2BIT { 
	2 {} COMMONBITMAP
	} bind def
/COMMONBITMAP { 
	/r exch def
	/d exch def
	gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/h exch def /w exch def
	/bitmapsave save def 
	r                    
	/is w d wbytes string def
	/cf currentfile def 
	w h d [w 0 0 h neg 0 h] 
	{cf is readhexstring pop} image
	bitmapsave restore 
	grestore
	} bind def
/ngrayt 256 array def
/nredt 256 array def
/nbluet 256 array def
/ngreent 256 array def
	/gryt FMLOCAL
	/blut FMLOCAL
	/grnt FMLOCAL
	/redt FMLOCAL
	/indx FMLOCAL
	/cynu FMLOCAL
	/magu FMLOCAL
	/yelu FMLOCAL
	/k FMLOCAL
	/u FMLOCAL
FMLevel1 {
/colorsetup {
	currentcolortransfer
	/gryt exch def
	/blut exch def
	/grnt exch def
	/redt exch def
	0 1 255 {
		/indx exch def
		/cynu 1 red indx get 255 div sub def
		/magu 1 green indx get 255 div sub def
		/yelu 1 blue indx get 255 div sub def
		/k cynu magu min yelu min def
		/u k currentundercolorremoval exec def
%		/u 0 def
		nredt indx 1 0 cynu u sub max sub redt exec put
		ngreent indx 1 0 magu u sub max sub grnt exec put
		nbluet indx 1 0 yelu u sub max sub blut exec put
		ngrayt indx 1 k currentblackgeneration exec sub gryt exec put
	} for
	{255 mul cvi nredt exch get}
	{255 mul cvi ngreent exch get}
	{255 mul cvi nbluet exch get}
	{255 mul cvi ngrayt exch get}
	setcolortransfer
	{pop 0} setundercolorremoval
	{} setblackgeneration
	} bind def
}
{
/colorSetup2 {
	[ /Indexed /DeviceRGB 255 
		{dup red exch get 255 div 
		 exch dup green exch get 255 div 
		 exch blue exch get 255 div}
	] setcolorspace
} bind def
} ifelse
	/tran FMLOCAL
/fakecolorsetup {
	/tran 256 string def
	0 1 255 {/indx exch def 
		tran indx
		red indx get 77 mul
		green indx get 151 mul
		blue indx get 28 mul
		add add 256 idiv put} for
	currenttransfer
	{255 mul cvi tran exch get 255.0 div}
	exch concatprocs settransfer
} bind def
/BITMAPCOLOR { 
	/d 8 def
	gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/h exch def /w exch def
	/bitmapsave save def
	FMLevel1 {	
		colorsetup
		/is w d wbytes string def
		/cf currentfile def 
		w h d [w 0 0 h neg 0 h] 
		{cf is readhexstring pop} {is} {is} true 3 colorimage 
	} {
		colorSetup2
		/is w d wbytes string def
		/cf currentfile def 
		7 dict dup begin
			/ImageType 1 def
			/Width w def
			/Height h def
			/ImageMatrix [w 0 0 h neg 0 h] def
			/DataSource {cf is readhexstring pop} bind def
			/BitsPerComponent d def
			/Decode [0 255] def
		end image	
	} ifelse
	bitmapsave restore 
	grestore
	} bind def
/BITMAPCOLORc { 
	/d 8 def
	gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/h exch def /w exch def
	/lb w d wbytes def 
	sl lb lt {lb ms} if 
	/bitmapsave save def 
	FMLevel1 {	
		colorsetup
		/is im 0 lb getinterval def 
		ws 0 lb getinterval is copy pop 
		/cf currentfile def 
		w h d [w 0 0 h neg 0 h] 
		{ip} {is} {is} true 3 colorimage
	} {
		colorSetup2
		/is im 0 lb getinterval def 
		ws 0 lb getinterval is copy pop 
		/cf currentfile def 
		7 dict dup begin
			/ImageType 1 def
			/Width w def
			/Height h def
			/ImageMatrix [w 0 0 h neg 0 h] def
			/DataSource {ip} bind def
			/BitsPerComponent d def
			/Decode [0 255] def
		end image	
	} ifelse
	bitmapsave restore 
	grestore
	} bind def
/BITMAPTRUECOLORc { 
	/d 24 def
        gsave
 	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/h exch def /w exch def
	/lb w d wbytes def 
	sl lb lt {lb ms} if 
        /bitmapsave save def 
        
	/is im 0 lb getinterval def	
	/ris im 0 w getinterval def	
	/gis im w w getinterval def	
	/bis im w 2 mul w getinterval def 
        
        ws 0 lb getinterval is copy pop 
        /cf currentfile def 
        w h 8 [w 0 0 h neg 0 h] 
        {w rip pop ris} {gis} {bis} true 3 colorimage
        bitmapsave restore 
        grestore
        } bind def
/BITMAPTRUECOLOR { 
        gsave
		
		3 index 2 div add exch	
		4 index 2 div add exch	
		translate		
		rotate			
		1 index 2 div neg	
		1 index 2 div neg	
		translate		
		scale			
		/h exch def /w exch def
        /bitmapsave save def 
        /is w string def
        /gis w string def
        /bis w string def
        /cf currentfile def 
        w h 8 [w 0 0 h neg 0 h] 
        { cf is readhexstring pop } 
        { cf gis readhexstring pop } 
        { cf bis readhexstring pop } 
        true 3 colorimage 
        bitmapsave restore 
        grestore
        } bind def
/BITMAPTRUEGRAYc { 
	/d 24 def
        gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/h exch def /w exch def
	/lb w d wbytes def 
	sl lb lt {lb ms} if 
        /bitmapsave save def 
        
	/is im 0 lb getinterval def	
	/ris im 0 w getinterval def	
	/gis im w w getinterval def	
	/bis im w 2 mul w getinterval def 
        ws 0 lb getinterval is copy pop 
        /cf currentfile def 
        w h 8 [w 0 0 h neg 0 h] 
        {w rip pop ris gis bis w gray} image
        bitmapsave restore 
        grestore
        } bind def
/ww FMLOCAL
/r FMLOCAL
/g FMLOCAL
/b FMLOCAL
/i FMLOCAL
/gray { 
        /ww exch def
        /b exch def
        /g exch def
        /r exch def
        0 1 ww 1 sub { /i exch def r i get .299 mul g i get .587 mul
			b i get .114 mul add add r i 3 -1 roll floor cvi put } for
        r
        } bind def
/BITMAPTRUEGRAY { 
        gsave
		
		3 index 2 div add exch	
		4 index 2 div add exch	
		translate		
		rotate			
		1 index 2 div neg	
		1 index 2 div neg	
		translate		
		scale			
		/h exch def /w exch def
        /bitmapsave save def 
        /is w string def
        /gis w string def
        /bis w string def
        /cf currentfile def 
        w h 8 [w 0 0 h neg 0 h] 
        { cf is readhexstring pop 
          cf gis readhexstring pop 
          cf bis readhexstring pop w gray}  image
        bitmapsave restore 
        grestore
        } bind def
/BITMAPGRAY { 
	8 {fakecolorsetup} COMMONBITMAP
	} bind def
/BITMAPGRAYc { 
	8 {fakecolorsetup} COMMONBITMAPc
	} bind def
/ENDBITMAP {
	} bind def
end 
	/ALDsave FMLOCAL
	/ALDmatrix matrix def ALDmatrix currentmatrix pop
/StartALD {
	/ALDsave save def
	 savematrix
	 ALDmatrix setmatrix
	} bind def
/InALD {
	 restorematrix
	} bind def
/DoneALD {
	 ALDsave restore
	} bind def
/I { setdash } bind def
/J { [] 0 setdash } bind def
%%EndProlog
%%BeginSetup
(4.0) FMVERSION
1 1 0 0 612 792 0 1 15 FMDOCUMENT
0 0 /Helvetica-Bold FMFONTDEFINE
1 0 /Times-Italic FMFONTDEFINE
2 0 /Palatino-Roman FMFONTDEFINE
3 0 /Times-Roman FMFONTDEFINE
4 0 /Courier FMFONTDEFINE
5 0 /Palatino-Italic FMFONTDEFINE
6 0 /Times-Bold FMFONTDEFINE
7 0 /Palatino-Bold FMFONTDEFINE
8 0 /Courier-Oblique FMFONTDEFINE
9 0 /Helvetica-Oblique FMFONTDEFINE
32 FMFILLS
0 0 FMFILL
1 0.1 FMFILL
2 0.3 FMFILL
3 0.5 FMFILL
4 0.7 FMFILL
5 0.9 FMFILL
6 0.97 FMFILL
7 1 FMFILL
8 <0f1e3c78f0e1c387> FMFILL
9 <0f87c3e1f0783c1e> FMFILL
10 <cccccccccccccccc> FMFILL
11 <ffff0000ffff0000> FMFILL
12 <8142241818244281> FMFILL
13 <03060c183060c081> FMFILL
14 <8040201008040201> FMFILL
16 1 FMFILL
17 0.9 FMFILL
18 0.7 FMFILL
19 0.5 FMFILL
20 0.3 FMFILL
21 0.1 FMFILL
22 0.03 FMFILL
23 0 FMFILL
24 <f0e1c3870f1e3c78> FMFILL
25 <f0783c1e0f87c3e1> FMFILL
26 <3333333333333333> FMFILL
27 <0000ffff0000ffff> FMFILL
28 <7ebddbe7e7dbbd7e> FMFILL
29 <fcf9f3e7cf9f3f7e> FMFILL
30 <7fbfdfeff7fbfdfe> FMFILL
%%EndSetup
%%Page: "-1" 1
%%BeginPaperSize: Letter
%%EndPaperSize
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
J
0 0 0 1 0 0 0 K
72 72 540 720 R
7 X
0 0 0 1 0 0 0 K
V
0 18 Q
0 X
(The Standard Template Library) 173.47 507.17 T
1 14 Q
(Alexander Stepanov) 249.82 459.2 T
1 12 Q
(Silicon Graphics Inc.) 254.84 432.31 T
(2011 N. Shoreline Blvd.) 248.5 419.31 T
(Mt. View, CA 94043) 257.17 406.31 T
(stepanov@mti.sgi.com) 251.48 393.31 T
1 14 Q
(Meng Lee) 278.2 345.28 T
1 12 Q
(Hewlett-Packard Laboratories) 232.17 318.39 T
(1501 Page Mill Road) 254.5 305.39 T
(Palo Alto, CA 94304) 256 292.39 T
(lee@hpl.hp.com) 266.82 279.39 T
2 10 Q
(October 31, 1995) 269.61 108.15 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "-1" 1
%%Page: "0" 2
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
72 72 540 720 R
7 X
0 0 0 1 0 0 0 K
V
72 72 540 720 C
135.56 344.04 476.44 464.04 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
144.56 352.04 468.56 455.04 R
7 X
0 0 0 1 0 0 0 K
V
2 10 Q
0 X
(Copyright \050c\051 1994 Hewlett-Packard Company) 144.56 448.37 T
-0.23 (Permission to use, copy, modify, distribute and sell this document for any) 144.56 429.37 P
-0.18 (purpose is hereby granted without fee,) 144.56 417.37 P
-0.18 (provided that the above copyright) 317.7 417.37 P
1.22 (notice appear in all copies and that both that copyright notice and this) 144.56 405.37 P
(permission notice appear in supporting documentation.) 144.56 393.37 T
72 72 540 720 C
0 0 612 792 C
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "0" 2
%%Page: "1" 3
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
72 18 540 63 R
7 X
0 0 0 1 0 0 0 K
V
2 10 Q
0 X
(1) 303.5 56.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
72 72 540 720 R
7 X
V
0 X
(1 Intr) 72 713.33 T
(oduction) 95.72 713.33 T
(. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 140 713.33 T
( 3) 532.5 713.33 T
(2 Str) 72 695.33 T
(uctur) 91.88 695.33 T
(e of the library) 115.41 695.33 T
(. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 185 695.33 T
( 3) 532.5 695.33 T
(3 Requir) 72 677.33 T
(ements) 109.28 677.33 T
(. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 145 677.33 T
( 4) 532.5 677.33 T
(4 Cor) 72 659.33 T
(e components) 95.82 659.33 T
(. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 160 659.33 T
( 5) 532.5 659.33 T
3 F
(4.1 Operators) 99 647.33 T
(. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 155 647.33 T
( 5) 532.5 647.33 T
(4.2 Pair) 99 635.33 T
( . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 132.5 635.33 T
( 5) 532.5 635.33 T
2 F
(5 Iterators) 72 617.33 T
(. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 120 617.33 T
( 6) 532.5 617.33 T
3 F
(5.1 Input iterators) 99 605.33 T
( . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 172.5 605.33 T
( 7) 532.5 605.33 T
(5.2 Output iterators) 99 593.33 T
( . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 177.5 593.33 T
( 8) 532.5 593.33 T
(5.3 Forward iterators) 99 581.33 T
(. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 185 581.33 T
( 8) 532.5 581.33 T
(5.4 Bidirectional iterators) 99 569.33 T
( . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 202.5 569.33 T
( 9) 532.5 569.33 T
(5.5 Random access iterators) 99 557.33 T
( . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 212.5 557.33 T
( 10) 527.5 557.33 T
(5.6 Iterator tags) 99 545.33 T
( . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 162.5 545.33 T
( 10) 527.5 545.33 T
(5.6.1 Examples of using iterator tags) 126 533.33 T
( . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 277.5 533.33 T
( 11) 527.5 533.33 T
(5.6.2 Library defined primitives) 126 521.33 T
( . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 257.5 521.33 T
( 12) 527.5 521.33 T
(5.7 Iterator operations) 99 509.33 T
(. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 190 509.33 T
( 14) 527.5 509.33 T
2 F
(6 Function objects) 72 491.33 T
(. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 155 491.33 T
( 14) 527.5 491.33 T
3 F
(6.1 Base) 99 479.33 T
(. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 135 479.33 T
( 14) 527.5 479.33 T
(6.2 Arithmetic operations) 99 467.33 T
( . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 202.5 467.33 T
( 15) 527.5 467.33 T
(6.3 Comparisons) 99 455.33 T
( . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 167.5 455.33 T
( 15) 527.5 455.33 T
(6.4 Logical operations) 99 443.33 T
(. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 190 443.33 T
( 16) 527.5 443.33 T
2 F
(7 Allocators) 72 425.33 T
( . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 127.5 425.33 T
( 16) 527.5 425.33 T
3 F
(7.1 Allocator requirements) 99 413.33 T
( . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 207.5 413.33 T
( 16) 527.5 413.33 T
(7.2 The default allocator) 99 401.33 T
( . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 197.5 401.33 T
( 18) 527.5 401.33 T
2 F
(8 Containers) 72 383.33 T
( . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 132.5 383.33 T
( 18) 527.5 383.33 T
3 F
(8.1 Sequences) 99 371.33 T
( . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 157.5 371.33 T
( 21) 527.5 371.33 T
(8.1.1 Vector) 126 359.33 T
(. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 180 359.33 T
( 22) 527.5 359.33 T
(8.1.2 List) 126 347.33 T
( . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 167.5 347.33 T
( 26) 527.5 347.33 T
(8.1.3 Deque) 126 335.33 T
( . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 177.5 335.33 T
( 28) 527.5 335.33 T
(8.2 Associative containers) 99 323.33 T
(. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 205 323.33 T
( 30) 527.5 323.33 T
(8.2.1 Set) 126 311.33 T
(. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 165 311.33 T
( 33) 527.5 311.33 T
(8.2.2 Multiset) 126 299.33 T
(. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 185 299.33 T
( 34) 527.5 299.33 T
(8.2.3 Map) 126 287.33 T
(. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 170 287.33 T
( 36) 527.5 287.33 T
(8.2.4 Multimap) 126 275.33 T
( . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 192.5 275.33 T
( 38) 527.5 275.33 T
2 F
(9 Str) 72 257.33 T
(eam iterators) 91.78 257.33 T
( . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 152.5 257.33 T
( 39) 527.5 257.33 T
3 F
(9.1 Istream Iterator) 99 245.33 T
( . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 177.5 245.33 T
( 40) 527.5 245.33 T
(9.2 Ostream iterator) 99 233.33 T
(. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 180 233.33 T
( 40) 527.5 233.33 T
2 F
(10 Algorithms) 72 215.33 T
(. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 140 215.33 T
( 41) 527.5 215.33 T
3 F
(10.1 Non-mutating sequence operations) 99 203.33 T
(. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 260 203.33 T
( 41) 527.5 203.33 T
(10.1.1 For each) 126 191.33 T
( . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 192.5 191.33 T
( 41) 527.5 191.33 T
(10.1.2 Find) 126 179.33 T
(. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 175 179.33 T
( 41) 527.5 179.33 T
(10.1.3 Adjacent find) 126 167.33 T
( . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 212.5 167.33 T
( 41) 527.5 167.33 T
(10.1.4 Count) 126 155.33 T
( . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 182.5 155.33 T
( 42) 527.5 155.33 T
(10.1.5 Mismatch) 126 143.33 T
( . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 197.5 143.33 T
( 42) 527.5 143.33 T
(10.1.6 Equal) 126 131.33 T
(. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 180 131.33 T
( 42) 527.5 131.33 T
(10.1.7 Search) 126 119.33 T
(. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 185 119.33 T
( 42) 527.5 119.33 T
(10.2 Mutating sequence operations) 99 107.33 T
(. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 240 107.33 T
( 43) 527.5 107.33 T
(10.2.1 Copy) 126 95.33 T
(. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 180 95.33 T
( 43) 527.5 95.33 T
(10.2.2 Swap) 126 83.33 T
(. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 180 83.33 T
( 43) 527.5 83.33 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "1" 3
%%Page: "2" 4
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
72 18 540 63 R
7 X
0 0 0 1 0 0 0 K
V
2 10 Q
0 X
(2) 303.5 56.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
72 72 540 720 R
7 X
V
3 F
0 X
(10.2.3 Transform) 126 713.33 T
(. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 200 713.33 T
( 44) 527.5 713.33 T
(10.2.4 Replace) 126 701.33 T
(. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 190 701.33 T
( 44) 527.5 701.33 T
(10.2.5 Fill) 126 689.33 T
(. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 170 689.33 T
( 44) 527.5 689.33 T
(10.2.6 Generate) 126 677.33 T
( . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 192.5 677.33 T
( 44) 527.5 677.33 T
(10.2.7 Remove) 126 665.33 T
(. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 190 665.33 T
( 45) 527.5 665.33 T
(10.2.8 Unique) 126 653.33 T
( . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 187.5 653.33 T
( 45) 527.5 653.33 T
(10.2.9 Reverse) 126 641.33 T
(. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 190 641.33 T
( 46) 527.5 641.33 T
(10.2.10 Rotate) 126 629.33 T
( . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 187.5 629.33 T
( 46) 527.5 629.33 T
(10.2.11 Random shuffle) 126 617.33 T
( . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 227.5 617.33 T
( 46) 527.5 617.33 T
(10.2.12 Partitions) 126 605.33 T
(. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 200 605.33 T
( 47) 527.5 605.33 T
(10.3 Sorting and related operations) 99 593.33 T
(. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 240 593.33 T
( 47) 527.5 593.33 T
(10.3.1 Sort) 126 581.33 T
(. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 175 581.33 T
( 47) 527.5 581.33 T
(10.3.2 Nth element) 126 569.33 T
( . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 207.5 569.33 T
( 48) 527.5 569.33 T
(10.3.3 Binary search) 126 557.33 T
( . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 212.5 557.33 T
( 48) 527.5 557.33 T
(10.3.4 Merge) 126 545.33 T
( . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 182.5 545.33 T
( 49) 527.5 545.33 T
(10.3.5 Set operations on sorted structures) 126 533.33 T
(. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 295 533.33 T
( 50) 527.5 533.33 T
(10.3.6 Heap operations) 126 521.33 T
( . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 222.5 521.33 T
( 51) 527.5 521.33 T
(10.3.7 Minimum and maximum) 126 509.33 T
( . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 257.5 509.33 T
( 52) 527.5 509.33 T
(10.3.8 Lexicographical comparison) 126 497.33 T
( . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 272.5 497.33 T
( 53) 527.5 497.33 T
(10.3.9 Permutation generators) 126 485.33 T
(. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 250 485.33 T
( 53) 527.5 485.33 T
(10.4 Generalized numeric operations) 99 473.33 T
( . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 247.5 473.33 T
( 54) 527.5 473.33 T
(10.4.1 Accumulate) 126 461.33 T
(. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 205 461.33 T
( 54) 527.5 461.33 T
(10.4.2 Inner product) 126 449.33 T
( . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 212.5 449.33 T
( 54) 527.5 449.33 T
(10.4.3 Partial sum) 126 437.33 T
( . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 202.5 437.33 T
( 54) 527.5 437.33 T
(10.4.4 Adjacent difference) 126 425.33 T
( . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 237.5 425.33 T
( 54) 527.5 425.33 T
2 F
(1) 72 407.33 T
(1 Adaptors) 76.45 407.33 T
(. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 130 407.33 T
( 55) 527.5 407.33 T
3 F
(1) 99 395.33 T
(1.1 Container adaptors) 103.63 395.33 T
(. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 195 395.33 T
( 55) 527.5 395.33 T
(11.1.1 Stack) 126 383.33 T
(. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 180 383.33 T
( 55) 527.5 383.33 T
(11.1.2 Queue) 126 371.33 T
( . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 182.5 371.33 T
( 55) 527.5 371.33 T
(11.1.3 Priority queue) 126 359.33 T
(. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 215 359.33 T
( 56) 527.5 359.33 T
(1) 99 347.33 T
(1.2 Iterator adaptors) 103.63 347.33 T
(. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 185 347.33 T
( 57) 527.5 347.33 T
(11.2.1 Reverse iterators) 126 335.33 T
(. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 225 335.33 T
( 57) 527.5 335.33 T
(11.2.2 Insert iterators) 126 323.33 T
(. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 215 323.33 T
( 59) 527.5 323.33 T
(1) 99 311.33 T
(1.3 Function adaptors) 103.63 311.33 T
( . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 192.5 311.33 T
( 60) 527.5 311.33 T
(11.3.1 Negators) 126 299.33 T
( . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 192.5 299.33 T
( 61) 527.5 299.33 T
(11.3.2 Binders) 126 287.33 T
( . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 187.5 287.33 T
( 61) 527.5 287.33 T
(11.3.3 Adaptors for pointers to functions) 126 275.33 T
( . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 292.5 275.33 T
( 62) 527.5 275.33 T
2 F
(12 Memory Handling Primitives) 72 257.33 T
(. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 220 257.33 T
( 63) 527.5 257.33 T
(13 Bibliography) 72 239.33 T
(. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .) 145 239.33 T
( 63) 527.5 239.33 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "2" 4
%%Page: "3" 5
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
72 18 540 63 R
7 X
0 0 0 1 0 0 0 K
V
2 10 Q
0 X
(3) 303.5 56.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
72 72 540 720 R
7 X
V
0 12 Q
0 X
(1  Introduction) 72 711.25 T
2 10 Q
1.75 (The Standard Template Library provides a set of well structured generic C++ components that work) 72 692.96 P
-0.17 (together in a seamless way. Special care has been taken to ensure that all the template algorithms work not) 72 680.96 P
1.02 (only on the data structures in the library, but also on built-in C++ data structures. For example, all the) 72 668.96 P
1.34 (algorithms work on regular pointers. The orthogonal design of the library allows programmers to use) 72 656.96 P
1.83 (library data structures with their own algorithms, and to use library algorithms with their own data) 72 644.96 P
-0.26 (structures. The well specified semantic and complexity requirements guarantee that a user component will) 72 632.96 P
-0.14 (work with the library, and that it will work efficiently. This flexibility ensures the widespread utility of the) 72 620.96 P
(library.) 72 608.96 T
-0.58 (Another important consideration is efficiency. C++ is successful because it combines expressive power with) 72 589.96 P
0.01 (efficiency. Much effort has been spent to verify that every template component in the library has a generic) 72 577.96 P
0.21 (implementation that performs within a few percentage points of the efficiency of the corresponding hand) 72 565.96 P
(coded routine.) 72 553.96 T
0.07 (The third consideration in the design has been to develop a library structure that, while being natural and) 72 534.96 P
(easy to grasp, is based on a firm theoretical foundation.) 72 522.96 T
0 12 Q
(2  Structure of the library) 72 492.88 T
2 10 Q
(The library contains five main kinds of components:) 72 474.58 T
(\320) 90 460.58 T
(algorithm: defines a computational procedure.) 102 460.58 T
(\320) 90 447.58 T
(container: manages a set of memory locations.) 102 447.58 T
(\320) 90 434.58 T
(iterator: provides a means for an algorithm to traverse through a container.) 102 434.58 T
(\320) 90 421.58 T
(function object: encapsulates a function in an object for use by other components.) 102 421.58 T
(\320) 90 408.58 T
(adaptor: adapts a component to provide a different interface.) 102 408.58 T
2.14 (Such decomposition allows us to dramatically reduce the component space. For example, instead of) 72 390.58 P
0.72 (providing a search member function for every kind of container we provide a single version that works) 72 378.58 P
(with all of them as long as a basic set of requirements is satisfied.) 72 366.58 T
-0.24 (The following description helps clarify the structure of the library. If software components are tabulated as) 72 347.58 P
1.7 (a three-dimensional array, where one dimension represents different data types \050e.g. int, double\051, the) 72 335.58 P
1.25 (second dimension represents different containers \050e.g. vector, linked-list, file\051, and the third dimension) 72 323.58 P
-0.28 (represents different algorithms on the containers \050e.g. searching, sorting, rotation\051, if) 72 311.58 P
4 9 Q
-0.6 (i) 443.98 311.58 P
2 10 Q
-0.28 (,) 449.38 311.58 P
4 9 Q
-0.6 (j) 454.1 311.58 P
2 10 Q
-0.28 (, and) 459.5 311.58 P
4 9 Q
-0.6 (k) 483.38 311.58 P
2 10 Q
-0.28 ( are the size) 488.78 311.58 P
0.04 (of the dimensions, then) 72 299.58 P
4 9 Q
0.08 (i*j*k) 178.12 299.58 P
2 10 Q
0.04 ( different versions of code have to be designed. By using template functions) 205.12 299.58 P
-0.29 (that are parameterized by a data type, we need only) 72 287.58 P
4 9 Q
-0.64 (j*k) 301.49 287.58 P
2 10 Q
-0.29 ( versions. Further, by making our algorithms work) 317.69 287.58 P
0.66 (on different containers, we need merely) 72 275.58 P
4 9 Q
1.42 (j+k) 254.18 275.58 P
2 10 Q
0.66 ( versions. This significantly simplifies software design work) 270.38 275.58 P
-0.58 (and also makes it possible to use components in the library together with user defined components in a very) 72 263.58 P
-0.49 (flexible way. A user may easily define a specialized container class and use the library\325s sort function to sort) 72 251.58 P
2.19 (it. A user may provide a different comparison function for the sort either as a regular pointer to a) 72 239.58 P
2.54 (comparison function, or as a function object \050an object with an) 72 227.58 P
4 9 Q
5.49 (operator\050\051) 376.83 227.58 P
2 10 Q
2.54 ( defined\051 that does the) 430.83 227.58 P
-0.07 (comparisons. If a user needs to iterate through a container in the reverse direction, the) 72 215.58 P
4 9 Q
-0.15 (reverse_iterator) 453.6 215.58 P
2 10 Q
(adaptor allows that.) 72 203.58 T
-0.01 (The library extends the basic C++ paradigms in a consistent way, so it is easy for a C/C++ programmer to) 72 184.58 P
0.38 (start using the library. For example, the library contains a) 72 172.58 P
4 9 Q
0.82 (merge) 331.85 172.58 P
2 10 Q
0.38 ( template function. When a user has two) 358.85 172.58 P
(arrays) 72 160.58 T
4 9 Q
(a) 102.2 160.58 T
2 10 Q
( and) 107.6 160.58 T
4 9 Q
(b) 129.53 160.58 T
2 10 Q
( to be merged into) 134.93 160.58 T
4 9 Q
(c) 217.95 160.58 T
2 10 Q
( it can be done with:) 223.35 160.58 T
4 9 Q
(int a[1000];) 108 138.25 T
(int b[2000];) 108 127.25 T
(int c[3000];) 108 116.25 T
(...) 108 105.25 T
(merge\050a, a + 1000, b, b + 2000, c\051;) 108 94.25 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "3" 5
%%Page: "4" 6
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
72 18 540 63 R
7 X
0 0 0 1 0 0 0 K
V
2 10 Q
0 X
(4) 303.5 56.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
72 72 540 720 R
7 X
V
0 X
0.19 (When a user wants to merge a vector and a list \050both of which are template classes in the library\051 and put) 72 713.33 P
(the result into a freshly allocated uninitialized storage it can be done with:) 72 701.33 T
4 9 Q
(vector<Employee> a;) 108 679 T
(list<Employee> b;) 108 668 T
(...) 108 657 T
(Employee* c = allocate\050a.size\050\051 + b.size\050\051, \050Employee*\0510\051;) 108 646 T
(merge\050a.begin\050\051, a.end\050\051, b.begin\050\051, b.end\050\051,) 108 635 T
(raw_storage_iterator<Employee*, Employee>\050c\051\051;) 144 624 T
2 10 Q
0.81 (where) 72 605.33 P
4 9 Q
1.75 (begin\050\051) 103 605.33 P
2 10 Q
0.81 ( and) 140.8 605.33 P
4 9 Q
1.75 (end\050\051) 164.35 605.33 P
2 10 Q
0.81 ( are member functions of containers that return the right types of iterators or) 191.35 605.33 P
-0.51 (pointer-like objects that allow the merge to do the job and) 72 593.33 P
4 9 Q
-1.11 (raw_storage_iterator) 323.78 593.33 P
2 10 Q
-0.51 ( is an adapter that allows) 431.78 593.33 P
(algorithms to put results directly into uninitialized memory by calling the appropriate copy constructor.) 72 581.33 T
-0.16 (In many cases it is useful to iterate through input/output streams in the same way as through regular data) 72 562.33 P
0.04 (structures. For example, if we want to merge two data structures and then store them in a file, it would be) 72 550.33 P
-0.26 (nice to avoid creation of an auxiliary data structure for the result, instead storing the result directly into the) 72 538.33 P
-0.21 (corresponding file. The library provides both) 72 526.33 P
4 9 Q
-0.46 (istream_iterator) 272.42 526.33 P
2 10 Q
-0.21 ( and) 358.82 526.33 P
4 9 Q
-0.46 (ostream_iterator) 380.32 526.33 P
2 10 Q
-0.21 ( template classes) 466.72 526.33 P
0.25 (to make many of the library algorithms work with I/O streams that represent homogenous aggregates of) 72 514.33 P
0.88 (data. Here is a program that reads a file of integers from the standard input, removes all those that are) 72 502.33 P
(divisible by its command argument, and writes the result to the standard output:) 72 490.33 T
4 9 Q
(main\050int argc, char** argv\051 {) 108 468 T
(if \050argc != 2\051 throw\050\323usage: remove_if_divides integer\134n\323\051;) 144 457 T
(remove_copy_if\050istream_iterator<int>\050cin\051, istream_iterator<int>\050\051,) 144 446 T
(ostream_iterator<int>\050cout, \323\134n\323\051,) 180 435 T
(not1\050bind2nd\050modulus<int>\050\051, atoi\050argv[1]\051\051\051\051;) 180 424 T
(}) 108 413 T
2 10 Q
-0.05 (All the work is done by) 72 394.33 P
4 9 Q
-0.1 (remove_copy_if) 177.93 394.33 P
2 10 Q
-0.05 ( which reads integers one by one until the input iterator becomes) 253.53 394.33 P
0.07 (equal to the) 72 382.33 P
5 F
0.07 (end-of-stream) 126.63 382.33 P
2 F
0.07 ( iterator that is constructed by the constructor with no arguments. \050In general, all) 182.18 382.33 P
0.39 (the algorithms work in a \322from here to there\323 fashion taking two iterators that signify the beginning and) 72 370.33 P
0.43 (the end of the input.\051 Then) 72 358.33 P
4 9 Q
0.93 (remove_copy_if) 195.25 358.33 P
2 10 Q
0.43 ( writes the integers that pass the test onto the output stream) 270.85 358.33 P
0.36 (through the output iterator that is bound to) 72 346.33 P
4 9 Q
0.78 (cout) 269.45 346.33 P
2 10 Q
0.36 (. As a predicate,) 291.05 346.33 P
4 9 Q
0.78 (remove_copy_if) 365.77 346.33 P
2 10 Q
0.36 ( uses a function object) 441.37 346.33 P
1.77 (constructed from a function object,) 72 334.33 P
4 9 Q
3.83 (modulus<int>) 237.12 334.33 P
2 10 Q
1.77 (, which takes) 301.92 334.33 P
4 9 Q
3.83 (i) 367.42 334.33 P
2 10 Q
1.77 ( and) 372.82 334.33 P
4 9 Q
3.83 (j) 398.29 334.33 P
2 10 Q
1.77 ( and returns) 403.69 334.33 P
4 9 Q
3.83 (i%j) 465.47 334.33 P
2 10 Q
1.77 (, as a binary) 481.67 334.33 P
1.74 (predicate and makes it into a unary predicate by using) 72 322.33 P
4 9 Q
3.76 (bind2nd) 332.88 322.33 P
2 10 Q
1.74 ( to bind the second argument to the) 370.68 322.33 P
1.37 (command line argument,) 72 310.33 P
4 9 Q
2.97 (atoi\050argv[1]\051) 190.28 310.33 P
2 10 Q
1.37 (. Then the negation of this unary predicate is obtained using) 260.48 310.33 P
(function adaptor) 72 298.33 T
4 9 Q
(not1) 148.86 298.33 T
2 10 Q
(.) 170.46 298.33 T
(A somewhat more realistic example is a filter program that takes a file and randomly shuffles its lines.) 72 279.33 T
4 9 Q
(main\050int argc, char**\051 {) 108 268 T
(if \050argc != 1\051 throw\050\323usage: shuffle\134n\323\051;) 144 257 T
(vector<string> v;) 144 246 T
(copy\050istream_iterator<string>\050cin\051, istream_iterator<string>\050\051,) 144 235 T
(inserter\050v, v.end\050\051\051\051;) 180 224 T
(random_shuffle\050v.begin\050\051, v.end\050\051\051;) 144 213 T
(copy\050v.begin\050\051, v.end\050\051, ostream_iterator<string>\050cout\051\051;) 144 202 T
(}) 108 191 T
2 10 Q
0.75 (In this example,) 72 172.33 P
4 9 Q
1.61 (copy) 147.15 172.33 P
2 10 Q
0.75 ( moves lines from the standard input into a vector, but since the vector is not pre-) 168.75 172.33 P
-0.14 (allocated it uses an insert iterator to insert the lines one by one into the vector. \050This technique allows all of) 72 160.33 P
2.87 (the copying functions to work in the usual overwrite mode as well as in the insert mode.\051 Then) 72 148.33 P
4 9 Q
(random_shuffle) 72 136.33 T
2 10 Q
( shuffles the vector and another call to) 147.6 136.33 T
4 9 Q
(copy) 318.72 136.33 T
2 10 Q
( copies it onto the) 340.32 136.33 T
4 9 Q
(cout) 420.71 136.33 T
2 10 Q
( stream.) 442.31 136.33 T
0 12 Q
(3  Requirements) 72 106.25 T
2 10 Q
2.91 (To ensure that the different components in a library work together, they must satisfy some basic) 72 87.96 P
0.24 (requirements. Requirements should be as general as possible, so instead of saying \322class) 72 75.96 P
4 9 Q
0.52 (X) 467.11 75.96 P
2 10 Q
0.24 ( has to define a) 472.51 75.96 P
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "4" 6
%%Page: "5" 7
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
72 18 540 63 R
7 X
0 0 0 1 0 0 0 K
V
2 10 Q
0 X
(5) 303.5 56.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
72 72 540 720 R
7 X
V
0 X
0.71 (member function) 72 713.33 P
4 9 Q
1.54 (operator++\050\051,\323) 152.22 713.33 P
2 10 Q
0.71 ( we say \322for any object) 227.82 713.33 P
4 9 Q
1.54 (x) 334.96 713.33 P
2 10 Q
0.71 ( of class) 340.36 713.33 P
4 9 Q
1.54 (X) 379.62 713.33 P
2 10 Q
0.71 (,) 385.02 713.33 P
4 9 Q
1.54 (++x) 390.73 713.33 P
2 10 Q
0.71 ( is defined.\323 \050It is unspecified) 406.93 713.33 P
0.32 (whether the operator is a member or a global function.\051 Requirements are stated in terms of well-defined) 72 701.33 P
3.01 (expressions, which define valid terms of the types that satisfy the requirements. For every set of) 72 689.33 P
0.4 (requirements there is a table that specifies an initial set of the valid expressions and their semantics. Any) 72 677.33 P
1.17 (generic algorithm that uses the requirements has to be written in terms of the valid expressions for its) 72 665.33 P
(formal type parameters.) 72 653.33 T
1.52 (If an operation is required to be linear time, it means no worse than linear time, and a constant time) 72 634.33 P
(operation satisfies the requirement.) 72 622.33 T
2.77 (In some cases we present the semantic requirements using C++ code. Such code is intended as a) 72 603.33 P
0.84 (specification of equivalence of a construct to another construct, not necessarily as the way the construct) 72 591.33 P
4.17 (must be implemented \050although in some cases the code given is unambiguously the optimum) 72 579.33 P
(implementation\051.) 72 567.33 T
0 12 Q
(4  Core components) 72 537.25 T
2 10 Q
0.81 (This section contains some basic template functions and classes that are used throughout the rest of the) 72 518.96 P
(library.) 72 506.96 T
0 11 Q
(4.1 Operators) 72 483.61 T
2 10 Q
1.4 (To avoid redundant definitions of) 72 466.53 P
4 9 Q
3.02 (operator!=) 231.46 466.53 P
2 10 Q
1.4 ( out of) 285.46 466.53 P
4 9 Q
3.02 (operator==) 320.7 466.53 P
2 10 Q
1.4 ( and) 374.7 466.53 P
4 9 Q
3.02 (operators>) 399.43 466.53 P
2 10 Q
1.4 (,) 453.43 466.53 P
4 9 Q
3.02 (<=) 459.83 466.53 P
2 10 Q
1.4 (, and) 470.63 466.53 P
4 9 Q
3.02 (>=) 497.86 466.53 P
2 10 Q
1.4 ( out of) 508.66 466.53 P
4 9 Q
(operator<) 72 454.53 T
2 10 Q
( the library provides the following:) 120.6 454.53 T
4 9 Q
(template <class T1, class T2>) 108 432.2 T
(inline bool operator!=\050const T1& x, const T2& y\051 {) 108 421.2 T
(return !\050x == y\051;) 144 410.2 T
(}) 108 399.2 T
(template <class T1, class T2>) 108 377.2 T
(inline bool operator>\050const T1& x, const T2& y\051 {) 108 366.2 T
(return y < x;) 144 355.2 T
(}) 108 344.2 T
(template <class T1, class T2>) 108 322.2 T
(inline bool operator<=\050const T1& x, const T2& y\051 {) 108 311.2 T
(return !\050y < x\051;) 144 300.2 T
(}) 108 289.2 T
(template <class T1, class T2>) 108 267.2 T
(inline bool operator>=\050const T1& x, const T2& y\051 {) 108 256.2 T
(return !\050x < y\051;) 144 245.2 T
(}) 108 234.2 T
0 11 Q
(4.2 Pair) 72 211.18 T
2 10 Q
(The library includes templates for heterogeneous pairs of values.) 72 194.1 T
4 9 Q
(template <class T1, class T2>) 108 171.77 T
(struct pair {) 108 160.77 T
(T1 first;) 144 149.77 T
(T2 second;) 144 138.77 T
(pair\050\051 {}) 144 127.77 T
(pair\050const T1& x, const T2& y\051 : first\050x\051, second\050y\051 {}) 144 116.77 T
(};) 108 105.77 T
(template <class T1, class T2>) 108 83.77 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "5" 7
%%Page: "6" 8
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
72 18 540 63 R
7 X
0 0 0 1 0 0 0 K
V
2 10 Q
0 X
(6) 303.5 56.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
72 72 540 720 R
7 X
V
4 9 Q
0 X
(inline bool operator==\050const pair<T1, T2>& x, const pair<T1, T2>& y\051 {) 108 714 T
(return x.first == y.first && x.second == y.second;) 144 703 T
(}) 108 692 T
(template <class T1, class T2>) 108 670 T
(inline bool operator<\050const pair<T1, T2>& x, const pair<T1, T2>& y\051 {) 108 659 T
-0.33 (return x.first < y.first || \050!\050y.first < x.first\051 && x.second < y.second\051;) 144 648 P
(}) 108 637 T
2 10 Q
1.04 (The library provides a matching template function) 72 618.33 P
4 9 Q
2.25 (make_pair) 305.03 618.33 P
2 10 Q
1.04 ( to simplify their construction. Instead of) 353.63 618.33 P
(saying, for example,) 72 606.33 T
4 9 Q
(return pair<int, double>\0505, 3.1415926\051; // explicit types) 108 584 T
2 10 Q
(one may say) 72 565.33 T
4 9 Q
(return make_pair\0505, 3.1415926\051; // types are deduced) 108 543 T
(template <class T1, class T2>) 108 521 T
(inline pair<T1, T2> make_pair\050const T1& x, const T2& y\051 {) 108 510 T
(return pair<T1, T2>\050x, y\051;) 144 499 T
0 12 Q
(5  Iterators) 72 469.25 T
2 10 Q
0.57 (Iterators are a generalization of pointers that allow a programmer to work with different data structures) 72 450.96 P
1.23 (\050containers\051 in a uniform manner. To be able to construct template algorithms that work correctly and) 72 438.96 P
0.85 (efficiently on different types of data structures, we need to formalize not just the interfaces but also the) 72 426.96 P
0.48 (semantics and complexity assumptions of iterators. Iterators are objects that have) 72 414.96 P
4 9 Q
1.03 (operator*) 438.36 414.96 P
2 10 Q
0.48 ( returning a) 486.96 414.96 P
0.28 (value of some class or built-in type) 72 402.96 P
4 9 Q
0.61 (T) 230.51 402.96 P
2 10 Q
0.28 ( called a) 235.91 402.96 P
5 F
0.28 (value type) 275.41 402.96 P
2 F
0.28 ( of the iterator. For every iterator type) 317.08 402.96 P
4 9 Q
0.61 (X) 488.97 402.96 P
2 10 Q
0.28 ( for which) 494.37 402.96 P
(equality is defined, there is a corresponding signed integral type called the) 72 390.96 T
5 F
(distance type) 404.13 390.96 T
2 F
( of the iterator.) 456.81 390.96 T
1.75 (Since iterators are a generalization of pointers, their semantics is a generalization of the semantics of) 72 371.96 P
-0.13 (pointers in C++. This assures that every template function that takes iterators works with regular pointers.) 72 359.96 P
0.48 (Depending on the operations defined on them, there are five categories of iterators:) 72 347.96 P
5 F
0.48 (input iterators, output) 448.21 347.96 P
0.75 (iterators,) 72 335.96 P
0.75 (forward iterators) 111.63 335.96 P
2 F
0.75 (,) 180.42 335.96 P
5 F
0.75 (bidirectional iterators) 186.17 335.96 P
2 F
0.75 ( and) 273.67 335.96 P
5 F
0.75 (random access iterators) 297.1 335.96 P
2 F
0.75 (. Forward iterators satisfy all the) 392.83 335.96 P
2.56 (requirements of the input and output iterators and can be used whenever either kind is specified.) 72 323.96 P
1.11 (Bidirectional iterators satisfy all the requirements of the forward iterators and can be used whenever a) 72 311.96 P
0.15 (forward iterator is specified. Random access iterators satisfy all the requirements of bidirectional iterators) 72 299.96 P
-0.33 (and can be used whenever a bidirectional iterator is specified. There is an additional attribute that forward,) 72 287.96 P
-0.12 (bidirectional and random access iterators might have, that is, they can be) 72 275.96 P
5 F
-0.12 (mutable) 394.82 275.96 P
2 F
-0.12 ( or) 427.23 275.96 P
5 F
-0.12 (constant) 441.41 275.96 P
2 F
-0.12 ( depending on) 476.03 275.96 P
-0.52 (whether the result of the) 72 263.96 P
4 9 Q
-1.13 (operator*) 180.37 263.96 P
2 10 Q
-0.52 ( behaves as a reference or as a reference to a constant. Constant iterators) 228.97 263.96 P
(do not satisfy the requirements for output iterators.) 72 251.96 T
0.22 (Just as a regular pointer to an array guarantees that there is a pointer value pointing past the last element) 72 132.96 P
1.95 (of the array, so for any iterator type there is an iterator value that points past the last element of a) 72 120.96 P
0.7 (corresponding container. These values are called) 72 108.96 P
5 F
0.7 (past-the-end) 293.94 108.96 P
2 F
0.7 ( values. Values of the iterator for which the) 343.93 108.96 P
4 9 Q
3.11 (operator*) 72 96.96 P
2 10 Q
1.44 ( is defined are called) 120.6 96.96 P
5 F
1.44 (dereferenceable) 221.21 96.96 P
2 F
1.44 (. The library never assumes that past-the-end values are) 281.59 96.96 P
0.64 (dereferenceable. Iterators might also have) 72 84.96 P
5 F
0.64 (singular) 262.51 84.96 P
2 F
0.64 ( values that are not associated with any container. For) 296.41 84.96 P
72 72 540 720 C
72 148.62 540 229.62 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
72 147.62 540 246.62 R
7 X
0 0 0 1 0 0 0 K
V
6 12 Q
0 X
(T) 192.74 214.62 T
(able 1: Relations among iterator categories) 199.64 214.62 T
3 10 Q
(Random access) 116.64 179.96 T
(Bidirectional) 243.6 179.96 T
(Forward) 366 179.96 T
(Input) 466.8 191.96 T
(Output) 466.8 167.96 T
108 204.37 108 160.87 2 L
V
0.5 H
0 Z
N
504 204.37 504 160.87 2 L
V
N
107.75 204.62 504.25 204.62 2 L
V
N
107.75 160.62 504.25 160.62 2 L
V
N
216.8 185.12 222 182.12 216.8 179.12 3 L
N
195 182.12 221.75 182.12 2 L
7 X
V
2 Z
0 X
N
342.8 185.12 348 182.12 342.8 179.12 3 L
0 Z
N
321 182.12 347.75 182.12 2 L
7 X
V
2 Z
0 X
N
441.12 192.33 447 191.12 443.02 186.64 3 L
0 Z
N
420 182.12 446.76 191.04 2 L
7 X
V
2 Z
0 X
N
443.02 177.61 447 173.12 441.12 171.92 3 L
0 Z
N
420 182.12 446.76 173.2 2 L
7 X
V
2 Z
0 X
N
72 72 540 720 C
0 0 612 792 C
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "6" 8
%%Page: "7" 9
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
72 18 540 63 R
7 X
0 0 0 1 0 0 0 K
V
2 10 Q
0 X
(7) 303.5 56.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
72 72 540 720 R
7 X
V
0 X
-0.14 (example, after the declaration of an uninitialized pointer) 72 713.33 P
4 9 Q
-0.3 (x) 322.91 713.33 P
2 10 Q
-0.14 ( \050as with) 328.31 713.33 P
4 9 Q
-0.3 (int* x;) 368.29 713.33 P
2 10 Q
-0.14 (\051,) 405.79 713.33 P
4 9 Q
-0.3 (x) 413.98 713.33 P
2 10 Q
-0.14 ( should always be assumed) 419.38 713.33 P
0.61 (to have a singular value of a pointer. Results of most expressions are undefined for singular values. The) 72 701.33 P
0.52 (only exception is an assignment of a non-singular value to an iterator that holds a singular value. In this) 72 689.33 P
0.17 (case the singular value is overwritten the same way as any other value. Dereferenceable and past-the-end) 72 677.33 P
(values are always non-singular.) 72 665.33 T
0.2 (An iterator) 72 646.33 P
4 9 Q
0.43 (j) 123.58 646.33 P
2 10 Q
0.2 ( is called) 128.98 646.33 P
5 F
0.2 (reachable) 170.4 646.33 P
2 F
0.2 ( from an iterator) 207.43 646.33 P
4 9 Q
0.43 (i) 283.2 646.33 P
2 10 Q
0.2 ( if and only if there is a finite sequence of applications of) 288.6 646.33 P
4 9 Q
0.27 (operator++) 72 634.33 P
2 10 Q
0.12 ( to) 126 634.33 P
4 9 Q
0.27 (i) 139.97 634.33 P
2 10 Q
0.12 ( that makes) 145.37 634.33 P
4 9 Q
0.27 (i == j) 199 634.33 P
2 10 Q
0.12 (. If) 231.94 634.33 P
4 9 Q
0.27 (i) 246.38 634.33 P
2 10 Q
0.12 ( and) 251.79 634.33 P
4 9 Q
0.27 (j) 273.96 634.33 P
2 10 Q
0.12 ( refer to the same container, then either) 279.36 634.33 P
4 9 Q
0.27 (j) 455.78 634.33 P
2 10 Q
0.12 ( is reachable from) 461.18 634.33 P
4 9 Q
(i) 72 622.33 T
2 10 Q
(, or) 77.4 622.33 T
4 9 Q
(i) 94.31 622.33 T
2 10 Q
( is reachable from) 99.71 622.33 T
4 9 Q
(j) 180.66 622.33 T
2 10 Q
(, or both \050) 186.06 622.33 T
4 9 Q
(i == j) 228.87 622.33 T
2 10 Q
(\051.) 261.27 622.33 T
0.06 (Most of the library\325s algorithmic templates that operate on data structures have interfaces that use ranges.) 72 603.33 P
0.28 (A range is a pair of iterators that designate the beginning and end of the computation. A range) 72 591.33 P
4 9 Q
0.59 ([i, i\051) 497.08 591.33 P
2 10 Q
0.28 ( is) 530.07 591.33 P
-0.29 (an empty range; in general, a range) 72 579.33 P
4 9 Q
-0.63 ([i, j\051) 228.5 579.33 P
2 10 Q
-0.29 ( refers to the elements in the data structure starting with the one) 260.27 579.33 P
-0.12 (pointed to by) 72 567.33 P
4 9 Q
-0.26 (i) 133.3 567.33 P
2 10 Q
-0.12 ( and up to but not including the one pointed to by) 138.7 567.33 P
4 9 Q
-0.26 ( j) 358.53 567.33 P
2 10 Q
-0.12 (. Range) 369.07 567.33 P
4 9 Q
-0.26 ( [i, j\051) 401.79 567.33 P
2 10 Q
-0.12 ( is valid if and only if) 439.07 567.33 P
4 9 Q
-0.26 (j) 534.6 567.33 P
2 10 Q
1.68 (is reachable from) 72 555.33 P
4 9 Q
3.63 (i) 155.5 555.33 P
2 10 Q
1.68 (. The result of the application of the algorithms in the library to invalid ranges is) 160.9 555.33 P
(undefined.) 72 543.33 T
-0.53 (All the categories of iterators require only those functions that are realizable for a given category in constant) 72 524.33 P
(time \050amortized\051. Therefore, requirement tables for the iterators do not have a complexity column.) 72 512.33 T
-0.15 (In the following sections, we assume:) 72 493.33 P
4 9 Q
-0.32 (a) 238.3 493.33 P
2 10 Q
-0.15 ( and) 243.7 493.33 P
4 9 Q
-0.32 (b) 265.33 493.33 P
2 10 Q
-0.15 ( are values of) 270.73 493.33 P
4 9 Q
-0.32 (X) 331.29 493.33 P
2 10 Q
-0.15 (,) 336.69 493.33 P
4 9 Q
-0.32 (n) 341.55 493.33 P
2 10 Q
-0.15 ( is a value of the distance type) 346.95 493.33 P
4 9 Q
-0.32 (Distance,) 481.15 493.33 P
-0.32 (u) 532.1 493.33 P
2 10 Q
-0.15 (,) 537.5 493.33 P
4 9 Q
(tmp) 72 481.33 T
2 10 Q
(, and) 88.2 481.33 T
4 9 Q
(m) 112.63 481.33 T
2 10 Q
( are identifiers,) 118.03 481.33 T
4 9 Q
(r) 186.79 481.33 T
2 10 Q
( and) 192.19 481.33 T
4 9 Q
(s) 214.12 481.33 T
2 10 Q
( are lvalues of) 219.52 481.33 T
4 9 Q
(X) 283.58 481.33 T
2 10 Q
(,) 288.98 481.33 T
4 9 Q
(t) 293.98 481.33 T
2 10 Q
( is a value of value type) 299.38 481.33 T
4 9 Q
(T) 406.2 481.33 T
2 10 Q
(.) 411.6 481.33 T
0 11 Q
(5.1 Input iterators) 72 457.98 T
2 10 Q
-0.38 (A class or a built-in type) 72 440.91 P
4 9 Q
-0.83 (X) 180.05 440.91 P
2 10 Q
-0.38 ( satisfies the requirements of an input iterator for the value type) 185.45 440.91 P
4 9 Q
-0.83 (T) 465.44 440.91 P
2 10 Q
-0.38 ( if the following) 470.84 440.91 P
(expressions are valid:) 72 428.91 T
6 12 Q
(T) 212.78 386.57 T
(able 2: Input iterator r) 219.68 386.57 T
(equir) 336.11 386.57 T
(ements) 363.23 386.57 T
3 10 Q
(expression) 88.42 355.91 T
(return type) 166.84 355.91 T
(operational semantics) 242.38 355.91 T
(assertion/note) 407.46 361.91 T
(pre/post-condition) 398.58 349.91 T
4 9 Q
(X\050a\051) 83.76 328.57 T
(X\050a\051) 342.24 327.91 T
3 10 Q
( is a copy of) 363.84 327.91 T
4 9 Q
(a) 415.22 327.91 T
3 10 Q
(.) 420.62 327.91 T
(note: a destructor is assumed.) 342.24 315.91 T
4 9 Q
(X u\050a\051;) 83.76 296.57 T
(X u = a;) 83.76 285.57 T
3 10 Q
(post:) 342.24 295.91 T
4 9 Q
(u) 364.19 295.91 T
3 10 Q
( is a copy of) 369.59 295.91 T
4 9 Q
(a.) 420.97 295.91 T
(u = a) 83.76 266.57 T
(X&) 147.84 266.57 T
3 10 Q
(post:) 342.24 265.91 T
4 9 Q
(u) 364.19 265.91 T
3 10 Q
( is a copy of) 369.59 265.91 T
4 9 Q
(a.) 420.97 265.91 T
(a == b) 83.76 246.57 T
3 10 Q
(convertible to) 147.84 245.91 T
4 9 Q
(bool) 205.61 245.91 T
3 10 Q
(if) 342.24 245.91 T
4 9 Q
(a) 350.85 245.91 T
3 10 Q
( is a copy of) 356.25 245.91 T
4 9 Q
(b) 407.63 245.91 T
3 10 Q
(, then) 413.03 245.91 T
4 9 Q
(a == b) 437.75 245.91 T
3 10 Q
( returns) 470.15 245.91 T
4 9 Q
(true) 502.92 245.91 T
3 10 Q
(.) 524.52 245.91 T
4 9 Q
(==) 342.24 233.91 T
3 10 Q
( is an equivalence relation over the domain) 353.04 233.91 T
(of) 342.24 221.91 T
4 9 Q
(==) 353.07 221.91 T
3 10 Q
(.) 363.87 221.91 T
4 9 Q
(a != b) 83.76 202.57 T
3 10 Q
(convertible to) 147.84 201.91 T
4 9 Q
(bool) 205.61 201.91 T
(!\050a == b\051) 241.44 202.57 T
(*a) 83.76 182.57 T
3 10 Q
(convertible to) 147.84 181.91 T
4 9 Q
(T) 205.61 181.91 T
3 10 Q
(pre:) 342.24 181.91 T
4 9 Q
(a) 360.29 181.91 T
3 10 Q
( is dereferenceable.) 365.69 181.91 T
(if) 342.24 169.91 T
4 9 Q
(a) 350.85 169.91 T
3 10 Q
( is a copy of) 356.25 169.91 T
4 9 Q
(b) 407.63 169.91 T
3 10 Q
(, then) 413.03 169.91 T
4 9 Q
(*a) 437.75 169.91 T
3 10 Q
( is equivalent to) 448.55 169.91 T
4 9 Q
(*b) 514.66 169.91 T
3 10 Q
(.) 525.46 169.91 T
4 9 Q
(++r) 83.76 150.57 T
(X&) 147.84 150.57 T
3 10 Q
(pre:) 342.24 149.91 T
4 9 Q
(r) 360.29 149.91 T
3 10 Q
( is dereferenceable.) 365.69 149.91 T
(post:) 342.24 137.91 T
4 9 Q
(r) 364.19 137.91 T
3 10 Q
( is dereferenceable or) 369.59 137.91 T
4 9 Q
(r) 457.88 137.91 T
3 10 Q
( is past-the-end.) 463.28 137.91 T
4 9 Q
(\050void\051r++) 83.76 118.57 T
(void) 147.84 118.57 T
(\050void\051++r) 241.44 118.57 T
77.76 376.32 77.76 110.82 2 L
V
0.5 H
0 Z
N
141.84 376.82 141.84 110.32 2 L
V
N
235.44 376.82 235.44 110.32 2 L
V
N
336.24 376.82 336.24 110.32 2 L
V
N
534.24 376.32 534.24 110.82 2 L
V
N
77.51 376.57 534.49 376.57 2 L
V
N
78.01 341.82 533.99 341.82 2 L
V
N
78.01 339.32 533.99 339.32 2 L
V
N
77.51 308.57 534.49 308.57 2 L
V
N
77.51 278.57 534.49 278.57 2 L
V
N
77.51 258.57 534.49 258.57 2 L
V
N
77.51 214.57 534.49 214.57 2 L
V
N
77.51 194.57 534.49 194.57 2 L
V
N
77.51 162.57 534.49 162.57 2 L
V
N
77.51 130.57 534.49 130.57 2 L
V
N
77.51 110.57 534.49 110.57 2 L
V
N
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "7" 9
%%Page: "8" 10
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
72 18 540 63 R
7 X
0 0 0 1 0 0 0 K
V
2 10 Q
0 X
(8) 303.5 56.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
72 72 540 720 R
7 X
V
7 F
0 X
0.19 (NOTE:) 72 606.33 P
2 F
0.19 ( For input iterators, there are no requirements on the type or value of) 103.94 606.33 P
4 9 Q
0.41 (r++) 413.87 606.33 P
2 10 Q
0.19 ( beyond the requirement) 430.07 606.33 P
1.13 (that) 72 594.33 P
4 9 Q
2.44 (*r++) 92.97 594.33 P
2 10 Q
1.13 ( works appropriately. In particular,) 114.57 594.33 P
4 9 Q
2.44 (r == s) 278.73 594.33 P
2 10 Q
1.13 ( does not imply) 316.01 594.33 P
4 9 Q
2.44 (++r == ++s) 391.89 594.33 P
2 10 Q
1.13 (. \050Equality does not) 450.76 594.33 P
-0.62 (guarantee the substitution property or referential transparency.\051 As for) 72 582.33 P
4 9 Q
-1.34 (++r) 382.28 582.33 P
2 10 Q
-0.62 (, there are no more requirements) 398.48 582.33 P
-0.39 (on the values of any copies of) 72 570.33 P
4 9 Q
-0.84 (r) 202.37 570.33 P
2 10 Q
-0.39 ( except that they can be safely destroyed or assigned to. After executing) 207.77 570.33 P
4 9 Q
-0.84 (++r) 521.3 570.33 P
2 10 Q
-0.39 (,) 537.5 570.33 P
0.06 (copies of \050the previous\051) 72 558.33 P
4 9 Q
0.14 (r) 178.46 558.33 P
2 10 Q
0.06 ( are not required to be in the domain of) 183.86 558.33 P
4 9 Q
0.14 (==) 360.46 558.33 P
2 10 Q
0.06 (. Algorithms on input iterators should) 371.26 558.33 P
-0.22 (never attempt to pass through the same iterator twice. They should be) 72 546.33 P
5 F
-0.22 (single pass) 381.59 546.33 P
2 F
-0.22 ( algorithms.) 424.99 546.33 P
5 F
-0.22 (Value type) 479.99 546.33 P
8 9 Q
-0.48 (T) 525.65 546.33 P
5 10 Q
-0.22 ( is) 531.05 546.33 P
0.23 (not required to be an lvalue type) 72 534.33 P
2 F
0.23 (. These algorithms can be used with istreams as the source of the input data) 203.2 534.33 P
(through the) 72 522.33 T
4 9 Q
(istream_iterator) 126.77 522.33 T
2 10 Q
( class.) 213.17 522.33 T
0 11 Q
(5.2 Output iterators) 72 498.98 T
2 10 Q
0.23 (A class or a built-in type) 72 481.91 P
4 9 Q
0.49 (X) 183.71 481.91 P
2 10 Q
0.23 ( satisfies the requirements of an output iterator if the following expressions are) 189.11 481.91 P
(valid:) 72 469.91 T
7 F
1.11 (NOTE:) 72 239.91 P
2 F
1.11 ( The only valid use of an) 103.94 239.91 P
4 9 Q
2.39 (operator*) 222.92 239.91 P
2 10 Q
1.11 ( is on the left side of the assignment statement.) 271.52 239.91 P
5 F
1.11 (Assignment) 491.1 239.91 P
0.16 (through the same value of the iterator happens only once) 72 227.91 P
2 F
0.16 (. Algorithms on output iterators should never attempt) 300.02 227.91 P
0.05 (to pass through the same iterator twice. They should be) 72 215.91 P
5 F
0.05 (single pass) 320.32 215.91 P
2 F
0.05 ( algorithms. Equality and inequality are) 363.98 215.91 P
-0.14 (not necessarily defined. Algorithms that take output iterators can be used with ostreams as the destination) 72 203.91 P
-0.21 (for placing data through the) 72 191.91 P
4 9 Q
-0.45 (ostream_iterator) 197.99 191.91 P
2 10 Q
-0.21 ( class as well as with insert iterators and insert pointers. In) 284.39 191.91 P
0.33 (particular, the following two conditions should hold: first, any iterator value should be assigned through) 72 179.91 P
0.38 (before it is incremented \050this is, for an output iterator) 72 167.91 P
4 9 Q
0.81 (i) 312.83 167.91 P
2 10 Q
0.38 (,) 318.23 167.91 P
4 9 Q
0.81 (i++; i++) 323.61 167.91 P
2 10 Q
0.38 (; is not a valid code sequence\051; second,) 367.61 167.91 P
0.24 (any value of an output iterator may have at most one active copy at any given time \050for example,) 72 155.91 P
4 9 Q
0.52 (i = j;) 506.56 155.91 P
(*++i = a; *j = b;) 72 143.91 T
2 10 Q
( is not a valid code sequence\051.) 163.8 143.91 T
0 11 Q
(5.3 Forward iterators) 72 120.55 T
2 10 Q
(A class or a built-in type) 72 103.48 T
4 9 Q
(X) 182.34 103.48 T
2 10 Q
( satisfies the requirements of a forward iterator if the following expressions are) 187.74 103.48 T
(valid:) 72 91.48 T
4 9 Q
(*r++) 83.76 654 T
(T) 147.84 654 T
({ X tmp = r;) 241.44 654 T
(++r;) 251.64 643 T
(return tmp; }) 251.64 632 T
6 12 Q
(T) 208.45 427.57 T
(able 3: Output iterator r) 215.35 427.57 T
(equir) 340.45 427.57 T
(ements) 367.57 427.57 T
3 10 Q
(expression) 101.01 396.91 T
(return type) 172.6 396.91 T
(operational semantics) 244.54 396.91 T
(assertion/note) 400.62 402.91 T
(pre/post-condition) 391.73 390.91 T
4 9 Q
(X\050a\051) 99.6 369.57 T
(*a = t) 344.4 368.91 T
3 10 Q
(is equivalent to) 382.2 368.91 T
4 9 Q
( *X\050a\051 = t) 443.31 368.91 T
3 10 Q
(.) 497.31 368.91 T
(note: a destructor is assumed.) 344.4 356.91 T
4 9 Q
(X u\050a\051;) 99.6 337.57 T
(X u = a;) 99.6 326.57 T
(*a = t) 99.6 307.57 T
3 10 Q
(result is not used) 157.2 306.91 T
4 9 Q
(++r) 99.6 287.57 T
(X&) 157.2 287.57 T
(r++) 99.6 268.57 T
(X) 157.2 267.91 T
3 10 Q
( or) 162.6 267.91 T
4 9 Q
(X&) 175.93 267.91 T
6 12 Q
(T) 212.78 712 T
(able 2: Input iterator r) 219.68 712 T
(equir) 336.11 712 T
(ements) 363.23 712 T
3 10 Q
(expression) 88.42 681.33 T
(return type) 166.84 681.33 T
(operational semantics) 242.38 681.33 T
(assertion/note) 407.46 687.33 T
(pre/post-condition) 398.58 675.33 T
77.76 701.75 77.76 625.25 2 L
V
0.5 H
0 Z
N
141.84 702.25 141.84 624.75 2 L
V
N
235.44 702.25 235.44 624.75 2 L
V
N
336.24 702.25 336.24 624.75 2 L
V
N
534.24 701.75 534.24 625.25 2 L
V
N
77.51 702 534.49 702 2 L
V
N
78.01 667.25 533.99 667.25 2 L
V
N
78.01 664.75 533.99 664.75 2 L
V
N
77.51 625 534.49 625 2 L
V
N
93.6 417.32 93.6 260.82 2 L
V
N
151.2 417.82 151.2 260.32 2 L
V
N
237.6 417.82 237.6 260.32 2 L
V
N
338.4 417.82 338.4 260.32 2 L
V
N
518.4 417.32 518.4 260.82 2 L
V
N
93.35 417.57 518.65 417.57 2 L
V
N
93.85 382.82 518.15 382.82 2 L
V
N
93.85 380.32 518.15 380.32 2 L
V
N
93.35 349.57 518.65 349.57 2 L
V
N
93.35 319.57 518.65 319.57 2 L
V
N
93.35 299.57 518.65 299.57 2 L
V
N
93.35 280.57 518.65 280.57 2 L
V
N
93.35 260.57 518.65 260.57 2 L
V
N
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "8" 10
%%Page: "9" 11
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
72 18 540 63 R
7 X
0 0 0 1 0 0 0 K
V
2 10 Q
0 X
(9) 303.5 56.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
72 72 540 720 R
7 X
V
7 F
0 X
-0.03 (NOTE:) 72 309.33 P
2 F
-0.03 ( The fact that) 103.94 309.33 P
4 9 Q
-0.05 (r == s) 163.95 309.33 P
2 10 Q
-0.03 ( implies) 196.24 309.33 P
4 9 Q
-0.05 (++r == ++s) 233.8 309.33 P
2 10 Q
-0.03 ( \050which is not true for input and output iterators\051 and the) 287.69 309.33 P
-0.26 (removal on the restrictions on the number of the assignments through the iterator \050which applies to output) 72 297.33 P
(iterators\051 allows the use of multi-pass one-directional algorithms with forward iterators.) 72 285.33 T
0 11 Q
(5.4 Bidirectional iterators) 72 261.98 T
2 10 Q
(A class or a built-in type) 72 244.91 T
4 9 Q
(X) 182.34 244.91 T
2 10 Q
( satisfies the requirements of a bidirectional iterator if to the table that specifies) 187.74 244.91 T
(forward iterators we add the following lines:) 72 232.91 T
6 12 Q
(T) 204.46 702 T
(able 4: Forward iterator r) 211.36 702 T
(equir) 344.44 702 T
(ements) 371.56 702 T
3 10 Q
(expression) 93.82 671.33 T
(return type) 169 671.33 T
(operational semantics) 244.54 671.33 T
(assertion/note) 404.23 677.33 T
(pre/post-condition) 395.33 665.33 T
4 9 Q
(X u;) 92.4 644 T
3 10 Q
(note:) 344.4 643.33 T
4 9 Q
(u) 366.9 643.33 T
3 10 Q
( might have a singular value.) 372.3 643.33 T
(note: a destructor is assumed.) 344.4 631.33 T
4 9 Q
(X\050\051) 92.4 612 T
3 10 Q
(note:) 344.4 611.33 T
4 9 Q
(X\050\051) 366.9 611.33 T
3 10 Q
( might be singular) 383.1 611.33 T
(.) 455.05 611.33 T
4 9 Q
(X\050a\051) 92.4 592 T
(a == X\050a\051.) 344.4 592 T
(X u\050a\051;) 92.4 572 T
(X u = a;) 92.4 561 T
(X u; u = a;) 243.6 572 T
3 10 Q
(post:) 344.4 571.33 T
4 9 Q
(u == a.) 366.35 571.33 T
(a == b) 92.4 542 T
3 10 Q
(convertible to) 150 541.33 T
4 9 Q
(bool) 207.77 541.33 T
(==) 344.4 541.33 T
3 10 Q
( is an equivalence relation.) 355.2 541.33 T
4 9 Q
(a != b) 92.4 522 T
3 10 Q
(convertible to) 150 521.33 T
4 9 Q
(bool) 207.77 521.33 T
(!\050a == b\051) 243.6 522 T
(r = a) 92.4 502 T
(X&) 150 501.33 T
3 10 Q
(post:) 344.4 501.33 T
4 9 Q
(r == a.) 366.35 501.33 T
(*a) 92.4 482 T
3 10 Q
(convertible to) 150 481.33 T
4 9 Q
(T) 207.77 481.33 T
3 10 Q
(pre:) 344.4 481.33 T
4 9 Q
(a) 362.45 481.33 T
3 10 Q
( is dereferenceable.) 367.85 481.33 T
4 9 Q
(a == b) 344.4 469.33 T
3 10 Q
( implies) 376.8 469.33 T
4 9 Q
(*a == *b) 411.25 469.33 T
3 10 Q
(.) 454.45 469.33 T
(If) 344.4 457.33 T
4 9 Q
(X) 353.56 457.33 T
3 10 Q
( is mutable,) 358.96 457.33 T
4 9 Q
(*a = t) 407.85 457.33 T
3 10 Q
( is valid.) 440.25 457.33 T
4 9 Q
(++r) 92.4 438 T
(X&) 150 438 T
3 10 Q
(pre:) 344.4 437.33 T
4 9 Q
(r) 362.45 437.33 T
3 10 Q
( is dereferenceable.) 367.85 437.33 T
(post:) 344.4 425.33 T
4 9 Q
(r) 366.35 425.33 T
3 10 Q
( is dereferenceable or) 371.75 425.33 T
4 9 Q
(r) 460.04 425.33 T
3 10 Q
( is past-the-) 465.44 425.33 T
(end.) 344.4 413.33 T
4 9 Q
(r == s) 344.4 401.33 T
3 10 Q
( and) 376.8 401.33 T
4 9 Q
(r) 396.24 401.33 T
3 10 Q
( is dereferenceable implies) 401.64 401.33 T
4 9 Q
(++r == ++s) 344.4 389.33 T
3 10 Q
(.) 398.4 389.33 T
4 9 Q
(&r == &++r.) 344.4 378 T
(r++) 92.4 359 T
(X) 150 359 T
({ X tmp = r;) 243.6 359 T
(++r;) 253.8 348 T
(return tmp; }) 253.8 337 T
6 12 Q
(T) 110.4 197.57 T
(able 5: Bidir) 117.3 197.57 T
(ectional iterator r) 181.09 197.57 T
(equir) 271.51 197.57 T
(ements \050in addition to forward iterator\051) 298.63 197.57 T
3 10 Q
(expression) 93.82 166.91 T
(return type) 169 166.91 T
(operational semantics) 244.54 166.91 T
(assertion/note) 404.23 172.91 T
(pre/post-condition) 395.33 160.91 T
4 9 Q
(--r) 92.4 139.57 T
(X&) 150 139.57 T
3 10 Q
(pre: there exists) 344.4 138.91 T
4 9 Q
(s) 410.22 138.91 T
3 10 Q
( such that) 415.62 138.91 T
4 9 Q
(r == ++s.) 456.45 138.91 T
3 10 Q
(post:) 344.4 126.91 T
4 9 Q
(s) 366.35 126.91 T
3 10 Q
( is dereferenceable.) 371.75 126.91 T
4 9 Q
(--\050++r\051 == r) 344.4 114.91 T
3 10 Q
(.) 408.65 114.91 T
4 9 Q
(--r == --s) 344.4 102.91 T
3 10 Q
( implies) 398.4 102.91 T
4 9 Q
(r == s) 432.85 102.91 T
3 10 Q
(.) 465.25 102.91 T
4 9 Q
(&r == &--r) 344.4 90.91 T
3 10 Q
(.) 397.85 90.91 T
86.4 691.75 86.4 330.25 2 L
V
0.5 H
0 Z
N
144 692.25 144 329.75 2 L
V
N
237.6 692.25 237.6 329.75 2 L
V
N
338.4 692.25 338.4 329.75 2 L
V
N
525.6 691.75 525.6 330.25 2 L
V
N
86.15 692 525.85 692 2 L
V
N
86.65 657.25 525.35 657.25 2 L
V
N
86.65 654.75 525.35 654.75 2 L
V
N
86.15 624 525.85 624 2 L
V
N
86.15 604 525.85 604 2 L
V
N
86.15 584 525.85 584 2 L
V
N
86.15 554 525.85 554 2 L
V
N
86.15 534 525.85 534 2 L
V
N
86.15 514 525.85 514 2 L
V
N
86.15 494 525.85 494 2 L
V
N
86.15 450 525.85 450 2 L
V
N
86.15 371 525.85 371 2 L
V
N
86.15 330 525.85 330 2 L
V
N
86.4 187.32 86.4 83.82 2 L
V
N
144 187.82 144 83.32 2 L
V
N
237.6 187.82 237.6 83.32 2 L
V
N
338.4 187.82 338.4 83.32 2 L
V
N
525.6 187.32 525.6 83.82 2 L
V
N
86.15 187.57 525.85 187.57 2 L
V
N
86.65 152.82 525.35 152.82 2 L
V
N
86.65 150.32 525.35 150.32 2 L
V
N
86.15 83.57 525.85 83.57 2 L
V
N
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "9" 11
%%Page: "10" 12
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
72 18 540 63 R
7 X
0 0 0 1 0 0 0 K
V
2 10 Q
0 X
(10) 301 56.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
72 72 540 720 R
7 X
V
7 F
0 X
(NOTE:) 72 606.33 T
2 F
( Bidirectional iterators allow algorithms to move iterators backward as well as forward.) 103.94 606.33 T
0 11 Q
(5.5 Random access iterators) 72 582.98 T
2 10 Q
-0.22 (A class or a built-in type) 72 565.9 P
4 9 Q
-0.49 (X) 180.99 565.9 P
2 10 Q
-0.22 ( satisfies the requirements of a random access iterator if to the table that specifies) 186.39 565.9 P
(bidirectional iterators we add the following lines:) 72 553.9 T
0 11 Q
(5.6 Iterator tags) 72 146.55 T
2 10 Q
-0.04 (To implement algorithms only in terms of iterators, it is often necessary to infer both of the value type and) 72 129.48 P
0.46 (the distance type from the iterator. To enable this task it is required that for an iterator) 72 117.48 P
4 9 Q
0.99 (i) 462.53 117.48 P
2 10 Q
0.46 ( of any category) 467.93 117.48 P
4.53 (other than output iterator) 72 105.48 P
4 9 Q
9.79 (,) 198.9 105.48 P
2 10 Q
4.53 ( the expression) 204.3 105.48 P
4 9 Q
9.79 (value_type\050i\051) 286.64 105.48 P
2 10 Q
4.53 ( returns) 356.83 105.48 P
4 9 Q
9.79 (\050T*\051\0500\051) 402.94 105.48 P
2 10 Q
4.53 ( and the expression) 440.74 105.48 P
4 9 Q
(distance_type\050i\051) 72 93.48 T
2 10 Q
( returns) 158.4 93.48 T
4 9 Q
(\050Distance*\051\0500\051) 195.44 93.48 T
2 10 Q
(. For output iterators, these expressions are not required.) 271.04 93.48 T
4 9 Q
(r--) 92.4 654 T
(X) 150 654 T
({ X tmp = r;) 243.6 654 T
(--r;) 253.8 643 T
(return tmp; }) 253.8 632 T
6 12 Q
(T) 92.9 511.57 T
(able 6: Random access iterator r) 99.8 511.57 T
(equir) 265.88 511.57 T
(ements \050in addition to bidir) 293 511.57 T
(ectional iterator\051) 432.8 511.57 T
3 10 Q
(expression) 83.01 480.9 T
(return type) 158.2 480.9 T
(operational semantics) 244.54 480.9 T
(assertion/note) 415.02 486.9 T
(pre/post-condition) 406.14 474.9 T
4 9 Q
(r += n) 81.6 453.57 T
(X&) 139.2 453.57 T
({ Distance m = n;) 232.8 453.57 T
(if \050m >= 0\051) 243 442.57 T
-0.8 (while \050m--\051 ++r;) 253.8 431.57 P
(else) 243 420.57 T
-0.8 (while \050m++\051 --r;) 253.8 409.57 P
(return r; }) 243 398.57 T
(a + n) 81.6 379.57 T
(n + a) 81.6 368.57 T
(X) 139.2 379.57 T
({ X tmp = a;) 232.8 379.57 T
(return tmp += n; }) 243 368.57 T
(a + n == n + a) 355.2 378.9 T
3 10 Q
(.) 430.8 378.9 T
4 9 Q
(r -= n) 81.6 349.57 T
(X&) 139.2 349.57 T
(return r += -n;) 243 349.57 T
(a - n) 81.6 329.57 T
(X) 139.2 329.57 T
({ X tmp = a;) 232.8 329.57 T
(return tmp -= n; }) 243 318.57 T
(b - a) 81.6 299.57 T
(Distance) 139.2 299.57 T
3 10 Q
(pre: there exists a value) 355.2 298.9 T
4 9 Q
(n) 452.12 298.9 T
3 10 Q
( of) 457.52 298.9 T
4 9 Q
(Distance) 470.85 298.9 T
3 10 Q
(such that) 355.2 286.91 T
4 9 Q
(a + n = b) 393.53 286.91 T
3 10 Q
(.) 442.13 286.91 T
4 9 Q
(b == a + \050b - a\051.) 355.2 275.57 T
(a[n]) 81.6 256.57 T
3 10 Q
(convertible to) 139.2 255.91 T
4 9 Q
(T) 196.97 255.91 T
(*\050a + n\051) 232.8 256.57 T
(a < b) 81.6 236.57 T
3 10 Q
(convertible to) 139.2 235.91 T
4 9 Q
(bool) 196.97 235.91 T
(b - a > 0) 232.8 236.57 T
(<) 355.2 235.91 T
3 10 Q
(is a total ordering relation) 366 235.91 T
4 9 Q
(a > b) 81.6 216.57 T
3 10 Q
(convertible to) 139.2 215.91 T
4 9 Q
(bool) 196.97 215.91 T
(b < a) 232.8 216.57 T
(>) 355.2 216.57 T
3 10 Q
(is a total ordering relation opposite to) 366 216.57 T
4 9 Q
(<.) 518.49 216.57 T
(a >= b) 81.6 196.57 T
3 10 Q
(convertible to) 139.2 195.91 T
4 9 Q
(bool) 196.97 195.91 T
(!\050a < b\051) 232.8 196.57 T
(a <= b) 81.6 176.57 T
3 10 Q
(convertible to) 139.2 175.91 T
4 9 Q
(bool) 196.97 175.91 T
(!\050a > b\051) 232.8 176.57 T
6 12 Q
(T) 110.4 712 T
(able 5: Bidir) 117.3 712 T
(ectional iterator r) 181.09 712 T
(equir) 271.51 712 T
(ements \050in addition to forward iterator\051) 298.63 712 T
3 10 Q
(expression) 93.82 681.33 T
(return type) 169 681.33 T
(operational semantics) 244.54 681.33 T
(assertion/note) 404.23 687.33 T
(pre/post-condition) 395.33 675.33 T
86.4 701.75 86.4 625.25 2 L
V
0.5 H
0 Z
N
144 702.25 144 624.75 2 L
V
N
237.6 702.25 237.6 624.75 2 L
V
N
338.4 702.25 338.4 624.75 2 L
V
N
525.6 701.75 525.6 625.25 2 L
V
N
86.15 702 525.85 702 2 L
V
N
86.65 667.25 525.35 667.25 2 L
V
N
86.65 664.75 525.35 664.75 2 L
V
N
86.15 625 525.85 625 2 L
V
N
75.6 501.32 75.6 168.82 2 L
V
N
133.2 501.82 133.2 168.32 2 L
V
N
226.8 501.82 226.8 168.32 2 L
V
N
349.2 501.82 349.2 168.32 2 L
V
N
536.4 501.32 536.4 168.82 2 L
V
N
75.35 501.57 536.65 501.57 2 L
V
N
75.85 466.82 536.15 466.82 2 L
V
N
75.85 464.32 536.15 464.32 2 L
V
N
75.35 391.57 536.65 391.57 2 L
V
N
75.35 361.57 536.65 361.57 2 L
V
N
75.35 341.57 536.65 341.57 2 L
V
N
75.35 311.57 536.65 311.57 2 L
V
N
75.35 268.57 536.65 268.57 2 L
V
N
75.35 248.57 536.65 248.57 2 L
V
N
75.35 228.57 536.65 228.57 2 L
V
N
75.35 208.57 536.65 208.57 2 L
V
N
75.35 188.57 536.65 188.57 2 L
V
N
75.35 168.57 536.65 168.57 2 L
V
N
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "10" 12
%%Page: "11" 13
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
72 18 540 63 R
7 X
0 0 0 1 0 0 0 K
V
2 10 Q
0 X
(11) 301 56.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
72 72 540 720 R
7 X
V
9 F
0 X
(5.6.1 Examples of using iterator tags) 72 712.71 T
2 F
(For all the regular pointer types we can define) 72 695.85 T
4 9 Q
(value_type) 278.55 695.85 T
2 10 Q
( and) 332.55 695.85 T
4 9 Q
(distance_type) 354.48 695.85 T
2 10 Q
( with the help of:) 424.68 695.85 T
4 9 Q
(template <class T>) 108 673.52 T
(inline T* value_type\050const T*\051 { return \050T*\051\0500\051; }) 108 662.52 T
(template <class T>) 108 640.52 T
(inline ptrdiff_t* distance_type\050const T*\051 { return \050ptrdiff_t*\051\0500\051; }) 108 629.52 T
2 10 Q
(Then, if we want to implement a generic) 72 610.85 T
4 9 Q
(reverse) 252.98 610.85 T
2 10 Q
( function, we do the following:) 290.78 610.85 T
4 9 Q
(template <class BidirectionalIterator>) 108 588.52 T
(inline void reverse\050BidirectionalIterator first, BidirectionalIterator last\051 {) 108 577.52 T
(__reverse\050first, last, value_type\050first\051, distance_type\050first\051\051;) 144 566.52 T
(}) 108 555.52 T
2 10 Q
(where) 72 536.85 T
4 9 Q
(__reverse) 102.19 536.85 T
2 10 Q
( is defined as:) 150.79 536.85 T
4 9 Q
(template <class BidirectionalIterator, class T, class Distance>) 108 514.52 T
(void __reverse\050BidirectionalIterator first,) 108 503.52 T
(BidirectionalIterator last,) 345.6 503.52 T
(T*,) 496.8 503.52 T
( Distance*\051 {) 180 492.52 T
(Distance n;) 144 481.52 T
(distance\050first, last, n\051; // see) 144 470.52 T
8 F
(Iterator operations) 322.2 470.52 T
4 F
( section) 424.8 470.52 T
(--n;) 144 459.52 T
(while \050n > 0\051 {) 144 448.52 T
(T tmp = *first;) 180 437.52 T
(*first++ = *--last;) 180 426.52 T
(*last = tmp;) 180 415.52 T
(n -= 2;) 180 404.52 T
(}) 144 393.52 T
(}) 108 382.52 T
2 10 Q
0.18 (If there is an additional pointer type) 72 363.85 P
4 9 Q
0.38 (__huge) 235.34 363.85 P
2 10 Q
0.18 ( such that the difference of two) 267.74 363.85 P
4 9 Q
0.38 (__huge) 408.34 363.85 P
2 10 Q
0.18 ( pointers is of the type) 440.74 363.85 P
4 9 Q
(long long) 72 351.85 T
2 10 Q
(, we define:) 120.6 351.85 T
4 9 Q
(template <class T>) 108 329.52 T
(inline T* value_type\050const T __huge *\051 { return \050T*\051\0500\051; }) 108 318.52 T
(template <class T>) 108 296.52 T
(inline long long* distance_type\050const T __huge *\051 { return \050long long*\051\0500\051; }) 108 285.52 T
2 10 Q
1.08 (It is often desirable for a template function to find out what is the most specific category of its iterator) 72 266.85 P
-0.04 (argument, so that the function can select the most efficient algorithm at compile time. To facilitate this, the) 72 254.85 P
-0.39 (library introduces) 72 242.85 P
5 F
-0.39 (category tag) 153.03 242.85 P
2 F
-0.39 ( classes which are used as compile time tags for algorithm selection. They are:) 201.97 242.85 P
4 9 Q
3.46 (input_iterator_tag) 72 230.85 P
2 10 Q
1.6 (,) 169.2 230.85 P
4 9 Q
3.46 (output_iterator_tag) 175.8 230.85 P
2 10 Q
1.6 (,) 278.4 230.85 P
4 9 Q
3.46 (forward_iterator_tag) 285 230.85 P
2 10 Q
1.6 (,) 393 230.85 P
4 9 Q
3.46 (bidirectional_iterator_tag) 399.6 230.85 P
2 10 Q
1.31 (and) 72 218.85 P
4 9 Q
2.84 (random_access_iterator_tag) 92.74 218.85 P
2 10 Q
1.31 (. Every iterator) 233.14 218.85 P
4 9 Q
2.84 (i) 305.72 218.85 P
2 10 Q
1.31 ( must have an expression) 311.12 218.85 P
4 9 Q
2.84 (iterator_category\050i\051) 432 218.85 P
2 10 Q
-0.12 (defined on it that returns the most specific category tag that describes its behavior. For example, we define) 72 206.85 P
(that all the pointer types are in the random access iterator category by:) 72 194.85 T
4 9 Q
(template <class T>) 108 172.52 T
(inline random_access_iterator_tag iterator_category\050const T*\051 {) 108 161.52 T
(return random_access_iterator_tag\050\051;) 144 150.52 T
(}) 108 139.52 T
2 10 Q
-0.13 (For a user-defined iterator) 72 120.85 P
4 9 Q
-0.29 (BinaryTreeIterator) 190.21 120.85 P
2 10 Q
-0.13 (, it can be included into the bidirectional iterator category) 287.41 120.85 P
(by saying:) 72 108.85 T
4 9 Q
(template <class T>) 108 86.52 T
(inline bidirectional_iterator_tag iterator_category\050) 108 75.52 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "11" 13
%%Page: "12" 14
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
72 18 540 63 R
7 X
0 0 0 1 0 0 0 K
V
2 10 Q
0 X
(12) 301 56.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
72 72 540 720 R
7 X
V
4 9 Q
0 X
(const BinaryTreeIterator<T>&\051 {) 180 714 T
(return bidirectional_iterator_tag\050\051;) 144 703 T
(}) 108 692 T
2 10 Q
1.33 (If a template function) 72 673.33 P
4 9 Q
2.88 (evolve) 174.95 673.33 P
2 10 Q
1.33 ( is well defined for bidirectional iterators, but can be implemented more) 207.35 673.33 P
(efficiently for random access iterators, then the implementation is like:) 72 661.33 T
4 9 Q
(template <class BidirectionalIterator>) 108 639 T
(inline void evolve\050BidirectionalIterator first, BidirectionalIterator last\051) 108 628 T
(evolve\050first, last, iterator_category\050first\051\051;) 144 617 T
(}) 108 606 T
(template <class BidirectionalIterator>) 108 584 T
(void evolve\050BidirectionalIterator first, BidirectionalIterator last,) 108 573 T
(bidirectional_iterator_tag\051 {) 180 562 T
(// ... more generic, but less efficient algorithm) 144 551 T
(}) 108 540 T
(template <class RandomAccessIterator>) 108 518 T
(void evolve\050RandomAccessIterator first, RandomAccessIterator last,) 108 507 T
(random_access_iterator_tag\051 {) 180 496 T
(// ... more efficient, but less generic algorithm) 144 485 T
(}) 108 474 T
9 10 Q
(5.6.2 Library defined primitives) 72 453.71 T
2 F
2.56 (To simplify the task of defining the) 72 436.85 P
4 9 Q
5.52 (iterator_category) 247.53 436.85 P
2 10 Q
2.56 (,) 339.33 436.85 P
4 9 Q
5.52 (value_type) 346.89 436.85 P
2 10 Q
2.56 ( and) 400.89 436.85 P
4 9 Q
5.52 (distance_type) 427.93 436.85 P
2 10 Q
2.56 ( for user) 498.14 436.85 P
(definable iterators, the library provides the following predefined classes and functions:) 72 424.85 T
4 9 Q
(// iterator tags) 108 402.52 T
(struct input_iterator_tag {};) 108 380.52 T
(struct output_iterator_tag {};) 108 369.52 T
(struct forward_iterator_tag {};) 108 358.52 T
(struct bidirectional_iterator_tag {};) 108 347.52 T
(struct random_access_iterator_tag {};) 108 336.52 T
(// iterator bases) 108 314.52 T
(template <class T, class Distance = ptrdiff_t> struct input_iterator {};) 108 292.52 T
(struct output_iterator {};) 108 281.52 T
(// output_iterator is not a template because output iterators) 108 270.52 T
(// do not have either value type or distance type defined.) 108 259.52 T
(template <class T, class Distance = ptrdiff_t> struct forward_iterator {};) 108 248.52 T
(template <class T, class Distance = ptrdiff_t> struct bidirectional_iterator {};) 108 237.52 T
(template <class T, class Distance = ptrdiff_t> struct random_access_iterator {};) 108 226.52 T
(// iterator_category) 108 204.52 T
(template <class T, class Distance>) 108 182.52 T
(inline input_iterator_tag) 108 171.52 T
(iterator_category\050const input_iterator<T, Distance>&\051 {) 108 160.52 T
(return input_iterator_tag\050\051;) 144 149.52 T
(}) 108 138.52 T
(inline output_iterator_tag iterator_category\050const output_iterator&\051 {) 108 127.52 T
(return output_iterator_tag\050\051;) 144 116.52 T
(}) 108 105.52 T
(template <class T, class Distance>) 108 94.52 T
(inline forward_iterator_tag) 108 83.52 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "12" 14
%%Page: "13" 15
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
72 18 540 63 R
7 X
0 0 0 1 0 0 0 K
V
2 10 Q
0 X
(13) 301 56.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
72 72 540 720 R
7 X
V
4 9 Q
0 X
(iterator_category\050const forward_iterator<T, Distance>&\051 {) 108 714 T
(return forward_iterator_tag\050\051;) 144 703 T
(}) 108 692 T
(template <class T, class Distance>) 108 681 T
(inline bidirectional_iterator_tag) 108 670 T
(iterator_category\050const bidirectional_iterator<T, Distance>&\051 {) 108 659 T
(return bidirectional_iterator_tag\050\051;) 144 648 T
(}) 108 637 T
(template <class T, class Distance>) 108 626 T
(inline random_access_iterator_tag) 108 615 T
(iterator_category\050const random_access_iterator<T, Distance>&\051 {) 108 604 T
(return random_access_iterator_tag\050\051;) 144 593 T
(}) 108 582 T
(template <class T>) 108 571 T
(inline random_access_iterator_tag iterator_category\050const T*\051 {) 108 560 T
(return random_access_iterator_tag\050\051;) 144 549 T
(}) 108 538 T
(// value_type of iterator) 108 516 T
(template <class T, class Distance>) 108 494 T
(inline T* value_type\050const input_iterator<T, Distance>&\051 {) 108 483 T
(return \050T*\051\0500\051;) 144 472 T
(}) 108 461 T
(template <class T, class Distance>) 108 450 T
(inline T* value_type\050const forward_iterator<T, Distance>&\051 {) 108 439 T
(return \050T*\051\0500\051;) 144 428 T
(}) 108 417 T
(template <class T, class Distance>) 108 406 T
(inline T* value_type\050const bidirectional_iterator<T, Distance>&\051 {) 108 395 T
(return \050T*\051\0500\051;) 144 384 T
(}) 108 373 T
(template <class T, class Distance>) 108 362 T
(inline T* value_type\050const random_access_iterator<T, Distance>&\051 {) 108 351 T
(return \050T*\051\0500\051;) 144 340 T
(}) 108 329 T
(template <class T>) 108 318 T
(inline T* value_type\050const T*\051 { return \050T*\051\0500\051; }) 108 307 T
(// distance_type of iterator) 108 285 T
(template <class T, class Distance>) 108 263 T
(inline Distance* distance_type\050const input_iterator<T, Distance>&\051 {) 108 252 T
(return \050Distance*\051\0500\051;) 144 241 T
(}) 108 230 T
(template <class T, class Distance>) 108 219 T
(inline Distance* distance_type\050const forward_iterator<T, Distance>&\051 {) 108 208 T
(return \050Distance*\051\0500\051;) 144 197 T
(}) 108 186 T
(template <class T, class Distance>) 108 175 T
(inline Distance* distance_type\050const bidirectional_iterator<T, Distance>&\051 {) 108 164 T
(return \050Distance*\051\0500\051;) 144 153 T
(}) 108 142 T
(template <class T, class Distance>) 108 131 T
(inline Distance* distance_type\050const random_access_iterator<T, Distance>&\051 {) 108 120 T
(return \050Distance*\051\0500\051;) 144 109 T
(}) 108 98 T
(template <class T>) 108 87 T
(inline ptrdiff_t* distance_type\050const T*\051 { return \050ptrdiff_t*\051\0500\051; }) 108 76 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "13" 15
%%Page: "14" 16
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
72 18 540 63 R
7 X
0 0 0 1 0 0 0 K
V
2 10 Q
0 X
(14) 301 56.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
72 72 540 720 R
7 X
V
0 X
-0.01 (If a user wants to define a bidirectional iterator for some data structure containing) 72 713.33 P
4 9 Q
-0.02 (double) 436.67 713.33 P
2 10 Q
-0.01 ( and such that it) 469.07 713.33 P
(works on a large memory model of a computer, it can be done by defining:) 72 701.33 T
4 9 Q
(class MyIterator : public bidirectional_iterator<double, long> {) 108 679 T
(// code implementing ++, etc.) 144 668 T
(};) 108 657 T
2 10 Q
(Then there is no need to define) 72 638.33 T
4 9 Q
(iterator_category) 211.08 638.33 T
2 10 Q
(,) 302.88 638.33 T
4 9 Q
(value_type) 307.88 638.33 T
2 10 Q
(, and) 361.88 638.33 T
4 9 Q
(distance_type) 386.31 638.33 T
2 10 Q
( on) 456.51 638.33 T
4 9 Q
(MyIterator) 472.79 638.33 T
2 10 Q
(.) 526.79 638.33 T
0 11 Q
(5.7 Iterator operations) 72 614.98 T
2 10 Q
0.08 (Since only random access iterators provide) 72 597.9 P
4 9 Q
0.17 (+) 264.44 597.9 P
2 10 Q
0.08 ( and) 269.84 597.9 P
4 9 Q
0.17 (-) 291.92 597.9 P
2 10 Q
0.08 ( operators, the library provides two template functions) 297.32 597.9 P
4 9 Q
4.2 (advance) 72 585.9 P
2 10 Q
1.95 ( and) 109.8 585.9 P
4 9 Q
4.2 (distance) 135.62 585.9 P
2 10 Q
1.95 (. These functions use) 178.82 585.9 P
4 9 Q
4.2 (+) 281.24 585.9 P
2 10 Q
1.95 ( and) 286.64 585.9 P
4 9 Q
4.2 (-) 312.46 585.9 P
2 10 Q
1.95 ( for random access iterators \050and are, therefore,) 317.86 585.9 P
0.65 (constant time for them\051; for input, forward and bidirectional iterators they use) 72 573.9 P
4 9 Q
1.41 (++) 427.83 573.9 P
2 10 Q
0.65 ( to provide linear time) 438.62 573.9 P
-0.08 (implementations.) 72 561.9 P
4 9 Q
-0.16 (advance) 151.76 561.9 P
2 10 Q
-0.08 ( takes a negative argument) 189.57 561.9 P
4 9 Q
-0.16 (n) 310.56 561.9 P
2 10 Q
-0.08 ( for random access and bidirectional iterators only.) 315.96 561.9 P
4 9 Q
-0.23 (advance) 72 549.9 P
2 10 Q
-0.11 ( increments \050or decrements for negative) 109.8 549.9 P
4 9 Q
-0.23 (n) 287.3 549.9 P
2 10 Q
-0.11 (\051 iterator reference) 292.7 549.9 P
4 9 Q
-0.23 (i) 376.44 549.9 P
2 10 Q
-0.11 ( by) 381.84 549.9 P
4 9 Q
-0.23 (n) 397.72 549.9 P
2 10 Q
-0.11 (.) 403.12 549.9 P
4 9 Q
-0.23 (distance) 408.01 549.9 P
2 10 Q
-0.11 ( increments) 451.21 549.9 P
4 9 Q
-0.23 (n) 504.85 549.9 P
2 10 Q
-0.11 ( by the) 510.25 549.9 P
(number of times it takes to get from) 72 537.9 T
4 9 Q
(first) 232.69 537.9 T
2 10 Q
( to) 259.69 537.9 T
4 9 Q
(last) 273.41 537.9 T
2 10 Q
(.) 295.01 537.9 T
4 9 Q
(template <class InputIterator, class Distance>) 108 515.57 T
(inline void advance\050InputIterator& i, Distance n\051;) 108 504.57 T
(template <class InputIterator, class Distance>) 108 482.57 T
(inline void distance\050InputIterator first, InputIterator last, Distance& n\051;) 108 471.57 T
1.89 (distance) 72 452.9 P
2 10 Q
0.87 ( must be a three argument function storing the result into a reference instead of returning the) 115.2 452.9 P
(result because the distance type cannot be deduced from built-in iterator types such as) 72 440.91 T
4 9 Q
(int*) 456.04 440.91 T
2 10 Q
(.) 477.64 440.91 T
0 12 Q
(6  Function objects) 72 410.82 T
2 10 Q
0.7 (Function objects are objects with an) 72 392.53 P
4 9 Q
1.51 (operator\050\051) 235.5 392.53 P
2 10 Q
0.7 ( defined. They are important for the effective use of the) 289.5 392.53 P
-0.28 (library. In the places where one would expect to pass a pointer to a function to an algorithmic template, the) 72 380.53 P
1.19 (interface is specified to accept an object with an) 72 368.53 P
4 9 Q
2.57 (operator\050\051) 294.64 368.53 P
2 10 Q
1.19 ( defined. This not only makes algorithmic) 348.64 368.53 P
0.37 (templates work with pointers to functions, but also enables them to work with arbitrary function objects.) 72 356.53 P
0.81 (Using function objects together with function templates increases the expressive power of the library as) 72 344.53 P
1.29 (well as making the resulting code much more efficient. For example, if we want to have a by-element) 72 332.53 P
(addition of two vectors) 72 320.53 T
4 9 Q
(a) 177.22 320.53 T
2 10 Q
( and) 182.62 320.53 T
4 9 Q
(b) 204.55 320.53 T
2 10 Q
( containing) 209.95 320.53 T
4 9 Q
(double) 261.95 320.53 T
2 10 Q
( and put the result into) 294.35 320.53 T
4 9 Q
(a) 398.08 320.53 T
2 10 Q
( we can do:) 403.48 320.53 T
4 9 Q
(transform\050a.begin\050\051, a.end\050\051, b.begin\050\051, a.begin\050\051, plus<double>\050\051\051;) 108 298.2 T
2 10 Q
(If we want to negate every element of) 72 279.53 T
4 9 Q
(a) 240.91 279.53 T
2 10 Q
( we can do:) 246.31 279.53 T
4 9 Q
(transform\050a.begin\050\051, a.end\050\051, a.begin\050\051, negate<double>\050\051\051;) 108 257.2 T
2 10 Q
(The corresponding functions will inline the addition and the negation.) 72 238.53 T
0.29 (To enable adaptors and other components to manipulate function objects that take one or two arguments) 72 219.53 P
0.62 (it is required that they correspondingly provide typedefs) 72 207.53 P
4 9 Q
1.35 (argument_type) 331.17 207.53 P
2 10 Q
0.62 ( and) 401.37 207.53 P
4 9 Q
1.35 (result_type) 424.54 207.53 P
2 10 Q
0.62 ( for function) 483.94 207.53 P
-0.39 (objects that take one argument and) 72 195.53 P
4 9 Q
-0.85 (first_argument_type) 226.9 195.53 P
2 10 Q
-0.39 (,) 329.5 195.53 P
4 9 Q
-0.85 (second_argument_type) 334.11 195.53 P
2 10 Q
-0.39 (, and) 442.11 195.53 P
4 9 Q
-0.85 (result_type) 465.75 195.53 P
2 10 Q
-0.39 ( for) 525.15 195.53 P
(function objects that take two arguments.) 72 183.53 T
0 11 Q
(6.1 Base) 72 160.18 T
2 10 Q
(The following classes are provided to simplify the typedefs of the argument and result types:) 72 143.1 T
4 9 Q
(template <class Arg, class Result>) 108 120.77 T
(struct unary_function {) 108 109.77 T
(typedef Arg argument_type;) 144 98.77 T
(typedef Result result_type;) 144 87.77 T
(};) 108 76.77 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "14" 16
%%Page: "15" 17
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
72 18 540 63 R
7 X
0 0 0 1 0 0 0 K
V
2 10 Q
0 X
(15) 301 56.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
72 72 540 720 R
7 X
V
4 9 Q
0 X
(template <class Arg1, class Arg2, class Result>) 108 703 T
(struct binary_function {) 108 692 T
(typedef Arg1 first_argument_type;) 144 681 T
(typedef Arg2 second_argument_type;) 144 670 T
(typedef Result result_type;) 144 659 T
(};) 108 648 T
0 11 Q
(6.2 Arithmetic operations) 72 624.98 T
2 10 Q
(The library provides basic function object classes for all of the arithmetic operators in the language.) 72 607.9 T
4 9 Q
(template <class T>) 108 585.57 T
(struct plus : binary_function<T, T, T> {) 108 574.57 T
(T operator\050\051\050const T& x, const T& y\051 const { return x + y; }) 144 563.57 T
(};) 108 552.57 T
(template <class T>) 108 530.57 T
(struct minus : binary_function<T, T, T> {) 108 519.57 T
(T operator\050\051\050const T& x, const T& y\051 const { return x - y; }) 144 508.57 T
(};) 108 497.57 T
(template <class T>) 108 475.57 T
(struct times : binary_function<T, T, T> {) 108 464.57 T
(T operator\050\051\050const T& x, const T& y\051 const { return x * y; }) 144 453.57 T
(};) 108 442.57 T
(template <class T>) 108 420.57 T
(struct divides : binary_function<T, T, T> {) 108 409.57 T
(T operator\050\051\050const T& x, const T& y\051 const { return x / y; }) 144 398.57 T
(};) 108 387.57 T
(template <class T>) 108 365.57 T
(struct modulus : binary_function<T, T, T> {) 108 354.57 T
(T operator\050\051\050const T& x, const T& y\051 const { return x % y; }) 144 343.57 T
(};) 108 332.57 T
(template <class T>) 108 310.57 T
(struct negate : unary_function<T, T> {) 108 299.57 T
(T operator\050\051\050const T& x\051 const { return -x; }) 144 288.57 T
(};) 108 277.57 T
0 11 Q
(6.3 Comparisons) 72 254.55 T
2 10 Q
(The library provides basic function object classes for all of the comparison operators in the language.) 72 237.48 T
4 9 Q
(template <class T>) 108 215.14 T
(struct equal_to : binary_function<T, T, bool> {) 108 204.14 T
(bool operator\050\051\050const T& x, const T& y\051 const { return x == y; }) 144 193.14 T
(};) 108 182.14 T
(template <class T>) 108 160.14 T
(struct not_equal_to : binary_function<T, T, bool> {) 108 149.14 T
(bool operator\050\051\050const T& x, const T& y\051 const { return x != y; }) 144 138.14 T
(};) 108 127.14 T
(template <class T>) 108 105.14 T
(struct greater : binary_function<T, T, bool> {) 108 94.14 T
(bool operator\050\051\050const T& x, const T& y\051 const { return x > y; }) 144 83.14 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "15" 17
%%Page: "16" 18
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
72 18 540 63 R
7 X
0 0 0 1 0 0 0 K
V
2 10 Q
0 X
(16) 301 56.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
72 72 540 720 R
7 X
V
4 9 Q
0 X
(};) 108 714 T
(template <class T>) 108 692 T
(struct less : binary_function<T, T, bool> {) 108 681 T
(bool operator\050\051\050const T& x, const T& y\051 const { return x < y; }) 144 670 T
(};) 108 659 T
(template <class T>) 108 637 T
(struct greater_equal : binary_function<T, T, bool> {) 108 626 T
(bool operator\050\051\050const T& x, const T& y\051 const { return x >= y; }) 144 615 T
(};) 108 604 T
(template <class T>) 108 582 T
(struct less_equal : binary_function<T, T, bool> {) 108 571 T
(bool operator\050\051\050const T& x, const T& y\051 const { return x <= y; }) 144 560 T
(};) 108 549 T
0 11 Q
(6.4 Logical operations) 72 525.98 T
4 9 Q
(template <class T>) 108 505.57 T
(struct logical_and : binary_function<T, T, bool> {) 108 494.57 T
(bool operator\050\051\050const T& x, const T& y\051 const { return x && y; }) 144 483.57 T
(};) 108 472.57 T
(template <class T>) 108 450.57 T
(struct logical_or : binary_function<T, T, bool> {) 108 439.57 T
(bool operator\050\051\050const T& x, const T& y\051 const { return x || y; }) 144 428.57 T
(};) 108 417.57 T
(template <class T>) 108 395.57 T
(struct logical_not : unary_function<T, bool> {) 108 384.57 T
(bool operator\050\051\050const T& x\051 const { return !x; }) 144 373.57 T
(};) 108 362.57 T
0 12 Q
(7  Allocators) 72 332.82 T
2 10 Q
-0.02 (One of the common problems in portability is to be able to encapsulate the information about the memory) 72 314.53 P
0.36 (model. This information includes the knowledge of pointer types, the type of their difference, the type of) 72 302.53 P
-0.52 (the size of objects in this memory model, as well as the memory allocation and deallocation primitives for it.) 72 290.53 P
-0.56 (STL addresses this problem by providing a standard set of requirements for) 72 271.53 P
5 F
-0.56 (allocators) 402.75 271.53 P
2 F
-0.56 (, which are objects that) 441.25 271.53 P
0.83 (encapsulate this information. All of the containers in STL are parameterized in terms of allocators. That) 72 259.53 P
(dramatically simplifies the task of dealing with multiple memory models.) 72 247.53 T
0 11 Q
(7.1 Allocator requirements) 72 224.18 T
2 10 Q
0.33 (In the following table, we assume) 72 207.1 P
4 9 Q
0.71 (X) 224.98 207.1 P
2 10 Q
0.33 ( is an allocator class for objects of type) 230.38 207.1 P
4 9 Q
0.71 (T) 404.24 207.1 P
2 10 Q
0.33 (,) 409.64 207.1 P
4 9 Q
0.71 (a) 414.96 207.1 P
2 10 Q
0.33 ( is a value of) 420.36 207.1 P
4 9 Q
0.71 (X) 479.83 207.1 P
2 10 Q
0.33 (,) 485.23 207.1 P
4 9 Q
0.71 (n) 490.55 207.1 P
2 10 Q
0.33 ( is of type) 495.95 207.1 P
4 9 Q
-0.33 (X::size_type) 72 195.1 P
2 10 Q
-0.15 (,) 136.8 195.1 P
4 9 Q
-0.33 (p) 141.65 195.1 P
2 10 Q
-0.15 ( is of type) 147.05 195.1 P
4 9 Q
-0.33 (X::pointer) 191.99 195.1 P
2 10 Q
-0.15 (,) 245.99 195.1 P
4 9 Q
-0.33 (r) 250.84 195.1 P
2 10 Q
-0.15 ( is of type) 256.24 195.1 P
4 9 Q
-0.33 (X::reference) 301.18 195.1 P
2 10 Q
-0.15 ( and) 365.98 195.1 P
4 9 Q
-0.33 (s) 387.61 195.1 P
2 10 Q
-0.15 ( is of type) 393.01 195.1 P
4 9 Q
-0.33 (X::const_reference) 437.95 195.1 P
2 10 Q
-0.15 (.) 535.15 195.1 P
(All the operations on the allocators are expected to be amortized constant time.) 72 176.1 T
6 12 Q
(T) 224.28 152.77 T
(able 7: Allocator r) 231.18 152.77 T
(equir) 324.61 152.77 T
(ements) 351.73 152.77 T
3 10 Q
(expression) 108.21 122.1 T
(return type) 223 122.1 T
(assertion/note) 393.42 128.1 T
(pre/post-condition) 384.54 116.1 T
4 9 Q
(X::value_type) 78 94.77 T
(T) 193.2 94.77 T
72 142.52 72 87.02 2 L
V
0.5 H
0 Z
N
187.2 143.02 187.2 86.52 2 L
V
N
302.4 143.02 302.4 86.52 2 L
V
N
540 142.52 540 87.02 2 L
V
N
71.75 142.77 540.25 142.77 2 L
V
N
72.25 108.02 539.75 108.02 2 L
V
N
72.25 105.52 539.75 105.52 2 L
V
N
71.75 86.77 540.25 86.77 2 L
V
N
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "16" 18
%%Page: "17" 19
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
72 18 540 63 R
7 X
0 0 0 1 0 0 0 K
V
2 10 Q
0 X
(17) 301 56.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
72 72 540 720 R
7 X
V
4 9 Q
0 X
-0.64 (pointer) 72 179.33 P
2 10 Q
-0.3 ( belongs to the category of mutable random access iterators referring to) 109.8 179.33 P
4 9 Q
-0.64 (T) 423.19 179.33 P
2 10 Q
-0.3 (.) 428.59 179.33 P
4 9 Q
-0.64 (const_pointer) 433.29 179.33 P
2 10 Q
-0.3 ( belongs) 503.49 179.33 P
1.56 (to the category of constant random access iterators referring to) 72 167.33 P
4 9 Q
3.36 (T) 366.17 167.33 P
2 10 Q
1.56 (. There is a conversion defined from) 371.57 167.33 P
4 9 Q
(pointer) 72 155.33 T
2 10 Q
( to) 109.8 155.33 T
4 9 Q
(const_pointer) 123.52 155.33 T
2 10 Q
(.) 193.72 155.33 T
-0.27 (For any allocator template) 72 136.33 P
4 9 Q
-0.57 (Alloc) 189.53 136.33 P
2 10 Q
-0.27 ( there is a specialization for type) 216.53 136.33 P
4 9 Q
-0.57 (void) 359.94 136.33 P
2 10 Q
-0.27 (.) 381.54 136.33 P
4 9 Q
-0.57 (Alloc<void>) 386.28 136.33 P
2 10 Q
-0.27 ( has only constructor,) 445.68 136.33 P
4.77 (destructor, and) 72 124.33 P
4 9 Q
10.3 (Alloc<void>::pointer) 151.45 124.33 P
2 10 Q
4.77 ( defined. Conversions are defined from any instance of) 259.45 124.33 P
4 9 Q
18.23 (Alloc<T>::pointer) 72 112.33 P
2 10 Q
8.44 ( into) 163.8 112.33 P
4 9 Q
18.23 (Alloc<void>::pointer) 203.13 112.33 P
2 10 Q
8.44 ( and back so that for any) 311.13 112.33 P
4 9 Q
18.23 (p) 481.33 112.33 P
2 10 Q
8.44 (,) 486.73 112.33 P
4 9 Q
18.23 (p ==) 500.17 112.33 P
(Alloc<T>::pointer\050Alloc<void>::pointer\050p\051\051) 72 100.33 T
2 10 Q
(.) 298.8 100.33 T
4 9 Q
(X::reference) 78 654 T
3 10 Q
(lvalue of) 193.2 653.33 T
4 9 Q
(T) 230.97 653.33 T
(X::const_reference) 78 634 T
3 10 Q
(const lvalue of) 193.2 633.33 T
4 9 Q
(T) 254.58 633.33 T
(X::pointer) 78 614 T
3 10 Q
(pointer to) 193.2 613.33 T
4 9 Q
(T) 234.31 613.33 T
3 10 Q
( type) 239.71 613.33 T
-0.2 (the result of) 308.4 613.33 P
4 9 Q
-0.43 (operator*) 358.08 613.33 P
3 10 Q
-0.2 ( of values of) 406.68 613.33 P
4 9 Q
-0.43 (X::pointer) 458.09 613.33 P
3 10 Q
-0.2 ( is of) 512.09 613.33 P
4 9 Q
(reference.) 308.4 601.33 T
(X::const_pointer) 78 582 T
3 10 Q
(pointer to) 193.2 581.33 T
4 9 Q
( const T) 231.81 581.33 T
3 10 Q
( type) 275.01 581.33 T
(the result of) 308.4 581.33 T
4 9 Q
(operator*) 358.67 581.33 T
3 10 Q
( of values of) 407.27 581.33 T
4 9 Q
(X::const_pointer) 308.4 569.33 T
3 10 Q
( is of) 394.8 569.33 T
4 9 Q
(const_reference;) 417.3 569.33 T
3 10 Q
-0.16 (it is the same type of pointer as) 308.4 557.33 P
4 9 Q
-0.34 (X::pointer) 434.34 557.33 P
3 10 Q
-0.16 (, in particu-) 487.94 557.33 P
(lar) 308.4 545.33 T
(,) 318.55 545.33 T
4 9 Q
(sizeof\050X::const_pointer\051 ==) 323.55 545.33 T
(sizeof\050X::pointer\051.) 308.4 533.33 T
(X::size_type) 78 514 T
3 10 Q
(unsigned integral type) 193.2 513.33 T
(the type that can represent the size of the lar) 308.4 513.33 T
(gest object) 484.56 513.33 T
(in the memory model.) 308.4 501.33 T
4 9 Q
(X::difference_type) 78 482 T
3 10 Q
(signed integral type) 193.2 481.33 T
(the type that can represent the dif) 308.4 481.33 T
(ference between any) 441.52 481.33 T
(two pointers in the memory model.) 308.4 469.33 T
4 9 Q
(X a;) 78 450 T
3 10 Q
(note: a destructor is assumed.) 308.4 449.33 T
4 9 Q
(a.address\050r\051) 78 430 T
(pointer) 193.2 430 T
(*\050a.address\050r\051\051 == r) 308.4 429.33 T
3 10 Q
(.) 415.85 429.33 T
4 9 Q
(a.const_address\050s\051) 78 410 T
(const_pointer) 193.2 410 T
(*\050a.address\050s\051\051 == s) 308.4 409.33 T
3 10 Q
(.) 416.4 409.33 T
4 9 Q
(a.allocate\050n\051) 78 390 T
(X::pointer) 193.2 390 T
3 10 Q
(memory is allocated for) 308.4 389.33 T
4 9 Q
(n) 406.16 389.33 T
3 10 Q
( objects of type) 411.56 389.33 T
4 9 Q
(T) 475.44 389.33 T
3 10 Q
( but objects) 480.84 389.33 T
-0.28 (are not constructed.) 308.4 377.33 P
4 9 Q
-0.61 (allocate) 388.64 377.33 P
3 10 Q
-0.28 ( may raise an appropriate) 431.84 377.33 P
(exception.) 308.4 365.33 T
4 9 Q
(a.deallocate\050p\051) 78 346 T
3 10 Q
(result is not used) 193.2 345.33 T
(all the objects in the area pointed by) 308.4 345.33 T
4 9 Q
(p) 455.6 345.33 T
3 10 Q
( should be) 461 345.33 T
(destroyed prior to the call of the deallocate.) 308.4 333.33 T
4 9 Q
(construct\050p, a\051) 78 314 T
(void) 193.2 314 T
3 10 Q
(post:) 308.4 313.33 T
4 9 Q
(*p == a) 330.35 313.33 T
3 10 Q
(.) 368.15 313.33 T
4 9 Q
(destroy\050p\051) 78 294 T
(void) 193.2 294 T
3 10 Q
(the value pointed by) 308.4 293.33 T
4 9 Q
(p) 392.28 293.33 T
3 10 Q
( is destroyed.) 397.68 293.33 T
4 9 Q
(a.init_page_size\050\051) 78 274 T
(X::size_type) 193.2 274 T
3 10 Q
(the returned value is the optimal value for an initial) 308.4 273.33 T
(buf) 308.4 261.33 T
(fer size of the given type. It is assumed that if) 321.55 261.33 T
4 9 Q
(k) 506.52 261.33 T
3 10 Q
( is) 511.92 261.33 T
(returned by) 308.4 249.33 T
4 9 Q
(init_page_size) 356.72 249.33 T
3 10 Q
(,) 432.32 249.33 T
4 9 Q
(t) 437.32 249.33 T
3 10 Q
( is the construction) 442.72 249.33 T
(time for) 308.4 237.33 T
4 9 Q
(T) 342.84 237.33 T
3 10 Q
(, and) 347.5 237.33 T
4 9 Q
(u) 369.44 237.33 T
3 10 Q
( is the time that it takes to do) 374.84 237.33 T
4 9 Q
(allo-) 492.9 237.33 T
(cate\050k\051) 308.4 225.33 T
3 10 Q
(, then) 346.2 225.33 T
4 9 Q
(k * t) 370.92 225.33 T
3 10 Q
( is much greater than) 397.92 225.33 T
4 9 Q
(u) 484.29 225.33 T
3 10 Q
(.) 489.69 225.33 T
4 9 Q
(a.max_size\050\051) 78 206 T
(X::size_type) 193.2 206 T
3 10 Q
(the lar) 308.4 205.33 T
(gest positive value of) 333.49 205.33 T
4 9 Q
(X::difference_type) 421.26 205.33 T
6 12 Q
(T) 224.28 712 T
(able 7: Allocator r) 231.18 712 T
(equir) 324.61 712 T
(ements) 351.73 712 T
3 10 Q
(expression) 108.21 681.33 T
(return type) 223 681.33 T
(assertion/note) 393.42 687.33 T
(pre/post-condition) 384.54 675.33 T
72 701.75 72 198.25 2 L
V
0.5 H
0 Z
N
187.2 702.25 187.2 197.75 2 L
V
N
302.4 702.25 302.4 197.75 2 L
V
N
540 701.75 540 198.25 2 L
V
N
71.75 702 540.25 702 2 L
V
N
72.25 667.25 539.75 667.25 2 L
V
N
72.25 664.75 539.75 664.75 2 L
V
N
71.75 646 540.25 646 2 L
V
N
71.75 626 540.25 626 2 L
V
N
71.75 594 540.25 594 2 L
V
N
71.75 526 540.25 526 2 L
V
N
71.75 494 540.25 494 2 L
V
N
71.75 462 540.25 462 2 L
V
N
71.75 442 540.25 442 2 L
V
N
71.75 422 540.25 422 2 L
V
N
71.75 402 540.25 402 2 L
V
N
71.75 358 540.25 358 2 L
V
N
71.75 326 540.25 326 2 L
V
N
71.75 306 540.25 306 2 L
V
N
71.75 286 540.25 286 2 L
V
N
71.75 218 540.25 218 2 L
V
N
71.75 198 540.25 198 2 L
V
N
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "17" 19
%%Page: "18" 20
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
72 18 540 63 R
7 X
0 0 0 1 0 0 0 K
V
2 10 Q
0 X
(18) 301 56.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
72 72 540 720 R
7 X
V
0 11 Q
0 X
(7.2 The default allocator) 72 711.98 T
4 9 Q
(template <class T>) 108 691.57 T
(class allocator {) 108 680.57 T
(public:) 108 669.57 T
(typedef T* pointer;) 144 658.57 T
(typedef const T* const_pointer;) 144 647.57 T
(typedef T& reference;) 144 636.57 T
(typedef const T& const_reference;) 144 625.57 T
(typedef T value_type;) 144 614.57 T
(typedef size_t size_type;) 144 603.57 T
(typedef ptrdiff_t difference_type;) 144 592.57 T
(allocator\050\051;) 144 581.57 T
(~allocator\050\051;) 144 570.57 T
(pointer address\050reference x\051;) 144 559.57 T
(const_pointer const_address\050const_reference x\051;) 144 548.57 T
(pointer allocate\050size_type n\051;) 144 537.57 T
(void deallocate\050pointer p\051;) 144 526.57 T
(size_type init_page_size\050\051;) 144 515.57 T
(size_type max_size\050\051;) 144 504.57 T
(};) 108 493.57 T
(class allocator<void> {) 108 471.57 T
(public:) 108 460.57 T
(typedef void* pointer;) 144 449.57 T
(allocator\050\051;) 144 438.57 T
(~allocator\050\051;) 144 427.57 T
(};) 108 416.57 T
2 10 Q
0.04 (In addition to) 72 397.9 P
4 9 Q
0.08 (allocator) 135.1 397.9 P
2 10 Q
0.04 ( the library vendors are expected to provide allocators for all supported memory) 183.7 397.9 P
(models.) 72 385.9 T
0 12 Q
(8  Containers) 72 355.82 T
2 10 Q
1.18 (Containers are objects that store other objects. They control allocation and deallocation of these objects) 72 337.53 P
(through constructors, destructors, insert and erase operations.) 72 325.53 T
-0.14 (In the following table, we assume) 72 306.53 P
4 9 Q
-0.29 (X) 222.19 306.53 P
2 10 Q
-0.14 ( is a container class containing objects of type) 227.59 306.53 P
4 9 Q
-0.29 (T) 428.77 306.53 P
2 10 Q
-0.14 (,) 434.17 306.53 P
4 9 Q
-0.29 (a) 439.04 306.53 P
2 10 Q
-0.14 ( and) 444.43 306.53 P
4 9 Q
-0.29 (b) 466.09 306.53 P
2 10 Q
-0.14 ( are values of) 471.49 306.53 P
4 9 Q
-0.29 (X) 532.1 306.53 P
2 10 Q
-0.14 (,) 537.5 306.53 P
4 9 Q
(u) 72 294.53 T
2 10 Q
( is an identifier and) 77.4 294.53 T
4 9 Q
(r) 165.58 294.53 T
2 10 Q
( is a value of) 170.98 294.53 T
4 9 Q
(X&) 228.8 294.53 T
2 10 Q
(.) 239.6 294.53 T
6 12 Q
(T) 222.28 252.2 T
(able 8: Container r) 229.18 252.2 T
(equir) 326.62 252.2 T
(ements) 353.74 252.2 T
3 10 Q
(expression) 90.21 221.53 T
(return type) 183.4 221.53 T
(operational semantics) 266.14 221.53 T
(assertion/note) 400.62 227.53 T
(pre/post-condition) 391.73 215.53 T
(complex) 501.18 227.53 T
(ity) 513.12 215.53 T
4 9 Q
(X::value_type) 76 194.2 T
(T) 155.2 194.2 T
3 10 Q
(compile) 500.8 193.53 T
(time) 500.8 181.53 T
4 9 Q
(X::reference) 76 162.2 T
3 10 Q
(compile) 500.8 161.53 T
(time) 500.8 149.53 T
4 9 Q
(X::const_refe) 76 130.2 T
(rence) 76 119.2 T
3 10 Q
(compile) 500.8 129.53 T
(time) 500.8 117.53 T
4 9 Q
(X::pointer) 76 98.2 T
3 10 Q
(a pointer type pointing) 155.2 97.53 T
(to) 155.2 85.53 T
4 9 Q
(X::reference) 165.48 85.53 T
3 10 Q
(pointer to) 364 97.53 T
4 9 Q
(T) 405.11 97.53 T
3 10 Q
( in the memory) 410.51 97.53 T
(model used by the container) 364 85.53 T
(compile) 500.8 97.53 T
(time) 500.8 85.53 T
72 241.95 72 78.45 2 L
V
0.5 H
0 Z
N
151.2 242.45 151.2 77.95 2 L
V
N
259.2 242.45 259.2 77.95 2 L
V
N
360 242.45 360 77.95 2 L
V
N
496.8 242.45 496.8 77.95 2 L
V
N
540 241.95 540 78.45 2 L
V
N
71.75 242.2 540.25 242.2 2 L
V
N
72.25 207.45 539.75 207.45 2 L
V
N
72.25 204.95 539.75 204.95 2 L
V
N
71.75 174.2 540.25 174.2 2 L
V
N
71.75 142.2 540.25 142.2 2 L
V
N
71.75 110.2 540.25 110.2 2 L
V
N
71.75 78.2 540.25 78.2 2 L
V
N
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "18" 20
%%Page: "19" 21
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
72 18 540 63 R
7 X
0 0 0 1 0 0 0 K
V
2 10 Q
0 X
(19) 301 56.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
72 72 540 720 R
7 X
V
4 9 Q
0 X
(X::iterator) 76 654 T
3 10 Q
(iterator type pointing to) 155.2 653.33 T
4 9 Q
(X::reference) 155.2 641.33 T
3 10 Q
(an iterator of any iterator cate-) 364 653.33 T
(gory except output iterator) 364 641.33 T
(.) 469.82 641.33 T
(compile) 500.8 653.33 T
(time) 500.8 641.33 T
4 9 Q
(X::const_iter) 76 622 T
(ator) 76 611 T
3 10 Q
(iterator type pointing to) 155.2 621.33 T
4 9 Q
(X::const_reference) 155.2 609.33 T
3 10 Q
(a constant iterator of any itera-) 364 621.33 T
(tor category except output itera-) 364 609.33 T
(tor) 364 597.33 T
(.) 374.56 597.33 T
(compile) 500.8 621.33 T
(time) 500.8 609.33 T
4 9 Q
(X::difference) 76 578 T
(_type) 76 567 T
3 10 Q
(signed integral type) 155.2 577.33 T
(is identical to the distance type) 364 577.33 T
(of) 364 565.33 T
4 9 Q
(X::iterator) 374.83 565.33 T
3 10 Q
( and) 434.23 565.33 T
4 9 Q
(X::const_iterator) 364 553.33 T
3 10 Q
(compile) 500.8 577.33 T
(time) 500.8 565.33 T
4 9 Q
(X::) 76 534 T
(size_type) 76 523 T
3 10 Q
(unsigned integral type) 155.2 533.33 T
4 9 Q
(size_type) 364 533.33 T
3 10 Q
( can represent any) 412.6 533.33 T
(non-negative value of) 364 521.33 T
4 9 Q
(difference_type) 364 509.33 T
3 10 Q
(compile) 500.8 533.33 T
(time) 500.8 521.33 T
4 9 Q
(X u;) 76 490 T
3 10 Q
(post:) 364 489.33 T
4 9 Q
(u.size\050\051 == 0.) 385.95 489.33 T
3 10 Q
(constant) 500.8 489.33 T
4 9 Q
(X\050\051) 76 470 T
(X\050\051) 364 469.33 T
3 10 Q
(.) 380.2 469.33 T
4 9 Q
(size\050\051 == 0) 382.7 469.33 T
3 10 Q
(.) 442.1 469.33 T
(constant) 500.8 469.33 T
4 9 Q
(X\050a\051) 76 450 T
(a == X\050a\051.) 364 450 T
3 10 Q
(linear) 500.8 449.33 T
4 9 Q
(X u\050a\051;) 76 430 T
(X u = a;) 76 419 T
(X u; u = a;) 263.2 430 T
3 10 Q
(post:) 364 429.33 T
4 9 Q
(u == a.) 385.95 429.33 T
3 10 Q
(linear) 500.8 429.33 T
4 9 Q
(\050&a\051->~X\050\051) 76 400 T
3 10 Q
(result is not used) 155.2 399.33 T
(post:) 364 399.33 T
4 9 Q
(a.size\050\051 == 0) 385.95 399.33 T
3 10 Q
(.) 456.15 399.33 T
-0.38 (note: the destructor is applied to) 364 387.33 P
(every element of) 364 375.33 T
4 9 Q
(a) 433.7 375.33 T
3 10 Q
( and all the) 439.1 375.33 T
(memory is returned.) 364 363.33 T
(linear) 500.8 399.33 T
4 9 Q
(a.begin\050\051) 76 344 T
(iterator;) 155.2 343.33 T
(const_iterator) 155.2 331.33 T
3 10 Q
(for) 236.2 331.33 T
(constant) 155.2 319.33 T
4 9 Q
(a) 191.03 319.33 T
3 10 Q
(constant) 500.8 343.33 T
4 9 Q
(a.end\050\051) 76 300 T
(iterator;) 155.2 299.33 T
(const_iterator) 155.2 287.33 T
3 10 Q
(for) 236.2 287.33 T
(constant) 155.2 275.33 T
4 9 Q
(a) 191.03 275.33 T
3 10 Q
(constant) 500.8 299.33 T
4 9 Q
(a == b) 76 256 T
3 10 Q
(convertible to) 155.2 255.33 T
4 9 Q
(bool) 212.97 255.33 T
(a.size\050\051 ==) 263.2 256 T
(b.size\050\051 &&) 263.2 245 T
(equal\050a.begin\050\051,) 263.2 234 T
(a.end\050\051,) 263.2 223 T
(b.begin\050\051\051) 263.2 212 T
(==) 364 255.33 T
3 10 Q
( is an equivalence relation.) 374.8 255.33 T
(note:) 364 243.33 T
4 9 Q
(equal) 386.5 243.33 T
3 10 Q
( is de\336ned in the) 413.5 243.33 T
(algorithms section.) 364 231.33 T
(linear) 500.8 255.33 T
4 9 Q
(a != b) 76 193 T
3 10 Q
(convertible to) 155.2 192.33 T
4 9 Q
(bool) 212.97 192.33 T
(!\050a == b\051) 263.2 193 T
3 10 Q
(linear) 500.8 192.33 T
4 9 Q
(r = a) 76 173 T
(X&) 155.2 172.33 T
(if \050&r != &a\051 {) 263.2 173 T
(\050&r\051->X::~X\050\051;) 279 162 T
-1.33 (new \050&r\051 X\050a\051;) 279 151 P
(return r; }) 279 140 T
3 10 Q
(post:) 364 172.33 T
4 9 Q
(r == a.) 385.95 172.33 T
3 10 Q
(linear) 500.8 172.33 T
6 12 Q
(T) 222.28 712 T
(able 8: Container r) 229.18 712 T
(equir) 326.62 712 T
(ements) 353.74 712 T
3 10 Q
(expression) 90.21 681.33 T
(return type) 183.4 681.33 T
(operational semantics) 266.14 681.33 T
(assertion/note) 400.62 687.33 T
(pre/post-condition) 391.73 675.33 T
(complex) 501.18 687.33 T
(ity) 513.12 675.33 T
72 701.75 72 133.25 2 L
V
0.5 H
0 Z
N
151.2 702.25 151.2 132.75 2 L
V
N
259.2 702.25 259.2 132.75 2 L
V
N
360 702.25 360 132.75 2 L
V
N
496.8 702.25 496.8 132.75 2 L
V
N
540 701.75 540 133.25 2 L
V
N
71.75 702 540.25 702 2 L
V
N
72.25 667.25 539.75 667.25 2 L
V
N
72.25 664.75 539.75 664.75 2 L
V
N
71.75 634 540.25 634 2 L
V
N
71.75 590 540.25 590 2 L
V
N
71.75 546 540.25 546 2 L
V
N
71.75 502 540.25 502 2 L
V
N
71.75 482 540.25 482 2 L
V
N
71.75 462 540.25 462 2 L
V
N
71.75 442 540.25 442 2 L
V
N
71.75 412 540.25 412 2 L
V
N
71.75 356 540.25 356 2 L
V
N
71.75 312 540.25 312 2 L
V
N
71.75 268 540.25 268 2 L
V
N
71.75 205 540.25 205 2 L
V
N
71.75 185 540.25 185 2 L
V
N
71.75 133 540.25 133 2 L
V
N
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "19" 21
%%Page: "20" 22
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
72 18 540 63 R
7 X
0 0 0 1 0 0 0 K
V
2 10 Q
0 X
(20) 301 56.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
72 72 540 720 R
7 X
V
0 X
0.18 (The member function) 72 384.33 P
4 9 Q
0.4 (size\050\051) 170.58 384.33 P
2 10 Q
0.18 ( returns the number of elements in the container. Its semantics is defined by) 202.98 384.33 P
(the rules of constructors, inserts, and erases.) 72 372.33 T
4 9 Q
0.53 (begin\050\051) 72 353.33 P
2 10 Q
0.25 ( returns an iterator referring to the first element in the container.) 109.8 353.33 P
4 9 Q
0.53 (end\050\051) 399.25 353.33 P
2 10 Q
0.25 ( returns an iterator which) 426.25 353.33 P
(is the past-the-end value.) 72 341.33 T
1.38 (If the iterator type of a container belongs to the bidirectional or random access iterator categories, the) 72 322.33 P
(container is called) 72 310.33 T
4 9 Q
(reversible) 154.26 310.33 T
2 10 Q
( and satisfies the following additional requirements:) 208.26 310.33 T
4 9 Q
(a.size\050\051) 76 654 T
(size_type) 155.2 654 T
(size_type n = 0;) 263.2 654 T
(distance) 263.2 643 T
(\050a.begin\050\051,) 263.2 632 T
(a.end\050\051, n\051;) 263.2 621 T
(return n;) 263.2 610 T
3 10 Q
(constant) 500.8 653.33 T
4 9 Q
(a.max_size\050\051) 76 591 T
(size_type) 155.2 591 T
(size\050\051) 364 590.33 T
3 10 Q
( of the lar) 396.4 590.33 T
(gest possible) 434.82 590.33 T
(container) 364 578.33 T
(.) 400.66 578.33 T
(constant) 500.8 590.33 T
4 9 Q
(a.empty\050\051) 76 559 T
3 10 Q
(convertible to) 155.2 558.33 T
4 9 Q
(bool) 212.97 558.33 T
(a.size\050\051 == 0) 263.2 559 T
3 10 Q
(constant) 500.8 558.33 T
4 9 Q
(a < b) 76 539 T
3 10 Q
(convertible to) 155.2 539 T
4 9 Q
(bool) 212.97 539 T
(lexicographical_c) 263.2 538.33 T
(ompare\050a.begin\050\051,) 263.2 526.33 T
(a.end\050\051,) 263.2 514.33 T
(b.begin\050\051,) 263.2 502.33 T
(b.end\050\051\051) 263.2 490.33 T
3 10 Q
(pre:) 364 538.33 T
4 9 Q
(<) 382.05 538.33 T
3 10 Q
( is de\336ned for values of) 387.45 538.33 T
4 9 Q
(T) 484.1 538.33 T
3 10 Q
(.) 488.76 538.33 T
4 9 Q
(<) 364 526.33 T
3 10 Q
( is a total ordering relation.) 369.4 526.33 T
4 9 Q
(lexicographical_compare) 364 514.33 T
3 10 Q
(is de\336ned in the algorithms sec-) 364 502.33 T
(tion.) 364 490.33 T
(linear) 500.8 538.33 T
4 9 Q
(a > b) 76 471 T
3 10 Q
(convertible to) 155.2 471 T
4 9 Q
(bool) 212.97 471 T
(b < a) 263.2 470.33 T
3 10 Q
(linear) 500.8 470.33 T
4 9 Q
(a <= b) 76 451 T
3 10 Q
(convertible to) 155.2 451 T
4 9 Q
(bool) 212.97 451 T
(!\050a > b\051) 263.2 450.33 T
3 10 Q
(linear) 500.8 450.33 T
4 9 Q
(a >= b) 76 431 T
3 10 Q
(convertible to) 155.2 430.33 T
4 9 Q
(bool) 212.97 430.33 T
(!\050a < b\051) 263.2 431 T
3 10 Q
(linear) 500.8 430.33 T
4 9 Q
(a.swap\050b\051) 76 411 T
(void) 155.2 411 T
(swap\050a,b\051) 263.2 411 T
3 10 Q
(constant) 500.8 410.33 T
6 12 Q
(T) 129.78 268 T
(able 9: Reversible container r) 136.68 268 T
(equir) 287.77 268 T
(ements \050in addition to container\051) 314.89 268 T
3 10 Q
(expression) 90.21 237.33 T
(return type) 183.4 237.33 T
(operational semantics) 334.54 237.33 T
(complex) 501.18 243.33 T
(ity) 513.12 231.33 T
4 9 Q
(X::reverse_it) 76 210 T
(erator) 76 199 T
(reverse_iterator<iterator, value_type,) 263.2 210 T
(reference, difference_type>) 263.2 198.33 T
3 10 Q
(for random access iterator) 263.2 186.33 T
4 9 Q
(reverse_bidirectional_iterator<iterator,) 263.2 175 T
(value_type, reference, difference_type>) 263.2 164 T
3 10 Q
(for bidirectional iterator) 263.2 152.33 T
(compile) 500.8 209.33 T
(time) 500.8 197.33 T
6 12 Q
(T) 222.28 712 T
(able 8: Container r) 229.18 712 T
(equir) 326.62 712 T
(ements) 353.74 712 T
3 10 Q
(expression) 90.21 681.33 T
(return type) 183.4 681.33 T
(operational semantics) 266.14 681.33 T
(assertion/note) 400.62 687.33 T
(pre/post-condition) 391.73 675.33 T
(complex) 501.18 687.33 T
(ity) 513.12 675.33 T
72 701.75 72 403.25 2 L
V
0.5 H
0 Z
N
151.2 702.25 151.2 402.75 2 L
V
N
259.2 702.25 259.2 402.75 2 L
V
N
360 702.25 360 402.75 2 L
V
N
496.8 702.25 496.8 402.75 2 L
V
N
540 701.75 540 403.25 2 L
V
N
71.75 702 540.25 702 2 L
V
N
72.25 667.25 539.75 667.25 2 L
V
N
72.25 664.75 539.75 664.75 2 L
V
N
71.75 603 540.25 603 2 L
V
N
71.75 571 540.25 571 2 L
V
N
71.75 551 540.25 551 2 L
V
N
71.75 483 540.25 483 2 L
V
N
71.75 463 540.25 463 2 L
V
N
71.75 443 540.25 443 2 L
V
N
71.75 423 540.25 423 2 L
V
N
71.75 403 540.25 403 2 L
V
N
72 257.75 72 145.25 2 L
V
N
151.2 258.25 151.2 144.75 2 L
V
N
259.2 258.25 259.2 144.75 2 L
V
N
496.8 258.25 496.8 144.75 2 L
V
N
540 257.75 540 145.25 2 L
V
N
71.75 258 540.25 258 2 L
V
N
72.25 223.25 539.75 223.25 2 L
V
N
72.25 220.75 539.75 220.75 2 L
V
N
71.75 145 540.25 145 2 L
V
N
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "20" 22
%%Page: "21" 23
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
72 18 540 63 R
7 X
0 0 0 1 0 0 0 K
V
2 10 Q
0 X
(21) 301 56.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
72 72 540 720 R
7 X
V
0 11 Q
0 X
(8.1 Sequences) 72 459.98 T
2 10 Q
0.54 (A sequence is a kind of container that organizes a finite set of objects, all of the same type, into a strictly) 72 442.91 P
1.72 (linear arrangement. The library provides three basic kinds of sequence containers:) 72 430.91 P
4 9 Q
3.72 (vector) 455.62 430.91 P
2 10 Q
1.72 (,) 488.02 430.91 P
4 9 Q
3.72 (list) 494.75 430.91 P
2 10 Q
1.72 (, and) 516.35 430.91 P
4 9 Q
-0.21 (deque) 72 418.91 P
2 10 Q
-0.1 (. It also provides container adaptors that make it easy to construct abstract data types, such as stacks) 99 418.91 P
(or queues, out of the basic sequence kinds \050or out of other kinds of sequences that the user might define\051.) 72 406.91 T
-0.23 (In the following two tables,) 72 387.91 P
4 9 Q
-0.5 (X) 194.39 387.91 P
2 10 Q
-0.23 ( is a sequence class,) 199.79 387.91 P
4 9 Q
-0.5 (a) 287.1 387.91 P
2 10 Q
-0.23 ( is value of) 292.5 387.91 P
4 9 Q
-0.5 (X) 341.89 387.91 P
2 10 Q
-0.23 (,) 347.29 387.91 P
4 9 Q
-0.5 (i) 352.06 387.91 P
2 10 Q
-0.23 ( and) 357.46 387.91 P
4 9 Q
-0.5 (j) 378.92 387.91 P
2 10 Q
-0.23 ( satisfy input iterator requirements,) 384.32 387.91 P
4 9 Q
-0.81 ([i, j\051) 72 375.91 P
2 10 Q
-0.37 ( is a valid range,) 103.59 375.91 P
4 9 Q
-0.81 (n) 176.58 375.91 P
2 10 Q
-0.37 ( is a value of) 181.98 375.91 P
4 9 Q
-0.81 (X::size_type) 237.93 375.91 P
2 10 Q
-0.37 (,) 302.73 375.91 P
4 9 Q
-0.81 (p) 307.36 375.91 P
2 10 Q
-0.37 ( is a valid iterator to) 312.76 375.91 P
4 9 Q
-0.81 (a) 401.55 375.91 P
2 10 Q
-0.37 (,) 406.95 375.91 P
4 9 Q
-0.81 (q) 411.58 375.91 P
2 10 Q
-0.37 ( is a dereferenceable iterator) 416.98 375.91 P
(to) 72 363.91 T
4 9 Q
(a) 83.22 363.91 T
2 10 Q
(,) 88.62 363.91 T
4 9 Q
([q1, q2\051) 93.62 363.91 T
2 10 Q
( is a valid range in) 136.82 363.91 T
4 9 Q
(a) 220.4 363.91 T
2 10 Q
(,) 225.8 363.91 T
4 9 Q
(t) 230.8 363.91 T
2 10 Q
( is a value of) 236.2 363.91 T
4 9 Q
(X::value_type) 294.02 363.91 T
2 10 Q
(.) 364.22 363.91 T
(The complexities of the expressions are sequence dependent.) 72 344.91 T
4 9 Q
(X::const_reve) 76 654 T
(rse_iterator) 76 643 T
(reverse_iterator<const_iterator,) 263.2 654 T
(value_type, const_reference,) 263.2 643 T
(difference_type>) 263.2 632 T
3 10 Q
(for random access iterator) 263.2 620.33 T
4 9 Q
(reverse_bidirectional_iterator<) 263.2 609 T
(const_iterator, value_type,) 263.2 598 T
(const_reference, difference_type>) 263.2 587 T
3 10 Q
(for bidirectional iterator) 263.2 575.33 T
(compile) 500.8 653.33 T
(time) 500.8 641.33 T
4 9 Q
(a.rbegin\050\051) 76 556 T
(reverse_iterator) 155.2 555.33 T
3 10 Q
(;) 241.6 555.33 T
4 9 Q
(const_reverse_iter) 155.2 543.33 T
(ator) 155.2 531.33 T
3 10 Q
( for constant) 176.8 531.33 T
4 9 Q
(a) 229.29 531.33 T
(reverse_iterator\050end\050\051\051) 263.2 556 T
3 10 Q
(constant) 500.8 555.33 T
4 9 Q
(a.rend\050\051) 76 512 T
(reverse_iterator) 155.2 511.33 T
3 10 Q
(;) 241.6 511.33 T
4 9 Q
(const_reverse_iter) 155.2 499.33 T
(ator) 155.2 487.33 T
3 10 Q
( for constant a) 176.8 487.33 T
4 9 Q
(reverse_iterator\050begin\050\051\051) 263.2 512 T
3 10 Q
(constant) 500.8 511.33 T
6 12 Q
(T) 155.6 302.57 T
(able 10: Sequence r) 162.5 302.57 T
(equir) 261.95 302.57 T
(ements \050in addition to container\051) 289.07 302.57 T
3 10 Q
(expression) 126.21 271.91 T
(return type) 226.6 271.91 T
(assertion/note) 379.02 277.91 T
(pre/post-condition) 370.14 265.91 T
4 9 Q
(X\050n, t\051) 96 244.57 T
(X a\050n, t\051;) 96 233.57 T
3 10 Q
(post:) 297.6 243.91 T
4 9 Q
(size\050\051 == n) 319.55 243.91 T
3 10 Q
(.) 378.95 243.91 T
(constructs a sequence with) 297.6 231.91 T
4 9 Q
(n) 407.02 231.91 T
3 10 Q
( copies of) 412.42 231.91 T
4 9 Q
(t) 453.8 231.91 T
3 10 Q
(.) 459.2 231.91 T
4 9 Q
(X\050i, j\051) 96 212.57 T
(X a\050i, j\051;) 96 201.57 T
3 10 Q
(post:) 297.6 211.91 T
4 9 Q
(size\050\051) 319.55 211.91 T
3 10 Q
( == distance between) 351.95 211.91 T
4 9 Q
(i) 439.32 211.91 T
3 10 Q
( and) 444.72 211.91 T
4 9 Q
(j) 464.16 211.91 T
3 10 Q
(.) 469.56 211.91 T
(constructs a sequence equal to the range) 297.6 199.91 T
4 9 Q
([i, j\051) 460.61 199.91 T
3 10 Q
(.) 493.01 199.91 T
4 9 Q
(a.insert\050p, t\051) 96 180.57 T
(iterator) 211.2 180.57 T
3 10 Q
(inserts a copy of) 297.6 179.91 T
4 9 Q
(t) 365.92 179.91 T
3 10 Q
( before) 371.32 179.91 T
4 9 Q
(p.) 401.86 179.91 T
3 10 Q
(the return value points to the inserted copy) 297.6 167.91 T
(.) 467.76 167.91 T
4 9 Q
(a.insert\050p, n, t\051) 96 148.57 T
3 10 Q
(result is not used) 211.2 147.91 T
(inserts) 297.6 147.91 T
4 9 Q
(n) 326.21 147.91 T
3 10 Q
( copies of) 331.61 147.91 T
4 9 Q
(t) 372.99 147.91 T
3 10 Q
( before) 378.39 147.91 T
4 9 Q
(p) 408.93 147.91 T
3 10 Q
(.) 414.33 147.91 T
4 9 Q
(a.insert\050p, i, j\051) 96 128.57 T
3 10 Q
(result is not used) 211.2 127.91 T
(inserts copies of elements in) 297.6 127.91 T
4 9 Q
([i, j\051) 413.42 127.91 T
3 10 Q
( before) 445.82 127.91 T
4 9 Q
(p) 476.36 127.91 T
3 10 Q
(.) 481.76 127.91 T
4 9 Q
(a.erase\050q\051) 96 108.57 T
3 10 Q
(result is not used) 211.2 107.91 T
(erases the element pointed to by) 297.6 107.91 T
4 9 Q
(q) 428.69 107.91 T
3 10 Q
(.) 434.09 107.91 T
4 9 Q
(a.erase\050q1, q2\051) 96 88.57 T
3 10 Q
(result is not used) 211.2 87.91 T
(erases the elements in the range) 297.6 87.91 T
4 9 Q
([q1, q2\051) 427.01 87.91 T
3 10 Q
(.) 470.21 87.91 T
6 12 Q
(T) 129.78 712 T
(able 9: Reversible container r) 136.68 712 T
(equir) 287.77 712 T
(ements \050in addition to container\051) 314.89 712 T
3 10 Q
(expression) 90.21 681.33 T
(return type) 183.4 681.33 T
(operational semantics) 334.54 681.33 T
(complex) 501.18 687.33 T
(ity) 513.12 675.33 T
72 701.75 72 480.25 2 L
V
0.5 H
0 Z
N
151.2 702.25 151.2 479.75 2 L
V
N
259.2 702.25 259.2 479.75 2 L
V
N
496.8 702.25 496.8 479.75 2 L
V
N
540 701.75 540 480.25 2 L
V
N
71.75 702 540.25 702 2 L
V
N
72.25 667.25 539.75 667.25 2 L
V
N
72.25 664.75 539.75 664.75 2 L
V
N
71.75 568 540.25 568 2 L
V
N
71.75 524 540.25 524 2 L
V
N
71.75 480 540.25 480 2 L
V
N
90 292.32 90 80.82 2 L
V
N
205.2 292.82 205.2 80.32 2 L
V
N
291.6 292.82 291.6 80.32 2 L
V
N
522 292.32 522 80.82 2 L
V
N
89.75 292.57 522.25 292.57 2 L
V
N
90.25 257.82 521.75 257.82 2 L
V
N
90.25 255.32 521.75 255.32 2 L
V
N
89.75 224.57 522.25 224.57 2 L
V
N
89.75 192.57 522.25 192.57 2 L
V
N
89.75 160.57 522.25 160.57 2 L
V
N
89.75 140.57 522.25 140.57 2 L
V
N
89.75 120.57 522.25 120.57 2 L
V
N
89.75 100.57 522.25 100.57 2 L
V
N
89.75 80.57 522.25 80.57 2 L
V
N
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "21" 23
%%Page: "22" 24
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
72 18 540 63 R
7 X
0 0 0 1 0 0 0 K
V
2 10 Q
0 X
(22) 301 56.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
72 72 540 720 R
7 X
V
4 9 Q
0 X
5.33 (vector) 72 713.33 P
2 10 Q
2.47 (,) 104.4 713.33 P
4 9 Q
5.33 (list) 111.87 713.33 P
2 10 Q
2.47 (, and) 133.47 713.33 P
4 9 Q
5.33 (deque) 162.84 713.33 P
2 10 Q
2.47 ( offer the programmer different complexity trade-offs and should be used) 189.84 713.33 P
-0.52 (accordingly.) 72 701.33 P
4 9 Q
-1.13 (vector) 128.63 701.33 P
2 10 Q
-0.52 ( is the type of sequence that should be used by default.) 161.04 701.33 P
4 9 Q
-1.13 (list) 399.08 701.33 P
2 10 Q
-0.52 ( should be used when there) 420.68 701.33 P
-0.19 (are frequent insertions and deletions from the middle of the sequence.) 72 689.33 P
4 9 Q
-0.4 (deque) 382.13 689.33 P
2 10 Q
-0.19 ( is the data structure of choice) 409.13 689.33 P
(when most insertions and deletions take place at the beginning or at the end of the sequence.) 72 677.33 T
4 9 Q
(iterator) 72 658.33 T
2 10 Q
( and) 115.2 658.33 T
4 9 Q
(const_iterator) 137.13 658.33 T
2 10 Q
( types for sequences have to be at least of the forward iterator category.) 212.73 658.33 T
-0.35 (All the operations in the above table are provided only for the containers for which they take constant time.) 72 352.33 P
9 F
(8.1.1 Vector) 72 331.71 T
4 9 Q
1.65 (vector) 72 314.85 P
2 10 Q
0.76 ( is a kind of sequence that supports random access iterators. In addition, it supports \050amortized\051) 104.4 314.85 P
-0.31 (constant time insert and erase operations at the end; insert and erase in the middle take linear time. Storage) 72 302.85 P
(management is handled automatically, though hints can be given to improve efficiency.) 72 290.85 T
4 9 Q
(template <class T, template <class U> class Allocator = allocator>) 108 268.52 T
(class vector {) 108 257.52 T
(public:) 108 246.52 T
(// typedefs:) 108 224.52 T
(typedef iterator;) 144 202.52 T
(typedef const_iterator;) 144 191.52 T
(typedef Allocator<T>::pointer pointer;) 144 180.52 T
(typedef Allocator<T>::reference reference;) 144 169.52 T
(typedef Allocator<T>::const_reference const_reference;) 144 158.52 T
(typedef size_type;) 144 147.52 T
(typedef difference_type;) 144 136.52 T
(typedef T value_type;) 144 125.52 T
(typedef reverse_iterator;) 144 114.52 T
(typedef const_reverse_iterator;) 144 103.52 T
(// allocation/deallocation:) 108 81.52 T
6 12 Q
(T) 205.54 616 T
(able 1) 212.44 616 T
(1: Optional sequence operations) 242.12 616 T
3 10 Q
(expression) 104.61 591.33 T
(return type) 212.2 591.33 T
(operational semantics) 316.54 591.33 T
(container) 463.8 591.33 T
4 9 Q
(a.front\050\051) 81.6 570 T
(reference;) 182.4 570 T
(const_reference) 182.4 558.33 T
3 10 Q
( for) 263.4 558.33 T
(constant) 182.4 546.33 T
4 9 Q
(a) 218.23 546.33 T
(*a.begin\050\051) 297.6 570 T
(vector) 434.4 569.33 T
3 10 Q
(,) 466.4 569.33 T
4 9 Q
(list) 471.4 569.33 T
3 10 Q
(,) 493 569.33 T
4 9 Q
(deque) 498 569.33 T
(a.back\050\051) 81.6 527 T
(reference;) 182.4 527 T
(const_reference) 182.4 515.33 T
3 10 Q
( for) 263.4 515.33 T
(constant) 182.4 503.33 T
4 9 Q
(a) 218.23 503.33 T
(*a.\050--end\050\051\051) 297.6 527 T
(vector) 434.4 526.33 T
3 10 Q
(,) 466.4 526.33 T
4 9 Q
(list) 471.4 526.33 T
3 10 Q
(,) 493 526.33 T
4 9 Q
(deque) 498 526.33 T
(a.push_front\050t\051) 81.6 484 T
(void) 182.4 483.33 T
(a.insert\050a.begin\050\051, t\051) 297.6 484 T
(list) 434.4 483.33 T
3 10 Q
(,) 456 483.33 T
4 9 Q
(deque) 461 483.33 T
(a.push_back\050t\051) 81.6 464 T
(void) 182.4 464 T
(a.insert\050a.end\050\051, t\051) 297.6 464 T
(vector) 434.4 463.33 T
3 10 Q
(,) 466.4 463.33 T
4 9 Q
(list) 471.4 463.33 T
3 10 Q
(,) 493 463.33 T
4 9 Q
(deque) 498 463.33 T
(a.pop_front\050\051) 81.6 444 T
(void) 182.4 444 T
(a.erase\050a.begin\050\051\051) 297.6 444 T
(list) 434.4 443.33 T
3 10 Q
(,) 456 443.33 T
4 9 Q
(deque) 461 443.33 T
(a.pop_back\050\051) 81.6 424 T
(void) 182.4 424 T
(a.erase\050--a.end\050\051\051) 297.6 424 T
(vector) 434.4 423.33 T
3 10 Q
(,) 466.4 423.33 T
4 9 Q
(list) 471.4 423.33 T
3 10 Q
(,) 493 423.33 T
4 9 Q
(deque) 498 423.33 T
(a[n]) 81.6 404 T
(reference;) 182.4 404 T
(const_reference) 182.4 392.33 T
3 10 Q
( for) 263.4 392.33 T
(constant) 182.4 380.33 T
4 9 Q
(a) 218.23 380.33 T
(*\050a.begin\050\051 + n\051) 297.6 404 T
(vector) 434.4 403.33 T
3 10 Q
(,) 466.4 403.33 T
4 9 Q
(deque) 471.4 403.33 T
75.6 605.75 75.6 373.25 2 L
V
0.5 H
0 Z
N
176.4 606.25 176.4 372.75 2 L
V
N
291.6 606.25 291.6 372.75 2 L
V
N
428.4 606.25 428.4 372.75 2 L
V
N
536.4 605.75 536.4 373.25 2 L
V
N
75.35 606 536.65 606 2 L
V
N
75.85 583.25 536.15 583.25 2 L
V
N
75.85 580.75 536.15 580.75 2 L
V
N
75.35 539 536.65 539 2 L
V
N
75.35 496 536.65 496 2 L
V
N
75.35 476 536.65 476 2 L
V
N
75.35 456 536.65 456 2 L
V
N
75.35 436 536.65 436 2 L
V
N
75.35 416 536.65 416 2 L
V
N
75.35 373 536.65 373 2 L
V
N
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "22" 24
%%Page: "23" 25
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
72 18 540 63 R
7 X
0 0 0 1 0 0 0 K
V
2 10 Q
0 X
(23) 301 56.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
72 72 540 720 R
7 X
V
4 9 Q
0 X
(vector\050\051;) 144 703 T
(vector\050size_type n, const T& value = T\050\051\051;) 144 692 T
(vector\050const vector<T, Allocator>& x\051;) 144 681 T
(template <class InputIterator>) 144 670 T
(vector\050InputIterator first, InputIterator last\051;) 144 659 T
(~vector\050\051;) 144 648 T
(vector<T, Allocator>& operator=\050const vector<T, Allocator>& x\051;) 144 637 T
(void reserve\050size_type n\051;) 144 626 T
(void swap\050vector<T, Allocator>& x\051;) 144 615 T
(// accessors:) 108 593 T
(iterator begin\050\051;) 144 571 T
(const_iterator begin\050\051 const;) 144 560 T
(iterator end\050\051;) 144 549 T
(const_iterator end\050\051 const;) 144 538 T
(reverse_iterator rbegin\050\051;) 144 527 T
(const_reverse_iterator rbegin\050\051;) 144 516 T
(reverse_iterator rend\050\051;) 144 505 T
(const_reverse_iterator rend\050\051;) 144 494 T
(size_type size\050\051 const;) 144 483 T
(size_type max_size\050\051 const;) 144 472 T
(size_type capacity\050\051 const;) 144 461 T
(bool empty\050\051 const;) 144 450 T
(reference operator[]\050size_type n\051;) 144 439 T
(const_reference operator[]\050size_type n\051 const;) 144 428 T
(reference front\050\051;) 144 417 T
(const_reference front\050\051 const;) 144 406 T
(reference back\050\051;) 144 395 T
(const_reference back\050\051 const;) 144 384 T
(// insert/erase:) 108 362 T
(void push_back\050const T& x\051;) 144 340 T
(iterator insert\050iterator position, const T& x = T\050\051\051;) 144 329 T
(void insert\050iterator position, size_type n, const T& x\051;) 144 318 T
(template <class InputIterator>) 144 307 T
(void insert\050iterator position, InputIterator first, InputIterator last\051;) 144 296 T
(void pop_back\050\051;) 144 285 T
(void erase\050iterator position\051;) 144 274 T
(void erase\050iterator first, iterator last\051;) 144 263 T
(};) 108 252 T
(template <class T, class Allocator>) 108 230 T
(bool operator==\050const vector<T, Allocator>& x, const vector<T, Allocator>& y\051;) 108 219 T
(template <class T, class Allocator>) 108 197 T
(bool operator<\050const vector<T, Allocator>& x, const vector<T, Allocator>& y\051;) 108 186 T
3.37 (iterator) 72 156.33 P
2 10 Q
1.56 ( is a random access iterator) 115.2 156.33 P
1.56 (referring to) 246.61 156.33 P
4 9 Q
3.37 (T) 302.49 156.33 P
2 10 Q
1.56 (. The exact type is implementation dependent and) 307.89 156.33 P
(determined by) 72 144.33 T
4 9 Q
(Allocator) 139.45 144.33 T
2 10 Q
(.) 188.05 144.33 T
4 9 Q
8.74 (const_iterator) 72 125.33 P
2 10 Q
4.05 ( is a constant random access iterator referring to) 147.6 125.33 P
4 9 Q
8.74 (const T) 398.62 125.33 P
2 10 Q
4.05 (.) 445.16 125.33 P
4.05 ( The exact type is) 447.66 125.33 P
0.37 (implementation dependent and determined by) 72 113.33 P
4 9 Q
0.8 (Allocator) 283.83 113.33 P
2 10 Q
0.37 (. It is guaranteed that there is a constructor for) 332.43 113.33 P
4 9 Q
(const_iterator) 72 101.33 T
2 10 Q
( out of) 147.6 101.33 T
4 9 Q
(iterator) 178.64 101.33 T
2 10 Q
(.) 221.84 101.33 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "23" 25
%%Page: "24" 26
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
72 18 540 63 R
7 X
0 0 0 1 0 0 0 K
V
2 10 Q
0 X
(24) 301 56.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
72 72 540 720 R
7 X
V
4 9 Q
0 X
0.8 (size_type) 72 713.33 P
2 10 Q
0.37 ( is an unsigned integral type. The exact type is implementation dependent and determined by) 120.6 713.33 P
4 9 Q
(Allocator) 72 701.33 T
2 10 Q
(.) 120.6 701.33 T
4 9 Q
0.67 (difference_type) 72 682.33 P
2 10 Q
0.31 ( is a signed integral type. The exact type is implementation dependent and determined) 153 682.33 P
(by) 72 670.33 T
4 9 Q
(Allocator) 85.59 670.33 T
2 10 Q
(.) 134.19 670.33 T
0.3 (The constructor) 72 651.33 P
4 9 Q
0.66 ( template <class InputIterator>) 141.85 651.33 P
0.66 (vector\050InputIterator first, InputIterator) 317.29 651.33 P
-0.84 (last\051) 72 639.33 P
2 10 Q
-0.39 ( makes only) 99 639.33 P
4 9 Q
-0.84 (N) 153.51 639.33 P
2 10 Q
-0.39 ( calls to the copy constructor of) 158.91 639.33 P
4 9 Q
-0.84 (T) 296.36 639.33 P
2 10 Q
-0.39 ( \050where) 301.76 639.33 P
4 9 Q
-0.84 (N) 337 639.33 P
2 10 Q
-0.39 ( is the distance between) 342.4 639.33 P
4 9 Q
-0.84 (first) 447.87 639.33 P
2 10 Q
-0.39 ( and) 474.87 639.33 P
4 9 Q
-0.84 (last) 496.03 639.33 P
2 10 Q
-0.39 (\051 and) 517.63 639.33 P
0.64 (no reallocations if iterators) 72 627.33 P
4 9 Q
1.38 (first) 195.04 627.33 P
2 10 Q
0.64 ( and) 222.04 627.33 P
4 9 Q
1.38 (last) 245.24 627.33 P
2 10 Q
0.64 ( are of forward, bidirectional, or random access categories. It) 266.84 627.33 P
-0.35 (does at most) 72 615.33 P
4 9 Q
-0.76 (2N) 129.1 615.33 P
2 10 Q
-0.35 ( calls to the copy constructor of) 139.9 615.33 P
4 9 Q
-0.76 (T) 277.6 615.33 P
2 10 Q
-0.35 ( and) 283 615.33 P
4 9 Q
-0.76 (logN) 304.23 615.33 P
2 10 Q
-0.35 ( reallocations if they are just input iterators, since) 325.83 615.33 P
(it is impossible to determine the distance between) 72 603.33 T
4 9 Q
(first) 294.88 603.33 T
2 10 Q
( and) 321.88 603.33 T
4 9 Q
(last) 343.81 603.33 T
2 10 Q
( and then do copying.) 365.41 603.33 T
-0.41 (The member function) 72 584.33 P
4 9 Q
-0.89 (capacity) 168.8 584.33 P
2 10 Q
-0.41 ( returns the size of the allocated storage in the vector. The member function) 212 584.33 P
4 9 Q
0.91 (reserve) 72 572.33 P
2 10 Q
0.42 ( is a directive that informs) 109.8 572.33 P
4 9 Q
0.91 (vector) 230.17 572.33 P
2 10 Q
0.42 ( of a planned change in size, so that it can manage the storage) 262.57 572.33 P
0.05 (allocation accordingly. It does not change the size of the sequence and takes at most linear time in the size) 72 560.33 P
1.56 (of the sequence. Reallocation happens at this point if and only if the current capacity is less than the) 72 548.33 P
2.71 (argument of) 72 536.33 P
4 9 Q
5.86 (reserve) 134.46 536.33 P
2 10 Q
2.71 (. After) 172.26 536.33 P
4 9 Q
5.86 (reserve) 208.3 536.33 P
2 10 Q
2.71 (,) 246.1 536.33 P
4 9 Q
5.86 (capacity) 253.81 536.33 P
2 10 Q
2.71 ( is greater or equal to the argument of) 297.01 536.33 P
4 9 Q
5.86 (reserve) 490.75 536.33 P
2 10 Q
2.71 ( if) 528.55 536.33 P
0.31 (reallocation happens; and equal to the previous value of) 72 524.33 P
4 9 Q
0.67 (capacity) 325.44 524.33 P
2 10 Q
0.31 ( otherwise. Reallocation invalidates all) 368.64 524.33 P
0.92 (the references, pointers, and iterators referring to the elements in the sequence. It is guaranteed that no) 72 512.33 P
0.2 (reallocation takes place during the insertions that happen after) 72 500.33 P
4 9 Q
0.44 (reserve) 353 500.33 P
2 10 Q
0.2 ( takes place till the time when the) 390.8 500.33 P
(size of the vector reaches the size specified by) 72 488.33 T
4 9 Q
(reserve) 276.11 488.33 T
2 10 Q
(.) 313.91 488.33 T
4 9 Q
-0.8 (insert) 72 469.33 P
2 10 Q
-0.37 ( causes reallocation if the new size is greater than the old capacity. If no reallocation happens, all the) 104.4 469.33 P
0.33 (iterators and references before the insertion point remain valid. Inserting a single element into a vector is) 72 457.33 P
0.18 (linear in the distance from the insertion point to the end of the vector. The amortized complexity over the) 72 445.33 P
0.04 (lifetime of a vector of inserting a single element at its end is constant. Insertion of multiple elements into a) 72 433.33 P
0.15 (vector with a single call of the insert member function is linear in the sum of the number of elements plus) 72 421.33 P
0.99 (the distance to the end of the vector. In other words, it is much faster to insert many elements into the) 72 409.33 P
1.03 (middle of a vector at once than to do the insertion one at a time. The insert template member function) 72 397.33 P
-0.33 (preallocates enough storage for the insertion if the iterators) 72 385.33 P
4 9 Q
-0.72 (first) 332.71 385.33 P
2 10 Q
-0.33 ( and) 359.71 385.33 P
4 9 Q
-0.72 (last) 380.98 385.33 P
2 10 Q
-0.33 ( are of forward, bidirectional or) 402.58 385.33 P
-0.34 (random access category. Otherwise, it does insert elements one by one and should not be used for inserting) 72 373.33 P
(into the middle of vectors.) 72 361.33 T
4 9 Q
-0.87 (erase) 72 342.33 P
2 10 Q
-0.4 ( invalidates all the iterators and references after the point of the erase. The destructor of) 99 342.33 P
4 9 Q
-0.87 (T) 481.12 342.33 P
2 10 Q
-0.4 ( is called the) 486.52 342.33 P
-0.05 (number of times equal to the number of the elements erased, but the assignment operator of) 72 330.33 P
4 9 Q
-0.12 (T) 480.08 330.33 P
2 10 Q
-0.05 ( is called the) 485.48 330.33 P
(number of times equal to the number of elements in the vector after the erased elements.) 72 318.33 T
(To optimize space allocation, a specialization for) 72 299.33 T
4 9 Q
(bool) 288.81 299.33 T
2 10 Q
( is provided:) 310.41 299.33 T
4 9 Q
(class vector<bool, allocator> {) 108 277 T
(public:) 108 266 T
(// bit reference:) 108 244 T
(class reference {) 144 222 T
(public:) 144 211 T
(~reference\050\051;) 180 200 T
(operator bool\050\051 const;) 180 189 T
(reference& operator=\050const bool x\051;) 180 178 T
(void flip\050\051;) 180 167 T
(// flips the bit) 288 167 T
(};) 144 156 T
(// typedefs:) 108 134 T
(typedef bool const_reference;) 144 112 T
(typedef iterator;) 144 101 T
(typedef const_iterator;) 144 90 T
(typedef size_t size_type;) 144 79 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "24" 26
%%Page: "25" 27
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
72 18 540 63 R
7 X
0 0 0 1 0 0 0 K
V
2 10 Q
0 X
(25) 301 56.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
72 72 540 720 R
7 X
V
4 9 Q
0 X
(typedef ptrdiff_t difference_type;) 144 714 T
(typedef bool value_type;) 144 703 T
(typedef reverse_iterator;) 144 692 T
(typedef const_reverse_iterator;) 144 681 T
(// allocation/deallocation:) 108 659 T
(vector\050\051;) 144 637 T
(vector\050size_type n, const bool& value = bool\050\051\051;) 144 626 T
(vector\050const vector<bool, allocator>& x\051;) 144 615 T
(template <class InputIterator>) 144 604 T
(vector\050InputIterator first, InputIterator last\051;) 144 593 T
(~vector\050\051;) 144 582 T
(vector<bool, allocator>& operator=\050const vector<bool, allocator>& x\051;) 144 571 T
(void reserve\050size_type n\051;) 144 560 T
(void swap\050vector<bool, allocator>& x\051;) 144 549 T
(// accessors:) 108 527 T
(iterator begin\050\051;) 144 505 T
(const_iterator begin\050\051 const;) 144 494 T
(iterator end\050\051;) 144 483 T
(const_iterator end\050\051 const;) 144 472 T
(reverse_iterator rbegin\050\051;) 144 461 T
(const_reverse_iterator rbegin\050\051;) 144 450 T
(reverse_iterator rend\050\051;) 144 439 T
(const_reverse_iterator rend\050\051;) 144 428 T
(size_type size\050\051 const;) 144 417 T
(size_type max_size\050\051 const;) 144 406 T
(size_type capacity\050\051 const;) 144 395 T
(bool empty\050\051 const;) 144 384 T
(reference operator[]\050size_type n\051;) 144 373 T
(const_reference operator[]\050size_type n\051 const;) 144 362 T
(reference front\050\051;) 144 351 T
(const_reference front\050\051 const;) 144 340 T
(reference back\050\051;) 144 329 T
(const_reference back\050\051 const;) 144 318 T
(// insert/erase:) 108 296 T
(void push_back\050const bool& x\051;) 144 274 T
(iterator insert\050iterator position, const bool& x = bool\050\051\051;) 144 263 T
(void insert \050iterator position, size_type n, const bool& x\051;) 144 252 T
(template <class InputIterator>) 144 241 T
(void insert \050iterator position, InputIterator first, InputIterator last\051;) 144 230 T
(void pop_back\050\051;) 144 219 T
(void erase\050iterator position\051;) 144 208 T
(void erase\050iterator first, iterator last\051;) 144 197 T
(};) 108 186 T
(void swap\050vector<bool, allocator>::reference x,) 108 164 T
( vector<bool, allocator>::reference y\051;) 144 153 T
(bool operator==\050const vector<bool, allocator>& x,) 108 131 T
(const vector<bool, allocator>& y\051;) 180 120 T
(bool operator<\050const vector<bool, allocator>& x,) 108 98 T
(const vector<bool, allocator>& y\051;) 180 87 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "25" 27
%%Page: "26" 28
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
72 18 540 63 R
7 X
0 0 0 1 0 0 0 K
V
2 10 Q
0 X
(26) 301 56.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
72 72 540 720 R
7 X
V
4 9 Q
0 X
(reference) 72 713.33 T
2 10 Q
( is a class that simulates the behavior of references of a single bit in) 120.6 713.33 T
4 9 Q
(vector<bool>) 417.74 713.33 T
2 10 Q
(.) 482.54 713.33 T
0.49 (Every implementation is expected to provide specializations of) 72 694.33 P
4 9 Q
1.06 (vector<bool>) 356.39 694.33 P
2 10 Q
0.49 ( for all supported memory) 421.19 694.33 P
(models.) 72 682.33 T
9 F
(8.1.2 List) 72 545.71 T
4 9 Q
1.03 (list) 72 528.85 P
2 10 Q
0.48 ( is a kind of sequence that supports bidirectional iterators and allows constant time insert and erase) 93.6 528.85 P
2.64 (operations anywhere within the sequence, with storage management handled automatically. Unlike) 72 516.85 P
0.4 (vectors and deques, fast random access to list elements is not supported, but many algorithms only need) 72 504.85 P
(sequential access anyway.) 72 492.85 T
4 9 Q
(template <class T, template <class U> class Allocator = allocator>) 108 470.52 T
(class list {) 108 459.52 T
(public:) 108 448.52 T
(// typedefs:) 108 426.52 T
(typedef iterator;) 144 404.52 T
(typedef const_iterator;) 144 393.52 T
(typedef Allocator<T>::pointer pointer;) 144 382.52 T
(typedef Allocator<T>::reference reference;) 144 371.52 T
(typedef Allocator<T>::const_reference const_reference;) 144 360.52 T
(typedef size_type;) 144 349.52 T
(typedef difference_type;) 144 338.52 T
(typedef T value_type;) 144 327.52 T
(typedef reverse_iterator;) 144 316.52 T
(typedef const_reverse_iterator;) 144 305.52 T
(// allocation/deallocation:) 108 283.52 T
(list\050\051;) 144 261.52 T
(list\050size_type n, const T& value = T\050\051\051;) 144 250.52 T
(template <class InputIterator>) 144 239.52 T
(list\050InputIterator first, InputIterator last\051;) 144 228.52 T
(list\050const list<T, Allocator>& x\051;) 144 217.52 T
(~list\050\051;) 144 206.52 T
(list<T, Allocator>& operator=\050const list<T, Allocator>& x\051;) 144 195.52 T
(void swap\050list<T, Allocator>& x\051;) 144 184.52 T
(// accessors:) 108 162.52 T
(iterator begin\050\051;) 144 140.52 T
(const_iterator begin\050\051 const;) 144 129.52 T
(iterator end\050\051;) 144 118.52 T
(const_iterator end\050\051 const;) 144 107.52 T
(reverse_iterator rbegin\050\051;) 144 96.52 T
(const_reverse_iterator rbegin\050\051;) 144 85.52 T
72 72 540 720 C
72 563 540 660 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99 575 513 652.62 R
7 X
0 0 0 1 0 0 0 K
V
0.5 H
0 Z
0 X
N
108 575 504 643.62 R
7 X
V
2 10 Q
0 X
(At present, it is not possible to templatize a specialization. That is, we cannot write:) 108 636.96 T
4 9 Q
(template <template <class U> class Allocator = allocator>) 144 614.62 T
(class vector<bool, Allocator> { /* ... */ };) 144 603.62 T
2 10 Q
(Therefore, only) 108 584.96 T
4 9 Q
(vector<bool, allocator>) 178.26 584.96 T
2 10 Q
( is provided.) 302.46 584.96 T
72 72 540 720 C
0 0 612 792 C
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "26" 28
%%Page: "27" 29
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
72 18 540 63 R
7 X
0 0 0 1 0 0 0 K
V
2 10 Q
0 X
(27) 301 56.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
72 72 540 720 R
7 X
V
4 9 Q
0 X
(reverse_iterator rend\050\051;) 144 714 T
(const_reverse_iterator rend\050\051;) 144 703 T
(bool empty\050\051 const;) 144 692 T
(size_type size\050\051 const;) 144 681 T
(size_type max_size\050\051 const;) 144 670 T
(reference front\050\051;) 144 659 T
(const_reference front\050\051 const;) 144 648 T
(reference back\050\051;) 144 637 T
(const_reference back\050\051 const;) 144 626 T
(// insert/erase:) 108 604 T
(void push_front\050const T& x\051;) 144 582 T
(void push_back\050const T& x\051;) 144 571 T
(iterator insert\050iterator position, const T& x = T\050\051\051;) 144 560 T
(void insert\050iterator position, size_type n, const T& x\051;) 144 549 T
(template <class InputIterator>) 144 538 T
(void insert\050iterator position, InputIterator first, InputIterator last\051;) 144 527 T
(void pop_front\050\051;) 144 516 T
(void pop_back\050\051;) 144 505 T
(void erase\050iterator position\051;) 144 494 T
(void erase\050iterator first, iterator last\051;) 144 483 T
(// special mutative operations on list:) 108 461 T
(void splice\050iterator position, list<T, Allocator>& x\051;) 144 439 T
(void splice\050iterator position, list<T, Allocator>& x, iterator i\051;) 144 428 T
(void splice\050iterator position, list<T, Allocator>& x, iterator first,) 144 417 T
(iterator last\051;) 216 406 T
(void remove\050const T& value\051;) 144 395 T
(template <class Predicate> void remove_if\050Predicate pred\051;) 144 384 T
(void unique\050\051;) 144 373 T
-0.72 (template <class BinaryPredicate> void unique\050BinaryPredicate binary_pred\051;) 144 362 P
(void merge\050list<T, Allocator>& x\051;) 144 351 T
(template <class Compare> void merge\050list<T, Allocator>& x, Compare comp\051;) 144 340 T
(void reverse\050\051;) 144 329 T
(void sort\050\051;) 144 318 T
(template <class Compare> void sort\050Compare comp\051;) 144 307 T
(};) 108 296 T
(template <class T, class Allocator>) 108 274 T
(bool operator==\050const list<T, Allocator>& x, const list<T, Allocator>& y\051;) 108 263 T
(template <class T, class Allocator>) 108 241 T
(bool operator<\050const list<T, Allocator>& x, const list<T, Allocator>& y\051;) 108 230 T
4.97 (iterator) 72 211.33 P
2 10 Q
2.3 ( is a bidirectional iterator) 115.2 211.33 P
2.3 (referring to) 239.93 211.33 P
4 9 Q
4.97 (T) 297.3 211.33 P
2 10 Q
2.3 (. The exact type is implementation dependent and) 302.7 211.33 P
(determined by) 72 199.33 T
4 9 Q
(Allocator) 139.45 199.33 T
2 10 Q
(.) 188.05 199.33 T
4 9 Q
-0.42 (const_iterator) 72 180.33 P
2 10 Q
-0.19 ( is a constant bidirectional iterator referring to) 147.6 180.33 P
4 9 Q
-0.42 (const T) 351.84 180.33 P
2 10 Q
-0.19 (.) 389.22 180.33 P
-0.19 ( The exact type is implementation) 391.72 180.33 P
0.01 (dependent and determined by) 72 168.33 P
4 9 Q
0.03 (Allocator) 208.93 168.33 P
2 10 Q
0.01 (. It is guaranteed that there is a constructor for) 257.53 168.33 P
4 9 Q
0.03 (const_iterator) 464.4 168.33 P
2 10 Q
(out of) 72 156.33 T
4 9 Q
(iterator) 100.54 156.33 T
2 10 Q
(.) 143.74 156.33 T
4 9 Q
0.8 (size_type) 72 137.33 P
2 10 Q
0.37 ( is an unsigned integral type. The exact type is implementation dependent and determined by) 120.6 137.33 P
4 9 Q
(Allocator) 72 125.33 T
2 10 Q
(.) 120.6 125.33 T
4 9 Q
0.67 (difference_type) 72 106.33 P
2 10 Q
0.31 ( is a signed integral type. The exact type is implementation dependent and determined) 153 106.33 P
(by) 72 94.33 T
4 9 Q
(Allocator) 85.59 94.33 T
2 10 Q
(.) 134.19 94.33 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "27" 29
%%Page: "28" 30
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
72 18 540 63 R
7 X
0 0 0 1 0 0 0 K
V
2 10 Q
0 X
(28) 301 56.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
72 72 540 720 R
7 X
V
4 9 Q
0 X
-0.03 (insert) 72 713.33 P
2 10 Q
-0.01 ( does not affect the validity of iterators and references. Insertion of a single element into a list takes) 104.4 713.33 P
0.24 (constant time and exactly one call to the copy constructor of) 72 701.33 P
4 9 Q
0.52 (T) 341.77 701.33 P
2 10 Q
0.24 (. Insertion of multiple elements into a list is) 347.17 701.33 P
0.53 (linear in the number of elements inserted, and the number of calls to the copy constructor of) 72 689.33 P
4 9 Q
1.15 (T) 490.27 689.33 P
2 10 Q
0.53 ( is exactly) 495.67 689.33 P
(equal to the number of elements inserted.) 72 677.33 T
4 9 Q
1.97 (erase) 72 658.33 P
2 10 Q
0.91 ( invalidates only the iterators and references to the erased elements. Erasing a single element is a) 99 658.33 P
-0.18 (constant time operation with a single call to the destructor of) 72 646.33 P
4 9 Q
-0.4 (T) 340.93 646.33 P
2 10 Q
-0.18 (. Erasing a range in a list is linear time in the) 346.33 646.33 P
-0.11 (size of the range and the number of calls to the destructor of type) 72 634.33 P
4 9 Q
-0.24 (T) 360.69 634.33 P
2 10 Q
-0.11 ( is exactly equal to the size of the range.) 366.09 634.33 P
1.87 (Since lists allow fast insertion and erasing from the middle of a list, certain operations are provided) 72 615.33 P
(specifically for them:) 72 603.33 T
4 9 Q
(list) 72 584.33 T
2 10 Q
( provides three splice operations that destructively move elements from one list to another:) 93.6 584.33 T
4 9 Q
-0.14 (void splice\050iterator position, list<T, Allocator>& x\051) 72 565.33 P
2 10 Q
-0.06 ( inserts the contents of) 357.53 565.33 P
4 9 Q
-0.14 (x) 458.67 565.33 P
2 10 Q
-0.06 ( before) 464.08 565.33 P
4 9 Q
-0.14 (position) 496.8 565.33 P
2 10 Q
(and) 72 553.33 T
4 9 Q
(x) 91.43 553.33 T
2 10 Q
( becomes empty. It takes constant time. The result is undefined if) 96.83 553.33 T
4 9 Q
(&x == this) 385.95 553.33 T
2 10 Q
(.) 439.95 553.33 T
4 9 Q
-0.29 (void splice\050iterator position, list<T, Allocator>& x, iterator i\051) 72 534.33 P
2 10 Q
-0.14 ( inserts an element pointed) 420.96 534.33 P
0.79 (to by) 72 522.33 P
4 9 Q
1.71 (i) 98.39 522.33 P
2 10 Q
0.79 ( from list) 103.79 522.33 P
4 9 Q
1.71 (x) 148.55 522.33 P
2 10 Q
0.79 ( before) 153.95 522.33 P
4 9 Q
1.71 (position) 188.38 522.33 P
2 10 Q
0.79 ( and removes the element from) 231.58 522.33 P
4 9 Q
1.71 (x) 376.58 522.33 P
2 10 Q
0.79 (. It takes constant time.) 381.98 522.33 P
4 9 Q
1.71 (i) 490 522.33 P
2 10 Q
0.79 ( is a valid) 495.4 522.33 P
(dereferenceable iterator of) 72 510.33 T
4 9 Q
(x) 190.65 510.33 T
2 10 Q
(. The result is unchanged if) 196.05 510.33 T
4 9 Q
(position == i) 318.25 510.33 T
2 10 Q
( or) 388.45 510.33 T
4 9 Q
(position == ++i) 402.86 510.33 T
2 10 Q
(.) 483.86 510.33 T
4 9 Q
1.6 (void splice\050iterator position, list<T, Allocator>& x, iterator first,) 72 491.33 P
1.6 (iterator last\051) 462.8 491.33 P
2 10 Q
0.35 (inserts elements in the range) 72 479.33 P
4 9 Q
0.75 ([first, last\051) 202.61 479.33 P
2 10 Q
0.35 ( before) 273.56 479.33 P
4 9 Q
0.75 (position) 307.11 479.33 P
2 10 Q
0.35 ( and removes the elements from) 350.31 479.33 P
4 9 Q
0.75 (x) 496.92 479.33 P
2 10 Q
0.35 (. It takes) 502.32 479.33 P
-0.24 (constant time if) 72 467.33 P
4 9 Q
-0.52 (&x == this) 142.1 467.33 P
2 10 Q
-0.24 (; otherwise, it takes linear time.) 195.06 467.33 P
4 9 Q
-0.52 ([first, last\051) 333.86 467.33 P
2 10 Q
-0.24 ( is a valid range in) 403.54 467.33 P
4 9 Q
-0.52 (x) 485.66 467.33 P
2 10 Q
-0.24 (. The result) 491.06 467.33 P
(is undefined if) 72 455.33 T
4 9 Q
(position) 138.6 455.33 T
2 10 Q
( is an iterator in the range) 181.8 455.33 T
4 9 Q
([first, last\051) 297.57 455.33 T
2 10 Q
(.) 367.77 455.33 T
4 9 Q
1.03 (remove) 72 436.33 P
2 10 Q
0.48 ( erases all the elements in the list referred by the list iterator) 104.4 436.33 P
4 9 Q
1.03 (i) 376.65 436.33 P
2 10 Q
0.48 ( for which the following conditions) 382.05 436.33 P
-0.1 (hold:) 72 424.33 P
4 9 Q
-0.22 (*i == value) 97.2 424.33 P
2 10 Q
-0.1 (,) 156.15 424.33 P
4 9 Q
-0.22 (pred\050*i\051 == true) 161.05 424.33 P
2 10 Q
-0.1 (.) 247.01 424.33 P
4 9 Q
-0.22 (remove) 251.9 424.33 P
2 10 Q
-0.1 ( is stable, that is, the relative order of the elements that are) 284.3 424.33 P
1.51 (not removed is the same as their relative order in the original list. Exactly) 72 412.33 P
4 9 Q
3.25 (size\050\051) 418.95 412.33 P
2 10 Q
1.51 ( applications of the) 451.35 412.33 P
(corresponding predicate are done.) 72 400.33 T
4 9 Q
0.65 (unique) 72 381.33 P
2 10 Q
0.3 ( erases all but the first element from every consecutive group of equal elements in the list. Exactly) 104.4 381.33 P
4 9 Q
(size\050\051 - 1) 72 369.33 T
2 10 Q
( applications of the corresponding binary predicate are done.) 126 369.33 T
4 9 Q
-0.55 (merge) 72 350.33 P
2 10 Q
-0.25 ( merges the argument list into the list \050both are assumed to be sorted\051. The merge is stable, that is, for) 99 350.33 P
0.12 (equal elements in the two lists, the elements from the list always precede the elements from the argument) 72 338.33 P
(list.) 72 326.33 T
4 9 Q
(x) 90.32 326.33 T
2 10 Q
( is empty after the merge. At most) 95.72 326.33 T
4 9 Q
(size\050\051 + x.size\050\051 - 1) 248.77 326.33 T
2 10 Q
( comparisons are done.) 362.17 326.33 T
4 9 Q
(reverse) 72 307.33 T
2 10 Q
( reverses the order of the elements in the list. It is linear time.) 109.8 307.33 T
4 9 Q
0.14 (sort) 72 288.33 P
2 10 Q
0.07 ( sorts the list according to the) 93.6 288.33 P
4 9 Q
0.14 (operator<) 226.19 288.33 P
2 10 Q
0.07 ( or a compare function object. It is stable, that is, the relative) 274.79 288.33 P
0.2 (order of the equal elements is preserved. Approximately) 72 276.33 P
4 9 Q
0.43 (NlogN) 325.83 276.33 P
2 10 Q
0.2 ( comparisons are done where) 352.83 276.33 P
4 9 Q
0.43 (N) 486.3 276.33 P
2 10 Q
0.2 ( is equal to) 491.7 276.33 P
4 9 Q
(size\050\051) 72 264.33 T
2 10 Q
(.) 104.4 264.33 T
9 F
(8.1.3 Deque) 72 243.71 T
4 9 Q
1.29 (deque) 72 226.85 P
2 10 Q
0.6 ( is a kind of sequence that, like a vector, supports random access iterators. In addition, it supports) 99 226.85 P
0.41 (constant time insert and erase operations at the beginning or the end; insert and erase in the middle take) 72 214.85 P
(linear time. As with vectors, storage management is handled automatically.) 72 202.85 T
4 9 Q
(template <class T, template <class U> class Allocator = allocator>) 108 180.52 T
(class deque {) 108 169.52 T
(public:) 108 158.52 T
(// typedefs:) 108 136.52 T
(typedef iterator;) 144 114.52 T
(typedef const_iterator;) 144 103.52 T
(typedef Allocator<T>::pointer pointer;) 144 92.52 T
(typedef Allocator<T>::reference reference;) 144 81.52 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "28" 30
%%Page: "29" 31
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
72 18 540 63 R
7 X
0 0 0 1 0 0 0 K
V
2 10 Q
0 X
(29) 301 56.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
72 72 540 720 R
7 X
V
4 9 Q
0 X
(typedef Allocator<T>::const_reference const_reference;) 144 714 T
(typedef size_type;) 144 703 T
(typedef difference_type;) 144 692 T
(typedef T value_type;) 144 681 T
(typedef reverse_iterator;) 144 670 T
(typedef const_reverse_iterator;) 144 659 T
(// allocation/deallocation:) 108 637 T
(deque\050\051;) 144 615 T
(deque\050size_type n, const T& value = T\050\051\051;) 144 604 T
(deque\050const deque<T, Allocator>& x\051;) 144 593 T
(template <class InputIterator>) 144 582 T
(deque\050InputIterator first, InputIterator last\051;) 144 571 T
(~deque\050\051;) 144 560 T
(deque<T, Allocator>& operator=\050const deque<T, Allocator>& x\051;) 144 549 T
(void swap\050deque<T, Allocator>& x\051;) 144 538 T
(// accessors:) 108 516 T
(iterator begin\050\051;) 144 494 T
(const_iterator begin\050\051 const;) 144 483 T
(iterator end\050\051;) 144 472 T
(const_iterator end\050\051 const;) 144 461 T
(reverse_iterator rbegin\050\051;) 144 450 T
(const_reverse_iterator rbegin\050\051;) 144 439 T
(reverse_iterator rend\050\051;) 144 428 T
(const_reverse_iterator rend\050\051;) 144 417 T
(size_type size\050\051 const;) 144 406 T
(size_type max_size\050\051 const;) 144 395 T
(bool empty\050\051 const;) 144 384 T
(reference operator[]\050size_type n\051;) 144 373 T
(const_reference operator[]\050size_type n\051 const;) 144 362 T
(reference front\050\051;) 144 351 T
(const_reference front\050\051 const;) 144 340 T
(reference back\050\051;) 144 329 T
(const_reference back\050\051 const;) 144 318 T
(// insert/erase:) 108 296 T
(void push_front\050const T& x\051;) 144 274 T
(void push_back\050const T& x\051;) 144 263 T
(iterator insert\050iterator position, const T& x = T\050\051\051;) 144 252 T
(void insert \050iterator position, size_type n, const T& x\051;) 144 241 T
(template <class InputIterator>) 144 230 T
(void insert \050iterator position, InputIterator first, InputIterator last\051;) 144 219 T
(void pop_front\050\051;) 144 208 T
(void pop_back\050\051;) 144 197 T
(void erase\050iterator position\051;) 144 186 T
(void erase\050iterator first, iterator last\051;) 144 175 T
(};) 108 164 T
(template <class T, class Allocator>) 108 142 T
(bool operator==\050const deque<T, Allocator>& x, const deque<T, Allocator>& y\051;) 108 131 T
(template <class T, class Allocator>) 108 109 T
(bool operator<\050const deque<T, Allocator>& x, const deque<T, Allocator>& y\051;) 108 98 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "29" 31
%%Page: "30" 32
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
72 18 540 63 R
7 X
0 0 0 1 0 0 0 K
V
2 10 Q
0 X
(30) 301 56.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
72 72 540 720 R
7 X
V
4 9 Q
0 X
3.37 (iterator) 72 713.33 P
2 10 Q
1.56 ( is a random access iterator) 115.2 713.33 P
1.56 (referring to) 246.61 713.33 P
4 9 Q
3.37 (T) 302.49 713.33 P
2 10 Q
1.56 (. The exact type is implementation dependent and) 307.89 713.33 P
(determined by) 72 701.33 T
4 9 Q
(Allocator) 139.45 701.33 T
2 10 Q
(.) 188.05 701.33 T
4 9 Q
8.74 (const_iterator) 72 682.33 P
2 10 Q
4.05 ( is a constant random access iterator referring to) 147.6 682.33 P
4 9 Q
8.74 (const T) 398.62 682.33 P
2 10 Q
4.05 (.) 445.16 682.33 P
4.05 ( The exact type is) 447.66 682.33 P
0.37 (implementation dependent and determined by) 72 670.33 P
4 9 Q
0.8 (Allocator) 283.83 670.33 P
2 10 Q
0.37 (. It is guaranteed that there is a constructor for) 332.43 670.33 P
4 9 Q
(const_iterator) 72 658.33 T
2 10 Q
( out of) 147.6 658.33 T
4 9 Q
(iterator) 178.64 658.33 T
2 10 Q
(.) 221.84 658.33 T
4 9 Q
0.8 (size_type) 72 639.33 P
2 10 Q
0.37 ( is an unsigned integral type. The exact type is implementation dependent and determined by) 120.6 639.33 P
4 9 Q
(Allocator) 72 627.33 T
2 10 Q
(.) 120.6 627.33 T
4 9 Q
0.67 (difference_type) 72 608.33 P
2 10 Q
0.31 ( is a signed integral type. The exact type is implementation dependent and determined) 153 608.33 P
(by) 72 596.33 T
4 9 Q
(Allocator) 85.59 596.33 T
2 10 Q
(.) 134.19 596.33 T
4 9 Q
0 (insert) 72 577.33 P
2 10 Q
0 ( in the middle of a deque invalidates all the iterators and references to the deque.) 104.4 577.33 P
4 9 Q
0 (insert) 464.07 577.33 P
2 10 Q
0 ( and) 496.47 577.33 P
4 9 Q
0 (push) 518.4 577.33 P
2 10 Q
-0.05 (at either end of a deque invalidate all the iterators to the deque, but have no effect on the validity of all the) 72 565.33 P
0.41 (references to the deque. In the worst case, inserting a single element into a deque takes time linear in the) 72 553.33 P
0.08 (minimum of the distance from the insertion point to the beginning of the deque and the distance from the) 72 541.33 P
-0.11 (insertion point to the end of the deque. Inserting a single element either at the beginning or end of a deque) 72 529.33 P
-0.46 (always takes constant time and causes a single call to the copy constructor of) 72 517.33 P
4 9 Q
-0.98 (T) 406.94 517.33 P
2 10 Q
-0.46 (. That is, a deque is especially) 412.34 517.33 P
(optimized for pushing and popping elements at the beginning and end.) 72 505.33 T
4 9 Q
0.61 (erase) 72 486.33 P
2 10 Q
0.28 ( in the middle of a deque invalidates all the iterators and references to the deque.) 99 486.33 P
4 9 Q
0.61 (erase) 463.26 486.33 P
2 10 Q
0.28 ( and) 490.26 486.33 P
4 9 Q
0.61 (pop) 512.76 486.33 P
2 10 Q
0.28 ( at) 528.96 486.33 P
-0.03 (either end of a deque invalidate only the iterators and the references to the erased element. The number of) 72 474.33 P
1.02 (calls to the destructor is the same as the number of elements erased, but the number of the calls to the) 72 462.33 P
-0.46 (assignment operator is equal to the minimum of the number of elements before the erased elements and the) 72 450.33 P
(number of element after the erased elements.) 72 438.33 T
0 11 Q
(8.2 Associative containers) 72 414.98 T
2 10 Q
-0.01 (Associative containers provide an ability for fast retrieval of data based on keys. The library provides four) 72 397.91 P
(basic kinds of associative containers:) 72 385.91 T
4 9 Q
(set) 236.14 385.91 T
2 10 Q
(,) 252.34 385.91 T
4 9 Q
(multiset) 257.34 385.91 T
2 10 Q
(,) 300.54 385.91 T
4 9 Q
(map) 305.54 385.91 T
2 10 Q
( and) 321.74 385.91 T
4 9 Q
(multimap) 343.67 385.91 T
2 10 Q
(.) 386.87 385.91 T
0.6 (All of them are parameterized on) 72 366.91 P
4 9 Q
1.3 (Key) 225.1 366.91 P
2 10 Q
0.6 ( and an ordering relation) 241.3 366.91 P
4 9 Q
1.3 (Compare) 357.2 366.91 P
2 10 Q
0.6 ( that induces a total ordering on) 395 366.91 P
-0.54 (elements of) 72 354.91 P
4 9 Q
-1.16 (Key) 124.15 354.91 P
2 10 Q
-0.54 (. In addition,) 140.35 354.91 P
4 9 Q
-1.16 (map) 198.01 354.91 P
2 10 Q
-0.54 ( and) 214.21 354.91 P
4 9 Q
-1.16 (multimap) 235.07 354.91 P
2 10 Q
-0.54 ( associate an arbitrary type) 278.27 354.91 P
4 9 Q
-1.16 (T) 396.98 354.91 P
2 10 Q
-0.54 ( with the) 402.38 354.91 P
4 9 Q
-1.16 (Key) 442.47 354.91 P
2 10 Q
-0.54 (. The object of type) 458.67 354.91 P
4 9 Q
(Compare) 72 342.91 T
2 10 Q
( is called the) 109.8 342.91 T
5 F
( comparison object) 164.48 342.91 T
2 F
( of a container.) 238.91 342.91 T
1.33 (In this section when we talk about equality of keys we mean the equivalence relation imposed by the) 72 323.91 P
0.18 (comparison and) 72 311.91 P
5 F
0.18 (not) 146.4 311.91 P
2 F
0.18 ( the) 159.73 311.91 P
4 9 Q
0.38 (operator==) 178.95 311.91 P
2 10 Q
0.18 ( on keys. That is, two keys) 232.95 311.91 P
4 9 Q
0.38 (k1) 352.68 311.91 P
2 10 Q
0.18 ( and) 363.48 311.91 P
4 9 Q
0.38 (k2) 385.76 311.91 P
2 10 Q
0.18 ( are considered to be equal if for) 396.56 311.91 P
(the comparison object) 72 299.91 T
4 9 Q
(comp) 171.31 299.91 T
2 10 Q
(,) 192.91 299.91 T
4 9 Q
(comp\050k1, k2\051 == false && comp\050k2, k1\051 == false) 197.91 299.91 T
2 10 Q
(.) 446.31 299.91 T
-0.43 (An associative container supports) 72 280.91 P
5 F
-0.43 (unique keys) 222.43 280.91 P
2 F
-0.43 ( if it may contain at most one element for each key. Otherwise,) 269.69 280.91 P
(it supports) 72 268.91 T
5 F
(equal keys) 122.37 268.91 T
2 F
(.) 163.39 268.91 T
4 9 Q
(set) 168.39 268.91 T
2 10 Q
( and) 184.59 268.91 T
4 9 Q
(map) 206.52 268.91 T
2 10 Q
( support unique keys.) 222.72 268.91 T
4 9 Q
(multiset) 321.51 268.91 T
2 10 Q
( and) 364.71 268.91 T
4 9 Q
(multimap) 386.64 268.91 T
2 10 Q
( support equal keys.) 429.84 268.91 T
1.13 (For) 72 249.91 P
4 9 Q
2.43 (set) 90.6 249.91 P
2 10 Q
1.13 ( and) 106.8 249.91 P
4 9 Q
2.43 (multiset) 130.98 249.91 P
2 10 Q
1.13 ( the value type is the same as the key type. For) 174.18 249.91 P
4 9 Q
2.43 (map) 395.55 249.91 P
2 10 Q
1.13 ( and) 411.74 249.91 P
4 9 Q
2.43 (multimap) 435.93 249.91 P
2 10 Q
1.13 ( it is equal to) 479.13 249.91 P
4 9 Q
(pair<const Key, T>) 72 237.91 T
2 10 Q
(.) 169.2 237.91 T
4 9 Q
2 (iterator) 72 218.91 P
2 10 Q
0.93 ( of an associative container is of the bidirectional iterator category.) 115.2 218.91 P
4 9 Q
2 (insert) 420.74 218.91 P
2 10 Q
0.93 ( does not affect the) 453.14 218.91 P
-0.17 (validity of iterators and references to the container, and) 72 206.91 P
4 9 Q
-0.37 (erase) 318.17 206.91 P
2 10 Q
-0.17 ( invalidates only the iterators and references) 345.17 206.91 P
(to the erased elements.) 72 194.91 T
0.56 (In the following table,) 72 175.91 P
4 9 Q
1.2 (X) 173.97 175.91 P
2 10 Q
0.56 ( is an associative container class,) 179.37 175.91 P
4 9 Q
1.2 (a) 328.36 175.91 P
2 10 Q
0.56 ( is a value of) 333.76 175.91 P
4 9 Q
1.2 (X) 394.36 175.91 P
2 10 Q
0.56 (,) 399.76 175.91 P
4 9 Q
1.2 (a_uniq) 405.32 175.91 P
2 10 Q
0.56 ( is a value of) 437.72 175.91 P
4 9 Q
1.2 (X) 498.32 175.91 P
2 10 Q
0.56 ( when) 503.72 175.91 P
4 9 Q
1.2 (X) 534.6 175.91 P
2 10 Q
-0.34 (supports unique keys, and) 72 163.91 P
4 9 Q
-0.74 (a_eq) 190.59 163.91 P
2 10 Q
-0.34 ( is a value of) 212.19 163.91 P
4 9 Q
-0.74 (X) 268.31 163.91 P
2 10 Q
-0.34 ( when) 273.71 163.91 P
4 9 Q
-0.74 (X) 302.79 163.91 P
2 10 Q
-0.34 ( supports multiple keys,) 308.19 163.91 P
4 9 Q
-0.74 (i) 416.33 163.91 P
2 10 Q
-0.34 ( and) 421.73 163.91 P
4 9 Q
-0.74 (j) 442.97 163.91 P
2 10 Q
-0.34 ( satisfy input iterator) 448.37 163.91 P
0.16 (requirements and refer to elements of) 72 151.91 P
4 9 Q
0.35 (value_type) 241.61 151.91 P
2 10 Q
0.16 (,) 295.61 151.91 P
4 9 Q
0.35 ([i, j\051) 300.77 151.91 P
2 10 Q
0.16 ( is a valid range,) 333.52 151.91 P
4 9 Q
0.35 (p) 409.17 151.91 P
2 10 Q
0.16 ( is a valid iterator to) 414.57 151.91 P
4 9 Q
0.35 (a) 506.57 151.91 P
2 10 Q
0.16 (,) 511.97 151.91 P
4 9 Q
0.35 (q) 517.13 151.91 P
2 10 Q
0.16 ( is a) 522.53 151.91 P
-0.13 (dereferenceable iterator to) 72 139.91 P
4 9 Q
-0.27 (a) 190.2 139.91 P
2 10 Q
-0.13 (,) 195.6 139.91 P
4 9 Q
-0.27 ([q1, q2\051) 200.47 139.91 P
2 10 Q
-0.13 ( is a valid range in) 243.4 139.91 P
4 9 Q
-0.27 (a) 326.22 139.91 P
2 10 Q
-0.13 (,) 331.62 139.91 P
4 9 Q
-0.27 (t) 336.49 139.91 P
2 10 Q
-0.13 ( is a value of) 341.89 139.91 P
4 9 Q
-0.27 (X::value_type) 399.07 139.91 P
2 10 Q
-0.13 ( and) 469.27 139.91 P
4 9 Q
-0.27 (k) 490.95 139.91 P
2 10 Q
-0.13 ( is a value) 496.35 139.91 P
(of) 72 127.91 T
4 9 Q
(X::key_type) 83.29 127.91 T
2 10 Q
(.) 142.69 127.91 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "30" 32
%%Page: "31" 33
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
72 18 540 63 R
7 X
0 0 0 1 0 0 0 K
V
2 10 Q
0 X
(31) 301 56.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
72 72 540 720 R
7 X
V
6 12 Q
0 X
(T) 125.11 690 T
(able 12: Associative container r) 132.01 690 T
(equir) 292.44 690 T
(ements \050in addition to container\051) 319.56 690 T
3 10 Q
(expression) 101.01 659.33 T
(return type) 197.8 659.33 T
(assertion/note) 328.62 665.33 T
(pre/post-condition) 319.73 653.33 T
(complexity) 470.7 659.33 T
4 9 Q
(X::key_type) 78 632 T
(Key) 178.8 632 T
3 10 Q
(compile time) 452.4 631.33 T
4 9 Q
(X::key_compare) 78 612 T
(Compare) 178.8 612 T
3 10 Q
(defaults to) 272.4 611.33 T
4 9 Q
(less<key_type>.) 316.84 611.33 T
3 10 Q
(compile time) 452.4 611.33 T
4 9 Q
(X::value_compare) 78 592 T
3 10 Q
(a binary predicate) 178.8 591.33 T
(type) 178.8 579.33 T
-0.18 (is the same as) 272.4 591.33 P
4 9 Q
-0.4 (key_compare) 329.43 591.33 P
3 10 Q
-0.18 ( for) 388.83 591.33 P
4 9 Q
-0.4 (set) 405.13 591.33 P
3 10 Q
-0.18 ( and) 421.33 591.33 P
4 9 Q
(multiset) 272.4 579.33 T
3 10 Q
(;) 315.6 579.33 T
-0.46 (is an ordering relation on pairs induced by) 272.4 567.33 P
-0.2 (the \336rst component \050i.e.) 272.4 555.33 P
4 9 Q
-0.43 (Key) 369.37 555.33 P
3 10 Q
-0.2 (\051 for) 385.57 555.33 P
4 9 Q
-0.43 (map) 405.16 555.33 P
3 10 Q
-0.2 ( and) 421.36 555.33 P
4 9 Q
(multimap.) 272.4 543.33 T
3 10 Q
(compile time) 452.4 591.33 T
4 9 Q
(X\050c\051) 78 524 T
(X a\050c\051;) 78 513 T
3 10 Q
(constructs an empty container;) 272.4 523.33 T
(uses) 272.4 511.33 T
4 9 Q
(c) 292.12 511.33 T
3 10 Q
( as a comparison object.) 297.52 511.33 T
(constant) 452.4 523.33 T
4 9 Q
(X\050\051) 78 492 T
(X a;) 78 481 T
3 10 Q
(constructs an empty container;) 272.4 491.33 T
(uses) 272.4 479.33 T
4 9 Q
(Compare\050\051) 292.12 479.33 T
3 10 Q
( as a comparison object.) 340.72 479.33 T
(constant) 452.4 491.33 T
4 9 Q
(X\050i, j, c\051) 78 460 T
(X a\050i, j, c\051;) 78 449 T
3 10 Q
(constructs an empty container and inserts) 272.4 459.33 T
(elements from the range) 272.4 447.33 T
4 9 Q
([i, j\051) 371.82 447.33 T
3 10 Q
( into it;) 404.22 447.33 T
(uses) 272.4 435.33 T
4 9 Q
(c) 292.12 435.33 T
3 10 Q
( as a comparison object.) 297.52 435.33 T
4 9 Q
(NlogN) 452.4 459.33 T
3 10 Q
( in general) 479.4 459.33 T
(\050) 452.4 447.33 T
4 9 Q
(N) 455.73 447.33 T
3 10 Q
( is the distance) 461.13 447.33 T
(from) 452.4 435.33 T
4 9 Q
(i) 474.34 435.33 T
3 10 Q
( to) 479.74 435.33 T
4 9 Q
(j) 492.52 435.33 T
3 10 Q
(\051;) 497.92 435.33 T
(linear if) 452.4 423.33 T
4 9 Q
([i, j\051) 486.28 423.33 T
3 10 Q
( is) 518.68 423.33 T
(sorted with) 452.4 411.33 T
4 9 Q
(value_comp\050\051) 452.4 399.33 T
(X\050i, j\051) 78 380 T
(X a\050i, j\051;) 78 369 T
3 10 Q
(same as above, but uses) 272.4 379.33 T
4 9 Q
(Compare\050\051) 370.16 379.33 T
3 10 Q
( as a) 418.76 379.33 T
(comparison object.) 272.4 367.33 T
(same as above) 452.4 379.33 T
4 9 Q
(a.key_comp\050\051) 78 348 T
(X::key_compare) 178.8 348 T
3 10 Q
(returns the comparison object out of) 272.4 347.33 T
(which) 272.4 335.33 T
4 9 Q
(a) 299.34 335.33 T
3 10 Q
( was constructed.) 304.74 335.33 T
(constant) 452.4 347.33 T
4 9 Q
(a.value_comp\050\051) 78 316 T
(X::value_compar) 178.8 316 T
(e) 178.8 305 T
3 10 Q
(returns an object of) 272.4 315.33 T
4 9 Q
(value_compare) 352.38 315.33 T
3 10 Q
(constructed out of the comparison object.) 272.4 303.33 T
(constant) 452.4 315.33 T
4 9 Q
(a_uniq.insert\050t\051) 78 284 T
(pair<iterator,) 178.8 283.33 T
(bool>) 178.8 271.33 T
3 10 Q
-0.13 (inserts) 272.4 283.33 P
4 9 Q
-0.27 (t) 300.88 283.33 P
3 10 Q
-0.13 ( if and only if there is no element) 306.28 283.33 P
0 (in the container with key equal to the key) 272.4 271.33 P
-0.46 (of) 272.4 259.33 P
4 9 Q
-1 (t) 282.77 259.33 P
3 10 Q
-0.46 (. The) 288.17 259.33 P
4 9 Q
-1 (bool) 310.3 259.33 P
3 10 Q
-0.46 ( component of the returned) 331.9 259.33 P
(pair indicates whether the insertion takes) 272.4 247.33 T
(place and the) 272.4 235.33 T
4 9 Q
(iterator) 327.66 235.33 T
3 10 Q
( component of) 370.86 235.33 T
(the pair points to the element with key) 272.4 223.33 T
(equal to the key of) 272.4 211.33 T
4 9 Q
(t) 349.33 211.33 T
3 10 Q
(.) 354.73 211.33 T
(logarithmic) 452.4 283.33 T
4 9 Q
(a_eq.insert\050t\051) 78 192 T
(iterator) 178.8 191.33 T
3 10 Q
(inserts) 272.4 191.33 T
4 9 Q
(t) 301.01 191.33 T
3 10 Q
( and returns the iterator pointing) 306.41 191.33 T
(to the newly inserted element.) 272.4 179.33 T
(logarithmic) 452.4 191.33 T
72 679.75 72 172.25 2 L
V
0.5 H
0 Z
N
172.8 680.25 172.8 171.75 2 L
V
N
266.4 680.25 266.4 171.75 2 L
V
N
446.4 680.25 446.4 171.75 2 L
V
N
540 679.75 540 172.25 2 L
V
N
71.75 680 540.25 680 2 L
V
N
72.25 645.25 539.75 645.25 2 L
V
N
72.25 642.75 539.75 642.75 2 L
V
N
71.75 624 540.25 624 2 L
V
N
71.75 604 540.25 604 2 L
V
N
71.75 536 540.25 536 2 L
V
N
71.75 504 540.25 504 2 L
V
N
71.75 472 540.25 472 2 L
V
N
71.75 392 540.25 392 2 L
V
N
71.75 360 540.25 360 2 L
V
N
71.75 328 540.25 328 2 L
V
N
71.75 296 540.25 296 2 L
V
N
71.75 204 540.25 204 2 L
V
N
71.75 172 540.25 172 2 L
V
N
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "31" 33
%%Page: "32" 34
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
72 18 540 63 R
7 X
0 0 0 1 0 0 0 K
V
2 10 Q
0 X
(32) 301 56.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
72 72 540 720 R
7 X
V
0 X
0.36 (The fundamental property of iterators of associative containers is that they iterate through the containers) 72 105.33 P
-0.03 (in the non-descending order of keys where non-descending is defined by the comparison that was used to) 72 93.33 P
(construct them. For any two dereferenceable iterators) 72 81.33 T
4 9 Q
(i) 310.61 81.33 T
2 10 Q
( and) 316.01 81.33 T
4 9 Q
(j) 337.94 81.33 T
2 10 Q
( such that distance from) 343.34 81.33 T
4 9 Q
(i) 451.85 81.33 T
2 10 Q
( to) 457.25 81.33 T
4 9 Q
(j) 470.97 81.33 T
2 10 Q
( is positive,) 476.37 81.33 T
4 9 Q
(a.insert\050p, t\051) 78 654 T
(iterator) 178.8 654 T
3 10 Q
-0.13 (inserts) 272.4 653.33 P
4 9 Q
-0.27 (t) 300.88 653.33 P
3 10 Q
-0.13 ( if and only if there is no element) 306.28 653.33 P
(with key equal to the key of) 272.4 641.33 T
4 9 Q
(t) 386.55 641.33 T
3 10 Q
( in contain-) 391.95 641.33 T
(ers with unique keys; always inserts) 272.4 629.33 T
4 9 Q
(t) 419.05 629.33 T
3 10 Q
( in) 424.45 629.33 T
(containers with equal keys.) 272.4 617.33 T
(always returns the iterator pointing to the) 272.4 605.33 T
(element with key equal to the key of) 272.4 593.33 T
4 9 Q
(t) 420.71 593.33 T
3 10 Q
(.) 426.11 593.33 T
(iterator) 272.4 581.33 T
4 9 Q
(p) 303.78 581.33 T
3 10 Q
( is a hint pointing to where the) 309.18 581.33 T
(insert should start to search.) 272.4 569.33 T
(logarithmic in gen-) 452.4 653.33 T
(eral, but amortized) 452.4 641.33 T
(constant if) 452.4 629.33 T
4 9 Q
(t) 496.84 629.33 T
3 10 Q
( is) 502.24 629.33 T
(inserted right) 452.4 617.33 T
(before) 452.4 605.33 T
4 9 Q
(p) 480.44 605.33 T
3 10 Q
(.) 485.84 605.33 T
4 9 Q
(a.insert\050i, j\051) 78 550 T
3 10 Q
(result is not used) 178.8 549.33 T
(inserts the elements from the range) 272.4 549.33 T
4 9 Q
([i,) 415.15 549.33 T
(j\051) 272.4 537.33 T
3 10 Q
( into the container) 283.2 537.33 T
(.) 355.14 537.33 T
4 9 Q
(Nlog\050size\050\051+N\051) 452.4 549.33 T
3 10 Q
(\050) 452.4 537.33 T
4 9 Q
(N) 455.73 537.33 T
3 10 Q
( is the distance) 461.13 537.33 T
(from) 452.4 525.33 T
4 9 Q
(i) 474.34 525.33 T
3 10 Q
( to) 479.74 525.33 T
4 9 Q
(j) 492.52 525.33 T
3 10 Q
(\051 in gen-) 497.92 525.33 T
(eral; linear if) 452.4 513.33 T
4 9 Q
([i,) 506.55 513.33 T
(j\051) 452.4 501.33 T
3 10 Q
( is sorted accord-) 463.2 501.33 T
(ing to) 452.4 489.33 T
4 9 Q
(value_comp\050\051) 452.4 477.33 T
(a.erase\050k\051) 78 458 T
(size_type) 178.8 458 T
3 10 Q
(erases all the elements in the container) 272.4 457.33 T
(with key equal to) 272.4 445.33 T
4 9 Q
(k) 344.06 445.33 T
3 10 Q
(.) 349.46 445.33 T
(returns the number of erased elements.) 272.4 433.33 T
4 9 Q
(log\050size\050\051\051 +) 452.4 458 T
(count\050k\051) 452.4 447 T
(a.erase\050q\051) 78 414 T
3 10 Q
(result is not used) 178.8 414 T
(erases the element pointed to by) 272.4 413.33 T
4 9 Q
(q) 403.49 413.33 T
3 10 Q
(.) 408.89 413.33 T
(amortized constant) 452.4 413.33 T
4 9 Q
(a.erase\050q1, q2\051) 78 394 T
3 10 Q
(result is not used) 178.8 394 T
-0.1 (erases all the elements in the range) 272.4 393.33 P
4 9 Q
-0.22 ([q1,) 413.61 393.33 P
(q2\051) 272.4 381.33 T
3 10 Q
(.) 288.6 381.33 T
4 9 Q
(log\050size\050\051\051+ N) 452.4 393.33 T
3 10 Q
(where) 452.4 381.33 T
4 9 Q
(N) 479.33 381.33 T
3 10 Q
( is the dis-) 484.73 381.33 T
-0.2 (tance from) 452.4 369.33 P
4 9 Q
-0.44 (q1) 497.53 369.33 P
3 10 Q
-0.2 ( to) 508.33 369.33 P
4 9 Q
-0.44 (q2) 520.7 369.33 P
3 10 Q
-0.2 (.) 531.5 369.33 P
4 9 Q
(a.find\050k\051) 78 350 T
(iterator;) 178.8 350 T
(const_iterator) 178.8 338.33 T
3 10 Q
(for constant) 178.8 326.33 T
4 9 Q
(a) 228.79 326.33 T
3 10 Q
(returns an iterator pointing to an element) 272.4 349.33 T
(with the key equal to) 272.4 337.33 T
4 9 Q
(k) 358.78 337.33 T
3 10 Q
(, or) 364.18 337.33 T
4 9 Q
(a.end\050\051) 380.01 337.33 T
3 10 Q
( if) 417.81 337.33 T
(such an element is not found.) 272.4 325.33 T
(logarithmic) 452.4 349.33 T
4 9 Q
(a.count\050k\051) 78 306 T
(size_type) 178.8 306 T
3 10 Q
(returns the number of elements with key) 272.4 305.33 T
(equal to) 272.4 293.33 T
4 9 Q
(k) 306.84 293.33 T
3 10 Q
(.) 312.24 293.33 T
4 9 Q
(log\050size\050\051\051+) 452.4 306 T
(count\050k\051) 452.4 295 T
(a.lower_bound\050k\051) 78 274 T
(iterator;) 178.8 274 T
(const_iterator) 178.8 262.33 T
3 10 Q
(for constant) 178.8 250.33 T
4 9 Q
(a) 228.79 250.33 T
3 10 Q
(returns an iterator pointing to the \336rst ele-) 272.4 273.33 T
(ment with key not less than) 272.4 261.33 T
4 9 Q
(k) 384.62 261.33 T
3 10 Q
(.) 390.02 261.33 T
(logarithmic) 452.4 273.33 T
4 9 Q
(a.upper_bound\050k\051) 78 231 T
3 10 Q
(iterator;) 178.8 230.33 T
4 9 Q
(const_iterator) 178.8 218.33 T
3 10 Q
(for constant) 178.8 206.33 T
4 9 Q
(a) 228.79 206.33 T
3 10 Q
(returns an iterator pointing to the \336rst ele-) 272.4 230.33 T
(ment with key greater than) 272.4 218.33 T
4 9 Q
(k) 382.1 218.33 T
3 10 Q
(.) 387.5 218.33 T
(logarithmic) 452.4 230.33 T
4 9 Q
(a.equal_range\050k\051) 78 187 T
(pair<iterator,) 178.8 187 T
(iterator>;) 178.8 176 T
(pair<const_iter) 178.8 165 T
(ator,) 178.8 154 T
(const_iterator>) 178.8 143 T
3 10 Q
(for constant) 178.8 131.33 T
4 9 Q
(a) 228.79 131.33 T
3 10 Q
(equivalent to) 272.4 186.33 T
4 9 Q
(make_pair\050a.lower_bound\050k\051,) 272.4 174.33 T
(a.upper_bound\050k\051\051) 272.4 162.33 T
3 10 Q
(.) 364.2 162.33 T
(logarithmic) 452.4 186.33 T
6 12 Q
(T) 125.11 712 T
(able 12: Associative container r) 132.01 712 T
(equir) 292.44 712 T
(ements \050in addition to container\051) 319.56 712 T
3 10 Q
(expression) 101.01 681.33 T
(return type) 197.8 681.33 T
(assertion/note) 328.62 687.33 T
(pre/post-condition) 319.73 675.33 T
(complexity) 470.7 681.33 T
72 701.75 72 124.25 2 L
V
0.5 H
0 Z
N
172.8 702.25 172.8 123.75 2 L
V
N
266.4 702.25 266.4 123.75 2 L
V
N
446.4 702.25 446.4 123.75 2 L
V
N
540 701.75 540 124.25 2 L
V
N
71.75 702 540.25 702 2 L
V
N
72.25 667.25 539.75 667.25 2 L
V
N
72.25 664.75 539.75 664.75 2 L
V
N
71.75 562 540.25 562 2 L
V
N
71.75 470 540.25 470 2 L
V
N
71.75 426 540.25 426 2 L
V
N
71.75 406 540.25 406 2 L
V
N
71.75 362 540.25 362 2 L
V
N
71.75 318 540.25 318 2 L
V
N
71.75 286 540.25 286 2 L
V
N
71.75 243 540.25 243 2 L
V
N
71.75 199 540.25 199 2 L
V
N
71.75 124 540.25 124 2 L
V
N
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "32" 34
%%Page: "33" 35
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
72 18 540 63 R
7 X
0 0 0 1 0 0 0 K
V
2 10 Q
0 X
(33) 301 56.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
72 72 540 720 R
7 X
V
4 9 Q
0 X
(value_comp\050*j, *i\051 == false) 108 703 T
2 10 Q
(For associative containers with unique keys the stronger condition holds,) 72 684.33 T
4 9 Q
(value_comp\050*i, *j\051 == true.) 108 662 T
9 10 Q
(8.2.1 Set) 72 641.71 T
4 9 Q
1.13 (set) 72 624.85 P
2 10 Q
0.52 ( is a kind of associative container that supports unique keys \050contains at most one of each key value\051) 88.2 624.85 P
(and provides for fast retrieval of the keys themselves.) 72 612.85 T
4 9 Q
(template <class Key, class Compare = less<Key>,) 108 590.52 T
(template <class U> class Allocator = allocator>) 180 579.52 T
(class set {) 108 568.52 T
(public:) 108 557.52 T
(// typedefs:) 108 535.52 T
(typedef Key key_type;) 144 513.52 T
(typedef Key value_type;) 144 502.52 T
(typedef Allocator<Key>::pointer pointer;) 144 491.52 T
(typedef Allocator<Key>::reference reference;) 144 480.52 T
(typedef Allocator<Key>::const_reference const_reference;) 144 469.52 T
(typedef Compare key_compare;) 144 458.52 T
(typedef Compare value_compare;) 144 447.52 T
(typedef iterator;) 144 436.52 T
(typedef iterator const_iterator;) 144 425.52 T
(typedef size_type;) 144 414.52 T
(typedef difference_type;) 144 403.52 T
(typedef reverse_iterator;) 144 392.52 T
(typedef const_reverse_iterator;) 144 381.52 T
(// allocation/deallocation:) 108 359.52 T
(set\050const Compare& comp = Compare\050\051\051;) 144 337.52 T
(template <class InputIterator>) 144 326.52 T
(set\050InputIterator first, InputIterator last,) 144 315.52 T
(const Compare& comp = Compare\050\051\051;) 180 304.52 T
(set\050const set<Key, Compare, Allocator>& x\051;) 144 293.52 T
(~set\050\051;) 144 282.52 T
(set<Key, Compare, Allocator>& operator=\050const set<Key, Compare,) 144 271.52 T
(Allocator>& x\051;) 180 260.52 T
(void swap\050set<Key, Compare, Allocator>& x\051;) 144 249.52 T
(// accessors:) 108 227.52 T
(key_compare key_comp\050\051 const;) 144 205.52 T
(value_compare value_comp\050\051 const;) 144 194.52 T
(iterator begin\050\051 const;) 144 183.52 T
(iterator end\050\051 const;) 144 172.52 T
(reverse_iterator rbegin\050\051 const;) 144 161.52 T
(reverse_iterator rend\050\051 const;) 144 150.52 T
(bool empty\050\051 const;) 144 139.52 T
(size_type size\050\051 const;) 144 128.52 T
(size_type max_size\050\051 const;) 144 117.52 T
(// insert/erase:) 108 95.52 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "33" 35
%%Page: "34" 36
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
72 18 540 63 R
7 X
0 0 0 1 0 0 0 K
V
2 10 Q
0 X
(34) 301 56.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
72 72 540 720 R
7 X
V
4 9 Q
0 X
(pair<iterator, bool> insert\050const value_type& x\051;) 144 714 T
(iterator insert\050iterator position, const value_type& x\051;) 144 703 T
(template <class InputIterator>) 144 692 T
(void insert\050InputIterator first, InputIterator last\051;) 144 681 T
(void erase\050iterator position\051;) 144 670 T
(size_type erase\050const key_type& x\051;) 144 659 T
(void erase\050iterator first, iterator last\051;) 144 648 T
(// set operations:) 108 626 T
(iterator find\050const key_type& x\051 const;) 144 604 T
(size_type count\050const key_type& x\051 const;) 144 593 T
(iterator lower_bound\050const key_type& x\051 const;) 144 582 T
(iterator upper_bound\050const key_type& x\051 const;) 144 571 T
(pair<iterator, iterator> equal_range\050const key_type& x\051 const;) 144 560 T
(};) 108 549 T
(template <class Key, class Compare, class Allocator>) 108 527 T
(bool operator==\050const set<Key, Compare, Allocator>& x,) 108 516 T
(const set<Key, Compare, Allocator>& y\051;) 180 505 T
(template <class Key, class Compare, class Allocator>) 108 483 T
(bool operator<\050const set<Key, Compare, Allocator>& x,) 108 472 T
(const set<Key, Compare, Allocator>& y\051;) 180 461 T
8.23 (iterator) 72 442.33 P
2 10 Q
3.81 ( is a constant bidirectional iterator referring to) 115.2 442.33 P
4 9 Q
8.23 (const value_type) 351.48 442.33 P
2 10 Q
3.81 (. The exact type is) 446.1 442.33 P
(implementation dependent and determined by) 72 430.33 T
4 9 Q
(Allocator.) 281.98 430.33 T
(const_iterator) 72 411.33 T
2 10 Q
( is the same type as) 147.6 411.33 T
4 9 Q
(iterator) 235.34 411.33 T
2 10 Q
(.) 278.54 411.33 T
4 9 Q
0.8 (size_type) 72 392.33 P
2 10 Q
0.37 ( is an unsigned integral type. The exact type is implementation dependent and determined by) 120.6 392.33 P
4 9 Q
(Allocator) 72 380.33 T
2 10 Q
(.) 120.6 380.33 T
4 9 Q
0.67 (difference_type) 72 361.33 P
2 10 Q
0.31 ( is a signed integral type. The exact type is implementation dependent and determined) 153 361.33 P
(by) 72 349.33 T
4 9 Q
(Allocator) 85.59 349.33 T
2 10 Q
(.) 134.19 349.33 T
9 F
(8.2.2 Multiset) 72 328.71 T
4 9 Q
0.6 (multiset) 72 311.85 P
2 10 Q
0.28 ( is a kind of associative container that supports equal keys \050possibly contains multiple copies of) 115.2 311.85 P
(the same key value\051 and provides for fast retrieval of the keys themselves.) 72 299.85 T
4 9 Q
(template <class Key, class Compare = less<Key>,) 108 277.52 T
(template <class U> class Allocator = allocator>) 180 266.52 T
(class multiset {) 108 255.52 T
(public:) 108 244.52 T
(// typedefs:) 108 222.52 T
(typedef Key key_type;) 144 200.52 T
(typedef Key value_type;) 144 189.52 T
(typedef Allocator<Key>::pointer pointer;) 144 178.52 T
(typedef Allocator<Key>::reference reference;) 144 167.52 T
(typedef Allocator<Key>::const_reference const_reference;) 144 156.52 T
(typedef Compare key_compare;) 144 145.52 T
(typedef Compare value_compare;) 144 134.52 T
(typedef iterator;) 144 123.52 T
(typedef iterator const_iterator;) 144 112.52 T
(typedef size_type;) 144 101.52 T
(typedef difference_type;) 144 90.52 T
(typedef reverse_iterator;) 144 79.52 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "34" 36
%%Page: "35" 37
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
72 18 540 63 R
7 X
0 0 0 1 0 0 0 K
V
2 10 Q
0 X
(35) 301 56.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
72 72 540 720 R
7 X
V
4 9 Q
0 X
(typedef const_reverse_iterator;) 144 714 T
(// allocation/deallocation:) 108 692 T
(multiset\050const Compare& comp = Compare\050\051\051;) 144 670 T
(template <class InputIterator>) 144 659 T
(multiset\050InputIterator first, InputIterator last,) 144 648 T
(const Compare& comp = Compare\050\051\051;) 180 637 T
(multiset\050const multiset<Key, Compare, Allocator>& x\051;) 144 626 T
(~multiset\050\051;) 144 615 T
-0.6 (multiset<Key, Compare, Allocator>& operator=\050const multiset<Key, Compare,) 144 604 P
(Allocator>& x\051;) 180 593 T
(void swap\050multiset<Key, Compare, Allocator>& x\051;) 144 582 T
(// accessors:) 108 560 T
(key_compare key_comp\050\051 const;) 144 538 T
(value_compare value_comp\050\051 const;) 144 527 T
(iterator begin\050\051 const;) 144 516 T
(iterator end\050\051 const;) 144 505 T
(reverse_iterator rbegin\050\051;) 144 494 T
(reverse_iterator rend\050\051;) 144 483 T
(bool empty\050\051 const;) 144 472 T
(size_type size\050\051 const;) 144 461 T
(size_type max_size\050\051 const;) 144 450 T
(// insert/erase:) 108 428 T
(iterator insert\050const value_type& x\051;) 144 406 T
(iterator insert\050iterator position, const value_type& x\051;) 144 395 T
(template <class InputIterator>) 144 384 T
(void insert\050InputIterator first, InputIterator last\051;) 144 373 T
(void erase\050iterator position\051;) 144 362 T
(size_type erase\050const key_type& x\051;) 144 351 T
(void erase\050iterator first, iterator last\051;) 144 340 T
(// multiset operations:) 108 318 T
(iterator find\050const key_type& x\051 const;) 144 296 T
(size_type count\050const key_type& x\051 const;) 144 285 T
(iterator lower_bound\050const key_type& x\051 const;) 144 274 T
(iterator upper_bound\050const key_type& x\051 const;) 144 263 T
(pair<iterator, iterator> equal_range\050const key_type& x\051 const;) 144 252 T
(};) 108 241 T
(template <class Key, class Compare, class Allocator>) 108 219 T
(bool operator==\050const multiset<Key, Compare, Allocator>& x,) 108 208 T
(const multiset<Key, Compare, Allocator>& y\051;) 180 197 T
(template <class Key, class Compare, class Allocator>) 108 175 T
(bool operator<\050const multiset<Key, Compare, Allocator>& x,) 108 164 T
(const multiset<Key, Compare, Allocator>& y\051;) 180 153 T
8.23 (iterator) 72 134.33 P
2 10 Q
3.81 ( is a constant bidirectional iterator referring to) 115.2 134.33 P
4 9 Q
8.23 (const value_type) 351.48 134.33 P
2 10 Q
3.81 (. The exact type is) 446.1 134.33 P
(implementation dependent and determined by) 72 122.33 T
4 9 Q
(Allocator.) 281.98 122.33 T
(const_iterator) 72 103.33 T
2 10 Q
( is the same type as) 147.6 103.33 T
4 9 Q
(iterator) 235.34 103.33 T
2 10 Q
(.) 278.54 103.33 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "35" 37
%%Page: "36" 38
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
72 18 540 63 R
7 X
0 0 0 1 0 0 0 K
V
2 10 Q
0 X
(36) 301 56.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
72 72 540 720 R
7 X
V
4 9 Q
0 X
0.8 (size_type) 72 713.33 P
2 10 Q
0.37 ( is an unsigned integral type. The exact type is implementation dependent and determined by) 120.6 713.33 P
4 9 Q
(Allocator) 72 701.33 T
2 10 Q
(.) 120.6 701.33 T
4 9 Q
0.67 (difference_type) 72 682.33 P
2 10 Q
0.31 ( is a signed integral type. The exact type is implementation dependent and determined) 153 682.33 P
(by) 72 670.33 T
4 9 Q
(Allocator) 85.59 670.33 T
2 10 Q
(.) 134.19 670.33 T
9 F
(8.2.3 Map) 72 649.71 T
4 9 Q
1.13 (map) 72 632.85 P
2 10 Q
0.52 ( is a kind of associative container that supports unique keys \050contains at most one of each key value\051) 88.2 632.85 P
(and provides for fast retrieval of values of another type) 72 620.85 T
4 9 Q
(T) 318.75 620.85 T
2 10 Q
( based on the keys.) 324.15 620.85 T
4 9 Q
(template <class Key, class T, class Compare = less<Key>,) 108 598.52 T
(template <class U> class Allocator = allocator>) 180 587.52 T
(class map {) 108 576.52 T
(public:) 108 565.52 T
(// typedefs:) 108 543.52 T
(typedef Key key_type;) 144 521.52 T
(typedef pair<const Key, T> value_type;) 144 510.52 T
(typedef Compare key_compare;) 144 499.52 T
(class value_compare) 144 488.52 T
(: public binary_function<) 180 477.52 T
(value_type, value_type, bool> {) 315 477.52 T
(friend class map;) 144 466.52 T
(protected:) 144 455.52 T
(Compare comp;) 180 444.52 T
(value_compare\050Compare c\051 : comp\050c\051 {}) 180 433.52 T
(public:) 144 422.52 T
(bool operator\050\051\050const value_type& x, const value_type& y\051 {) 180 411.52 T
(return comp\050x.first, y.first\051;) 216 400.52 T
(}) 180 389.52 T
(};) 144 378.52 T
(typedef iterator;) 144 367.52 T
(typedef const_iterator;) 144 356.52 T
(typedef Allocator<value_type>::pointer pointer;) 144 345.52 T
(typedef Allocator<value_type>::reference reference;) 144 334.52 T
(typedef Allocator<value_type>::const_reference const_reference;) 144 323.52 T
(typedef size_type;) 144 312.52 T
(typedef difference_type;) 144 301.52 T
(typedef reverse_iterator;) 144 290.52 T
(typedef const_reverse_iterator;) 144 279.52 T
(// allocation/deallocation:) 108 257.52 T
(map\050const Compare& comp = Compare\050\051\051;) 144 235.52 T
(template <class InputIterator>) 144 224.52 T
(map\050InputIterator first, InputIterator last,) 144 213.52 T
(const Compare& comp = Compare\050\051\051;) 180 202.52 T
(map\050const map<Key, T, Compare, Allocator>& x\051;) 144 191.52 T
(~map\050\051;) 144 180.52 T
(map<Key, T, Compare, Allocator>&) 144 169.52 T
(operator=\050const map<Key, T, Compare, Allocator>& x\051;) 180 158.52 T
(void swap\050map<Key, T, Compare, Allocator>& x\051;) 144 147.52 T
(// accessors:) 108 125.52 T
(key_compare key_comp\050\051 const;) 144 103.52 T
(value_compare value_comp\050\051 const;) 144 92.52 T
(iterator begin\050\051;) 144 81.52 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "36" 38
%%Page: "37" 39
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
72 18 540 63 R
7 X
0 0 0 1 0 0 0 K
V
2 10 Q
0 X
(37) 301 56.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
72 72 540 720 R
7 X
V
4 9 Q
0 X
(const_iterator begin\050\051 const;) 144 714 T
(iterator end\050\051;) 144 703 T
(const_iterator end\050\051 const;) 144 692 T
(reverse_iterator rbegin\050\051;) 144 681 T
(const_reverse_iterator rbegin\050\051;) 144 670 T
(reverse_iterator rend\050\051;) 144 659 T
(const_reverse_iterator rend\050\051;) 144 648 T
(bool empty\050\051 const;) 144 637 T
(size_type size\050\051 const;) 144 626 T
(size_type max_size\050\051 const;) 144 615 T
(Allocator<T>::reference operator[]\050const key_type& x\051;) 144 604 T
(// insert/erase:) 108 582 T
(pair<iterator, bool> insert\050const value_type& x\051;) 144 560 T
(iterator insert\050iterator position, const value_type& x\051;) 144 549 T
(template <class InputIterator>) 144 538 T
(void insert\050InputIterator first, InputIterator last\051;) 144 527 T
(void erase\050iterator position\051;) 144 516 T
(size_type erase\050const key_type& x\051;) 144 505 T
(void erase\050iterator first, iterator last\051;) 144 494 T
(// map operations:) 108 472 T
(iterator find\050const key_type& x\051;) 144 450 T
(const_iterator find\050const key_type& x\051 const;) 144 439 T
(size_type count\050const key_type& x\051 const;) 144 428 T
(iterator lower_bound\050const key_type& x\051;) 144 417 T
(const_iterator lower_bound\050const key_type& x\051 const;) 144 406 T
(iterator upper_bound\050const key_type& x\051;) 144 395 T
(const_iterator upper_bound\050const key_type& x\051 const;) 144 384 T
(pair<iterator, iterator> equal_range\050const key_type& x\051;) 144 373 T
-0.72 (pair<const_iterator, const_iterator> equal_range\050const key_type& x\051 const;) 144 362 P
(};) 108 351 T
(template <class Key, class T, class Compare, class Allocator>) 108 329 T
(bool operator==\050const map<Key, T, Compare, Allocator>& x,) 108 318 T
(const map<Key, T, Compare, Allocator>& y\051;) 180 307 T
(template <class Key, class T, class Compare, class Allocator>) 108 285 T
(bool operator<\050const map<Key, T, Compare, Allocator>& x,) 108 274 T
(const map<Key, T, Compare, Allocator>& y\051;) 180 263 T
0.5 (iterator) 72 244.33 P
2 10 Q
0.23 ( is a bidirectional iterator referring to) 115.2 244.33 P
4 9 Q
0.5 (value_type) 282.84 244.33 P
2 10 Q
0.23 (. The exact type is implementation dependent) 336.84 244.33 P
(and determined by) 72 232.33 T
4 9 Q
(Allocator.) 158.88 232.33 T
3.29 (const_iterator) 72 213.33 P
2 10 Q
1.52 ( is a constant bidirectional iterator referring to) 147.6 213.33 P
4 9 Q
3.29 (const value_type) 365.57 213.33 P
2 10 Q
1.52 (. The exact type is) 455.26 213.33 P
0.37 (implementation dependent and determined by) 72 201.33 P
4 9 Q
0.8 (Allocator) 283.83 201.33 P
2 10 Q
0.37 (. It is guaranteed that there is a constructor for) 332.43 201.33 P
4 9 Q
(const_iterator) 72 189.33 T
2 10 Q
( out of) 147.6 189.33 T
4 9 Q
(iterator) 178.64 189.33 T
2 10 Q
(.) 221.84 189.33 T
4 9 Q
0.8 (size_type) 72 170.33 P
2 10 Q
0.37 ( is an unsigned integral type. The exact type is implementation dependent and determined by) 120.6 170.33 P
4 9 Q
(Allocator) 72 158.33 T
2 10 Q
(.) 120.6 158.33 T
4 9 Q
0.67 (difference_type) 72 139.33 P
2 10 Q
0.31 ( is a signed integral type. The exact type is implementation dependent and determined) 153 139.33 P
(by) 72 127.33 T
4 9 Q
(Allocator) 85.59 127.33 T
2 10 Q
(.) 134.19 127.33 T
5.18 (In addition to the standard set of member functions of associative containers,) 72 108.33 P
4 9 Q
11.19 (map) 477 108.33 P
2 10 Q
5.18 ( provides) 493.2 108.33 P
4 9 Q
-0.8 (Allocator<T>::reference operator[]\050const key_type&\051) 72 96.33 P
2 10 Q
-0.37 (. For a map) 345.81 96.33 P
4 9 Q
-0.8 (m) 396.65 96.33 P
2 10 Q
-0.37 ( and key) 402.05 96.33 P
4 9 Q
-0.8 (k) 441.28 96.33 P
2 10 Q
-0.37 (,) 446.68 96.33 P
4 9 Q
-0.8 (m[k]) 451.32 96.33 P
2 10 Q
-0.37 ( is semantically) 472.92 96.33 P
(equivalent to) 72 84.33 T
4 9 Q
(\050*\050\050m.insert\050make_pair\050k, T\050\051\051\051\051.first\051\051.second) 132.48 84.33 T
2 10 Q
(.) 386.28 84.33 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "37" 39
%%Page: "38" 40
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
72 18 540 63 R
7 X
0 0 0 1 0 0 0 K
V
2 10 Q
0 X
(38) 301 56.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
72 72 540 720 R
7 X
V
9 F
0 X
(8.2.4 Multimap) 72 712.71 T
4 9 Q
0.6 (multimap) 72 695.85 P
2 10 Q
0.28 ( is a kind of associative container that supports equal keys \050possibly contains multiple copies of) 115.2 695.85 P
(the same key value\051 and provides for fast retrieval of values of another type) 72 683.85 T
4 9 Q
(T) 409.1 683.85 T
2 10 Q
( based on the keys.) 414.5 683.85 T
4 9 Q
(template <class Key, class T, class Compare = less<Key>,) 108 661.52 T
(template <class U> class Allocator = allocator>) 180 650.52 T
(class multimap {) 108 639.52 T
(public:) 108 628.52 T
(// typedefs:) 108 606.52 T
(typedef Key key_type;) 144 584.52 T
(typedef pair<const Key, T> value_type;) 144 573.52 T
(typedef Compare key_compare;) 144 562.52 T
(class value_compare) 144 551.52 T
(: public binary_function<) 180 540.52 T
(value_type, value_type, bool> {) 315 540.52 T
(friend class multimap;) 144 529.52 T
(protected:) 144 518.52 T
(Compare comp;) 180 507.52 T
(value_compare\050Compare c\051 : comp\050c\051 {}) 180 496.52 T
(public:) 144 485.52 T
(bool operator\050\051\050const value_type& x, const value_type& y\051 {) 180 474.52 T
(return comp\050x.first, y.first\051;) 216 463.52 T
(}) 180 452.52 T
(};) 144 441.52 T
(typedef iterator;) 144 430.52 T
(typedef const_iterator;) 144 419.52 T
(typedef Allocator<value_type>::pointer pointer;) 144 408.52 T
(typedef Allocator<value_type>::reference reference;) 144 397.52 T
(typedef Allocator<value_type>::const_reference const_reference;) 144 386.52 T
(typedef size_type;) 144 375.52 T
(typedef difference_type;) 144 364.52 T
(typedef reverse_iterator;) 144 353.52 T
(typedef const_reverse_iterator;) 144 342.52 T
(// allocation/deallocation:) 108 320.52 T
(multimap\050const Compare& comp = Compare\050\051\051;) 144 298.52 T
(template <class InputIterator>) 144 287.52 T
(multimap\050InputIterator first, InputIterator last,) 144 276.52 T
(const Compare& comp = Compare\050\051\051;) 180 265.52 T
(multimap\050const multimap<Key, T, Compare, Allocator>& x\051;) 144 254.52 T
(~multimap\050\051;) 144 243.52 T
(multimap<Key, T, Compare, Allocator>&) 144 232.52 T
(operator=\050const multimap<Key, T, Compare, Allocator>& x\051;) 180 221.52 T
(void swap\050multimap<Key, T, Compare, Allocator>& x\051;) 144 210.52 T
(// accessors:) 108 188.52 T
(key_compare key_comp\050\051 const;) 144 166.52 T
(value_compare value_comp\050\051 const;) 144 155.52 T
(iterator begin\050\051;) 144 144.52 T
(const_iterator begin\050\051 const;) 144 133.52 T
(iterator end\050\051;) 144 122.52 T
(const_iterator end\050\051 const;) 144 111.52 T
(reverse_iterator rbegin\050\051;) 144 100.52 T
(const_reverse_iterator rbegin\050\051;) 144 89.52 T
(reverse_iterator rend\050\051;) 144 78.52 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "38" 40
%%Page: "39" 41
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
72 18 540 63 R
7 X
0 0 0 1 0 0 0 K
V
2 10 Q
0 X
(39) 301 56.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
72 72 540 720 R
7 X
V
4 9 Q
0 X
(const_reverse_iterator rend\050\051;) 144 714 T
(bool empty\050\051 const;) 144 703 T
(size_type size\050\051 const;) 144 692 T
(size_type max_size\050\051 const;) 144 681 T
(// insert/erase:) 108 659 T
(iterator insert\050const value_type& x\051;) 144 637 T
(iterator insert\050iterator position, const value_type& x\051;) 144 626 T
(template <class InputIterator>) 144 615 T
(void insert\050InputIterator first, InputIterator last\051;) 144 604 T
(void erase\050iterator position\051;) 144 593 T
(size_type erase\050const key_type& x\051;) 144 582 T
(void erase\050iterator first, iterator last\051;) 144 571 T
(// multimap operations:) 108 549 T
(iterator find\050const key_type& x\051;) 144 527 T
(const_iterator find\050const key_type& x\051 const;) 144 516 T
(size_type count\050const key_type& x\051 const;) 144 505 T
(iterator lower_bound\050const key_type& x\051;) 144 494 T
(const_iterator lower_bound\050const key_type& x\051 const;) 144 483 T
(iterator upper_bound\050const key_type& x\051;) 144 472 T
(const_iterator upper_bound\050const key_type& x\051 const;) 144 461 T
(pair<iterator, iterator> equal_range\050const key_type& x\051;) 144 450 T
-0.72 (pair<const_iterator, const_iterator> equal_range\050const key_type& x\051 const;) 144 439 P
(};) 108 428 T
(template <class Key, class T, class Compare, class Allocator>) 108 406 T
(bool operator==\050const multimap<Key, T, Compare, Allocator>& x,) 108 395 T
(const multimap<Key, T, Compare, Allocator>& y\051;) 180 384 T
(template <class Key, class T, class Compare, class Allocator>) 108 362 T
(bool operator<\050const multimap<Key, T, Compare, Allocator>& x,) 108 351 T
(const multimap<Key, T, Compare, Allocator>& y\051;) 180 340 T
0.5 (iterator) 72 321.33 P
2 10 Q
0.23 ( is a bidirectional iterator referring to) 115.2 321.33 P
4 9 Q
0.5 (value_type) 282.84 321.33 P
2 10 Q
0.23 (. The exact type is implementation dependent) 336.84 321.33 P
(and determined by) 72 309.33 T
4 9 Q
(Allocator.) 158.88 309.33 T
0.74 (const_iterator) 72 290.33 P
2 10 Q
0.34 ( is the a constant bidirectional iterator referring to) 147.6 290.33 P
4 9 Q
0.74 (const value_type) 372.84 290.33 P
2 10 Q
0.34 (. The exact type is) 459.98 290.33 P
0.37 (implementation dependent and determined by) 72 278.33 P
4 9 Q
0.8 (Allocator) 283.83 278.33 P
2 10 Q
0.37 (. It is guaranteed that there is a constructor for) 332.43 278.33 P
4 9 Q
(const_iterator) 72 266.33 T
2 10 Q
( out of) 147.6 266.33 T
4 9 Q
(iterator) 178.64 266.33 T
2 10 Q
(.) 221.84 266.33 T
4 9 Q
0.8 (size_type) 72 247.33 P
2 10 Q
0.37 ( is an unsigned integral type. The exact type is implementation dependent and determined by) 120.6 247.33 P
4 9 Q
(Allocator) 72 235.33 T
2 10 Q
(.) 120.6 235.33 T
4 9 Q
0.67 (difference_type) 72 216.33 P
2 10 Q
0.31 ( is a signed integral type. The exact type is implementation dependent and determined) 153 216.33 P
(by) 72 204.33 T
4 9 Q
(Allocator) 85.59 204.33 T
2 10 Q
(.) 134.19 204.33 T
0 12 Q
(9  Stream iterators) 72 174.25 T
2 10 Q
1.15 (To make it possible for algorithmic templates to work directly with input/output streams, appropriate) 72 155.96 P
(iterator-like template classes are provided. For example,) 72 143.96 T
4 9 Q
(partial_sum_copy\050istream_iterator<double>\050cin\051,) 108 121.62 T
(istream_iterator<double>\050\051,) 361.8 121.62 T
( ostream_iterator<double>\050cout, \323\134n\323\051\051;) 180 110.62 T
2 10 Q
(reads a file containing floating point numbers from) 72 91.96 T
4 9 Q
(cin) 300.5 91.96 T
2 10 Q
(, and prints the partial sums onto) 316.7 91.96 T
4 9 Q
(cout) 466.07 91.96 T
2 10 Q
(.) 487.67 91.96 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "39" 41
%%Page: "40" 42
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
72 18 540 63 R
7 X
0 0 0 1 0 0 0 K
V
2 10 Q
0 X
(40) 301 56.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
72 72 540 720 R
7 X
V
0 11 Q
0 X
(9.1 Istream Iterator) 72 711.98 T
4 9 Q
0.92 (istream_iterator<T>) 72 694.9 P
2 10 Q
0.43 ( reads \050using) 174.6 694.9 P
4 9 Q
0.92 (operator>>) 235.36 694.9 P
2 10 Q
0.43 (\051 successive elements from the input stream for which it) 289.36 694.9 P
0.1 (was constructed. After it is constructed, and every time ++ is used, the iterator reads and stores a value of) 72 682.9 P
4 9 Q
0.9 (T) 72 670.9 P
2 10 Q
0.42 (. If the end of stream is reached \050) 77.4 670.9 P
4 9 Q
0.9 (operator void*\050\051) 224.76 670.9 P
2 10 Q
0.42 ( on the stream returns) 312.05 670.9 P
4 9 Q
0.9 (false) 413.89 670.9 P
2 10 Q
0.42 (\051, the iterator becomes) 440.89 670.9 P
0.14 (equal to the) 72 658.9 P
5 F
0.14 (end-of-stream) 126.84 658.9 P
2 F
0.14 ( iterator value. The constructor with no arguments) 182.39 658.9 P
4 9 Q
0.3 (istream_iterator\050\051) 409.11 658.9 P
2 10 Q
0.14 ( always) 506.31 658.9 P
-0.23 (constructs an end of stream input iterator object, which is the only legitimate iterator to be used for the end) 72 646.9 P
-0.15 (condition. The result of) 72 634.9 P
4 9 Q
-0.32 (operator*) 176.81 634.9 P
2 10 Q
-0.15 ( on an end of stream is not defined. For any other iterator value a) 225.41 634.9 P
4 9 Q
-0.32 (const) 513 634.9 P
1.81 (T&) 72 622.9 P
2 10 Q
0.84 ( is returned. It is impossible to store things into istream iterators. The main peculiarity of the istream) 82.8 622.9 P
0.23 (iterators is the fact that ++ operators are not equality preserving, that is,) 72 610.9 P
4 9 Q
0.51 (i == j) 394.5 610.9 P
2 10 Q
0.23 ( does not guarantee at all) 427.91 610.9 P
(that) 72 598.9 T
4 9 Q
(++i == ++j) 91.84 598.9 T
2 10 Q
(. Every time ++ is used a new value is read.) 145.84 598.9 T
0.83 (The practical consequence of this fact is that istream iterators can be used only for one-pass algorithms,) 72 579.9 P
-0.31 (which actually makes perfect sense, since for multi-pass algorithms it is always more appropriate to use in-) 72 567.91 P
0.87 (memory data structures. Two end-of-stream iterators are always equal. An end-of-stream iterator is not) 72 555.91 P
-0.58 (equal to a non-end-of-stream iterator. Two non-end-of-stream iterators are equal when they are constructed) 72 543.91 P
(from the same stream.) 72 531.91 T
4 9 Q
(template <class T, class Distance = ptrdiff_t>) 108 509.57 T
(class istream_iterator : public input_iterator<T, Distance> {) 108 498.57 T
(friend bool operator==\050const istream_iterator<T, Distance>& x,) 108 487.57 T
(                       const istream_iterator<T, Distance>& y\051;) 108 476.57 T
(public:) 108 465.57 T
(istream_iterator\050\051;) 144 454.57 T
(istream_iterator\050istream& s\051;) 144 443.57 T
(istream_iterator\050const istream_iterator<T, Distance>& x\051;) 144 432.57 T
(~istream_iterator\050\051;) 144 421.57 T
(const T& operator*\050\051 const;) 144 410.57 T
(istream_iterator<T, Distance>& operator++\050\051;) 144 399.57 T
(istream_iterator<T, Distance> operator++\050int\051;) 144 388.57 T
(};) 108 377.57 T
(template <class T, class Distance>) 108 366.57 T
(bool operator==\050const istream_iterator<T, Distance>& x,) 108 355.57 T
(const istream_iterator<T, Distance>& y\051;) 180 344.57 T
0 11 Q
(9.2 Ostream iterator) 72 321.55 T
4 9 Q
-0.57 (ostream_iterator<T>) 72 304.48 P
2 10 Q
-0.26 ( writes \050using) 174.6 304.48 P
4 9 Q
-0.57 (operator<<) 236.69 304.48 P
2 10 Q
-0.26 (\051 successive elements onto the output stream from which) 290.69 304.48 P
-0.25 (it was constructed. If it was constructed with) 72 292.48 P
4 9 Q
-0.53 (char*) 270.67 292.48 P
2 10 Q
-0.25 ( as a constructor argument, this string, called a) 297.67 292.48 P
5 F
-0.25 (delimiter) 503.88 292.48 P
0.81 (string) 72 280.48 P
2 F
0.81 (, is written to the stream after every) 96.45 280.48 P
4 9 Q
1.75 (T) 262.66 280.48 P
2 10 Q
0.81 ( is written. It is not possible to get a value out of the output) 268.06 280.48 P
(iterator. Its only use is as an output iterator in situations like) 72 268.48 T
4 9 Q
(while \050first != last\051 *result++ = *first++;) 108 246.14 T
(ostream_iterator) 72 227.48 T
2 10 Q
( is defined as:) 158.4 227.48 T
4 9 Q
(template <class T>) 108 205.14 T
(class ostream_iterator : public output_iterator {) 108 194.14 T
(public:) 108 183.14 T
(ostream_iterator\050ostream& s\051;) 144 172.14 T
(ostream_iterator\050ostream& s, const char* delimiter\051;) 144 161.14 T
(ostream_iterator\050const ostream_iterator<T>& x\051;) 144 150.14 T
(~ostream_iterator\050\051;) 144 139.14 T
(ostream_iterator<T>& operator=\050const T& value\051;) 144 128.14 T
(ostream_iterator<T>& operator*\050\051;) 144 117.14 T
(ostream_iterator<T>& operator++\050\051;) 144 106.14 T
(ostream_iterator<T>& operator++\050int\051;) 144 95.14 T
(};) 108 84.14 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "40" 42
%%Page: "41" 43
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
72 18 540 63 R
7 X
0 0 0 1 0 0 0 K
V
2 10 Q
0 X
(41) 301 56.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
72 72 540 720 R
7 X
V
0 12 Q
0 X
(10  Algorithms) 72 711.25 T
2 10 Q
2.51 (All of the algorithms are separated from the particular implementations of data structures and are) 72 692.96 P
0.28 (parameterized by iterator types. Because of this, they can work with user defined data structures, as long) 72 680.96 P
(as these data structures have iterator types satisfying the assumptions on the algorithms.) 72 668.96 T
-0.01 (Both in-place and copying versions are provided for certain algorithms. The decision whether to include a) 72 649.96 P
0.86 (copying version was usually based on complexity considerations. When the cost of doing the operation) 72 637.96 P
0.46 (dominates the cost of copy, the copying version is not included. For example,) 72 625.96 P
4 9 Q
1 (sort_copy) 421.7 625.96 P
2 10 Q
0.46 ( is not included) 470.3 625.96 P
-0.31 (since the cost of sorting is much more significant, and users might as well do) 72 613.96 P
4 9 Q
-0.66 (copy) 408.69 613.96 P
2 10 Q
-0.31 ( followed by) 430.29 613.96 P
4 9 Q
-0.66 (sort) 487.27 613.96 P
2 10 Q
-0.31 (. When) 508.88 613.96 P
0.41 (such a version is provided for) 72 601.96 P
8 9 Q
0.89 (algorithm) 208.7 601.96 P
2 10 Q
0.41 (it is called) 263.59 601.96 P
8 9 Q
0.89 (algorithm) 311.8 601.96 P
4 F
0.89 (_copy.) 360.4 601.96 P
2 10 Q
0.41 (Algorithms that take predicates) 399.1 601.96 P
(end with the suffix) 72 589.96 T
4 9 Q
(_if) 157.92 589.96 T
2 10 Q
( \050which follows the suffix) 174.12 589.96 T
4 9 Q
(_copy) 288.8 589.96 T
2 10 Q
(\051.) 315.8 589.96 T
1 (The) 72 570.96 P
4 9 Q
2.16 (Predicate) 92.24 570.96 P
2 10 Q
1 ( class is used whenever an algorithm expects a function object that when applied to the) 140.84 570.96 P
-0.12 (result of dereferencing the corresponding iterator returns a value convertible to) 72 558.96 P
4 9 Q
-0.25 (bool) 423.85 558.96 P
2 10 Q
-0.12 (. In other words, if an) 445.45 558.96 P
1.61 (algorithm takes) 72 546.96 P
4 9 Q
3.48 (Predicate pred) 146.77 546.96 P
2 10 Q
1.61 ( as its argument and) 225.85 546.96 P
4 9 Q
3.48 (first) 326.21 546.96 P
2 10 Q
1.61 ( as its iterator argument, it should work) 353.21 546.96 P
-0.03 (correctly in the construct) 72 534.96 P
4 9 Q
-0.05 (if \050pred\050*first\051\051{..) 184.16 534.96 P
2 10 Q
-0.03 (.) 292.1 534.96 P
4 9 Q
-0.05 (}) 294.6 534.96 P
2 10 Q
-0.03 (. The function object) 300 534.96 P
4 9 Q
-0.05 (pred) 392.03 534.96 P
2 10 Q
-0.03 ( is assumed not to apply any) 413.63 534.96 P
(non-constant function through the dereferenced iterator.) 72 522.96 T
0 (The) 72 503.96 P
4 9 Q
0 (BinaryPredicate) 91.24 503.96 P
2 10 Q
0 ( class is used whenever an algorithm expects a function object that when applied to) 172.24 503.96 P
-0.21 (the result of dereferencing two corresponding iterators or to dereferencing an iterator and type) 72 491.96 P
4 9 Q
-0.46 (T) 490.42 491.96 P
2 10 Q
-0.21 ( when) 495.82 491.96 P
4 9 Q
-0.46 (T) 525.16 491.96 P
2 10 Q
-0.21 ( is) 530.56 491.96 P
3.45 (part of the signature returns a value convertible to) 72 479.96 P
4 9 Q
7.44 (bool) 327.6 479.96 P
2 10 Q
3.45 (. In other words, if an algorithm takes) 349.2 479.96 P
4 9 Q
3.4 (BinaryPredicate binary_pred) 72 467.96 P
2 10 Q
1.57 ( as its argument and) 221.2 467.96 P
4 9 Q
3.4 (first1) 321.38 467.96 P
2 10 Q
1.57 ( and) 353.78 467.96 P
4 9 Q
3.4 (first2) 378.86 467.96 P
2 10 Q
1.57 ( as its iterator arguments, it) 411.26 467.96 P
0.5 (should work correctly in the construct) 72 455.96 P
4 9 Q
1.08 (if \050binary_pred\050*first, *first2\051\051{...}) 246.14 455.96 P
2 10 Q
0.5 (.) 453.5 455.96 P
4 9 Q
1.08 (BinaryPredicate) 459 455.96 P
2 10 Q
0.36 (always takes the first iterator type as its first argument, that is, in those cases when) 72 443.96 P
4 9 Q
0.78 (T) 445.27 443.96 P
0.78 (value) 453.53 443.96 P
2 10 Q
0.36 ( is part of the) 480.53 443.96 P
1.52 (signature, it should work correctly in the context of) 72 431.96 P
4 9 Q
3.3 (if \050binary_pred\050*first, value\051\051{...}) 314.68 431.96 P
2 10 Q
1.52 (. It is) 515.67 431.96 P
(expected that) 72 419.96 T
4 9 Q
(binary_pred) 133.69 419.96 T
2 10 Q
( will not apply any non-constant function through the dereferenced iterators.) 193.09 419.96 T
-0.19 (In the description of the algorithms operators) 72 400.96 P
4 9 Q
-0.41 (+) 273.86 400.96 P
2 10 Q
-0.19 ( and) 279.26 400.96 P
4 9 Q
-0.41 (-) 300.81 400.96 P
2 10 Q
-0.19 ( are used for some of the iterator categories for which) 306.21 400.96 P
0.51 (they do not have to be defined. In these cases the semantics of) 72 388.96 P
4 9 Q
1.1 (a+n) 354.3 388.96 P
2 10 Q
0.51 ( is the same as that of) 370.5 388.96 P
4 9 Q
1.1 ({ X tmp = a;) 470.81 388.96 P
0.41 (advance\050tmp, n\051; return tmp; }) 72 376.96 P
2 10 Q
0.19 ( and that of) 235.65 376.96 P
4 9 Q
0.41 (a-b) 289.47 376.96 P
2 10 Q
0.19 ( is the same as that of) 305.67 376.96 P
4 9 Q
0.41 ({ Distance n; distance\050a,) 403.76 376.96 P
(b, n\051; return n; }) 72 364.96 T
2 10 Q
(.) 169.2 364.96 T
0 11 Q
(10.1 Non-mutating sequence operations) 72 341.61 T
9 10 Q
(10.1.1 For each) 72 322.91 T
4 9 Q
(template <class InputIterator, class Function>) 108 302.72 T
(Function for_each\050InputIterator first, InputIterator last, Function f\051;) 108 291.72 T
-0.26 (for_each) 72 273.05 P
2 10 Q
-0.12 ( applies) 115.2 273.05 P
4 9 Q
-0.26 (f) 151.83 273.05 P
2 10 Q
-0.12 ( to the result of dereferencing every iterator in the range) 157.23 273.05 P
4 9 Q
-0.26 ([first, last\051) 406.05 273.05 P
2 10 Q
-0.12 ( and returns) 475.99 273.05 P
4 9 Q
-0.26 (f) 532.1 273.05 P
2 10 Q
-0.12 (.) 537.5 273.05 P
4 9 Q
-0.49 (f) 72 261.05 P
2 10 Q
-0.23 ( is assumed not to apply any non-constant function through the dereferenced iterator.) 77.4 261.05 P
4 9 Q
-0.49 (f) 455.77 261.05 P
2 10 Q
-0.23 ( is applied exactly) 461.17 261.05 P
4 9 Q
(last - first) 72 249.05 T
2 10 Q
( times. If) 136.8 249.05 T
4 9 Q
(f) 177.53 249.05 T
2 10 Q
( returns a result, the result is ignored.) 182.93 249.05 T
9 F
(10.1.2 Find) 72 228.43 T
4 9 Q
(template <class InputIterator, class T>) 108 208.24 T
(InputIterator find\050InputIterator first, InputIterator last, const T& value\051;) 108 197.24 T
(template <class InputIterator, class Predicate>) 108 175.24 T
(InputIterator find_if\050InputIterator first, InputIterator last, Predicate pred\051;) 108 164.24 T
4.11 (find) 72 145.57 P
2 10 Q
1.9 ( returns the first iterator) 93.6 145.57 P
4 9 Q
4.11 (i) 211.79 145.57 P
2 10 Q
1.9 ( in the range) 217.19 145.57 P
4 9 Q
4.11 ([first, last\051) 282.52 145.57 P
2 10 Q
1.9 ( for which the following corresponding) 356.83 145.57 P
0.12 (conditions hold:) 72 133.57 P
4 9 Q
0.25 (*i == value) 146.47 133.57 P
2 10 Q
0.12 (,) 206.38 133.57 P
4 9 Q
0.25 ( pred\050*i\051 == true) 208.88 133.57 P
2 10 Q
0.12 (. If no such iterator is found,) 301.44 133.57 P
4 9 Q
0.25 (last) 429.76 133.57 P
2 10 Q
0.12 ( is returned. Exactly) 451.36 133.57 P
4 9 Q
(find\050first, last, value\051 - first) 72 121.57 T
2 10 Q
( applications of the corresponding predicate are done.) 244.8 121.57 T
9 F
(10.1.3 Adjacent find) 72 100.95 T
4 9 Q
(template <class ForwardIterator>) 108 80.76 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "41" 43
%%Page: "42" 44
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
72 18 540 63 R
7 X
0 0 0 1 0 0 0 K
V
2 10 Q
0 X
(42) 301 56.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
72 72 540 720 R
7 X
V
4 9 Q
0 X
(ForwardIterator adjacent_find\050ForwardIterator first, ForwardIterator last\051;) 108 714 T
(template <class ForwardIterator, class BinaryPredicate>) 108 692 T
(ForwardIterator adjacent_find\050ForwardIterator first, ForwardIterator last,) 108 681 T
(BinaryPredicate binary_pred\051;) 180 670 T
0.19 (adjacent_find) 72 651.33 P
2 10 Q
0.09 ( returns the first iterator) 142.2 651.33 P
4 9 Q
0.19 (i) 251.32 651.33 P
2 10 Q
0.09 ( such that both) 256.72 651.33 P
4 9 Q
0.19 (i) 325.01 651.33 P
2 10 Q
0.09 ( and) 330.4 651.33 P
4 9 Q
0.19 (i + 1) 352.51 651.33 P
2 10 Q
0.09 ( are in the range) 379.89 651.33 P
4 9 Q
0.19 ([first, last\051) 454.28 651.33 P
2 10 Q
0.09 ( for) 524.67 651.33 P
-0.09 (which the following corresponding conditions hold:) 72 639.33 P
4 9 Q
-0.19 (*i == *\050i + 1\051, binary_pred\050*i, *\050i + 1\051\051 ==) 304.12 639.33 P
-0.1 (true) 72 627.33 P
2 10 Q
-0.05 (. If no such iterator) 93.6 627.33 P
4 9 Q
-0.1 (i) 179.46 627.33 P
2 10 Q
-0.05 ( is found,) 184.86 627.33 P
4 9 Q
-0.1 (last) 228.62 627.33 P
2 10 Q
-0.05 ( is returned. At most) 250.22 627.33 P
4 9 Q
-0.1 (max\050\050last - first\051) 343.67 627.33 P
-0.1 (- 1, 0\051) 443.13 627.33 P
2 10 Q
-0.05 (applications) 486.03 627.33 P
(of the corresponding predicate are done.) 72 615.33 T
9 F
(10.1.4 Count) 72 594.71 T
4 9 Q
(template <class InputIterator, class T, class Size>) 108 574.52 T
(void count\050InputIterator first, InputIterator last, const T& value, Size& n\051;) 108 563.52 T
(template <class InputIterator, class Predicate, class Size>) 108 541.52 T
(void count_if\050InputIterator first, InputIterator last, Predicate pred, Size& n\051;) 108 530.52 T
6.07 (count) 72 511.85 P
2 10 Q
2.81 ( adds to) 99 511.85 P
4 9 Q
6.07 (n) 145.11 511.85 P
2 10 Q
2.81 ( the number of iterators) 150.51 511.85 P
4 9 Q
6.07 (i) 271.49 511.85 P
2 10 Q
2.81 ( in the range) 276.89 511.85 P
4 9 Q
6.07 ([first, last\051) 345.85 511.85 P
2 10 Q
2.81 ( for which the following) 422.12 511.85 P
0.17 (corresponding conditions hold:) 72 499.85 P
4 9 Q
0.36 (*i == value) 213.74 499.85 P
2 10 Q
0.17 (,) 273.86 499.85 P
4 9 Q
0.36 (pred\050*i\051 == true) 279.02 499.85 P
2 10 Q
0.17 (. Exactly) 366.13 499.85 P
4 9 Q
0.36 (last - first) 406.4 499.85 P
2 10 Q
0.17 ( applications of) 471.91 499.85 P
(the corresponding predicate are done.) 72 487.85 T
4 9 Q
0.22 (count) 72 468.85 P
2 10 Q
0.1 ( must store the result into a reference argument instead of returning the result because the size type) 99 468.85 P
(cannot be deduced from built-in iterator types such as) 72 456.85 T
4 9 Q
(int*) 313.48 456.85 T
2 10 Q
(.) 335.08 456.85 T
9 F
(10.1.5 Mismatch) 72 436.23 T
4 9 Q
(template <class InputIterator1, class InputIterator2>) 108 416.04 T
(pair<InputIterator1, InputIterator2> mismatch\050InputIterator1 first1,) 108 405.04 T
(InputIterator1 last1, InputIterator2 first2\051;) 180 394.04 T
(template <class InputIterator1, class InputIterator2, class BinaryPredicate>) 108 372.04 T
(pair<InputIterator1, InputIterator2> mismatch\050InputIterator1 first1,) 108 361.04 T
(InputIterator1 last1, InputIterator2 first2,) 180 350.04 T
(BinaryPredicate binary_pred\051;) 180 339.04 T
1.29 (mismatch) 72 320.37 P
2 10 Q
0.6 ( returns a pair of iterators) 115.2 320.37 P
4 9 Q
1.29 (i) 234.29 320.37 P
2 10 Q
0.6 ( and) 239.69 320.37 P
4 9 Q
1.29 (j) 262.81 320.37 P
2 10 Q
0.6 ( such that) 268.21 320.37 P
4 9 Q
1.29 (j == first2 + \050i - first1\051) 315.37 320.37 P
2 10 Q
0.6 ( and) 463.48 320.37 P
4 9 Q
1.29 (i) 486.6 320.37 P
2 10 Q
0.6 ( is the first) 492 320.37 P
0.52 (iterator in the range) 72 308.37 P
4 9 Q
1.13 ([first1, last1\051) 164.39 308.37 P
2 10 Q
0.52 ( for which the following corresponding conditions hold:) 246.51 308.37 P
4 9 Q
1.13 (!\050*i ==) 501.07 308.37 P
0.53 (*\050first2 + \050i - first1\051\051\051) 72 296.37 P
2 10 Q
0.24 (,) 209.11 296.37 P
4 9 Q
0.53 ( binary_pred\050*i, *\050first2 + \050i - first1\051\051\051 == false) 211.61 296.37 P
2 10 Q
0.24 (. If such an) 491.22 296.37 P
0.47 (iterator) 72 284.37 P
4 9 Q
1 (i) 107.54 284.37 P
2 10 Q
0.47 ( is not found, a pair of) 112.94 284.37 P
4 9 Q
1 (last1) 216.3 284.37 P
2 10 Q
0.47 ( and) 243.3 284.37 P
4 9 Q
1 (first2 + \050last1 - first1\051) 266.17 284.37 P
2 10 Q
0.47 ( is returned. At most) 405.19 284.37 P
4 9 Q
1 (last1 -) 501.19 284.37 P
(first1) 72 272.37 T
2 10 Q
(applications of the corresponding predicate are done.) 109.8 272.37 T
9 F
(10.1.6 Equal) 72 251.75 T
4 9 Q
(template <class InputIterator1, class InputIterator2>) 108 231.56 T
(bool equal\050InputIterator1 first1, InputIterator1 last1, InputIterator2 first2\051;) 108 220.56 T
(template <class InputIterator1, class InputIterator2, class BinaryPredicate>) 108 198.56 T
(bool equal\050InputIterator1 first1, InputIterator1 last1, InputIterator2 first2,) 108 187.56 T
(BinaryPredicate binary_pred\051;) 180 176.56 T
2.79 (equal) 72 157.89 P
2 10 Q
1.29 ( returns) 99 157.89 P
4 9 Q
2.79 (true) 138.62 157.89 P
2 10 Q
1.29 ( if for every iterator) 160.22 157.89 P
4 9 Q
2.79 (i) 255.47 157.89 P
2 10 Q
1.29 ( in the range) 260.87 157.89 P
4 9 Q
2.79 ([first1, last1\051) 323.75 157.89 P
2 10 Q
1.29 ( the following corresponding) 407.54 157.89 P
0.2 (conditions hold:) 72 145.89 P
4 9 Q
0.43 (*i == *\050first2 + \050i - first1\051\051) 146.63 145.89 P
2 10 Q
0.2 (,) 311.23 145.89 P
4 9 Q
0.43 (binary_pred\050*i, *\050first2 + \050i - first1\051\051\051) 316.43 145.89 P
-1.34 (== true) 72 133.89 P
2 10 Q
-0.62 (. Otherwise, it returns) 108.46 133.89 P
4 9 Q
-1.34 (false) 205.14 133.89 P
2 10 Q
-0.62 (. At most) 232.14 133.89 P
4 9 Q
-1.34 (last1 - first1) 273.11 133.89 P
2 10 Q
-0.62 (applications of the corresponding predicate) 350.08 133.89 P
(are done.) 72 121.89 T
9 F
(10.1.7 Search) 72 101.27 T
4 9 Q
(template <class ForwardIterator1, class ForwardIterator2>) 108 81.08 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "42" 44
%%Page: "43" 45
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
72 18 540 63 R
7 X
0 0 0 1 0 0 0 K
V
2 10 Q
0 X
(43) 301 56.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
72 72 540 720 R
7 X
V
4 9 Q
0 X
(ForwardIterator1 search\050ForwardIterator1 first1, ForwardIterator1 last1,) 108 714 T
(ForwardIterator2 first2,) 180 703 T
(ForwardIterator2 last2\051;) 315 703 T
(template <class ForwardIterator1, class ForwardIterator2, class BinaryPredicate>) 108 681 T
(ForwardIterator1 search\050ForwardIterator1 first1, ForwardIterator1 last1,) 108 670 T
(ForwardIterator2 first2,) 180 659 T
(ForwardIterator2 last2, BinaryPredicate) 315 659 T
(binary_pred\051;) 180 648 T
0.81 (search) 72 629.33 P
2 10 Q
0.37 ( finds a subsequence of equal values in a sequence.) 104.4 629.33 P
4 9 Q
0.81 (search) 335.31 629.33 P
2 10 Q
0.37 ( returns the first iterator) 367.71 629.33 P
4 9 Q
0.81 (i) 478.26 629.33 P
2 10 Q
0.37 ( in the range) 483.66 629.33 P
4 9 Q
-1.2 ([first1, last1 - \050last2 - first2\051\051) 72 617.33 P
2 10 Q
-0.56 ( such that for any non-negative integer) 249.6 617.33 P
4 9 Q
-1.2 (n) 419.49 617.33 P
2 10 Q
-0.56 ( less than) 424.89 617.33 P
4 9 Q
-1.2 (last2 - first2) 466.8 617.33 P
2 10 Q
0.51 (the following corresponding conditions hold:) 72 605.33 P
4 9 Q
1.09 (*\050i + n\051 == *\050first2 + n\051) 277.35 605.33 P
2 10 Q
0.51 (,) 418.91 605.33 P
4 9 Q
1.09 (binary_pred\050*\050i + n\051,) 424.41 605.33 P
0.31 (*\050first2 + n\051\051 == true) 72 593.33 P
2 10 Q
0.14 (. If no such iterator is found,) 192.02 593.33 P
4 9 Q
0.31 (last1) 320.5 593.33 P
2 10 Q
0.14 ( is returned. At most) 347.5 593.33 P
4 9 Q
0.31 (\050last1 - first1\051 *) 441.88 593.33 P
-1.22 (\050last2 - first2\051) 72 581.33 P
2 10 Q
-0.57 ( applications of the corresponding predicate are done. The quadratic behavior, however,) 155.95 581.33 P
(is highly unlikely.) 72 569.33 T
0 11 Q
(10.2 Mutating sequence operations) 72 545.98 T
9 10 Q
(10.2.1 Copy) 72 527.28 T
4 9 Q
(template <class InputIterator, class OutputIterator>) 108 507.09 T
(OutputIterator copy\050InputIterator first, InputIterator last,) 108 496.09 T
(OutputIterator result\051;) 180 485.09 T
-0.42 (copy) 72 466.42 P
2 10 Q
-0.19 ( copies elements. For each non-negative integer) 93.6 466.42 P
4 9 Q
-0.42 (n < \050last - first\051,) 303.84 466.42 P
-0.42 (*\050result + n\051 = *\050first +) 407.08 466.42 P
0.15 (n\051) 72 454.42 P
2 10 Q
0.07 ( is performed.) 82.8 454.42 P
4 9 Q
0.15 (copy) 147.38 454.42 P
2 10 Q
0.07 ( returns) 168.98 454.42 P
4 9 Q
0.15 (result + \050last - first\051) 206.17 454.42 P
2 10 Q
0.07 (. Exactly) 330.98 454.42 P
4 9 Q
0.15 (last - first) 371.07 454.42 P
2 10 Q
0.07 (assignments are done.) 441.73 454.42 P
(The result of) 72 442.42 T
4 9 Q
(copy) 130.21 442.42 T
2 10 Q
( is undefined if) 151.81 442.42 T
4 9 Q
(result) 220.91 442.42 T
2 10 Q
( is in the range) 253.31 442.42 T
4 9 Q
([first, last\051.) 320.68 442.42 T
(template <class BidirectionalIterator1, class BidirectionalIterator2>) 108 420.09 T
(BidirectionalIterator2 copy_backward\050BidirectionalIterator1 first,) 108 409.09 T
(BidirectionalIterator1 last, BidirectionalIterator2 result\051;) 180 398.09 T
-0.4 (copy_backward) 72 379.43 P
2 10 Q
-0.19 ( copies elements in the range) 142.2 379.43 P
4 9 Q
-0.4 ([first, last\051) 271.09 379.43 P
2 10 Q
-0.19 ( into the range) 340.89 379.43 P
4 9 Q
-0.4 ([result - \050last - first\051,) 406.6 379.43 P
-0.08 (result\051) 72 367.43 P
2 10 Q
-0.04 ( starting from) 109.8 367.43 P
4 9 Q
-0.08 (last - 1) 172.76 367.43 P
2 10 Q
-0.04 ( and proceeding to) 215.8 367.43 P
4 9 Q
-0.08 (first) 301.14 367.43 P
2 10 Q
-0.04 (. It should be used instead of) 328.14 367.43 P
4 9 Q
-0.08 (copy) 457.49 367.43 P
2 10 Q
-0.04 ( when) 479.09 367.43 P
4 9 Q
-0.08 (last) 508.79 367.43 P
2 10 Q
-0.04 ( is) 530.39 367.43 P
0.37 (in the range) 72 355.43 P
4 9 Q
0.81 ([result - \050last - first\051, result\051) 128.34 355.43 P
2 10 Q
0.37 (. For each positive integer) 310.57 355.43 P
4 9 Q
0.81 (n <= \050last - first\051,) 428.77 355.43 P
-1.05 (*\050result - n\051 = *\050last - n\051) 72 343.43 P
2 10 Q
-0.49 (is performed.) 215.87 343.43 P
4 9 Q
-1.05 (copy_backward) 276.77 343.43 P
2 10 Q
-0.49 ( returns) 346.97 343.43 P
4 9 Q
-1.05 (result - \050last - first\051) 383.04 343.43 P
2 10 Q
-0.49 (. Exactly) 503.05 343.43 P
4 9 Q
0.25 (last - first) 72 331.43 P
2 10 Q
0.12 (assignments are done. The result of) 142.96 331.43 P
4 9 Q
0.25 (copy_backward) 302.5 331.43 P
2 10 Q
0.12 ( is undefined if) 372.7 331.43 P
4 9 Q
0.25 (result) 442.26 331.43 P
2 10 Q
0.12 ( is in the range) 474.66 331.43 P
4 9 Q
([first, last\051.) 72 319.43 T
9 10 Q
(10.2.2 Swap) 72 298.8 T
4 9 Q
(template <class T>) 108 278.61 T
(void swap\050T& a, T& b\051;) 108 267.61 T
(swap) 72 248.95 T
2 10 Q
( exchanges values stored in two locations.) 93.6 248.95 T
4 9 Q
(template <class ForwardIterator1, class ForwardIterator2>) 108 226.61 T
(void iter_swap\050ForwardIterator1 a, ForwardIterator2 b\051;) 108 215.61 T
(iter_swap) 72 196.95 T
2 10 Q
( exchanges values pointed by the two iterators) 120.6 196.95 T
4 9 Q
(a) 328.04 196.95 T
2 10 Q
( and) 333.44 196.95 T
4 9 Q
(b) 355.37 196.95 T
2 10 Q
(.) 360.77 196.95 T
4 9 Q
(template <class ForwardIterator1, class ForwardIterator2>) 108 174.61 T
(ForwardIterator2 swap_ranges\050ForwardIterator1 first1, ForwardIterator1 last1,) 108 163.61 T
(ForwardIterator2 first2\051;) 180 152.61 T
2 10 Q
0.83 (For each non-negative integer) 72 133.95 P
4 9 Q
1.79 (n < \050last1 - first1\051) 209.63 133.95 P
2 10 Q
0.83 ( the) 324.81 133.95 P
4 9 Q
1.79 (swap) 345.35 133.95 P
2 10 Q
0.83 ( is performed:) 366.95 133.95 P
4 9 Q
1.79 (swap\050*\050first1 + n\051,) 433.81 133.95 P
0.63 (*\050first2 + n\051\051) 72 121.95 P
2 10 Q
0.29 (.) 148.87 121.95 P
4 9 Q
0.63 (swap_ranges) 154.16 121.95 P
2 10 Q
0.29 ( returns) 213.57 121.95 P
4 9 Q
0.63 (first2 + \050last1 - first1\051) 251.19 121.95 P
2 10 Q
0.29 (. Exactly) 388.73 121.95 P
4 9 Q
0.63 (last1 - first1) 429.26 121.95 P
2 10 Q
0.29 (swaps) 512.17 121.95 P
1.48 (are done. The result of) 72 109.95 P
4 9 Q
3.2 (swap_ranges) 181.04 109.95 P
2 10 Q
1.48 ( is undefined if the two ranges) 240.44 109.95 P
4 9 Q
3.2 ([first1, last1\051) 387.7 109.95 P
2 10 Q
1.48 ( and) 471.91 109.95 P
4 9 Q
3.2 ([first2,) 496.8 109.95 P
(first2 + \050last1 - first1\051\051) 72 97.95 T
2 10 Q
( overlap.) 212.4 97.95 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "43" 45
%%Page: "44" 46
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
72 18 540 63 R
7 X
0 0 0 1 0 0 0 K
V
2 10 Q
0 X
(44) 301 56.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
72 72 540 720 R
7 X
V
9 F
0 X
(10.2.3 Transform) 72 712.71 T
4 9 Q
(template <class InputIterator, class OutputIterator, class UnaryOperation>) 108 692.52 T
(OutputIterator transform\050InputIterator first, InputIterator last,) 108 681.52 T
(OutputIterator result, UnaryOperation op\051;) 180 670.52 T
(template <class InputIterator1, class InputIterator2, class OutputIterator,) 108 648.52 T
(class BinaryOperation>) 180 637.52 T
(OutputIterator transform\050InputIterator1 first1, InputIterator1 last1,) 108 626.52 T
(InputIterator2 first2,) 180 615.52 T
( OutputIterator result,) 298.8 615.52 T
(BinaryOperation binary_op\051;) 180 604.52 T
-0.22 (transform) 72 585.85 P
2 10 Q
-0.1 ( assigns through every iterator) 120.6 585.85 P
4 9 Q
-0.22 (i) 257.83 585.85 P
2 10 Q
-0.1 ( in the range) 263.23 585.85 P
4 9 Q
-0.22 ( [result, result + \050last1 - first1\051\051) 318.15 585.85 P
2 10 Q
-0.1 ( a new) 511.25 585.85 P
-0.33 (corresponding value equal to) 72 573.85 P
4 9 Q
-0.72 (op\050*\050first1 + \050i - result\051\051) 202.62 573.85 P
2 10 Q
-0.33 ( or) 345.54 573.85 P
4 9 Q
-0.72 (binary_op\050*\050first1 + \050i - result\051,) 359.28 573.85 P
-0.66 (*\050first2 + \050i - result\051\051\051) 72 561.85 P
2 10 Q
-0.31 (.) 204.34 561.85 P
4 9 Q
-0.66 (transform) 209.04 561.85 P
2 10 Q
-0.31 ( returns) 257.64 561.85 P
4 9 Q
-0.66 (result + \050last1 - first1\051) 294.06 561.85 P
2 10 Q
-0.31 (. Exactly) 426.4 561.85 P
4 9 Q
-0.66 (last1 - first1) 465.73 561.85 P
2 10 Q
1.26 (applications of) 72 549.85 P
4 9 Q
2.73 (op) 142.29 549.85 P
2 10 Q
1.26 ( or) 153.09 549.85 P
4 9 Q
2.73 (binary_op) 170.03 549.85 P
2 10 Q
1.26 (are performed.) 226.76 549.85 P
4 9 Q
2.73 (op) 297.75 549.85 P
2 10 Q
1.26 ( and) 308.55 549.85 P
4 9 Q
2.73 (binary_op) 333.01 549.85 P
2 10 Q
1.26 ( are expected not to have any side) 381.61 549.85 P
-0.03 (effects.) 72 537.85 P
4 9 Q
-0.07 (result) 105.15 537.85 P
2 10 Q
-0.03 ( may be equal to) 137.55 537.85 P
4 9 Q
-0.07 (first) 212.65 537.85 P
2 10 Q
-0.03 ( in case of unary transform, or to) 239.65 537.85 P
4 9 Q
-0.07 (first1) 386.22 537.85 P
2 10 Q
-0.03 ( or) 418.62 537.85 P
4 9 Q
-0.07 (first2) 432.96 537.85 P
2 10 Q
-0.03 ( in case of binary) 465.36 537.85 P
(transform.) 72 525.85 T
9 F
(10.2.4 Replace) 72 505.23 T
4 9 Q
(template <class ForwardIterator, class T>) 108 485.04 T
(void replace\050ForwardIterator first, ForwardIterator last, const T& old_value,) 108 474.04 T
(const T& new_value\051;) 180 463.04 T
(template <class ForwardIterator, class Predicate, class T>) 108 441.04 T
(void replace_if\050ForwardIterator first, ForwardIterator last, Predicate pred,) 108 430.04 T
(const T& new_value\051;) 180 419.04 T
-0.63 (replace) 72 400.37 P
2 10 Q
-0.29 ( substitutes elements referred by the iterator) 109.8 400.37 P
4 9 Q
-0.63 (i) 305.67 400.37 P
2 10 Q
-0.29 ( in the range) 311.07 400.37 P
4 9 Q
-0.63 ([first, last\051) 367.61 400.37 P
2 10 Q
-0.29 ( with) 437.18 400.37 P
4 9 Q
-0.63 (new_value) 461.92 400.37 P
2 10 Q
-0.29 (, when) 510.52 400.37 P
0.88 (the following corresponding conditions hold:) 72 388.37 P
4 9 Q
1.9 (*i == old_value) 279.21 388.37 P
2 10 Q
0.88 (,) 364.01 388.37 P
4 9 Q
1.9 ( pred\050*i\051 == true) 366.51 388.37 P
2 10 Q
0.88 (. Exactly) 464 388.37 P
4 9 Q
1.9 (last -) 505.7 388.37 P
(first) 72 376.37 T
2 10 Q
( applications of the corresponding predicate are done.) 99 376.37 T
4 9 Q
(template <class InputIterator, class OutputIterator, class T>) 108 354.04 T
(OutputIterator replace_copy\050InputIterator first, InputIterator last,) 108 343.04 T
(OutputIterator result,) 180 332.04 T
(const T& old_value, const T& new_value\051;) 304.2 332.04 T
(template <class Iterator, class OutputIterator, class Predicate, class T>) 108 310.04 T
(OutputIterator replace_copy_if\050Iterator first, Iterator last,) 108 299.04 T
(OutputIterator result,) 180 288.04 T
(Predicate pred, const T& new_value\051;) 304.2 288.04 T
2.01 (replace_copy) 72 269.37 P
2 10 Q
0.93 ( assigns to every iterator) 136.8 269.37 P
4 9 Q
2.01 (i) 252 269.37 P
2 10 Q
0.93 ( in the range) 257.4 269.37 P
4 9 Q
2.01 ([result, result + \050last - first\051\051) 318.83 269.37 P
2 10 Q
0.93 (either) 514.48 269.37 P
4 9 Q
-0.02 (new_value) 72 257.37 P
2 10 Q
-0.01 ( or) 120.6 257.37 P
4 9 Q
-0.02 (*\050first + \050i - result\051\051) 134.99 257.37 P
2 10 Q
-0.01 ( depending on whether the following corresponding conditions) 259.09 257.37 P
1.31 (hold:) 72 245.37 P
4 9 Q
2.83 (*\050first + \050i - result\051\051 == old_value) 98.61 245.37 P
2 10 Q
1.31 (,) 309.99 245.37 P
4 9 Q
2.83 ( pred\050*\050first + \050i - result\051\051\051 == true) 312.49 245.37 P
2 10 Q
1.31 (.) 537.5 245.37 P
4 9 Q
5.74 (replace_copy) 72 233.37 P
2 10 Q
2.66 ( returns) 136.8 233.37 P
4 9 Q
5.74 (result + \050last - first\051) 179.16 233.37 P
2 10 Q
2.66 (. Exactly) 326.34 233.37 P
4 9 Q
5.74 (last - first) 371.6 233.37 P
2 10 Q
2.66 ( applications of the) 447.89 233.37 P
(corresponding predicate are done.) 72 221.37 T
9 F
(10.2.5 Fill) 72 200.75 T
4 9 Q
(template <class ForwardIterator, class T>) 108 180.56 T
(void fill\050ForwardIterator first, ForwardIterator last, const T& value\051;) 108 169.56 T
(template <class OutputIterator, class Size, class T>) 108 147.56 T
(OutputIterator fill_n\050OutputIterator first, Size n, const T& value\051;) 108 136.56 T
-0.19 (fill) 72 117.89 P
2 10 Q
-0.09 ( assigns) 93.6 117.89 P
4 9 Q
-0.19 (value) 130.43 117.89 P
2 10 Q
-0.09 ( through all the iterators in the range) 157.43 117.89 P
4 9 Q
-0.19 ([first, last\051) 321.84 117.89 P
2 10 Q
-0.09 ( or) 391.84 117.89 P
4 9 Q
-0.19 ([first, first + n\051) 406.07 117.89 P
2 10 Q
-0.09 (.) 502.69 117.89 P
4 9 Q
-0.19 (fill_n) 507.6 117.89 P
2 10 Q
(returns) 72 105.89 T
4 9 Q
(first + n) 106.54 105.89 T
2 10 Q
(. Exactly) 155.14 105.89 T
4 9 Q
(last - first) 195.08 105.89 T
2 10 Q
( \050or) 259.88 105.89 T
4 9 Q
(n) 277.62 105.89 T
2 10 Q
(\051 assignments are done.) 283.02 105.89 T
9 F
(10.2.6 Generate) 72 85.27 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "44" 46
%%Page: "45" 47
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
72 18 540 63 R
7 X
0 0 0 1 0 0 0 K
V
2 10 Q
0 X
(45) 301 56.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
72 72 540 720 R
7 X
V
4 9 Q
0 X
(template <class ForwardIterator, class Generator>) 108 714 T
(void generate\050ForwardIterator first, ForwardIterator last, Generator gen\051;) 108 703 T
(template <class OutputIterator, class Size, class Generator>) 108 681 T
(OutputIterator generate_n\050OutputIterator first, Size n, Generator gen\051;) 108 670 T
-0.91 (generate) 72 651.33 P
2 10 Q
-0.42 ( invokes the function object) 115.2 651.33 P
4 9 Q
-0.91 (gen) 236.78 651.33 P
2 10 Q
-0.42 ( and assigns the return value of) 252.98 651.33 P
4 9 Q
-0.91 (gen) 391.32 651.33 P
2 10 Q
-0.42 ( through all the iterators in the) 407.52 651.33 P
0.05 (range) 72 639.33 P
4 9 Q
0.1 ([first, last\051) 99.67 639.33 P
2 10 Q
0.05 ( or) 169.97 639.33 P
4 9 Q
0.1 ([first, first + n\051) 184.48 639.33 P
2 10 Q
0.05 (.) 282 639.33 P
4 9 Q
0.1 (gen) 287.05 639.33 P
2 10 Q
0.05 ( takes no arguments.) 303.25 639.33 P
4 9 Q
0.1 (generate_n) 397.55 639.33 P
2 10 Q
0.05 ( returns) 451.55 639.33 P
4 9 Q
0.1 (first + n) 488.69 639.33 P
2 10 Q
0.05 (.) 537.5 639.33 P
(Exactly) 72 627.33 T
4 9 Q
(last - first) 106.94 627.33 T
2 10 Q
( \050or) 171.74 627.33 T
4 9 Q
(n) 189.48 627.33 T
2 10 Q
(\051 invocations of) 194.88 627.33 T
4 9 Q
(gen) 265.47 627.33 T
2 10 Q
( and assignments are done.) 281.67 627.33 T
9 F
(10.2.7 Remove) 72 606.71 T
4 9 Q
(template <class ForwardIterator, class T>) 108 586.52 T
(ForwardIterator remove\050ForwardIterator first, ForwardIterator last,) 108 575.52 T
(const T& value\051;) 180 564.52 T
(template <class ForwardIterator, class Predicate>) 108 542.52 T
(ForwardIterator remove_if\050ForwardIterator first, ForwardIterator last,) 108 531.52 T
(Predicate pred\051;) 180 520.52 T
2.46 (remove) 72 501.85 P
2 10 Q
1.14 ( eliminates all the elements referred to by iterator) 104.4 501.85 P
4 9 Q
2.46 (i) 334.79 501.85 P
2 10 Q
1.14 ( in the range) 340.19 501.85 P
4 9 Q
2.46 ([first, last\051) 402.48 501.85 P
2 10 Q
1.14 ( for which the) 475.14 501.85 P
-0.23 (following corresponding conditions hold:) 72 489.85 P
4 9 Q
-0.49 (*i == value) 257.55 489.85 P
2 10 Q
-0.23 (,) 315.97 489.85 P
4 9 Q
-0.49 (pred\050*i\051 == true) 320.74 489.85 P
2 10 Q
-0.23 (.) 406.17 489.85 P
4 9 Q
-0.49 (remove) 410.94 489.85 P
2 10 Q
-0.23 ( returns the end of the) 443.34 489.85 P
-0.21 (resulting range.) 72 477.85 P
4 9 Q
-0.45 (remove) 143.68 477.85 P
2 10 Q
-0.21 ( is stable, that is, the relative order of the elements that are not removed is the same) 176.08 477.85 P
1.44 (as their relative order in the original range. Exactly) 72 465.85 P
4 9 Q
3.1 (last - first) 312.1 465.85 P
2 10 Q
1.44 ( applications of the corresponding) 383.1 465.85 P
(predicate are done.) 72 453.85 T
4 9 Q
(template <class InputIterator, class OutputIterator, class T>) 108 431.52 T
(OutputIterator remove_copy\050InputIterator first, InputIterator last,) 108 420.52 T
(OutputIterator result,) 180 409.52 T
(const T& value\051;) 304.2 409.52 T
(template <class InputIterator, class OutputIterator, class Predicate>) 108 387.52 T
(OutputIterator remove_copy_if\050InputIterator first, InputIterator last,) 108 376.52 T
(OutputIterator result,) 180 365.52 T
(Predicate pred\051;) 304.2 365.52 T
-0.57 (remove_copy) 72 346.85 P
2 10 Q
-0.26 ( copies all the elements referred to by the iterator) 131.4 346.85 P
4 9 Q
-0.57 (i) 347.65 346.85 P
2 10 Q
-0.26 ( in the range) 353.05 346.85 P
4 9 Q
-0.57 ([first, last\051) 409.72 346.85 P
2 10 Q
-0.26 ( for which the) 479.35 346.85 P
-0.12 (following corresponding conditions do not hold:) 72 334.85 P
4 9 Q
-0.25 (*i == value) 288.86 334.85 P
2 10 Q
-0.12 (,) 347.75 334.85 P
4 9 Q
-0.25 ( pred\050*i\051 == true) 350.25 334.85 P
2 10 Q
-0.12 (.) 441.29 334.85 P
4 9 Q
-0.25 (remove_copy) 446.18 334.85 P
2 10 Q
-0.12 ( returns) 505.58 334.85 P
1.38 (the end of the resulting range.) 72 322.85 P
4 9 Q
2.98 (remove_copy) 215.61 322.85 P
2 10 Q
1.38 ( is stable, that is, the relative order of the elements in the) 275.01 322.85 P
-0.07 (resulting range is the same as their relative order in the original range. Exactly) 72 310.85 P
4 9 Q
-0.16 (last - first) 419.12 310.85 P
2 10 Q
-0.07 ( applications) 483.6 310.85 P
(of the corresponding predicate are done.) 72 298.85 T
9 F
(10.2.8 Unique) 72 278.23 T
4 9 Q
(template <class ForwardIterator>) 108 258.04 T
(ForwardIterator unique\050ForwardIterator first, ForwardIterator last\051;) 108 247.04 T
(template <class ForwardIterator, class BinaryPredicate>) 108 225.04 T
(ForwardIterator unique\050ForwardIterator first, ForwardIterator last,) 108 214.04 T
(BinaryPredicate binary_pred\051;) 180 203.04 T
0.62 (unique) 72 184.37 P
2 10 Q
0.29 ( eliminates all but the first element from every consecutive group of equal elements referred to by) 104.4 184.37 P
0.32 (the iterator) 72 172.37 P
4 9 Q
0.69 (i) 124.09 172.37 P
2 10 Q
0.32 ( in the range) 129.49 172.37 P
4 9 Q
0.69 ([first, last\051) 188.48 172.37 P
2 10 Q
0.32 ( for which the following corresponding conditions hold:) 259.37 172.37 P
4 9 Q
0.69 (*i ==) 512.31 172.37 P
-0.42 (*\050i) 72 160.37 P
-0.42 (- 1\051) 90.51 160.37 P
2 10 Q
-0.19 (or) 111.69 160.37 P
4 9 Q
-0.42 (binary_pred\050*i, *\050i - 1\051\051 == true) 123.41 160.37 P
2 10 Q
-0.19 (.) 299.52 160.37 P
4 9 Q
-0.42 (unique) 304.33 160.37 P
2 10 Q
-0.19 ( returns the end of the resulting range. Exactly) 336.73 160.37 P
4 9 Q
(\050last - first\051 - 1) 72 148.37 T
2 10 Q
( applications of the corresponding predicate are done.) 169.2 148.37 T
4 9 Q
(template <class InputIterator, class OutputIterator>) 108 126.04 T
(OutputIterator unique_copy\050InputIterator first, InputIterator last,) 108 115.04 T
(OutputIterator result\051;) 180 104.04 T
(template <class InputIterator, class OutputIterator, class BinaryPredicate>) 108 82.04 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "45" 47
%%Page: "46" 48
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
72 18 540 63 R
7 X
0 0 0 1 0 0 0 K
V
2 10 Q
0 X
(46) 301 56.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
72 72 540 720 R
7 X
V
4 9 Q
0 X
(OutputIterator unique_copy\050InputIterator first, InputIterator last,) 108 714 T
(OutputIterator result,) 180 703 T
(BinaryPredicate binary_pred\051;) 304.2 703 T
0.52 (unique_copy) 72 684.33 P
2 10 Q
0.24 ( copies only the first element from every consecutive group of equal elements referred to by) 131.4 684.33 P
0.32 (the iterator) 72 672.33 P
4 9 Q
0.69 (i) 124.09 672.33 P
2 10 Q
0.32 ( in the range) 129.49 672.33 P
4 9 Q
0.69 ([first, last\051) 188.48 672.33 P
2 10 Q
0.32 ( for which the following corresponding conditions hold:) 259.37 672.33 P
4 9 Q
0.69 (*i ==) 512.31 672.33 P
0.31 (*\050i) 72 660.33 P
0.31 (- 1\051) 90.84 660.33 P
2 10 Q
0.14 (or) 112.75 660.33 P
4 9 Q
0.31 (binary_pred\050*i, *\050i - 1\051\051 == true) 124.81 660.33 P
2 10 Q
0.14 (.) 304.57 660.33 P
4 9 Q
0.31 (unique_copy) 309.71 660.33 P
2 10 Q
0.14 ( returns the end of the resulting range.) 369.11 660.33 P
(Exactly) 72 648.33 T
4 9 Q
(last - first) 106.94 648.33 T
2 10 Q
( applications of the corresponding predicate are done.) 171.74 648.33 T
9 F
(10.2.9 Reverse) 72 627.71 T
4 9 Q
(template <class BidirectionalIterator>) 108 607.52 T
(void reverse\050BidirectionalIterator first, BidirectionalIterator last\051;) 108 596.52 T
2 10 Q
0.66 (For each non-negative integer) 72 577.85 P
4 9 Q
1.42 (i <= \050last - first\051/2) 208.95 577.85 P
2 10 Q
0.66 (,) 328.04 577.85 P
4 9 Q
1.42 ( reverse) 330.54 577.85 P
2 10 Q
0.66 ( applies swap to all pairs of iterators) 375.17 577.85 P
4 9 Q
(first + i) 72 565.85 T
2 10 Q
(,) 120.6 565.85 T
4 9 Q
(\050last - i\051 - 1) 125.6 565.85 T
2 10 Q
(. Exactly) 201.2 565.85 T
4 9 Q
(\050last - first\051/2) 241.14 565.85 T
2 10 Q
(swaps are performed.) 332.94 565.85 T
4 9 Q
(template <class BidirectionalIterator, class OutputIterator>) 108 543.52 T
(OutputIterator reverse_copy\050BidirectionalIterator first,) 108 532.52 T
(BidirectionalIterator last,) 180 521.52 T
(OutputIterator result\051;) 331.2 521.52 T
-0.53 (reverse_copy) 72 502.85 P
2 10 Q
-0.25 ( copies the range) 136.8 502.85 P
4 9 Q
-0.53 ([first, last\051) 212.66 502.85 P
2 10 Q
-0.25 ( to the range) 282.33 502.85 P
4 9 Q
-0.53 ( [result, result + \050last - first\051\051) 336.8 502.85 P
2 10 Q
-0.25 ( such) 517.22 502.85 P
-0.21 (that for any non-negative integer) 72 490.85 P
4 9 Q
-0.46 ( i < \050last - first\051) 216.9 490.85 P
2 10 Q
-0.21 ( the following assignment takes place:) 317.2 490.85 P
4 9 Q
-0.46 (*\050result +) 486.46 490.85 P
-0.41 (\050last - first\051 - i\051 = *\050first + i\051) 72 478.85 P
2 10 Q
-0.19 (.) 252.32 478.85 P
4 9 Q
-0.41 (reverse_copy) 257.13 478.85 P
2 10 Q
-0.19 ( returns) 321.93 478.85 P
4 9 Q
-0.41 (result + \050last - first\051) 358.59 478.85 P
2 10 Q
-0.19 (.Exactly) 481.15 478.85 P
4 9 Q
-0.41 (last) 518.4 478.85 P
-0.05 (- first) 72 466.85 P
2 10 Q
-0.02 ( assignments are done. The result of) 109.75 466.85 P
4 9 Q
-0.05 (reverse_copy) 270.94 466.85 P
2 10 Q
-0.02 ( is undefined if) 335.74 466.85 P
4 9 Q
-0.05 ([first, last\051) 404.76 466.85 P
2 10 Q
-0.02 ( and) 474.91 466.85 P
4 9 Q
-0.05 ([result,) 496.8 466.85 P
(result + \050last - first\051\051) 72 454.85 T
2 10 Q
( overlap.) 201.6 454.85 T
9 F
(10.2.10 Rotate) 72 434.23 T
4 9 Q
(template <class ForwardIterator>) 108 414.04 T
-0.9 (void rotate\050ForwardIterator first, ForwardIterator middle, ForwardIterator last\051;) 108 403.04 P
2 10 Q
-0.18 (For each non-negative integer) 72 384.37 P
4 9 Q
-0.4 (i < \050last - first\051) 205.58 384.37 P
2 10 Q
-0.18 (,) 301.2 384.37 P
4 9 Q
-0.4 (rotate) 306.02 384.37 P
2 10 Q
-0.18 ( places the element from the position) 338.42 384.37 P
4 9 Q
-0.4 (first +) 502.6 384.37 P
0.15 (i) 72 372.37 P
2 10 Q
0.07 ( into position) 77.4 372.37 P
4 9 Q
0.15 (first + \050i + \050last - middle\051\051 % \050last - first\051) 138.63 372.37 P
2 10 Q
0.07 (.) 388.51 372.37 P
4 9 Q
0.15 ([first, middle\051) 393.58 372.37 P
2 10 Q
0.07 ( and) 474.73 372.37 P
4 9 Q
0.15 ([middle,) 496.8 372.37 P
(last\051) 72 360.37 T
2 10 Q
( are valid ranges. At most) 99 360.37 T
4 9 Q
(last - first) 215.01 360.37 T
2 10 Q
( swaps are done.) 279.81 360.37 T
4 9 Q
(template <class ForwardIterator, class OutputIterator>) 108 338.04 T
(OutputIterator rotate_copy\050ForwardIterator first, ForwardIterator middle,) 108 327.04 T
(ForwardIterator last, OutputIterator result\051;) 180 316.04 T
-0.03 (rotate_copy) 72 297.37 P
2 10 Q
-0.01 ( copies the range) 131.4 297.37 P
4 9 Q
-0.03 ([first, last\051) 208.19 297.37 P
2 10 Q
-0.01 ( to the range) 278.36 297.37 P
4 9 Q
-0.03 ( [result, result + \050last - first\051\051) 333.54 297.37 P
2 10 Q
-0.01 ( such) 516.98 297.37 P
0.11 (that for each non-negative integer) 72 285.37 P
4 9 Q
0.23 ( i < \050last - first\051) 221.85 285.37 P
2 10 Q
0.11 ( the following assignment takes place:) 325.61 285.37 P
4 9 Q
0.23 (*\050result) 496.8 285.37 P
-0.85 (+ \050i + \050last - middle\051\051 % \050last - first\051\051 = *\050first + i\051) 72 273.37 P
2 10 Q
-0.39 (.) 363.39 273.37 P
4 9 Q
-0.85 ( rotate_copy) 365.89 273.37 P
2 10 Q
-0.39 ( returns) 429.84 273.37 P
4 9 Q
-0.85 (result + \050last) 466.09 273.37 P
-0.84 (- first\051) 72 261.37 P
2 10 Q
-0.39 (. Exactly) 114.36 261.37 P
4 9 Q
-0.84 (last - first) 153.52 261.37 P
2 10 Q
-0.39 ( assignments are done. The result of) 216.64 261.37 P
4 9 Q
-0.84 (rotate_copy) 375.26 261.37 P
2 10 Q
-0.39 ( is undefined if) 434.66 261.37 P
4 9 Q
-0.84 ([first,) 502.2 261.37 P
(last\051) 72 249.37 T
2 10 Q
( and) 99 249.37 T
4 9 Q
([result, result + \050last - first\051\051) 120.93 249.37 T
2 10 Q
( overlap.) 299.13 249.37 T
9 F
(10.2.11 Random shuffle) 72 228.75 T
4 9 Q
(template <class RandomAccessIterator>) 108 208.56 T
(void random_shuffle\050RandomAccessIterator first, RandomAccessIterator last\051;) 108 197.56 T
(template <class RandomAccessIterator, class RandomNumberGenerator>) 108 175.56 T
(void random_shuffle\050RandomAccessIterator first, RandomAccessIterator last,) 108 164.56 T
(RandomNumberGenerator& rand\051;) 180 153.56 T
2.46 (random_shuffle) 72 134.89 P
2 10 Q
1.14 ( shuffles the elements in the range) 147.6 134.89 P
4 9 Q
2.46 ([first, last\051) 308.79 134.89 P
2 10 Q
1.14 ( with uniform distribution. Exactly) 381.45 134.89 P
4 9 Q
-0.14 (\050last - first\051 - 1) 72 122.89 P
2 10 Q
-0.06 (swaps are done.) 173.89 122.89 P
4 9 Q
-0.14 (random_shuffle) 247.45 122.89 P
2 10 Q
-0.06 ( can take a particular random number generating) 323.05 122.89 P
5.81 (function object) 72 110.89 P
4 9 Q
12.55 (rand) 151.51 110.89 P
2 10 Q
5.81 ( such that) 173.11 110.89 P
4 9 Q
12.55 (rand) 235.92 110.89 P
2 10 Q
5.81 ( takes a positive argument) 257.52 110.89 P
4 9 Q
12.55 (n) 405.4 110.89 P
2 10 Q
5.81 ( of distance type of the) 410.8 110.89 P
4 9 Q
(RandomAccessIterator) 72 98.89 T
2 10 Q
( and returns a randomly chosen value between) 180 98.89 T
4 9 Q
(0) 389.88 98.89 T
2 10 Q
( and) 395.28 98.89 T
4 9 Q
(n-1) 417.21 98.89 T
2 10 Q
(.) 433.41 98.89 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "46" 48
%%Page: "47" 49
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
72 18 540 63 R
7 X
0 0 0 1 0 0 0 K
V
2 10 Q
0 X
(47) 301 56.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
72 72 540 720 R
7 X
V
9 F
0 X
(10.2.12 Partitions) 72 T>) 108 354.04 T
(OutputIterator replace_copy\050InputIterator first, InputIterator last,) 108 343.04 T
(OutputIterator result,) 180 332.04 T
(const T& old_value, const T& new_value\051;) 304.2 332.04 T
(template <class Iterator, class OutputIterator, class Predicate, class T>) 108 310.04 T
(OutputIterator replace_copy_if\050Iterator first, Iterator last,) 108 299.04 T
(OutputIterator result,) 180 288.04 T
(Predicate pred, const T& new_value\051;) 304.2 288.04 T
2.01 (replace_copy) 72 269.37 P
2 10 Q
0.93 ( assigns to every iterator) 136.8 269.37 P
4 9 Q
2.01 (i) 252 269.37 P
2 10 Q
0.93 ( in the range) 257.4 269.37 P
4 9 Q
2.01 ([result, result + \050last - first\051\051) 318.83 269.37 P
2 10 Q
0.93 (either) 514.48 269.37 P
4 9 Q
-0.02 (new_value) 72 257.37 P
2 10 Q
-0.01 ( or) 120.6 257.37 P
4 9 Q
-0.02 (*\050first + \050i - result\051\051) 134.99 257.37 P
2 10 Q
-0.01 ( depending on whether the following corresponding conditions) 259.09 257.37 P
1.31 (hold:) 72 245.37 P
4 9 Q
2.83 (*\050first + \050i - result\051\051 == old_value) 98.61 245.37 P
2 10 Q
1.31 (,) 309.99 245.37 P
4 9 Q
2.83 ( pred\050*\050first + \050i - result\051\051\051 == true) 312.49 245.37 P
2 10 Q
1.31 (.) 537.5 245.37 P
4 9 Q
5.74 (replace_copy) 72 233.37 P
2 10 Q
2.66 ( returns) 136.8 233.37 P
4 9 Q
5.74 (result + \050last - first\051) 179.16 233.37 P
2 10 Q
2.66 (. Exactly) 326.34 233.37 P
4 9 Q
5.74 (last - first) 371.6 233.37 P
2 10 Q
2.66 ( applications of the) 447.89 233.37 P
(corresponding predicate are done.) 72 221.37 T
9 F
(10.2.5 Fill) 72 200.75 T
4 9 Q
(template <class ForwardIterator, class T>) 108 180.56 T
(void fill\050ForwardIterator first, ForwardIterator last, const T& value\051;) 108 169.56 T
(template <class OutputIterator, class Size, class T>) 108 147.56 T
(OutputIterator fill_n\050OutputIterator first, Size n, const T& value\051;) 108 136.56 T
-0.19 (fill) 72 117.89 P
2 10 Q
-0.09 ( assigns) 93.6 117.89 P
4 9 Q
-0.19 (value) 130.43 117.89 P
2 10 Q
-0.09 ( through all the iterators in the range) 157.43 117.89 P
4 9 Q
-0.19 ([first, last\051) 321.84 117.89 P
2 10 Q
-0.09 ( or) 391.84 117.89 P
4 9 Q
-0.19 ([first, first + n\051) 406.07 117.89 P
2 10 Q
-0.09 (.) 502.69 117.89 P
4 9 Q
-0.19 (fill_n) 507.6 117.89 P
2 10 Q
(returns) 72 105.89 T
4 9 Q
(first + n) 106.54 105.89 T
2 10 Q
(. Exactly) 155.14 105.89 T
4 9 Q
(last - first) 195.08 105.89 T
2 10 Q
( \050or) 259.88 105.89 T
4 9 Q
(n) 277.62 105.89 T
2 10 Q
(\051 assignments are done.) 283.02 105.89 T
9 F
(10.2.6 Generate) 72 85.27 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "44" 46
%%Page: "45" 47
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
72 18 540 63 R
7 X
0 0 0 1 0 0 0 K
V
2 10 Q
0 X
(45) 301 56.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
72 72 540 720 R
7 X
V
4 9 Q
0 X
(template <class ForwardIterator, class Generator>) 108 714 T
(void generate\050ForwardIterator first, ForwardIterator last, Generator gen\051;) 108 703 T
(template <class OutputIterator, class Size, class Generator>) 108 681 T
(OutputIterator generate_n\050OutputIterator first, Size n, Generator gen\051;) 108 670 T
-0.91 (generate) 72 651.33 P
2 10 Q
-0.42 ( invokes the function object) 115.2 651.33 P
4 9 Q
-0.91 (gen) 236.78 651.33 P
2 10 Q
-0.42 ( and assigns the return value of) 252.98 651.33 P
4 9 Q
-0.domNt670ined if)y) 114r2 310.(template (*\050first +n) 236.78 651 first, ForwardIte nd) t72 T249.( retus are d56.38 nd) t7, cla\051;) 108 169.56  (, 8 714 T
(void 5range) 129.49 .15 ([fi6.85 P(, 8 714]
[ 0 1 cla\mplateactly) 336.0 00 1 (, 8 714 T
(void 5ran21 98.8 0 1 0 1 
4 9 Q
0.Q
-0.57 (
2 10 (, 8 714]
[ 0 1 cla\ate <class ForwardI3.89 P (, 8 714 T
(void 5ran231.56 T0.32 (  1 (, 8 714ize, clairst2) 43297., or to) 239.65 346.85 P
2red\050*i, *90*i, 297., or following corrange) 129t0 Q
-0.09 ( through all
%%EndPag7.33 P297., or to) 239.65 3460.62 (un P
4 9 Q
-0ter41 297., or following corrnputIte) 1
[ 0  prhe followon-neg4, 297., or (0 1]
eSetShuffle\rns) 136.8 233051\051>) 108 681 T-0.39 ( assignments are done. mplateactly) 314.48 26
-0.04 0Q
-0.23 ( retu050ForwardI.nputIt891\051>) 108 681 T3 P
4 9 Q
0.1 (gen) 287.05 639.33 P
2 generate_n\050OutputIterat89 st +n) 236.78 651 first, 051;) 108 16Remove) 72 606.71 T
4 9 Q
(template <class ForwardItera507st +n) 236.78 651 first, 051) 9_t670ined if)y) 114r2 310.(tg condi9plate051) 9_t) 115.2 651.334rlap.T3 P
4 9 Q
0.1 (gen) 287.05 639.33 P
2 generate_n\050Outpu
-0.42 ( and assigns t463st +n) 236.78 651 first, 051;) 108 16Remove) 72 606.71 T
4 9 Q
(template <class ForwardItera4s Outpn) 236.78 651 first, 051) 9_t670ined if)y) 114r2 310.(tg condi41late051) 9_t) 1ng condi30 t72 T249.( retus are dator, i30 t7(== 3a\051;) 108 16tIterator 410.07 (first1) 386.8range) 129.49 .15 ([fi63m_sh1rm, or to) 239== 3a\min-0.39 ( assignme1\051) 9_9 ( ass051) 9_t670i14.48 23kes p410.07 (first1) 386.8ran21 98.8 0 1 0 1tor 8plat410.07 (furns) 4231.56 T airst2) 43erat, or to) 239.654tor first_ignme1\051) 9_ator lasmin-0.39 ( assignme1\051) 9_9 ( ass051) 9_t670i14.49.95 P
4 9P
4 99.07 (first1) 386.4 T>) 108 44 99.07 (f18.04 .37 P
4 9 Q1.48 (ar110.87t, or to) 234e range) 15_) 447.14) 108.87t, or range) 25.04 eratoe_co740.87t, or to) 234e range) 15_ ==) 512.31 rs
FrameNoSep
0 0 0 65" 4.87t, or range) 25.04 e_copyorre0 0]
mall]
eSetShufflenerat72 187t, or 1f the\rns) 136.8 233051672.3 252 269.37 6 X
(45)9 ( assignments are done. mpn-0.39 ( assignme1\051) 9_9 ( ass051) 9_t670i14.49.95 P
461.37672.3 2523 ( retu050ForwardI.np4.33 37.85 P
4 9 Q
- P
0Nthy) 72 269.
0 0 0 i\051) 72 478.85 P
2 10 Q
-0 generate_n\050OutputIteratatorder of the nth_) 72 2698 651.33 P
4 9 Q
-0.domNt670inQ
0.83 (ass Outp51.33 P
4 9 Q
-0.domNnthlIter13 (ass Outp51.33 P
4 9 Q
-0.domNt) 115.2 651.3301 545.37 P
4 9 Q
2.83 (*\P
1.31 (hold:) 72 245.37 P
4 9 Q
2.83 (*\0578rder of the nth_) 72 2698 651.33 P
4 9 Q
-0.domNt670in 51.33 P
4 9 Q
-0.domNnthlIt(*\0567ss Outp51.33 P
4 9 Q
-0.domNt) 1) 309.99 245.37 P
4 9 1 0 5ive order in t1 1 0 Aft]
[ 0 0 0last - first\age: "nth_) 72 267.95 9 0 0last - er in t1 1 0 9.49 172.37 Pgh all
old:) 25540 72orwardItera58 K
0 0last - first\age: "nth)1 0 15 0 0last - er in t1 1 0 9i29.49 172.37 P 0 0 wutputItein R
7 X
37Bidir 0last -  the raold:) 2550first2wholT airst w35.921 98.. Also12 792 0 FMBEGINPAG.81 6done.) 441.73 454 (. Exa8.37  6done.) 32 ( in the ran predicate are d500 1 6done.) 441.73 454 (6.85 P
2nthss InputItter 6done.) 32 ( in the ran7 FrameSFMBEGINPAG467s161 6done.) 441.73 1 1 0 jAG.81 1T
(template <clas610 Q
0.07 (assignm37 17 1T
(temp441.73 1 1 0 [nthl0 Q
1.14 ( e3) 30 1T
(template <clas610 Q
templa2 10 Q
-.83 797 1T
(temp441.73 1 1 0 !110.89 >P
4 9 QutIt6resu 1T
(template <clas610 98 2973 T
 1T
(temp441.73 1 1 0 0.8 110.89 P
4 9 Q
(Ra Q
-0.851T
21u 1T
(template <clas610 0 1 0 0] is undFill) 72 200.75on-n2 180 1T
(temp
4 9 Q
- P3 argume s un0 0 actl93or uni24 9las6emplat Q
-0.0 (rand) 151AccessIterator>)-0.196 T
(vo050last -  s un0 ange)yQ
(tkdFiletSe65.85 Ta
4 9 ass OutputItst + 6 496.8 1180\minimiz0 R
70.0efined if)050ForwardI,e_copy_ii0 1 ee doand) 1ic12 792lateype, class Outputange)yQccessIte
(teery cons P
10 Q
) 1ratorns)pri Q
22 7965.85 Ta
4 9 ass Output, siectiohes.0 (rand) 151d 433 doand) 1ic1efined if) teptItst +5
-0.42 (1 (function oata) truc
4 e 9 Q
1etSe65.85 Ta
4 9 ass Outputtiony extor,ss I is undefined if) tept.9.56 T
8.37 T
2 10 Q
( applications of the corresponding pretputItera19 T
4 9 Q
(last - first)low35_bouator> 0 0 K
FMENDPAGE
%%EndPage: "44" 46
%%Page: "45" 471072 133.95 P
4 9 Q7 P
2 10 Q
-0.29963 P
4 9 Q
0.1 (generate_n) 397.55 639.33 P
2 9 Q
-017.89 P
4 9 Q
10.53 ( [result, result + \050last - first\051\051) 336.8 502.85 P
2 10 Q
-0.25 ( such) 517.22 502.85 P
-0.21 (that for any non-negative integer) 72 490.85 P
4 9 Q
-0.46 ( i < \050last - first\051) 216.9 490.85 P
2 10 Q
-0.21 ( the following assignment takes first) 195.089irst1) 465.73 561.85 P
2 10 Q
1.26 (applications of) 72 549.85 P
4 9 Q
2.73 (op) 142.29 549.85 P
2 10 Q
1.26 ( or) 153T5.37 P
4 9 Q
2.83 (*\0tor, clQ
(last - first)low35_bouator> 0 0 K
FMENDPAGE
%%EndPage: "44" 46
%%Page: "45" 47dIterat5 P
4 9 Q7 P
2) 309.99 245.37 P
4 9 1 069 ord354.42low35_bouat03 T
(t3t, or range) 25P
2 
%%nd29.49 .15 (
old:) 255231.5_copyPage: "4473.3 252 269.37 4.42>) 108 1omAc4
(t3t, or range) 25P
2 
5 T
Iteinse 98.89 T
out violat0 R
70.004 T
2.01is, th1"4473.3 252 269.3(Forwalow35_bouat03 T
(61 Predicate, clas1ed\050*i\051 ==fur48 (
Frairst\051) 179.16 (61 Predi 269.3(Forwai the i36
(61 Predicate, clas1ed\051) 72 273.37 8dIter(61 Predi 269.3(Forwaator result\051;) 13.69 1(61 Predicate, clas1ed\ 10 Q
-0.01 ( such) 516.98 2 0]
73r(61 Predi 269.3(Forwajs Rand36
(61 Predicate, clas1ed\05) 72 2ter(61 Predi- is p(6 T airst2) 4364at, or to) 239.61221.85 285.37 P
2 tak9364at, or ator middle47 X
0 0 0 1 0 0 004.4 501.85 P
4 9 Q
2.46 (i) 334l th51) 4at, or to) 239.6122*j <T>) 108 374tor 64at, or ator middle47 X98 2 2 2.37 4at, or to) 239.61220.8 110.8j,Q7 P
2 10 0.18 ( 0 99364at, or  integer) 73es elements refthe end of t) 2053050ForwardIteradone. The result of) 25125 P
46143 73es elements ref
9 F
(10.2.5 first\051 -  10 3053050ForwardIter( applications of the corresponding pretputIter615enerate) 72 85.27 T
0pp35_bouator> 0 0 K
FMENDPAGE
%%EndPage: "44" 46
%%Page: "45" 476 133.95 P
4 9 Q7 P
2 10 Q
-0.29593.89 T
2 10 Q
(\051 assignments are done.) 2T5.37 P
4 9 Q
2.83 (*\05i\051rate) 72 85.27 T
0pp35_bouator> 0 0 K
FMENDPAGE
%%EndPage: "44" 46
%%Page: "45" 47560erat5 P
4 9 Q7 P
2)
-0.295r firs T249.( retus are da66terar fire ran(0pp35_bouat33051\3 P
4 9 Q
-0.492ue\051%%nd29.49 .ur48 (
Fraiold:) 255231.5_copyPage: "4\3 P
4 9 to) 234eran(>) 108 3rrespo\3 P
4 9 Q
-0.492ue\0515 T
Iteinse 98.89 T
out violat0 R
70.4.04 Tspo\3 P
4 9 
4 9 Q04 T
2.01is) 153846
%%Page: "45"
2 
0pp35_bouat3311051 -53846
%%P0 0]
[ 0 16ed\050*i\051 ==fur48 (
Frairst\051) 17 Exa4153846
%%Page: "45"
2 i d56.304-53846
%%P0 0]
[ 0 16ed\ predicate are 386.4 53846
%%Page: "45"
2 ator result\051;) 18EndPa53846
%%P0 0]
[ 0 16ed\ 10 Q
-0.01 ( suctempla18a53846
%%P165 34.03 ( [result,06.3 252 269.37 3rwajs " 410 Q
06.3 252range) 25510 Q
0.29 (. Exact.09 01t,06.3 252 269.37 3rwa1.85 285.37 P
2 clas8Q
06.3 252range) 25510 Qby iterator) 104.4 501.85 P
4 9 Q
2.46 (i) 334.35ne.) 96.3 252 269.37 3rwa!110. 180 1<P
4 9 Qut44t\051\06.3 252range) 25510 Qrator 62 10 96.3 252 269.320.8 110.7 P
2) 
4 9 Q
(Ra Q
-0.8Q
( o4s elements refthe end of aryPredo4s elemardIteradone. The result of) 25125 P24 1]
[ o4s elements ref
9 F
(10.2.5 first\051 -cess83edo4s elemardIter( applications of the corresponding pretputIter47 Outpator<f the correspondifirst, ForwardIt
4 9 Q_. Exaor> 0 0 K
FMENDPAGE
%%EndPigns t461tor unique_copy\050InputIg condi5033.95 P
4 9 Q7 P
2 10 Q
-
(retdi5033.9T
2 10 Q
(\051 assignments are done.) 2T5.37 P
4 9 Q
2.83 (*\0 2 Outpator<f the correspondifirst, ForwardIt
4 9 Q_. Exaor> 0 0 K
FMENDPAGE
%%EndPigns t417tor unique_copy\050InputIt5 P
4 9 Q7 P
2) 309.99 245.37 P
4 9 1 040683.02cla\4 9 Q_. Exaar110.87t, or cate, clas\051%%nd29.49 larg29t0sub%%EndPage: "4.87t, or to) 23hrough 3.374 9 QutIt5 P
4.87t, or cate, clas\051 10 Q
-0.0.49  180 15 T
Iteinse 98.8copy54.85 T
9 F
(1opy)"4.87t, or to) 23hrough k)0 96.P
4 97t, or cate, clas\051i-0.0.ding c524.87t, or to) 23hr9Q
-0.1051672.3 2520 0]
[ 0 15Q
-0.14 (random_s04.4 501.85 P
4 9 Q
2.46:9.37 172.5t, or to) 23hr9Q
-!110.8k <T>) 10 Q
0.93 (eith 180 1<P
k 9 QutI5teery672.3 2520 0]
[ 0 15Q
98 2 2 25272.5t, or to) 23hr9Q
-0.8 110.8k,Q7 P
2 10 0.18 ( 0irst2.5t, or ( Q
-0.93 0.8 110.7 P
2) 
k 9 Q
(Ra Q
-0.8Q
(3 37.85 Pents refthe end of ator, 3 37.85 PardIter2are done. The result of) 25125 P2t) Ite3 37.85 Pents ref
9 F
(10.2.5 first\051 - 2 2Ite3 37.85 PardIter( applications of the corresponding pretputIter341late 10 rwardItes un0  681.52 T
(OutputIterator result, UnaryOperation op\051;) 180 670.52 T
(te33033.9T
2 10 Q
(\051 assignments are done.) 2T5.37 P
4 9 Q
2.83 (*\0308late 10 rwardItes un0  681.52 T
(OutputIterator result, UnaryOperationIt(*\0597erat5 P
4 9 Q7 P
2)
- P
460597erat309.99 245.37 P
4 9 1 0 86fire 75.23 (folls un0 0 act567s
4 9 Q
-0.492ueeSetSepColors42.33 P7t, or to) 234e75.2d:) 72 ) 504t567s
4 9 Q
-0.492ueeSe6 261.37 P
4
-0.03 ( [res.4 1243 P7t, or to) 234e75.2i
-0.8584t567s
4 9 Q
-0.492ueeSe6predicate are 384243 P7t, or to) 234e75.2 1.85 2sult\051;) 18ke a 567s
4 9 Q
-0.492ueeSey) 72 297.3random_
- P900 1 67s
4 9 .65 5304.4 501.85 P
4 9 Q
2.46:9.327 P
28 714]
[ 0 1 97e !110.89 <T>) 10 Q
0.93 (eith 180 1<P
.37 P
2 92the  P
28 7140 0]
[ 0 910 98 29.28 87 P
28 714]
[ 0 1 97e 0.8 110.89 P7 P
2 10 0.1  Q
-0.93) 186 1 0 P
28 71420.8 110.7 P
2) 
i 9 Q
(Ra Q
-0.8Q
(243s elements refthe end of aryPre243s elemardIteradone. The result of) 2 P24 1]
[243s elem(+ 2) 13.673(243s elements ref
9 F
(10.2.5 first\051 -ce412.75 37.85 P
4 9 Q
- P4 Merg124.81 60 i\051) 72 478.85 P
2 10 Q
-0plate <class 15.37 P
4plate <class 2ding predicate are done.) 1692022 T
-0.57 (remove_copymerg1e) 72 606.71 T
4 1sult o1emplate <class 1sult\1"45" 4719plate <cllate <class 2sult o2Ig condconlate <cllate <class 2sult\2,st, Forwconlate <c 184.48 639.33 P
2 10 Q
0.05 (.) 6 245.37 P
4 9 Q
2.83 (*\050first + \015.37 P
4plate <class 2ding predicate are don"45" 47147ss Outp37 P
4 9 Q
2.83 ()"4
461 T
-0.57 (remove_copymerg1e) 72 606.71 T
4 1sult o1emplate <class 1sult\1"45" 47125late <cllate <class 2sult o2Ig condc14late <cllate <class 2sult\2,st, Forwc14late <cass T>) 108 586.52 T
( 309.99 245.37 P
4 9 1 010ges. At9 Q
0.1 (generate_n) 397.55 639.33 P
2 9 Q
1017.89 P
450 Q
20.19 ([first, first + n\051) 406.07 117.89 P
2 10 Q
-0.09 (.) 502.69 117.89 P
4 9 Q
-0.19 (fill_n) 507.6 117.89 P
2 10 Q
(returns) 72 105.89 T
4 9 Q
(first + n) 106.54 105.89 T
2 10 Q
(. Exactly) 155.14 105.89 T
4 9 Q
(last - first) 195.050irst1) 465.73 561.85 P
2 10 Q
1.26 (applications of) 72 549.85 P
4 9 Q
2.73 (o-1.42 (merg124.81713t, or ator middl510 Qmerg1s_copy21 98.8turns *\050713t, or 441.73 1 14 (6.85 P1esult\15 334.85 1243713t, or ator middl510 Q94 56595ne0713t, or 441.73 1 14 (6.85 P2esult\2 9 Q
-0.const713t, or ator middl510 Q231.56 T airst2)es t820713t, or 441.73 1 14 (631 (- 1\051) 951\051143713t, or  (swap12.31 rs
F1result o1f) 2512.31 rs
F2result o2emplate <clas701 Predicate, clants inge) merg18 703 ([fi\0701 Predi5- fiants 
[ 1 01 0 0 48s701 Predica fiants  1 0 0 1 0] 0 0 ]
[ 0 0 1 0 1 1prediccop 29.utput701 Predi1 108lairst 0]
[ 1 0 1 0 1 
4 9 Q
0..85 2sairst alway 0]
 cede]
[ 1 0 1 0 1 
4 9 Q
0.se4 9 .meNoSepat, or to) 2325.04 merg124 to 1oSepat, or er in t1 14_n\050OutputIt4 1oSepat, or ge: "45" 49s only the first el1result o1f) 2512.31 rs
F2result o2empl03 T
(t7t, or ator middle47 the end of ger)or 677t, or ge: "45" 49s first el1result o1f) 2512.31 rs
F2result o2empl033lastr 677t, or copies  ( rever665t, or ator middl whic9 F
(10.2.5 firsterator, cnge) 129.49 672.87t,5r665t, or .24 ( copies merg124s Ge6er665t, or ator middl which the following 320.74 489.85 P
2 10.31 (bisnew_va1.48 (ar372.3er665t, or 0 Q
-0.317.89 P
2 10 Qt.9.56 6537.85 PardIter( applications ostable, that is, the relative3-0.09 ( thinge) 1_merg1e) 7at are not removed is the same) 176.08 477.85 P
1.42 10 Q
-0.42 (20050last - first\051) 358.59 477 P
4 9 1 0609.37 P
4 9 Q
2.83 (*\P
(last\051) 72 360.37 T
2 10 9 Q
2.83 (*\05870.09 ( thinge) 1_merg1e) 7at are not removed is the same) 176.08 477.85 P
1.42 10 Q
-0.42 576050last - first\051) 358.59 478 309.99 245.37 P
4 9 1 0565 Q
-0.4irstnge) 1_merg133051\06.07 (first1) 386.0 Qmerg1s_copy21 98.8terator, claturns *\s42.33\06.07 (f.24 ( copi6 (binary_pred\050*i, *\1limin\06.07 (first1) 386.0 Q copies3ne.) 06.07 (f.24 ( copi6 (b0.62 (un P
4 9 Q
- lasirst06.07 (first1) 386.0 Q T>t0 R
70.4.0Ite07st06.07 (f04 T
(O129.49 67
-0.3merg18 31.56 T airst2) 43534.07 (f.24 ( cop4
2 ator result\051;) 22.612534.07 (fte <class Iterange) merg18 703 (th51)534.07 (f54 9lasIter
[ 1 0 
(temp212534.07 (fte 9lasIter 0 0 1 0] 0 0 ]
[ 0 0 1 0 1 1prediccop 298.654t534.07 (f1the lairst 0]
[ 1 0 1 0 1 
4 9 Q
0..85 2sairst alway 0]
 cede]
[ 1 0 1 0 1 
4 9 Q
0.se4 9 . When4 9 Q
-050resu2.07 (f04 T
(Oad Q
2.4[ 0 Generator gen\051;) t - first) 1530., or to) 239.65.04 577.85 P
4 9 Q
1.42 ( rent f910530., or 08 310.04 T
(Ou9 F
(10.2.5 firsterator, cnIf no ad Q
2.4[ 1 0 
(swa530., or ( Generator gen\051;) tn0 (rand) 1new_v.8Q
( oQ
-0.49 (removO4 57N 0 0 0 K
0  0 6
( oQ
-0.49ents ref
9 F
lexonstmaytIterator, 29pl8
( oQ
-0.49
4 9 Q
- P5 (ficlass Randomony21 98.8 truc
4 efle) 72768 477.te 97 P
((TssIterator>) folloator middlbasictericlass Randomony21 98.8 truc
4 efange)yQeven4
(tkdew_vam489.erifle) 72 .18 334.85 8e 0.ntain0 R
m489.
le1;) 180 5icate>) 108 542.ange) semanticonst T& oericlass RandomsIt(\050llizorwardm489.erifle) 72481.37 P
2e: " 0  shuffle) 2waytIy) foll0 R
unP
2 1o 0.ntain
-0.3maximumdefined if)occur) 72 0 5icawardI108 542,rdIteraerator l 72orerator>)1o 0.ntain
-0.3minimum0.85 (so 2 122.89 240.15 ([middle,) 496.8 372.37 050first + \015.37 P
4plate <class 283 (*\0 022 T
-0. 10 rincludese) 72 606.71 T
4 1sult o1emplate <class 1sult\1"45" 4739plate <cllate <class 2sult o2Ig cond3onlate <cllate <class 2sult\2P
4 9 Q
5.74 (80245.37 P
4 9 Q
2.83 (*\050first + \015.37 P
4plate <class 2ding pre 9 Q
2.83 (*\03582 T
-0. 10 rincludese) 72 606.71 T
4 1sult o1emplate <class 1sult\1"45" 47347ss Outpllate <class 2sult o2Ig cond3461 T
-0.llate <class 2sult\2,st, Forw3461 T
-0.309.99 245.37 P
4 94dist461 T
-0- Q
0 X
ncludesclass O2 10 Q
0.07 ( intoeeSetSepColorstakes 10.15 (first + \0
0 Xd:) 72 5ast\0 O2 10 Q
0.07 ( intoeeSeiicawardI108 542ugh all
%%EndPag7mp212 10.15 (first + \0
0 X 6.85 P2esult\2 9 Q
-00
2 10 O2 10 Q
0.07 ( intoeeSeis 0.ntain1
[ 0 6 T airst2)e85 4.4 10.15 (first + \0
0 X6.85 P1e37 P
4 9 O2 10 Q
01) 22ult\15 334.ass 059.37 T
4 9 Q
([0 Q
97.37 P
4 9 1 0 0 0  059.37 Tto) 2325) 22InputIte 46160.059.37 T
4 9 Q
([0 Q
 o48 (w.erthe end of  ) 5160.059.37 Tto) 2325) 22e) 7.31 rs
F1result o1f) 2512.31 rs
F2result o2emplate  * 22 ( ren7 t820.059.37 T
4 9 Q
(9 F
(10.2.5 firsterator, c last,)30.15 ([middle,) 496.8 372.37 050first + \015.37 P
4plate <class 2ding predicate are done.) 1692752 T
-0.57 (remove_copyeri_unP
2e) 72 606.71 T
4 1sult o1emplate <class 1sult\1"45" 47260ss Outpllate <class 2sult o2Ig cond  10 T
-0.llate <class 2sult\2,st, Forw  10 T
-0. 184.48 639.33 P
2 10 Q
0.05 (.)2382 T
-0 1 15.2d
4 9 Q
2.83 (*\050first + \015.37 P
4plate <class 2ding predicate are don"ing pr45" 47
661 T
P0.309.99 > 1 1 0 152 T
-0.57 (remove_copyeri_unP
2e) 72 606.71 T
4 1sult o1emplate <class 1sult\1"45" 47domAate <cllate <class 2sult o2Ig condco3late <cllate <class 2sult\2,st, Forwco3late <cass T>) 108 586.52 T
( 309.99 245.37 P
4 9 1 01722 T
-04l whieri_unP
2Itst +5T
(template <c2 47
%%5 P
4ruc
0 1 21 98.8unP
2  Q
-0.09 ( throu
4 9 Q
0.copyturns th.37 P
4 9 Q1 == true) 320s are do+5T
(temp-0 1 0 0.P
4ruc
8.8turns.9.56 T
s undefined if) 67hieri_unP
2It155ss Si Q
-0.05 ([first,  0 9i29
[ 1 0 1 0 0 1 0]050laI108 542ug 0]
 7 42ugh ) 114airst 0]
[ 1tor,
4 9 Q
0..85 2f ar0 0 Si Q
-0.0f the elirst is 0. 18dthe end of verseor last\051;) 108922e) 7.31 rs
F1result o1f) 2512.31 rs
F2result o2emplate  * 22 ( reg7.377rseor lastirst1) 386.1(Ou9 F
(10.2.5 firsterator, c0 1 0 910seor last(ge) 129.49 672.ctly)70.15 ([middleeri_unP
2It13\050*y)70.15 (ents ref
h the following 320.74 489.85 P
2 10.31 (bisnew_va1.48 (  Q
-0.317.89 P
2 10 Qt.9.7 Exa1ly)70.15 ([middle,) 496.8 372.37 050first + \015.37 P
4plate <class 2ding predicate are done.) 169952 T
-0.57 (remove_copyeri_ 72orerator>e) 72 606.71 T
4 1sult o1emplate <class 1sult\1"45" 4784es. At9 Q
0.1 (generate_n) 397.55 639.33 P
250 Q
2017.89 P
451 Q
30.53 ( [result, result + \050last - first\051\051) 336.8 502.85 P
2 10 Q
-0.25 ( such) 517.22 502.85 P
-0.21 (that for any non-negative integer) 72 490.85 P
4 9 Q
-0.46 ( i < \050last - first\051) 216.9 490.85 P
2 10 Q
-0.21 ( the following assignment takes first) 195.051irst1) 465.73 561.85 P
2 10 Q
1.26 (applications of) 72 549.85 P
4 9 Q
2.73 (opllate <class 2sult o2Ig condtor, clllate <class 2sult\2,st, Forwtor, class T>) 108 586.52 T
s are done.)03.37 P
4 9 Q
2.83 (*\050first + \015.37 P
4plate <class 2ding predicate are don"45" 47681Outp37 P
4 9 Q
2.83 ()"4670
-0.57 (remove_copyeri_ 72orerator>e) 72 606.71 T
4 1sult o1emplate <class 1sult\1"45" 47659e <cllate <class 2sult o2Ig cond648, clllate <class 2sult\2,st, Forw648, c-7 6 Xass T>) 108 586.52 T
( 94dis648,Pat309.99 245.37 P
4 9 1 0637 T
9.617hieri_ 72orerator>first\08t, or ator middle8
%%5 P
4ruc
0 1 21 98.8 72orerator>) Q
-0.09 ( throu
4 9 Q
0.copyturns th.37 P
4 9 Q1 == trwardIter\08t, or g corr the) 443P
4ruc
8.8turns.9.56 696.3 252 269.3043.52eri_ 72orerator>fi8 (,09 696.3 252
(template50 9i29guaturteorwardIe9
[ 1 0 1 0 0 1 0]050laI108 542ug 0]
 7 42ugh)9275249 696.3 252 the ra) 114airst 0]
[ 1tor,
4 9 Q
0..85 2 lirst is 0. 18dthe end of ver594.07 (f.24 ( cop3922e) 7.31 rs
F1result o1f) 2512.31 rs
F2result o2emplate  *lass O9.5294.07 (f1t75.222 ( rever582.3 252
(templat81hic9 F
(10.2.5 firsterator, cnge) 129.49 672.102249 582.3 252]
[ 0 1 7.52eri_ 72orerator>fi2P
419r582.3 252
(templat81hich the following 320.74 489.85 P
2 12)e82.07 582.3 252(.31 (bisnew_va1.48 (  Q
-0.317.89 P
2 10 Qt.9. P
4 51>) 108 681 T3 P
4 9 Q
0.1 (gen) 287.05 6315.37 P
4plate <class 2ding predicate are done.) 169548, cl57 (remove_copyeri_difct) 72 e) 72 606.71 T
4 1sult o1emplate <class 1sult\1"45" 47537 T
cllate <class 2sult o2Ig cond526, clllate <class 2sult\2,st, Forw526, class T>) 108 586.52 T
s are done.515.37 P
4 9 Q
2.83 (*\050first + \015.37 P
4plate <class 2ding predicate are don"45" 47493.89 37 P
4 9 Q
2.83 ()"4482, cl57 (remove_copyeri_difct) 72 e) 72 606.71 T
4 1sult o1emplate <class 1sult\1"45" 474i\051rllate <class 2sult o2Ig cond460eratllate <class 2sult\2,st, Forw460eratass T>) 108 586.52 T
( 9condi4 firs T249.( retus are d, Forw44 fir51) 30eri_difct) 72 rdItera0 Predicate, clants %5 P
4ruc
0 1 21 98.8difct) 72   Q
-0.09 ( throu
4 9 Q
0.copyturns th.37 P
4 9 Q1 == true)96.52 T
43 P
4 9 
43922e) 443P
4ruc
8.8turns.he end of ver43846
%%Page: "458522e) 7.31 rs
F1result o1f) 2512.31 rs
F2result o2emplate  * 22 ( ren12.07 43846
%%P0 0]
[ 0  whic9 F
(10.2.5 fir51\04(swa408t, or g 
0 Xterator, cnge) 129.49 672..89 P6.3 252]
[ 0 1 530eri_difct) 72 rd8 (,89 P6.3 2520 0]
[ 0 6which the following 320.74 489.85 P
2 10.31 (bisnew_va1.48 (ue) 320s 260s89 P6.3 252(17.89 P
2 10 Qt.9. P
3o4s elemardIter( applications oen) 287.05 6315.37 P
4plate <class 2ding predicate are done.) 169372, cl57 (remove_copyeri_symmetric_difct) 72 e) 72 606.71 T
4 1sult o1emplate <class 1.) 169361tor ult\1"45"ond350051rllate <class 2sult o2Ig 2)70.d350051rllate <class 2sult\2,st,st\050, class T>) 108 586.52 T
s are done.339.37 P
4 9 Q
2.83 (*\050first + \015.37 P
4plate <class 2ding predicate are don"45" 47317tor 37 P
4 9 Q
2.83 ()"4306, cl57 (remove_copyeri_symmetric_difct) 72 e) 72 606.71 T
4 1sult o1emplate <class 1.) 1692, cla ult\1"45"ond284051rllate <class 2sult o2Ig 2)70.d284051rllate <class 2sult\2,st,st\284051rass T>) 108 586.52 T
( 9cond273firs T249.( retus are d, Forw273fir-1dIte(eri_symmetric_difct) 72  or) 120., or ator middl59s %5 P
4ruc
0 1 21 98.8symmetric8difct) 72   Q
-0.09 ( throu
4 9 Q
0.copyturns tf aryPre25, 8 714ize134 .37 P
4 9 Q1 == true) 320443P
4ruc
8.8turns.he end of ver10.207 (f.24 ( cop2822e) 7.31 rs
F1result o1f) 2512.31 rs
F2result o2emplate  * 22 ( ren9or la10.207 (fcate, clas3 (9 F
(10.2.5 firsterator, cnge) 129.49 672.dir 00t, or to) 23hro6e(eri_symmetric_difct) 72  os Ou180 a0 Predicate, cla47
%%h the following 320.74 489.85 P
2 12)e87the  a0 Predi(.31 (bisnew_va1.48 (  Q
-0.317.89 P
2 10 Qt.9. P
21Q
-0.49
4 9 Q
- P6 Heapandom shuffle) 7xact 477.te 99.6122A heapa 0 1 (,) 120.6 5organizator>) Q
 0 1 0 1 1pra P
2 1021.52 T.copytur85 Ta
4 9 ass OutputItst +8kes place:) 325.T
(O[a,10 Q
0)( oveo6e+8kes pla32 ( in theQ
97.3stor laT
(+8kes pla" 49s copykey ns)p6 T
e5 fir:2.31 15 334.ass168(last\051) 72 2 (*a)719plss168(last\cate, cla490 9i29.49 larg29t0108 542ugh all
%%End.85 (.31 214.48 26ss168(last\051) 72 2 (*a)7([fi16s168(last\cate, cla490 9maytIterem.31ddIter40hr9Q
168(last\051) 72 2 (pop_heap)edo4s s168(last\cate, cla490 signment 168(last\r rand ( s new0108 542uadd1ddIterst +5.52 261.37 P
.89 P(push_heap)e12 10 +5.52 2610 0]
[ 0 64s  1gh O4 57ment fro+5.52 261.37 P
.89 P(OutputI7ak93+5.52 2610 0]
[ 0 64s ate  timrange)se ns)p6 T
e5 m 10 heaporm dful10.0priand)y) 1 1 53+5.52 261(queuet.9.56 T
40.15 ([middlem 10_heap)e100 48sT
40.15 (ents ref
9 .56 Tsra P
2 10 31.5a heapa
(\050l7.08 T
40.15 ([middle8 16theap)e.059.1sT
40.15 (ents ref
nd\051;)heapa 31.5a 21 98.8s 354.041 -ce4141 T
40.15 ([middle108 147.56 T
(OutputIterator fill_n\050Outputorder of the push_heapconst T& value\051;) 108 136.56 T
-0.19 (fill) 72 117.89 P
2 10 Q
-0.01545.37 P
4 9 Q
2.83 (*\P
1.31 (hold:) 72 245.37 P
4 9 Q
2.83 (*\089rder of the push_heapconst T& value\051;) 108 136.56 T
-0.19 (fill) 72 117.89 "45" 47d8es. At9 Q
0.1 (generate_n) 397.55 639.33 P
251 Q
3017.89 P
452 Q
40.19 ([first, first + n\051) 406.07 117.89 P
2 10 Q
-0.09 (.) 502.69 117.89 P
4 9 Q
-0.19 (fill_n) 507.6 117.89 P
2 10 Q
(returns) 72 105.89 T
4 9 Q
(first + n) 106.54 105.89 T
2 10 Q
(. Exactly) 155.14 105.89 T
4 9 Q
(last - first) 195.052105.89 T
2 10 Q
( \050or) 259.88 105.89 T
4 9 Q
(n) 277.62 105.89 T
2 10 Q
(\051 assignments are done.) 283.
4 9 (push_heap)e.2.6 Generate) 72 85.610 Q9050landom_snments are don9
28 714]
[ 0 1  9 (ator result\2 ( 14.48 269.49 6 Generate) 72 85.610 Q 0 1 0 0 0 heapa
(\ ns)p6 lynge) 129.49  180 1gh all)e.05939]
[ 0 1 0 0 1P(Ousult +meNoSep
0 0 0 1 0 0 0 22rator, cl1random_6>) 108 714 T
(void 10 Q231.56 T a4 489.85 heap)e1.52 Sep
0 0 0 1 0 0 0 22raator result\051;) 258 910) 108 714 T
(void 10 the end of gPartitep
0 0 0 1 0 0 0 22ratdone. The result of) 216.7ctly)) 108 714 T
(void 10 Q9 F
(10.2.5 fir51\04(st, ForwardIterator, c lastator>) 108 681 T
(OutputIterator generate_n\050OutputIterator first, Sizop_heapconst T& value\051;) 108 136.56 T
-0.19 (fill) 72 117.89 P
2 10 Q
-0( invokQ
-0.91 (gen) 236.78 651.33 P
2 10 Q
-0.42 ( and assigns th16first, Sizop_heapconst T& value\051;) 108 136.56 T
-0.19 (fill) 72 117.89 ,igns the retu309.99 245.37 P
4 9 1 059283.
4e47 pop_heap)e P
4 2.3 2520 0]
[ 0 180 Q9050landom_snments atakes57
28 714]
[ 0 1 04raator result\051;) 207 P
24 2.3 2520 0]
[ 0 180 Q 0 1 0 0 0 heap0]
[ n) 434.6.49  180 1gh all Ousult +mePAGE73f57
28 714]
[ 0 1 04ra.85 2f 51324 2.3 2520 0]
[ into poew_va.49  180 1gh all Ousult +me56  (3207 (f.24 ( cop7.52tor, cl1raaryP1) 763.3 2520 0]
[ into poa
(\ mufflen5 3705  (3207 (f.24 ( cop7.52ator result\2 ( 14.48 2940.15763.3 2520 0]
[ into poa 31.5a heapthe end of g84l wh (3207 (f.24 ( cop7.522are done. The ) 208.1h (3207 (f(esult of) 216 43291s elements ref
9 F
(10.2.5 firsterator, c latakes55or>) 108 681 T
(OutputIterator generate_n\050OutputIterat52 first, Sim 10_heapconst T& value\051;) 108 136.56 T
-0.19 (fill) 72 117.89 P
2 10 Q
-089 st +Q
-0.91 (gen) 236.78 651.33 P
2 10 Q
-0.42 ( and assigns ti9platet, Sim 10_heapconst T& value\051;) 108 136.56 T
-0.19 (fill) 72 117.89 "45" 4748 retu309.99 245.37 P
4 9 1 047283.0204 m 10_heap)erst, 2.3 2520 0]
[ 0  9 (%5 P
4ruc
0 1 heapaout  Q
-0.3nments are do455t, or to) 23hr847
612 792 0 FMBEGINPA7584t, 2.3 2520 0]
[ 0  9 (the end of g48584t, 2.3 252to) 23hr8473*ne. The result of) 216.ove78t, 2.3 2520 0]
[ 0  9 (%5 F
(10.2.54.0I51) 3, 2.3 252(firsterator, c last443r>) 108 681 T
(OutputIterator generate_n\050OutputIterat42st + \050i - r_heapconst T& value\051;) 108 136.56 T
-0.19 (fill) 72 117.89 P
2 10 Q
-0410st +Q
-0.91 (gen) 236.78 651.33 P
2 10 Q
-0.42 ( and assigns t388t + \050i - r_heapconst T& value\051;) 108 136.56 T
-0.19 (fill) 72 117.89 "45" 47377erat309.99 245.37 P
4 9 1 0366 T
9.615Q
8 16theap)e
0 0 7t, or ator middl21 T
0 0 0  0 1 0 1 1predicheap)e1re do0 7t, or .24 ( cop4547
612 792 0 FMBEGINP39i16s0 7t, or ator middl21 Tthe end of ger)91o0 7t, or .24 ( cop4547 Output3las10 0 7t, or ator middl21 T
9 F
(10.2.5 firsterator,   301 56.d8e10 0 7t, or .24 ( cop4547 )t534.6s0 7t, or ator mi(P
4 te>)  X
((Outp5s elemardItera 9 Q
0.15 ([fi19.1htp5s elem 10 Q
( and)84esutp5s elemardIter8 16theap)e189rdhtp5s elem 10 Q
( erator f
[ 1 0place8e1htp5s elem
4 9 Q
- P7 Minimuma
(\ muximumclass O4 i\051) 72 478.85 P
2 10 Q
-0tputIter2omAate <c5 P
4 9 Qmpn-0.35 P
4 9 Qan op\051;) bresponding co3late <c8.85 P
2 10 Q
-0t5.37 P
4 9 Q
2.83 (*\0561Aate <c5 P
4 9 Qmpn-0.35 P
4 9 Qan op\051;) b) 309.99 245.37 P
4 9 Q
2atorate <c8.85 P
2 10 Q
-0t83 (*\0528Aate <c5 P
4 9 Qmax-0.35 P
4 9 Qan op\051;) bresponding c17late <c8.85 P
2 10 Q
-0t5.37 P
4 9 Q
2.83 (*\01952 T
-0.5 P
4 9 Qmax-0.35 P
4 9 Qan op\051;) b) 309.99 245.37 P
4 9 Q
2.84es. Atcop73a\min4.ass16done.) 32 ( in th14_n\050Outp T& oemall]
a
(\0588.ss16done.) .24 ( cop73a\maxandomAP
216done.) 32 ( in th14_n\.49 larg2r2.37 0 6wh16done.) .24 ( cop73a\mgh)92P9001216done.) 32 ( in th14_n\94 5657ak91s16done.) .24 ( cop73a\maxan1 1 17s16done.) 32 ( in th14_n\050Out Q
0..85 2 argu 542uw[ n)Q
0ir argu 5425 fir51\1li37s16done.) \4 9 Q.Itst +5T
(te PardIter( applications of the correspon83 (*\0131Aate <cesult, UnaryOpermax_) 72 2698 6.52 T
(OutputIterator result, UnaryOperatio7 P
4 9 Q
2.2orate <c8.85 P
2 10 Q
-0ssignments are done.) 23 117.89 P
2 108Aate <cesult, UnaryOpermax_) 72 2698 6.52 T
(OutputIterator result, UnaryOperatio"45" 47871 T
-0.309.99 245.37 P
4 9one.)6es. At9 Q
0.1 (generate_n) 397.55 639.33 P
252 Q
4017.89 P
453 Q
50.53 ( [result, result + \050last - first\051\051) 336.8 502.85 P
2 10 Q
-0.25 ( such) 517.22 502.85 P
-0.21 (that for any non-negative integer) 72 490.85 P
4 9 Q
-0.46 ( i < \050last - first\051) 216.9 490.85 P
2 10 Q
-0.21 ( the following assignment takes first) 195.053irst1) 465.73 561.85 P
2 10 Q
1.26 (applications of) 72 549.85 P
4 9 Q
2.73 (o-1.46a\max_) 72 269.
0 713t, or ator middl54_n\050Outp T& o.85 2 rst\051) 179.16 713t, or 441.73 1 16wai th3T
(vo713t, or ator middl54_n\051) 72 273.37  0 i9 713t, or 441.73 1 16wa
612 792 0 FMBEGINPoQ
-5o713t, or ator middl54_n\ 10 Q
-0.01 ( such) 516.98 2367s
9 713t, or 441.73 1 16wa j) 208.16o713t, or ator middl54_n\051) 72 273.37o ev6 713t, or 441.730 22raator result\051;) las701 Predicate, cla17 X
0 0 0 1 0 0 004.4 501.85 P
4 9 Q
2.46 (i) 334lons)as701 Predi441.730 22ra !110.89 <T
4 9 Qut d5005s701 Predicate, cla17 98 2 1utput701 Predi441.730 22ra0.8 110.89 P
4 9 Q
(Ra Q
-0.8423y)"4701 Predicate, cla17 >) 108 44701 Predi(Exact 233051epat, o ([middlem xe) 7.31 rs
F P
4 9 Q
1.42 ( , 037 P
2  fir41epat, o ( 10 Q
( e genicaT
(const T& o04.4 501.85 P
4 F
(10.2.5 first\051 -  7h14_epat, o ([middle( applications of the correspon83 (*\0667tor unique_copy\050Imgh_) 72 2698 6.52 T
(OutputIterator result, UnaryOperatio7 P
4 9 Q
2656e <c8.85 P
2 10 Q
-0ssignments are done.) 23 117.89 P
2 1634tor unique_copy\050Imgh_) 72 2698 6.52 T
(OutputIterator result, UnaryOperatio
-0.42 (23
-0.309.99 245.37 P
4 9one..53 To-1.46a\mgh_) 72 26f ver593t, or ator middl54_n\050Outp T& o.85 2 rst\051) 179.16 593t, or 441.73 1 16wai th3T
(vo593t, or ator middl54_n\051) 72 273.37  0 i9 593t, or 441.73 1 16wa
612 792 0 FMBEGINPoQ
-5o593t, or ator middl54_n\ 10 Q
-0.01 ( such) 516.98 2367s
9 593t, or 441.73 1 16wa j) 208.16o593t, or ator middl54_n\051) 72 273.37o ev6 593t, or 441.730 22raator result\051;) las581 Predicate, cla17 X
0 0 0 1 0 0 004.4 501.85 P
4 9 Q
2.46 (i) 334lons)as581 Predi441.730 22ra !110.8j1<P
.37 P
2 d5005s581 Predicate, cla17 98 2 1utput581 Predi441.730 22ra0.8 110.8j,Q
i 9 Q
(Ra Q
-0.8423y)"4581 Predicate, cla17 >) 108 44581 Predi(Exact 23305156at, o ([middlem xe) 7.31 rs
F P
4 9 Q
1.42 ( , 037 P
2  fir4156at, o ( 10 Q
(  genicaT
(const T& o04.4 501.85 P
4 F
(10.2.5 first\051 -  7h14_56at, o (
4 9 Q
- P8 Lexicographical
4 F
(10.2.33051\08 i\051) 72 478.85 P
2 10 Q
-0plate <class 15.37 P
4plate <class 2tIterat5282 T
-0. 10 rlexicographical_4 F
(1 e) 72 606.71 T
4 1sult o1emplate <class 1sult\1"45" 47517ss Outpllate <class 2sult o2Ig cond 96.ate <cllate <class 2sult\2P
4 9 Q
5.74  96.ate <cP
4 9 Q
2.83 (*\050first + \015.37 P
4plate <class 2ding pre 9 Q
2.83 (*\0484es. At. 10 rlexicographical_4 F
(1 e) 72 606.71 T
4 1sult o1emplate <class 1sult\1"45" 47473ss Outpllate <class 2sult o2Ig cond46order of llate <class 2sult\2, 309.99 245.37 P
4 9
(retdi622 T
-04l .52texicographical_4 F
(1  last443r(template <c2 4eeSetSepColors96.st443r(tempto) 234e35.2d:) 72h3T
27t443r(template <c2 4eeSeit T& oer354.04) Q
 0 1 0 1  followi;) 304. 273.37 58irst443r(tempto) 234e35.26.85 P1e37 P
4 9443r(temp0ratorult\15 334.assI3.82 2610 0]
[ 0 ) 22 0] exicographically] es2 10 n T& oer354.04) Q
 0 1 0 1  followi;) 304. 273.3711hro6eI3.82 261441.730 26 (6.85 P2esult\2 9 Q
-446ndPaI3.82 2610 0]
[ 0 ) 2297.3) 72 225aI3.82 2610705 (tSepColorver43982 261441.730 ) 22InputIte96.a9r43982 261cate, cla45Q
 o48 (w.erthe end of  33.a9r43982 261441.730 ) 222arempn-0.3.31 rs
F1result o1f) 2,2.31 rs
F2result o2emplate <c 60 ir43982 261cate, cla45Q
  genicaT
(const T& )3, 2.lat41or last(04.4 501.85 P
4 F
(10.2. first\051 -.89 P70.15 (
4 9 Q
- P9 Permutator>)(\050ltputItst e87th85 PardIter( applications ostable, that is, the relativ367s 133.9 10 rnext_permutator>e) 7at are not removed is the same) 176.08 477.85 P
1.4atio7 P
4 9 Q
23563 P
4  P
4 9 Q
2.83 (*\P
(last\051) 72 360.37 T
2 10 9 Q
2.83 (*\03rre 133.9 10 rnext_permutator>e) 7at are not removed is the same) 176.08 477.85 P
1.4atio"45" 47323e 133.9309.99 245.37 P
4 9 1 03123 P
4 969 1(next_permutator> last,)300.42 
(template4_n\.uffle\oer354.04) followi;) 304. 273.371dIter,)300.42  269.30431waator result\051;) 132.07 ,)300.42 
(template4_n\
(\ t 27sators 108 31.56 T0.40 P3 ,)300.42 5- fiae4_nnext)esu2.2st,)300.42 
(F34e76 Xtermutator>cnge) next termutator>eratfouati;) 9050l0 R
700.0.49 ericlftor mtermutator>s8 703 T
28100.42 op4
2  exicographically]21 98.8ew_var10 Q
t  X
((Ou 0 00.42  269.31ro6e(ndom sor<37 5== 3a 0 00.42 0 0]
[ 0 194 eratoe72.33u 0 00.42  269.31ro6e(45.3
-0.co02a 0 00.42 0 0]
[ 0 194 cnIf  10 Qa termutator>eexists) 108tSepColort4616Ou 0 00.42  269.31ro6e(d:) 725tak93 0 00.42 0 0]
[ 0 194 c) 108 44 0 00.42 f) 6 22O48 (w.er) 108t 27sators T& oer354.04)231.56 T emall]st termutator> 1 0 0 1 0]
[ 1asce.85 Ply]21 98.8\05,\94 56r) 127-0.42 (tSepColorverIter37 T
2 10 Q
InputIte96.a4rIter37 T
ents refthe end of  33.a4rIter37 T
2 10 Q
.31 rs
F P
4 9 Q) + 6 496Iter37 T
ents ref051;/utIt6r57rIter37 T
2 10 Q
2)0 P
2966Iter37 T
ents ref) 434.6firsterator, c l561A36rIter37 T
2 10 Q
( applications ostable, that is, the relativ223e 133.9 10 rprev_permutator>e) 7at are not removed is the same) 176.08 477.85 P
1.4atio7 P
4 9 Q
22123 P
4  P
4 9 Q
2.83 (*\P
(last\051) 72 360.37 T
2 10 9 Q
2.83 (*\0.83  133.9 10 rprev_permutator>e) 7at are not removed is the same) 176.08 477.85 P
1.4atio"45" 47d79e 133.9309.99 245.37 P
4 9 1 0168( 133.3 1 1 prev_permutator>9.56 T
 00.42 0 0]
[ 1l59s %.uffle\oer354.04) followi;) 304. 273.371dIterT
 00.42  269.37 43waator result\051;) 143r41 T
 00.42 0 0]
[ 1l59s %
(\ t 27sators 108 31.56 T0.417s45QT
 00.42 5- fia651 previoutItst +3700.42 
(F3ia651  termutator>cnge) previout termutator>eratfouati;) 9050l0 R
700.0.49 ericlftor mtermutator>s8 703e96.45 +3700.42 op4
2  exicographically]21 98.8ew_var10 Q
t  X
((Ou125l0.42  269.31ro6e(ndom sor<37 5== 3a125l0.42 0 0]
[ 0 194 eratoe72.33u125l0.42  269.31ro6e(45.3
-0.co02a125l0.42 0 0]
[ 0 194 cnIf  10 Qa termutator>eexists) 108tSepColort4616Ou125l0.42  269.31ro6e(d:) 725tak93125l0.42 0 0]
[ 0 194 cignment 125l0.42 ddl5822O48 (w.er) 108t 27sators T& oer354.04)231.56 T larg29t0termutator> 1 0 0 1 0]
[ 1desce.85 Ply]21 98.8\05,\94 56r) 113-0.42 (tSepColorver101r37 T
2 10 Q
InputIte96.a4r101r37 T
ents refthe end of  33.a4r101r37 T
2 10 Q
.31 rs
F P
4 9 Q) + 6 496101r37 T
ents ref051;/utIt6r57r101r37 T
2 10 Q
2)0 P
2966101r37 T
ents ref) 434.6firsterator, c l561A36r101r37 T
9 Q
0.1 (generate_n) 397.55 639.33 P
253 Q
5017.89 P
454 Q
60.19 ([first, first + n\051) 406.07 117.89 P
2 10 Q
-0.09 (.) 502.69 117.89 P
4 9 Q
-0.19 (fill_n) 507.6 117.89 P
2 10 Q
(returns) 72 105.89 T
4 9 Q
(first + n) 106.54 105.89 T
2 10 Q
(. Exactly) 155.14 105.89 T
4 9 Q
(last - first) 195.054irst1) 465.73 561.85 P
2 10 Q
1.26 (applications of) 72 549.85 P
4 9ndc1t) 195.0186.0G\050llizorwnumeric8ndom shuffle) 7711[0 Q (
4ts ref186..1 Accumu9 Q
)e.2.6 3.2 Out8 681 T3 P
4 9 Q
0.1 (gen) 287.05 639.33 P
2tputIter67
-0.03.9TTa
4umu9 Q
e) 72 606.71 T
4 9 Q
(template <class Forwar T)23io7 P
4 9 Q
2662.09ap.T3 P
4 9 Q
0.1 (gen) 287.05 639.33 P
2t5.37 P
4argumeOdom shuftIterator0-0.03.9TTa
4umu9 Q
e) 72 606.71 T
4 9 Q
(template <class Forwar T)23io
-0.42 (29-0.03.9argumeOdom shufrwardIteo37 P
4 9one..58-0.03.1dIte(accumu9 Q
)e.2.572.4redicate, cla590 9i29simi.6 51.56 T APL)e1r6.572.4redi5- fia59s onduator>fi224ir41572.4redica fia59s  ndom sor%
(\ 309mufrLisp l563tly)572.4redi5- fia59s onduat2)es4tly)572.4redica fia59s  functor> 1bu2 rs a\050ndom_
- 251) 3572.4redi0e78t(difc120.tyclft foll0 R
te) 129.49 67 onduator>monylaI1mptyoer354.04);) 9lway 0rr35i
2.04
-0.3ioial  180 .9. P
487t47 (f04 T4_nAccumu9 Qor>eratt\05)e P
4 2.47 (f04 T4_n;) .3ioializ0 R
70.0accumu9 Q1) 17 1o02a4 2.47 (fto) 239.652e(accf ger)29a4 2.47 (fator middl24_n\ew_va.49 .3ioial  180 f gP4 1804 2.47 (fto) 239.652e(.3io
- 25108a4 2.47 (fator middl24_n\
(\ t[ n)modify0 R
io
- 4 11804 2.47 (f04 o6e(ew_v.8Q
( (3247 (fto) 239.614 (acc =0acc + *i) s4t77( (3247 (fator middle64 eratol th51) (3247 (fto) 239.614 (acc =0wardIteo37 P0acc,P
.37 P
2 84-0.0 (3247 (fator middle64 e 0 0 wardI) 516.98 2313.2 O (3247 (fto) 239.614 (ipies3n080 (3247 (fator middle64 e 0 6 T airst2)e90 48s (3247 (fto) 239.614 ( ator result\051;)  P
4510 (3247 (fator middle64 e 0) 72 2830 (3247 (fQ04 T
.16 43291s485 PardIterwardIteo3)r101rr6.591s485 P 10 Q
( erat9050ladtor f1o 0aus oeide effQ
tt.9.74om_6>591s485 P
4 9 Q
-.74 In050 ns)duat33051\3 P8lemardIter( applications oen) 287.05 6315.37 P
4plate <class 2ding pretputIter530.61tor T)23050_ns)duate) 72 606.71 T
4 1sult o1emplate <class 1sult\1"45" 47472.3\051rllate <class 2sult o2Ig cond488.61tor T)23io7 P
4 9, Forw488.61tor ( applications oen) 287.05 6315.37 P
4plate <class 2ding pretPigns t466.61tor 37 P
4argumeOdom shuf1Ig condi55.61tor 37 P
4argumeOdom shuf2tIt309 do455t61tor T)23050_ns)duate) 72 606.71 T
4 1sult o1emplate <class 1sult\1"45" 47444.3\051rllate <class 2g condi33.3\051rult o2Ig 23\0i33.3\051rT)23io
-0, Forw433.3\051rargumeOdom shuf10wardIteo31,4argumeOdom shuf20wardIteo327 P
4 9 1 04n2 11 Atcop7irstn050_ns)duat -.89 P3 P
(520 0]
[ into poa45.3utes 10s 129.49 ;) .3ioializ0 R
70.0accumu9 Q1) 1742.33 P3 P
(52.24 ( cop76e(accf g66.25aIP3 P
(520 0]
[ into poaew_va.49 .3ioial  180 f g82.45  P3 P
(52.24 ( cop76e(.3io
- 37 19aIP3 P
(520 0]
[ into poa
(\ t[ n)7472.09aIP3 P
(520 22ramodify0 R
ionew_v.8Q
(39pl9 261441.730 180 acc =0acc + 110.89late  * 110.892 9 Q
-+5T
15(39pl9 261
(template24 eratoe7== 3a39pl9 261441.730 180 acc =0wardIteo317 P0acc,PwardIteo327 P.89l,P
.2emplate <c.059.8(39pl9 261
(templ9.61 po 0 0 wardI) 516.98 2051679 P
(52.24 ( cop3: " 19.74om11679 P
(52
(templ9.61 pogh all
%%EndPag64onst679 P
(52.24 ( cop3: " ator result\051;) c17l391679 P
(52
(templ9.61 poa
(\ .03 ( [res.9.207 679 P
(52.24 ( cop3: " 2f g485881679 P
(52
(templ9.61 poa 0 6 T airst2)e591180679 P
(52.24 ( cop3: "6.85 P2es.85 P2512.31 rs
F0.416 i9 679 P
(52(esult of) 25 334.ass 67.915 (ents ref
hn 04 T
.161re do067.915 (ardIterwardIteo319.763.a9r 67.915 (ents ref94 56520 993067.915 (ardIterwardIteo3237  0 4ss 67.915 (ents reffirs9050ladtor f1o 0aus oeide effQ
tt.9.st1t820.67.915 (
4 9 Q
-.77 (,) 1al sumclass  7h12Out8 681 T3 P
4 9 Q
0.1 (gen) 287.05 639.33 P
2dicate are done.) 169327e13451rass T>) 108 586p,) 1al_sume) 72 606.71 T
4 9 Q
(template <class Forwar45" 47316e13451rass T>) 108 586.52 T
s are done.305913ap.T3 P
4 9 Q
0.1 (gen) 287.05 639.33 P
2dicate are don"ing pr4argumeOdom shuftIteratco3l13451rass T>) 108 586p,) 1al_sume) 72 606.71 T
4 9 Q
(template <class Forwar45" 47s Ge13451rass T>) 108 586.52 T
( 9cond2pla1303.9argumeOdom shufrwardIteo37 P
4 9, Forw2pla1303.2l21 Tp,) 1al_sumf ver10.24.42 0 0]
[ 1l4eeSe prigtp To0 wardI) 516.98 279.16 10.24.42 to) 232521 Ti -  7h 47s0.24.42 0 0]
[ 1l4eeSe051) 72 273.37 528 87 0.24.42 to) 232521 T631 (- 1\051) 9512.31 rs
F esult of) 25 334. O4 3r10.24.42 0 0]
[ 1l4eeSe   180 f 50ges7r10.24.42 0  9 (04.4 501.85 Ply4 te>)  X
((Ou a0 47252to) 23hr847-0.3.31 ...7 P.8.85 2 + *7 P..85 2 + 1emplate  + ...2.311+ *7 P..85 2 9co6a651 a0 47252hr84712.31 i es.52 T
s arf) 25 334.438.9Ou a0 472520 0]
[ 0  9 (%rator 7.(Ou a0 47252to) 23.85 8e wardIteo37 P0wardIteo37 P0...,0wardIteo37 P0* Q
(tem*7 P..85 2 + 1emplate ,...7 P1em*7 P..85 2 + .31 i es.52 T
s arf) 25 334. P
21Q
472520 0]
[ -ate24 c) 108 44 1Q
47252.24 ( cop77 Tp,) 1al_sumf ver196.472520 0]
[ -at36eSetSepColors9.16 196.47252.24 ( cop77 T051) 9512.31 rs
F esult of) 29.767673(296.472520 0]
[ -at36eS. Exact 233288(las196.47252.24 ( cop77 Tne. The result of) 216.2 2I8s196.47252cop77 Tcl1ra4 For9(296.472520 0]
[ -at36eS genicaT
(const)9 2403as196.47252.24 ( cop77 TwardIteo3)r49.16 196.47252ents reffirsterator, c lastdomAP75 PardIterwardIteo3)r140 16edomAP75 Pator mi(P
4 x Q
tadtor f1o have sucheide effQ
tt.9.7s4tly)domAP75 PardIter051) 95137ia59sdomAP75 Pator mi(9maytIte te>)  X
( 02299)domAP75 PardIter.85 2 947 225adomAP75 Pator mi(c) 14 125adomAP75 P
4 9 Q
-.74 Adjac542udifct) 72  or) g7mp840518 681 T3 P
4 9 Q
0.1 (gen) 287.05 639.33 P
2dicate are done.) 169+5T
65 Q
rass T>) 108 586adjac542_difct) 72 e) 72 606.71 T
4 9 Q
(template <class Forwar45" 47742.65 Q
rass T>) 108 586P
2 10 Q
0.05 (.) 9.165ap.T3 P
4 9 Q
0.1 (gen) 287.05 639.33 P
2dicate are don"ing pr4argumeOdom shuftIteratndom65 Q
rass T>) 108 586adjac542_difct) 72 e) 72 606.71 T
4 9 Q
(template <class Forwar45" 472 105451rass T>) 108 586.52 T
( 9cond87105451rargumeOdom shufrwardIteo37 P
4 9, Forw871054519 Q
0.1 (generate_n) 397.55 639.33 P
254 Q
6017.89 P
455 Q
70.53 ( [result, result + \050last - first\051\051) 336.8 502.85 P
2 10 Q
-0.25 ( such) 517.22 502.85 P
-0.21 (that for any non-negative integer) 72 490.85 P
4 9 Q
-0.46 ( i < \050last - first\051) 216.9 490.85 P
2 10 Q
-0.21 ( the following assignment takes first) 195.055irst1) 465.73 561.85 P
2 10 Q
1.26 (applications of) 72 549.85 P
4 9 Q
2.73 (o-1.2822adjac542_difct) 72 9.
0 713t, or ator middl59eSe prigtp To0 wardI108 542urect)rorwardIdI) 516.98 2774.6s713t, or 441.73 1 2822i 298.648 713t, or ator middl59eSe 0 6 T airst2)e85 88s713t, or 441.73 1 2822[051) 951211\051) 951\41th85713t, or  (66ap12.31 rs
F esult of) 25 334.ass701 Predicate, clan1eSe   180  04.4 501.85 Ply4 te>)  X
(16doi9 701 Predi441.730 66ap*7 P..85 2 + .31 i es.52 T
s arf) 2 es*7 P..85 2 + .31 i ere 3840"4701 Predi-0 16e(.52 T
s ar2 ( 14.48 7oSepat, or er in tddl21 T98 2795irstepat, or ge: "45" 16e(wardIteo37 P0*7 P..85 2 + .31 i es.52 T
s arf) 2em*7 P..85 2 + .31 i es.52 T
s ar2 ( 14.4f) 29.747ss7Sepat, or er in tddl21 Tc0 1821180epat, or ge: "45" 16e(051) 951\87t46Sepat, or er in tddl21 T grifle51om_6>) 9.07 (f04 T822e) 4 180  672.dir677t, or ge: "45" 61 T *.85 2 9c228 87(t7t, or ator middlT822.9.76) 67h677t, or ge: "45" 61 Tadjac542_difct) 72 9.16do39]
t7t, or ator middlT822etSepColor 67s99h677t, or ge: "45" 61 T051) 9512.31 rs
F esult of) 29., Fo477(t7t, or ator middlT822. Exact 233426l24_677t, or ge: "45" 61 T.31 rs
F esult of) 29.465t61t677t, or cop67s  ( rever665t, or ator middl 1eS genicaT
(const)992th7r665t, or .24 ( cop67 TwardIteo3)r159r41 665t, or ator middl 1eS irsterator, c l512005s665t, or .24 ( cop67 TwardIteo3)r28e don65t, or ator middl 1eSP
4 x Q
tadtor f1o have sucheide effQ
tt.9.33312.7665t, or .24 ( cop67 T051) 951507 don65t, or ator mi(maytIte te>)  X
(56 6537.85 PardIter.85 2 9c44e76 6537.85 P 10 Q
( and)71e76 6537.85 P (a2 ref11  AdaptputItst 6228215 (ents reddl 1eSAdaptput6firs3 P
4 9 Qng prandomat ns)vide  72orfac59mapp5 Ps.resu4 xaF
le,9.56 6942966r .24 ( cop67 Tinsert_) 516.98 241.65.6942966r 5 ([first,  0 9ns)videt6f)r49.15.6942966r  0.ntaineraew_vaanaoutpu2 rst\051)  72orfac5.16 43292t9platndc1t) f11.1 C.ntaineraadaptputItst 56at65 (ents re1l510 I2ug 0oftenrm dful11o ns)vide 051tric98.8 72orf) 129.o 0.ntainer.ange) librdIt9ns)videt16 43292l5102  269.37 ter
[ ck)  P82 T
292l5102 ents re1l510 e37 852 T
292l5102  269.37 terqueue)( oveo4
292l5102 ents re1l510 \94 5651omo4
292l5102 ardIterpriand)y_queue)(of) 72l510 (ents ref
nhr Q
-
70.0adaptput6omat can4
(tkdew_vadifct) 7toer354.04)typQt.9.752 T
 72l510 (
4 9 Q1.1.1 S[ ck) ) 1539k91sTica fiaT822Anyoer354.04)suppor9.85 ndom shuffle) 750ge0 261441.730 61 Tb ck) ce8e2.750ge0 261
(template80 e37260ss3750ge0 261441.730 61 Tpush_b ck) c659.1s50ge0 261
(template80 Q copie14141 50ge0 261441.730 61 Tpop_b ck) t4619s50ge0 261
(template80 Qcan4Iterato9.o instanti Q
)e98.611 50ge0 261441.730 61 T
[ ck)  08Aa.750ge0 261
(template80 .mpltor 5Aa.750ge0 261((,) 120.6 ,rdIter7== 15 (ardItervQ
t98 272" 16er7== 15 (ents ref( 9c92l86er7== 15 (ardIterli 2 9c57l86er7== 15 ( 10 Q
( e (\05079 16er7== 15 (ardIterdr354raaryP19er7== 15 ( 10 Q
( ecan4Iteratoc l528P19er7== 15 (8 681 T3 P
4 9 Q
0.1 (gC.ntainer83 (*\0468.7 Outp37 P
4
[ ck {3 (*\0457.7 Outpfri tru 10 rndom sor==-0.35 P
4 
[ ck<C.ntainer8& xn op\051
[ ck<C.ntainer8& yP
2 10 Q
-0446.7 Outpfri tru 10 rndom sor<-0.35 P
4 
[ ck<C.ntainer8& xn op\051
[ ck<C.ntainer8& yP
2 10 Q
-0495i7 Outppubnic:Iterat424i7 OutptypQdefgC.ntainer:: 180 _typQ  180 _typQ;3 ()"4413t7 OutptypQdefgC.ntainer::siz _typQ siz _typQ;3 ()"4402i7 OutpprotQ
tad:45" 4739pl7T
-0.30ntainerac;3 ()"498.67 Outppubnic:Iterat36at7. At. 10 r1mpty-0.3.311 op\051{\050Out c.1mpty-0.3.311; }3 ()"4958.7 Outpsiz _typQ siz -0.3.311 op\051{\050Out c.siz -0.3.311; }3 ()"4947.7 Outp 180 _typQ&9.op-0.3.311 {\050Out c.b ck-0.3.311; }3 ()"4936.7 Outpop\051 180 _typQ&9.op-0.3.311 op\051{\050Out c.b ck-0.3.311; }3 ()"4925i7 Outp the push-0.35 P
4  180 _typQ&9x.311 {\c.push_b ck-0.3x.311; }3 ()"4914i7 Outp the pop-0.3.311 {\c.pop_b ck-0.3.311; }3 ()"4903t7 Outp}4 9 Q
2292i7 Outp3 P
4 9 Q
0.1 (gC.ntainer83 (*\0270t7. At. 10 rndom sor==-0.35 P
4 
[ ck<C.ntainer8& xn op\051
[ ck<C.ntainer8& yP
2  {3 (*\02P900. At.050Out x.c
(Ray.c;3 ()"4  0 7 Outp}3 (*\0237i7 Outp3 P
4 9 Q
0.1 (gC.ntainer83 (*\0215t7. At. 10 rndom sor<-0.35 P
4 
[ ck<C.ntainer8& xn op\051
[ ck<C.ntainer8& yP
2  {3 (*\020400. At.050Out x.c
<ay.c;3 ()"4193 7 Outp}3 (*\0182i7 Outator middlT (esu4 xaF
le,9.56 g64o0
(52.24 ( cop4ter
[ ck<vQ
t98< 72> >ors9.156 g64o0
(52ator middlT (erat9n8 72ogera
[ ck made out  Q) ce3673(g64o0
(52.24 ( cop4tervQ
t98 29.ut95 g64o0
(52ator middlT (,\94 564 Fo35 g64o0
(52.24 ( cop4ter
[ ck<dr354<char> >or428P18 g64o0
(52ator middlT (era)1\3 P55 g64o0
(52(a charactera
[ ck made out  Q) st +52= 15 (ardIterdr354raar3 4ss+52= 15 ( 10 Q
( and a0 4ss+52= 15 (
4 9 Q1.1.2 rueue)(of)s9.163sTica fia7922Anyoer354.04)suppor9.85 ndom shuffle) 7114i5.42  269.31r7 Tfro26f 272l95 g14i5.42 
(templat790 e37267l95 g14i5.42  269.31r7 Tb ck) c73674 g14i5.42 
(templat790 e372[ 0 4 g14i5.42  269.31r7 Tpush_b ck) st1t13 g14i5.42 
(templat790 Q copie49673(g14i5.42  269.31r7 Tpop_fro26f 37mp23 g14i5.42 
(templat790 Qcan4Iterato9.o instanti Q
)e4212830g14i5.42  269.3(queue)(of)102257 T
ents refthIn (,) 120.6 ,rd99)d02257 T
ardIterli 2 9c04(s5)102257 T
ents refe (\05085005sd02257 T
ardIterdr354raarOu180102257 T
ents refecan4Iteratoc l534.68sd02257 T
ardIter3 P
4 9 Q
0.1 (gC.ntainer83 (*\08dl24_519 Q
0.1 (generate_n) 397.55 639.33 P
255 Q
7017.89 P
456 Q
80.19 ([first, first + n\051) 406.07 117.89 P
2 10 Q
-0.09 (.) 502.69 117.89 P
4 9 Q
-0.19 (fill_n) 507.6 117.89 P
2 10 Q
(returns) 72 105.89 T
4 9 Q
(first + n) 106.54 105.89 T
2 10 Q
(. Exactly) 155.14 105.89 T
4 9 Q
(last - first) 195.056105.89 T
2 10 Q
( \050or) 259.88 105.89 T
4 9 Q
(n) 277.62 105.89 T
2 10 Q
(\050.1 (gqueue {3 (*\0tor, clfri tru 10 rndom sor==-0.35 P
4 queue<C.ntainer8& xn op\051queue<C.ntainer8& yP
2 10 Q
-0)03.37 fri tru 10 rndom sor<-0.35 P
4 queue<C.ntainer8& xn op\051queue<C.ntainer8& yP
2 10 Q
-069 Outppubnic:Iterat681OutptypQdefgC.ntainer:: 180 _typQ  180 _typQ;3 ()"4670
-0.typQdefgC.ntainer::siz _typQ siz _typQ;3 ()"4659e <cprotQ
tad:45" 47648, cl30ntainerac;3 ()"4637 T
ppubnic:Iterat626, cl 10 r1mpty-0.3.311 op\051{\050Out c.1mpty-0.3.311; }3 ()"4615.37 siz _typQ siz -0.3.311 op\051{\050Out c.siz -0.3.311; }3 ()"46 133.9 180 _typQ&9fro26-0.3.311 {\050Out c.fro26-0.3.311; }3 ()"4593.89 3 P
4  180 _typQ&9fro26-0.3.311 op\051{\050Out c.fro26-0.3.311; }3 ()"458 Outp 180 _typQ&9b ck-0.3.3111{\050Out c.b ck-0.3.311; }3 ()"45i\051r3 P
4  180 _typQ&9b ck-0.3.3111op\051{\050Out c.b ck-0.3.311; }3 ()"4560erat the push-0.35 P
4  180 _typQ&9x.311 {\c.push_b ck-0.3x.311; }3 ()"45r first, Sizop-0.3.311 {\c.pop_fro26-0.3.311; }3 ()"45 invok}4 9 Q
2527Outp3 P
4 9 Q
0.1 (gC.ntainer83 (*\05e retu 10 rndom sor==-0.35 P
4 queue<C.ntainer8& xn op\051queue<C.ntainer8& yP
2  {3 (*\049283..050Out x.c
(Ray.c;3 ()"4483Outp}3 (*\047 Outp3 P
4 9 Q
0.1 (gC.ntainer83 (*\0450, cl 10 rndom sor<-0.35 P
4 queue<C.ntainer8& xn op\051queue<C.ntainer8& yP
2  {3 (*\0439.37 050Out x.c
<ay.c;3 ()"4428Outp}3 (*\0417Q (
4ts ref11.1.3 Priand)y queue)(of)396t 477.te 99.616e(Anyoer354.04)ew_varur85 Ta
4 9 ass Outpu.85 (suppor9.85 ndom shuffle) 7679 ne.) .24 ( cop99)(fro26f 3780 4 679 ne.) irst1) 386.60 e37 050 4 679 ne.) .24 ( cop99)(push_b ck) 4dom_9 679 ne.) irst1) 386.60 \94 56450 48s679 ne.) .24 ( cop99)(pop_b ck) 479rdht79 ne.) irst1) 386.60 \can)esu2.7ht79 ne.) (Iterato9.o instanti Q
)eass 67.(te PardIterpriand)y_queue)(168(48s 67.(te Pents refthIn (,) 120.6 ,rd244.08s 67.(te PardItervQ
t98 29domdist67.(te Pents refQ copie41.33u 67.(te PardIterdr354ra363.a6st67.(te Pents refQcan4Iteratoc l([fia6st67.(te PardIter3 P
4 9 Q
0.1 (gC.ntainer7 T
2 10 9 Q
2. =] es2<C.ntainer:: 180 _typQ> >ors08s 452 T
-0.5
2 10priand)y_queue {3 (*\03rre5 Outppubnic:Iterat323late <c8ypQdefgC.ntainer:: 180 _typQ  180 _typQ;3 ()"431235 OutptypQdefgC.ntainer::siz _typQ siz _typQ;3 ()"4st1t5 OutpprotQ
tad:45" 472901 T
-0.30ntainerac;3 ()"42791 T
-0.309.99 245.3;3 ()"4268e5 Outppubnic:Iterat127-5 Outppriand)y_queue-0.35 P
4 309.99 & x =]C F
(1 e) 7s arf) 2 : ce) 7s ar,245.37 P0x.311 {}3 ()"4  6.ate <cP
4 9 Q
2.83 (*\050first + \083 ()"4235-5 Outppriand)y_queue-0.32 606.71 T
4 9 Q
(template <class Forwar45")"422mAate <c5 P
4 309.99 & x =]C F
(1 e) 7s arf) 2 : ce) 7tor result\051;,245.37 P0x.311 { l516l513late <cm 10_heapconsc.begpn-0.3.31;,24. tre) 7s ar,245.37 P0.05 (.)20235 Outp}3 ()"4191es. At. 10 r1mpty-0.3.311 op\051{\050Out c.1mpty-0.3.311; }3 ()"4+8ke5 Outpsiz _typQ siz -0.3.311 op\051{\050Out c.siz -0.3.311; }3 ()"4l th5 Outpop\051 180 _typQ&9.op-0.3.311 op\051{\050Out c.fro26-0.3.311; }3 ()"4158rder of the push-0.35 P
4  180 _typQ&9x.311 {3 ()"4147-5 Outpc.push_b ck-0.3x.311;05 (.) 96e5 Outppush_heapconsc.begpn-0.3.31;,24. tre) 7s ar,245.37 P0.05 (.)125l5 Outp}3 ()"4114rder of the pop-0.3.311 {3 ()"4103late <czop_heapconsc.begpn-0.3.31;,24. tre) 7s ar,245.37 P0.05 (.)92-5 Outpc.pop_b ck-0.3.311; 9cond81es. At9 Q
0.1 (generate_n) 397.55 639.33 P
256 Q
8017.89 P
457 Q
90.53 ( [result, result + \050last - first\051\051) 336.8 502.85 P
2 10 Q
-0.25 ( such) 517.22 502.85 P
-0.21 (that for any non-negative integer) 72 490.85 P
4 9 Q
-0.46 ( i < \050last - first\051) 216.9 490.85 P
2 10 Q
-0.21 ( the following assignment takes first) 195.057105.89 T
2 10 Q
( \050or) 259.88 105.89 T
4 9 Q
(n) 277.62 105.89 T
2 10 Q
(\05}3 ()"4tor, cl}10 Q
-0)03.37 // noe te>)d)y g 0]
)videdIterat681Outndc1t) f11.2 ) 108 586adaptputItst 627-0 Q (
4ts ref11.2.1 R warseass OutputItst 639.2 Outte 99.615 (e) 176.08 477.85 (tur85 Ta
4 9 ass Output have 04.4 501.85 P
r warseass Outpu0adaptput6omat ss Oute
nhr Q
-Itst 622.4redi0e0922e) 4data 
4ruc
ur 1gh all opposss   176.08 4ange)y have T& oe0.4 rigta
ur at90 T& o04.4 501.85 P
ss Outputc lasta10.4redi0ee80 ge) funda 542P
2 e9 Qor>e21.52 T.a
r warseass Outpu0a(\ .0so04.4 501.85 P
ss Outpu16 43298247 (fto) 23e do2i 2\41t783298247 (f
(template80 QP
4 
[ 1 ishowi;) 304 2\47he r298247 (f(identit2330515 ev685 PardIter&*7 P.r warse_) 516.98.31 is arf) 2 (Ra&*7 P.i2 ( 14.4.3 (*\0575-0.03.ator middl550 geis9mapp5 Perattictatowi;) 304.fa
t  mat while T& rt is 9lway 0a po 72or (,stQ1 == true) a. firay, T& rt might33051\56247 (f(or fIte1 0 0 0 po 72or before T& obegpnl0 R
e) a. firay.16 43244.485 PardIter( applications ostable, that is, the 9.33 P
2t5.37 P
4Rect) 72  = T&"45" 47522.09ap.T37 P
4Distan2  = ptrdifc_t83 ()"4511.09ap.T37 P
4r warse_btable, that _) 516.98 2(*\05e0-0.03.9: pubnic btable, that _) 516.98<t5.Distan2 > {3 ()"4489-0.03.9typQdefgr warse_btable, that _) 516.98<stable, that is, the 9.Tr45")"447 20.03.9Rect) 72 
-0,6nd46720.03.9Distan2 > self;)t41or4d46720.03.9fri tru 10 rndom sor==-0.35 P
4 
elf& xn op\051
elf& yP
2 10 Q)"44563 9e <cprotQ
tad:45" 47445-0.03.9ar 176.08 477.85 P
1.4cur) 7t10 Q)"44343 9e <cpubnic:Iterat42
-0.03.9r warse_btable, that _) 516.98-0.3.311 {}3 ()"4412-0.03.9r warse_btable, that _) 516.98-0.3ar 176.08 477.85 P
1.4xf) 2 : cur) 7t7 P0x.311 {}3 ()"4401-0.03.9ar 176.08 477.85 P
1.4base-0.3.3111{\050Out cur) 7t1 }3 ()"499020.03.9Rect) 72 rndom sor*-0.3.311 op\051{3 ()"4979-0.03.9ar 176.08 477.85 P
1.4tmp = cur) 7t10 Q1 0368-0.03.9r 0Out *--t.3;3 (ond35720.03.9}3 ()"49463 9e <c
elf& ndom sor++-0.3.311 {3 ()"4tp5s 9e <c--cur) 7t10 Q1 0324-0.03.9r 0Out *teis4 9 1 031320.03.9}3 ()"49023 9e <c
elf ndom sor++-0.3int.311 {3 ()"4e7== 9e <c
elf tmp = *teis4 9 1 028e  9e <c--cur) 7t10 Q1 0 0 00.03.9r 0Out t.3;3 (ond 58i0.03.9}3 ()"4  7h 9e <c
elf& ndom sor---0.3.311 {3 ()"42363 9e <c++cur) 7t10 Q1 0 25-0.03.9r 0Out *teis4 9 1 0214i0.03.9}3 ()"4 033 9e <c
elf ndom sor---0.3int.311 {3 ()"4192= 9e <c
elf tmp = *teis4 9 1 01813 9e <c++cur) 7t10 Q1 017000.03.9r 0Out t.3;3 (ond159r0.03.9}3 ()"4148i0.03.9}4 9 Q
2.37.09ap.T3 P
4 9 Q
0.1 (gstable, that is, the 9.33 P
2t5.37 P
4Rect) 72 5.37 P
4Distan2 >0 Q
-0.05-0.03.9inlineu 10 rndom sor==-0.3Iteratnd4i0.03.9op\051r warse_btable, that _) 516.98<stable, that is, the 9.Tr45"(.)9320.03.9Rect) 72 
4Distan2 >& xn l([6 82= 9e <9 Q
0.1 (generate_n) 397.55 639.33 P
257 Q
9017.89 P
458" 600.19 ([first, first + n\051) 406.07 117.89 P
2 10 Q
-0.09 (.) 502.69 117.89 P
4 9 Q
-0.19 (fill_n) 507.6 117.89 P
2 10 Q
(returns) 72 105.89 T
4 9 Q
(first + n) 106.54 105.89 T
2 10 Q
(. Exactly) 155.14 105.89 T
4 9 Q
(last - first) 195.058105.89 T
2 10 Q
( \050or) 259.88 105.89 T
4 9 Q
(n) 277.62 105.89 T
2 10 Q
(\050p\051r warse_btable, that _) 516.98<stable, that is, the 9.Tr45"(.)tor, clRect) 72 
4Distan2 >& yP
2  {3 ([6 )03.37 050Out x.cur) 7t
(Ray.cur) 7t10 Q)"469 Outp}Iterat681Outpt
-0.91 (gen) 236.78 651.33 P
2 10 Q
-0.42 (t5.37 P
4Rect) 72  = T&"45" 47659e <c37 P
4Distan2  = ptrdifc_t83 ()"4648, cl37 P
4r warse_ss Outpu0: pubnic tur85 _a
4 9 _) 516.98<t5.Distan2 > {3 (2 163703.9typQdefgr warse_) 516.98<6.78 651.33 P
2 10 Q
-t5.Rect) 72 
4Distan2 >3 ()"4626, clself;)tone..5503.9fri tru 10 rndom sor==-0.35 P
4 
elf& xn op\051
elf& yP
2 10 Q)"46 133.9fri tru 10 rndom sor<-0.35 P
4 
elf& xn op\051
elf& yP
2 10 Q)"4593.89 fri truDistan2  ndom sor--0.35 P
4 
elf& xn op\051
elf& yP
2 10 Q)"458 Outpfri tru
elf ndom sor+-0.3Distan2  nn op\051
elf& xP
2 10 Q)"45i\051rprotQ
tad:45" 47560eratT
-0.19 (fill) 72 117cur) 7t10 Q)"45r firspubnic:Iterat5 invokr warse_) 516.98.31 .311 {}3 ()"4527Outpr warse_) 516.98.31 T
-0.19 (fill) 72 117xf) 2 : cur) 7t7 P0x.311 {}3 ()"4516firsT
-0.19 (fill) 72 117base-0.3.3111{\050Out cur) 7t1 }3 ()"45e retuRect) 72 rndom sor*-0.3.311 op\051{3 ()"449283..T
-0.19 (fill) 72 117tmp = cur) 7t10 Q1 0483Outpr 0Out *--t.3;3 (ond47 Outp}3 ()"443\051r
elf& ndom sor++-0.3.311 {3 ()"4450, cl--cur) 7t10 Q1 0439.37 050Out *teis4 9 1 0428Outp}3 ()"4417e <c
elf ndom sor++-0.3int.311 {3 ()"4406e <c
elf tmp = *teis4 9 1 03915 (c--cur) 7t10 Q1 038403.9r 0Out t.3;3 (ond37303.9}3 ()"4962e <c
elf& ndom sor---0.3.311 {3 ()"4351e <c++cur) 7t10 Q1 034003.9r 0Out *teis4 9 1 032.03.9}3 ()"499 st +
elf ndom sor---0.3int.311 {3 ()"4307e <c
elf tmp = *teis4 9 1 029plate++cur) 7t10 Q1 0 8 retur 0Out t.3;3 (ond 7403.9}3 ()"4 63e <c
elf ndom sor+-0.3Distan2  nf) 29.7447 5203.9op\051{ l589-87 5203.9r 0Out 
elf-0.35ur) 7t
- nf) 2;3 (ond 4103.9}3 ()"4 30e <c
elf&3 ()"4 1.03.9ndom sor+=-0.3Distan2  nf) 2 {3 (1 0219e <c3ur) 7t
-= n.05 (.)20803.9r 0Out *teis4 9 1 019703.9}3 ()"4186st +
elf ndom sor--0.3Distan2  nf) 2 op\051{3 ()"417503.9r 0Out 
elf-0.35ur) 7t
+ nf) 2;3 (ond16403.9}3 ()"4153e <c
elf& ndom sor-=-0.3Distan2  nf) 2 {3 ()"4142e <c3ur) 7t
+= n.05 (.)13103.9r 0Out *teis4 9 1 012003.9}3 ()"410.03.9Rect) 72 rndom sor[]-0.3Distan2  nf) 2 {\050Out *-0.3*teis
+ nf) 2; }3 ()"49invok}4 9 Q
287 T
9 Q
0.1 (generate_n) 397.55 639.33 P
258" 60017.89 P
459" 610.53 ( [result, result + \050last - first\051\051) 336.8 502.85 P
2 10 Q
-0.25 ( such) 517.22 502.85 P
-0.21 (that for any non-negative integer) 72 490.85 P
4 9 Q
-0.46 ( i < \050last - first\051) 216.9 490.85 P
2 10 Q
-0.21 ( the following assignment takes first) 195.059105.89 T
2 10 Q
( \050or) 259.88 105.89 T
4 9 Q
(n) 277.62 105.89 T
2 10 Q
(\05t
-0.91 (gen) 236.78 651.33 P
2 10 Q
-0.42 (t5.37 P
4Rect) 72 5.37 P
4Distan2 >0 Q
-0tor, clinlineu 10 rndom sor==-0.3Iterat)03.37 0p\051r warse_) 516.98<6.78 651.33 P
2 10 Q
0 Q)"469 Outpt5.Rect) 72 
4Distan2 >& xn l(rste9. Atcop6e(45\051r warse_) 516.98<6.78 651.33 P
2 10 Q
 t5.Rect) 72 
4Distan2 >& yf) 2 {3 ()"4681OP7 050Out x.cur) 7t
(Ray.cur) 7t10 Q)"4670Outp}Iterat659Outpt
-0.91 (gen) 236.78 651.33 P
2 10 Q
-0.42 (t5.37 P
4Rect) 72 5.37 P
4Distan2 >0 Q
-063703.9inlineu 10 rndom sor<-0.3Iterat626, cl45\051r warse_) 516.98<6.78 651.33 P
2 10 Q
 t5.Rect) 72 
4Distan2 >& x,3 ()"4615.37cop6e(45\051r warse_) 516.98<6.78 651.33 P
2 10 Q
 t5.Rect) 72 
4Distan2 >& yf) 2 {3 ()"46 13P7 050Out y.cur) 7t < x.cur) 7t10 Q)"4593.89 }Iterat58 Outpt
-0.91 (gen) 236.78 651.33 P
2 10 Q
-0.42 (t5.37 P
4Rect) 72 5.37 P
4Distan2 >0 Q
-0560eratinlineuDistan2  ndom sor--0.30 Q
-0549, cl45\051r warse_) 516.98<6.78 651.33 P
2 10 Q
 t5.Rect) 72 
4Distan2 >& x,3 ()"45 invocop6e(45\051r warse_) 516.98<6.78 651.33 P
2 10 Q
 t5.Rect) 72 
4Distan2 >& yf) 2 {3 ()"4527OP7 050Out y.cur) 7t - x.cur) 7t10 Q)"4516firs}3 (*\05e retut
-0.91 (gen) 236.78 651.33 P
2 10 Q
-0.42 (t5.37 P
4Rect) 72 5.37 P
4Distan2 >0 Q
-0483Outpinlineur warse_) 516.98<6.78 651.33 P
2 10 Q
 t5.Rect) 72 
4Distan2 > ndom sor+-0.33 (*\047 OutpDistan2  nn3 ()"443\051cop6e(45\051r warse_) 516.98<6.78 651.33 P
2 10 Q
 t5.Rect) 72 
4Distan2 >& x.311 {3 ()"4450,P7 050Out r warse_) 516.98<6.78 651.33 P
2 10 Q
 t5.Rect) 72 
0 Q)"443.03.9Distan2 >9.46\0439.37 7 P0x.5ur) 7t
- nf) 2;3 (ond428Outp}3 (*\0417Q (
4ts ref11.274 Insertass OutputItst 396t 477.te 99.614_nToim 10
ionpossible To deal)ew_vainsertor>ern T& oe0.4 wa) 90 wri9.85  31.5a. firay, a 0 Q
1al kitrue) ) 516.98 2051679 ne.) (adaptput5.3all]d)eass 67.(te P5- fTinsertass OutputItc44e69st67.(te Pen fT,6first
)vided1gh all OibrdIt. Ww_var1g0.6 ass Outpu0ng pran,rd204141 t67.(te PardIterwhile 7 P..85 2 !=sult\051; *051) 9++ = *.85 2++;ors08s 452 T
-0
(templ9.612ra0aus  0a airst2)ass 26 ne.) .24 ( cop2547
612 792 0 FMBEGIN138..89 26 ne.) 
(templ9.612rawardI o04pi8.8 72o0a airsta
[ r9.85 ew_v.8arOu915 26 ne.) .24 ( cop2547051) 95138dle64 26 ne.) 
(templ9.612raange) e0.4 code ew_v.8412-465 26 ne.) .24 ( cop2547051) 951507 do 26 ne.) 
(templ0mdis(be2.04
-0.3sertass Outpu ewll0.3serta04.4 501.85 P
 0 1 0 1 1p1.56 T 0.ntainerangerattevi2  a 1 0stor mst T& )3ass O4  last(04py0 R
algand)hms1gh all OibrdItward
(tkdgh all)3ass 02.(te P5- fTinsertamo 56585l24_ 02.(te Pen fTe instead  Q
-0.3n1g0.6 aowarwri9eamo 5.16.2 23_ 02.(te P1irst(A-0.3sertass Outpu is op\05ruc
8.8fr5 Ta 0.ntainer0a(\ possibly8\05ue) )  ass Output po 720 R
7o  301 56 T
283r(temp0r32 Tinsertor>e.uffle0.904)2f 108 s neiT& r 0.0.49 begpnl0 R
nor 0.0.49  true) 6 T 0.ntaineranInsertass Output e0tisf23305127.82 261T
65 (-0.3n135i
 1 0 1 e) outpu2 rst\051)tc last2P90ne.) .24 ( 7 88s9ndom sor*37 53674 2P90ne.) 
(templT
65 (\050Outp T& o.3sertass Outpu it
elfange)  prigt2 26f  02.34t2P90ne.) .24 ( 86.60 ndom sor=-0.35 P
4 9 Qx5 334. P
247 ne.) 
(templ0mdT (erat followio-0.3sertass Outpu29.o a 1 0 wri9.85  31.5T& m, 108 3serts 9co6a33
247 ne.) .24 ( 86.60 x) 479r8P
247 ne.) 
(templ0mdT (eright before37 8522P
247 ne.) 13 9e( 301  T& o.3sertass Outpu it po 720 RthIn o48 (d
(tds,4
-0.3sertass Outpu  0] ikte1 5urs586po 720 R
 31.56 T0.(Ou adone.) 3p73a\0.ntainerae301  T& o.3sertor>e.uffle0.904c last223r(tempto) 23ak91sTb ck_insert_) 516.98 2274.08s223r(template <c2 73a\8 3serts
 0 1 0 1 0.0.49  true) af g82.08s223r(temp7l550 0.ntainer,4. P
21.82 261441.7316,  0 fro26_insert_) 516.98 21r6.21.82 261late <c7l550 8 3serts
 0 1 0 1 0.0.49 begpnl0 R
e) a 0.ntainer,\94 5623or4d21.82 261441.739-87Tinsert_) 516.98 2astdo90ne.) 
(templ4l54_n\05serts
 0 1 0 1 e301  T& o. 108 586po 72s9.o in a 0.ntainer.
-+5Ttdo90ne.) 441.739-87Tb ck_inserte8 2467s
tdo90ne.) 
(templ4l54_n,ignment 1o90ne.) 441.73 fro26_inserte8 2astd87.(te Pents ref,\94 56752 T
d87.(te P441.73 inserte8 2172= 3a187.(te Pents refQ 1  T&ree functor>s9mak0 R
70.0.3sertass Outpu29out  Q a 0.ntainer.
-215t23
d87.(te P441.73 3 P
4 9 Q
0.1 (gC.ntainer83 (*\016do T
-0.5
2 10b ck_insert_) 516.980: pubnic outpu2_) 516.980{.) 169+54t5 OutpprotQ
tad:45" 471431 T
-0.30ntainer& 0.ntainer;3 ()"4132e5 Outppubnic:Iterat121es. At.  ck_insert_) 516.98-0.330ntainer& xf) 2 : c0ntainer7 P0x.311 {}3 ()"411hrs. At.  ck_insert_) 516.98<C.ntainer8&3 ()"49th5 Outpndom sor=-0.33 ()"488Aate <c5 P
4 30ntainer:: 180 _typQ&  180 .311 {3 (98488Aate <c5 Ptainer.push_b ck-0.3 180 .3114 9one.)7es. At9 Q
0.1 (generate_n) 397.55 639.33 P
259" 61017.89 P
460" 620.19 ([first, first + n\051) 406.07 117.89 P
2 10 Q
-0.09 (.) 502.69 117.89 P
4 9 Q
-0.19 (fill_n) 507.6 117.89 P
2 10 Q
(returns) 72 105.89 T
4 9 Q
(first + n) 106.54 105.89 T
2 10 Q
(. Exactly) 155.14 105.89 T
4 9 Q
(last - first) 195.060105.89 T
2 10 Q
( \050or) 259.88 105.89 T
4 9 Q
(n) 277.62 105.89 T
2 10 Q
(\05r 0Out *teis4 9 1 0tor, cl}3 ()"4t03.37   ck_insert_) 516.98<C.ntainer8&rndom sor*-0.3.311 {\050Out *teis4 }3 ()"4692.37   ck_insert_) 516.98<C.ntainer8&rndom sor++-0.3.311 {\050Out *teis4 }3 ()"4681Outp  ck_insert_) 516.98<C.ntainer8&rndom sor++-0.3int.311 {\050Out *teis4 }3 ()"4670Outp};Iterat659Outpt
-0.91 (gen) 23C.ntainer83 (*\063703.9  ck_insert_) 516.98<C.ntainer8 b ck_inserte8-0.330ntainer& xf) 2 {Iterat626, cl050Out   ck_insert_) 516.98<C.ntainer8-0.3x.311;05 )"4615.37 }Iterat6 P
4  P
4 9 Q
2.83 (*\C.ntainer83 (*\058T
-0.5
2 10fro26_insert_) 516.980: pubnic outpu2_) 516.980{.) 1695i\051rprotQ
tad:45" 47560erat30ntainer& 0.ntainer;3 ()"45r firspubnic:Iterat5 invokfro26_insert_) 516.98-0.330ntainer& xf) 2 : c0ntainer7 P0x.311 {}3 ()"4527Outpfro26_insert_) 516.98<C.ntainer8&3 ()"4516firsndom sor=-0.35 P
4 30ntainer:: 180 _typQ&  180 .311 {3 ()"45e retu5 Ptainer.push_fro26-0.3 180 .3114 9one.49283..050Out *teis4 9 1 048303.9}3 ()"447 Outpfro26_insert_) 516.98<C.ntainer8&rndom sor*-0.3.311 {\050Out *teis4 }3 ()"443\051rfro26_insert_) 516.98<C.ntainer8&rndom sor++-0.3.311 {\050Out *teis4 }3 ()"4450, clfro26_insert_) 516.98<C.ntainer8&rndom sor++-0.3int.311 {\050Out *teis4 }3 ()"4439.37 };Iterat428Outp3 P
4 9 Q
0.1 (gC.ntainer83 (*\0406e <cfro26_insert_) 516.98<C.ntainer8 fro26_inserte8-0.330ntainer& xf) 2 {Iterat3915 (c050Out fro26_insert_) 516.98<C.ntainer8-0.3x.311;05 )"438403.9}Iterat37303.93 P
4 9 Q
0.1 (gC.ntainer83 (*\0351e <c0.1 (ginsert_) 516.980: pubnic outpu2_) 516.980{.) 16934003.9protQ
tad:45" 4732.03.930ntainer& 0.ntainer;3 ()"499 st +30ntainer::ss Outpu iter;3 ()"4907 T
ppubnic:Iterat29plateinsert_) 516.98-0.330ntainer& x, 30ntainer::ss Outpu if) 29.7447 8 retu: c0ntainer7 P0x.311, iter.31 is ar {}3 (ond 7403.9insert_) 516.98<C.ntainer8&3 ()"4 63e <-3 sndom sor=-0.35 P
4 30ntainer:: 180 _typQ&  180 .311 {3 2[ 024 63e(f(i2or = 0.ntainer.insert.31 iter,\ 180 .3114 9one. 5203.9++iter;3 (ond 4103.9r 0Out *teis4 9 1 023003.9}3 ()"4219e <cinsert_) 516.98<C.ntainer8&rndom sor*-0.3.311 {\050Out *teis4 }3 ()"420803.9insert_) 516.98<C.ntainer8&rndom sor++-0.3.311 {\050Out *teis4 }3 ()"419703.9insert_) 516.98<C.ntainer8&rndom sor++-0.3int.311 {\050Out *teis4 }3 ()"4186st +}4 9 Q
2.7503.93 P
4 9 Q
0.1 (gC.ntainer5.37 P
4pare done.) 169+5T03.9insert_) 516.98<C.ntainer8 inserte8-0.330ntainer& x, ) 108 586if) 2 {Iterat142e <c050Out insert_) 516.98<C.ntainer8-0.3x, 30ntainer::ss Outpu.31 is arf) 2;3 ()"4131Outp}3 (*\012003.ndc1t) f11.3 Functor>6adaptputItst 96-0 Q (ents refFunctor>6adaptputd
(tkdonly)ew_vafunctor> objQ
t ng prandew_vaargu 542utypQt.85 (t51) 95typQ  followc last79k91sTi9 Q
0.1 (generate_n) 397.55 639.33 P
260" 62017.89 P
461" 630.53 ( [result, result + \050last - first\051\051) 336.8 502.85 P
2 10 Q
-0.25 ( such) 517.22 502.85 P
-0.21 (that for any non-negative integer) 72 490.85 P
4 9 Q
-0.46 ( i < \050last - first\051) 216.9 490.85 P
2 10 Q
-0.21 ( the following assignment takes first) 195.061105.89 T
2 10 Q
( \050or) 259.88 105.89 T
4 9 Q
(n) 277.62 105.89 T

4 9195.011.3.1 NegutputItst 71200477.te 930047(NegutputItst 6950ne.) 441.738..89(or 29.718t7836950ne.) 
(templT
710 \94 56140 38 6950ne.) 441.738..89(or 2tol th7306950ne.) 
(templT
710 \.uff a urdIt.85 (arwardIt predicaT  04.4 501.85 Ply485 (t50Out thei8 2191 Pre6950ne.) (45.30 1 0 1c lasta83r(te P441.73 3 P
4 9 Q
0.1 (gPredicaT 83 (*\0661o T
-0.5
2 10urdIt_negute0: pubnic urdIt_functor><PredicaT ::argu 542_typQ,u 10 > {3 (2 1650t5 OutpprotQ
tad:45" 47639.5 OutpPredicaT  pred;05 )"4628e5 Outppubnic:Iterat617-5 OutpurdIt_negute-0.35 P
4 PredicaT & xf) 2 : pred7 P0x.311 {}3 ()"4606es. At. 10 rndom sore) 7s arf) 35 P
4 argu 542_typQ& xf) 2 op\051{\050Out !pred7 P0x.311; }3 ()"4595l5 Outp}4 9 Q
2584.ate <cP
4 9 Q
2.83 (*\PredicaT 83 (*\0562-5 OutpurdIt_negute<PredicaT >tor 1-0.35 P
4 PredicaT & pred7 P2 {Iterat591s5203.9r 0Out urdIt_negute<PredicaT >-0.3pred7 P2;3 ()"45r0l5 Outp}3 ( 47529.ate <cP
4 9 Q
2.83 (*\PredicaT 83 (*\0507o T
-0.5
2 10birdIt_negute0: pubnic birdIt_functor><PredicaT ::612 7_argu 542_typQ,3 (*\0496.5 OutpPredicaT ::se5 Pd_argu 542_typQ,u 10 > {3 3247 852 T
 <cprotQ
tad:45" 47474.5 OutpPredicaT  pred;05 )"4463e5 Outppubnic:Iterat452-5 OutpbirdIt_negute-0.35 P
4 PredicaT & xf) 2 : pred7 P0x.311 {}3 ()"4\41ts. At. 10 rndom sore) 7s arf) 35 P
4 612 7_argu 542_typQ& x,3 ()"4430l5 Outp op\051
e5 Pd_argu 542_typQ& yf) 2 op\051{ l516f41or5203.9r 0Out !pred7 P0x, yP
2 10 Q1 0408l5 Outp}3 ()"4397l5 Outp}4 9 Q
2386.ate <cP
4 9 Q
2.83 (*\PredicaT 83 (*\0364-5 OutpbirdIt_negute<PredicaT >tor 2-0.35 P
4 PredicaT & pred7 P2 {Iterat353r5203.9r 0Out birdIt_negute<PredicaT >-0.3pred7 P2;3 ()"4342l5 Outp}3 ( 47331ts. At
4ts ref11.3024BindeutItst 311th857.te 99.6P2 (BindeutItst 294l0.42  269.3-1.1 pbird1 2 9crOu9t 294l0.42 ator middl510 \94 56145t7. 294l0.42  269.3-1.1 pbird24 56166.63 294l0.42 ator middl510 \.uff a functor> objQ
trd204143 294l0.42  269.3-1.1 pf105.0 88s294l0.42 ator middl510 \e) 6wo argu 542s.85 (ar 180 f g06e27 294l0.42  269.3-1.1 px) 439.84 294l0.42 ator middl510 \94 \050Out a functor>)7445-24 294l0.42 9.618s9nbjQ
t e) oneaargu 542uop\05ruc
8.8out  Q) st 282l0.42  269.3-86.0pf10127- 87 82l0.42 
(templ9.618poaew_va.49 .85 2 586
e5 Pdaargu 542uop.4 501.85 Ply4bouati X
(262-88 282l0.42  269.3-86.0pxignm2.1  82l0.42 
(templ9.618poc) 108 44 82l0.42  269.3cP
4 9 Q
2.83 (*\Odom shuftIteratc60. P
4  5
2 10birdeu1 20: pubnic urdIt_functor><Iteratc49. P
4  Odom shuf::se5 Pd_argu 542_typQ,3 3247c49. P
4  Odom shuf::t51) 9_typQ> {3 3247ce8e P
4  protQ
tad:45" 47227. P
4  Odom shufrnd;3 ()"4216. P
4  Odom shuf::612 7_argu 542_typQr 180 ;3 ()"4205e P
4  pubnic:Iterat194l P
4  birdeu1 2-0.35 P
4 Odom shuf& xn op\051Odom shuf::612 7_argu 542_typQ& yf) 23 ()"4183l P
4  : op7 P0x.311,  180 .310ys ar {}3 (ond172= 283..051) 9_typQrndom sore) 7s arf) 35 P
4 argu 542_typQ& xf) 2 op\051{3 ()"4l 1= 283..050Out op7 P0 180 , x.311;05 (.) 50. P
4  }3 ()"4139. P
4  }4 9 Q
2.28e P
4  P
4 9 Q
2.83 (*\Odom shufding pretputItere96. P
4  birdeu1 2<Odom shuft bird1 2-0.35 P
4 Odom shuf& opr45" 4725e P
4  5 P
4 9 Qx5 33 {3 374725e P
4  r 0Out birdeu1 2<Odom shuft-0.3opr1Odom shuf::612 7_argu 542_typQ7 P0x.3117 P2;3 ()"484l P
4 9 Q
0.1 (generate_n) 397.55 639.33 P
261" 63017.89 P
462" 640.19 ([first, first + n\051) 406.07 117.89 P
2 10 Q
-0.09 (.) 502.69 117.89 P
4 9 Q
-0.19 (fill_n) 507.6 117.89 P
2 10 Q
(returns) 72 105.89 T
4 9 Q
(first + n) 106.54 105.89 T
2 10 Q
(. Exactly) 155.14 105.89 T
4 9 Q
(last - first) 195.062105.89 T
2 10 Q
( \050or) 259.88 105.89 T
4 9 Q
(n) 277.62 105.89 T
2 10 Q
(\05}3 (
-0tor, clP
4 9 Q
2.83 (*\Odom shuftIterat692.37 5
2 10birdeu24 0: pubnic urdIt_functor><Odom shuf::612 7_argu 542_typQ,Iterat681OutpOdom shuf::t51) 9_typQ> {3 3247670OutpprotQ
tad:45" 47659OutpOdom shufrnd;3 ()"4648, clOdom shuf::se5 Pd_argu 542_typQr 180 ;3 ()"4637 T
ppubnic:Iterat626, cl irdeu24 -0.35 P
4 Odom shuf& xn op\051Odom shuf::
e5 Pd_argu 542_typQ& yf) 205 )"4615.37 : op7 P0x.311,  180 .310ys ar {}3 (ond6 283..051) 9_typQrndom sore) 7s arf) 35 P
4 argu 542_typQ& xf) 2 op\051{3 ()"4593.89 050Out op7 P0x,\ 180 .3114 9one.58T
-0.}3 ()"45i\051r}4 9 Q
2560eratP
4 9 Q
2.83 (*\Odom shufding pretputIter5 invok irdeu24 <Odom shuft bird24 -0.35 P
4 Odom shuf& opr45" 47527Outp5 P
4 9 Qx5 33 {3 3747527Outpr 0Out birdeu24 <Odom shuft-0.3opr1Odom shuf::
e5 Pd_argu 542_typQ7 P0x.3117 P2;3 ()"4516firs}3 (*\05e retcate, clan5 (esu4 xaF
le,9.56 4o6a33
) .24 ( 8676e(fird_if-0.3v.begpn-0.3.31;,2v. tre) 7s ar,2bird24 -0.3gre Q
8< 72>e) 7s ar,2514.4f) 29.7m2.67 4o6a33
) cate, clan5 ( firdsa.49 .85 2  72ogera 0) 43ut95 4o6a33
) 0  9 (vQ
t98 256 474.33
) .24 ( 868pov)sd02246 474.33
) 0 0]
[ 0  9 (%gre Q
8  man 5; 9crOu86 474.33
) .24 ( 868pofird_if-0.3v.begpn-0.3.31;,2v. tre) 7s ar,2bird1 2-0.3gre Q
8< 72>e) 7s ar,2514.4f) 29.778..89474.33
) 0 0]
[ 0  9 (%firdsa.49 .85 2
- 37 16 474.33
) ( 72ogera 0) 56 4627.85 PardIterv)sd16.81O4627.85 Pents refQ es2  man 5.161r2521 4627.85 P
4 9 Q1.7 teAdaptput6f586po 72eu29.o functor>s) 56 441t7477.te 9nToia 1 0 po 72eu29.o e) 7urdIt.85 (birdIt5 33 functor>s9ard
(tkdew_vafunctor> adaptput6om) librdIt9ns)videt:) 56 424r(te P441.73 3 P
4 9 Q
0.1 (gArg5.37 P
4Re1) 983 (*\04022 T
-0.5
2 10po 72eu_to_urdIt_functor>0: pubnic urdIt_functor><Arg5.Re1) 98 {Iterat391t5 OutpprotQ
tad:45" 4738ke5 OutpRe1) 9 110.8ptrs arf) 3Arg7 P2;3 ()"43 th5 Outppubnic:Iterat358rder ofpo 72eu_to_urdIt_functor>.31 .311 {}3 ()"4347-5 Outppo 72eu_to_urdIt_functor>.31 Re1) 9 110.8xs arf) 3Arg7 P2f) 205 )"4396e5 Outp: ptrs a0x.311 {}3 381 do 96e5 OutpRe1) 9 ndom sore) 7s arf) 3Arg xf) 2 op\051{\050Out ptrs a0x.311; }3 ()"4925i5 Outp}4 9 Q
2314.ate <cP
4 9 Q
2.83 (*\Arg5.37 P
4Re1) 983 (*\0292-5 Outppo 72eu_to_urdIt_functor><Arg5.Re1) 98 ptr_fun.31 Re1) 9 110.8xs arf) 3Arg7 P2f) 2 {3 (*\0281s5203.9r 0Out po 72eu_to_urdIt_functor><Arg5.Re1) 98-0.3x.311;05 )"4270t5 Outp}3 ( 472P90ate <cP
4 9 Q
2.83 (*\Arg15.37 P
4Arg25.37 P
4Re1) 983 (*\02372 T
-0.5
2 10po 72eu_to_birdIt_functor>0: pubnic birdIt_functor><Arg15.Arg25.Re1) 98 {Iterat226t5 OutpprotQ
tad:45" 47215e5 OutpRe1) 9 110.8ptrs arf) 3Arg15.Arg2.311;05 )"420re5 Outppubnic:Iterat193 5 Outppo 72eu_to_birdIt_functor>.31 .311 {}3 ()"4182i5 Outppo 72eu_to_birdIt_functor>.31 Re1) 9 110.8xs arf) 3Arg15.Arg2.311f) 23 ()"4171e5 Outp: ptrs a0x.311 {}3 424r(4171e5 OutpRe1) 9 ndom sore) 7s arf) 3Arg1 xn Arg2 yf) 2 op\051{ l()"4l 0s5203.9r 0Out ptrs a0x, yP
2 1 }3 37ia84l 0s5203.9}4 9 Q
2.490ate <cP
4 9 Q
2.83 (*\Arg15.37 P
4Arg25.37 P
4Re1) 983 (*\0127i5 Outppo 72eu_to_birdIt_functor><Arg15.Arg25.Re1) 980 Q
-0.06t5 Outpptr_fun.31 Re1) 9 110.8xs arf) 3Arg15.Arg2.311f) 2 {Iterat105s5203.9r 0Out po 72eu_to_birdIt_functor><Arg15.Arg25.Re1) 98-0.3x.311;05 )"494t5 Outp}3 ( 4783es. At9 Q
0.1 (generate_n) 397.55 639.33 P
262" 64017.89 P
463" 650.53 ( [result, result + \050last - first\051\051) 336.8 502.85 P
2 10 Q
-0.25 ( such) 517.22 502.85 P
-0.21 (that for any non-negative integer) 72 490.85 P
4 9 Q
-0.46 ( i < \050last - first\051) 216.9 490.85 P
2 10 Q
-0.21 ( the following assignment takes first) 195.063105.89 T
2 10 Q
( \050or) 259.88 105.89 T
4 9 Q
(n) 277.62 105.89 T
195.at790 esu4 xaF
le,9.56 713t, or 441.731t7479r 0.904_if-0.3v.begpn-0.3.31;,2v. tre) 7s ar,2or 1-0.3bird24 -0.3ptr_fun.31 strc.37 P0, \323C\323s arf) 2em\323C++\323s ar9.7m3l550713t, or ator mi9r 0.904stor m6 T0.(Ou701 Pre P441.73 \323C\32356140 3Ou701 Pre Pents refQew_v.8156t5 O701 Pre P441.73 \323C++\323)01813(te701 Pre Pents refQinoer354.04rd2083(te701 Pre PardIterv)sc65958e701 Pre Pents ref.
-27ia98e701 Pre P1 16 .309.i9 Qor>esysP
4t6omat have m) 9i
le po 72or .o functor>utypQt.have To ns)vide addi that  lasta82t, or 441.733le64pptr_fun5150274 a82t, or ents refP
4 9 Q
2functor>sc lasta7ia.85 P (a2 ref12  MemoIt9H85 l0 R
Primi tvet16 436408215 (ents re.156 nToiobtain autypQd po 72or .o at urini 1alizQd memoIt9bufct)  Q a gtven siz a.49 .o 1 00 R
functor>uitItst 6212966r   follow:9.56 699t9plat441.73 3 P
4 9 Q
0.1 (gtputIter587102OutpinlineuT*ia 1 cute-0.3ptrdifc_t nn T*P
2 1 // n >= 30 Q
-0576102Outents refge) eiz a-0.3in bytesf) 2 e) 6 T a 1 cuted9bufct)  s noQ es2  man33051\57t9plat441.73 n*eiz of-0.3Tf) 29.,1Q
461\57t9platents ref.
-377l86e\57t9plat1e69s esu4 wardImemoIt9mo 5l T& rt is 9uop.4 501.85 P33051\e8e26or 441.733l64 (a 1 cute9.,10..89\e8e26or ents re.169s  P
4 9 Q
2functor>t followiew_va.49 .85 2)t353r289\e8e26or (argu 542utypQ be2.04e) 4distan2  typQrn) 6 T po 72eu29gh all memoIt9mo 5l.16 43226t9plat-86.40 esu4 xaF
le,)2f a245.3i9 Qor>esysP
4(suppor9fle) 75072966r .24 ( cop966(__hust2)275t7475072966r irst1) 386.4_n\po 72eu29ew_va.49 distan2  typQrbe2.0105.8611 5072966r .24 ( cop966(lo.04lo.0
- 33.9475072966r irst1) 386.4_n,m6 T0.521es875072966r (.o 1 00 R
P
4 9 Q
2functor>tg 0]
)vided:) 56 495t9plat441.73 3 P
4 9 Q
0.1 (gtputIter 33.02OutpinlineuT __hust*ia 1 cute-0.3lo.04lo.0 nn T __hust *P
2 10 Q
-0462702Outents refAlso,a.49 .o 1 00 R
functor>s6first
)vided:) 56 443t9plat441.73 3 P
4 9 Q
0.1 (gtputIter 21e02Outpinlineu the deal1 cute-0.3T*ibufct)P
2 10 Q
-0410.6te <cP
4 9 Q
2.83 (*\T15.37 P
4T283 (*\0388e02Outpinlineu the op\05ruc
-0.3T1* pn op\051T2&  180 .311 {3 (rat377102Outpnewa-0.337 P0\T1-0.3 180 .3114 9o)"43 6102Outp}3 ( 47355.6te <cP
4 9 Q
2.83 (*\T83 (*\0333e02Outpinlineu the de05roy-0.3T*ipo 72eu.311 {3 (rat322702Outppo 72eu->~T-0.3.311; 9c)"4991102Outp}3 ( 47300.6te <2t790 deal1 cute) st 281e26or ents re.129s  freet6om) bufct) a 1 cuted9by 21r6.281e26or 441.732t790 al1 cute) 261
65 281e26or ents re.129s .resu4 wardImemoIt9mo 5l T& rt 99 245.4 501.85 P33, Fo85.281e26or 441.7316.0pdeal1 cute) st 269e26or ents re0
65 (, 21r6.269e26or 441.7316.0pop\05ruc
ors9.165 269e26or ents re0
65 (e (\050808215269e26or 441.7316.0pde05royraar3 47 269e26or ents re0
65 (eP
4 9 Q
2functor>st followiew_va.49 .85 2 argu 542utypQ be2.04e) rd241e27 269e26or (po 72or .ypQrn) 6 T memoIt9mo 5l.16 43257t9plat441.73 P
4 9 Q
2.83 (*\T83 (*\0 ado02Outppair<T*, ptrdifc_t8 gri_P
4 ordIt_bufct)P
23ptrdifc_t nn T*P
2 1Iterat224.6te <cP
4 9 Q
2.83 (*\T83 (*\020236er of the r 0Out_P
4 ordIt_bufct)P
23T*ipP
2 1Iterat191 6er o6676e(gri_P
4 ordIt_bufct) 2astd72e26or ents re3t13 (%firdsa.49 large05 bufct) or fgre Q
8  man3 (ond172=26or 441.736676e(n*eiz of-0.3Tf) 29.,83674 g72e26or ents re3t13 (,\94 \050Out 0a pai8 2443t14 g72e26or 7614_nop\0ist0 R
e) 70.0addres2 94 \6 T 0apacd)y -0.3in 6 T urits  Q) st +60e26or 441.7315l86e(eiz of-0.3Tf) 29.406 4ss+60e26or late <c7l14_nf) 2 e) 6 T bufct).56455.0t +60e26or 441.73(r 0Out_P
4 ordIt_bufct)) st +48t9platents ref\050Outp T& obufct) a 1 cuted9by 2196.t +48t9plat441.73(gri_P
4 ordIt_bufct) 2tp5s 4 +48t9platents ref. 2443t 4 +48t9plat (a2 ref13  Bibliographyle) 7118-88 atents refM. Elli2 94 \B. S5rou05rup,9.56 g00.58e P5- fTge) Anor uted9C++4Rect) 72  Manut  l191 06 g00.58e Pen fT,6Addison-Wesley, Massachusetts, 1o90.
-348t.85g00.58e P9 Q
0.1 (generate_n) 397.55 639.33 P
263" 65017.89 P
464" 660.19 ([first, first + n\051) 406.07 117.89 P
2 10 Q
-0.09 (.) 502.69 117.89 P
4 9 Q
-0.19 (fill_n) 507.6 117.89 P
2 10 Q
(returns) 72 105.89 T
4 9 Q
(first + n) 106.54 105.89 T
2 10 Q
(. Exactly) 155.14 105.89 T
4 9 Q
(last - first) 195.064105.89 T
2 10 Q
( \050or) 259.88 105.89 T
4 9 Q
(n) 277.62 105.89 T
195.386.479D. Kapur, D. R. Musser,\94  A. A. Stepanovem\322TQ
t9nn A Langu89 6f586Manipu9 Qo R
Generic ObjQ
ts,\323)056 713t, or 5e 99.61479Procc) 118-99 713t, or .163s(e) Workshopio-0Program S Q
1ficaTor>)7(Ou701 PrePPen f.163s(n Aarhus, Denmarkn Augu05 (981,rd232e5u701 PrePP5n f.163s(Lec
ur 1Notes9gh 309.uQ
8 Sci4.04rd389l550701 PrePPen f.163s(n) 108 44701 PrePP(Spro Reu-Verlag,u tl.rs94, 1o82t lasta89
2 10 Qp2547D. Kapur, D. R. Musser,\94  A. A. Stepanovem\322Op Outpu2994  Algebraic S4ruc
ur s,\323)056 a7ia.85PP5n fQp2547Procc e) 6 T Conct) 72 )0446.65 a7ia.85PP1 do(o-0Functor>al0Programmo R
Langu89 2994  309.uQ
8 Architec
ur Itst 628 PrePPen f.160 e Por9fmouth, NewaHaF
shire,)O
t9bt) 2t57t16 628 PrePP((981t lasta4T
2 10 Q612raA. Keu2henbaum, D. R. Musser,\94  A. A. Stepanovem\322Hig8 (dOrd (dImdom shve0Programmo R,\323 TQ
hnica  lasta27 PrePP(Repor9 88-105.Renssela (dPolyte
hnicnInstituQ
n Aprol 1o88c lasta15
2 10 aA. Koenigem\322Associ shve0firays9gh 3++,\323)056 59T
2 10 5- fTProcc USENIX Conct) 72 )02586.059T
2 10 en fT,6San4 9 ncisco,aCA, Juneu1o88c l358r83059T
2 10 aA. Koenigem\322ApplicaTput5.Manipu9 Qput5.94  Functor>6ObjQ
ts,\323)056 577
2 10 5- fTC++4JoOuta  l352129s577
2 10 en fT,6 tl.rs, #s, Summ (d1o90.
-403la8s577
2 10 0.5947D. R. Musser\94  A. A. Stepanovem\322A LibrdIt9e) Generic Algand)hms1gh Ada,\323)056 528 PrePP5n fQp5947Procc e) 1o87 ACM SIGAda)t42
-36 528 PrePP(I72ornator>al0Conct) 72 )0n) 27T
2 10 en fT,6Bost9nn December,\1o87. 2172=47 27T
2 10 1612raD. R. Musser\94  A. A. Stepanovem\322Generic Programmo R,\323 invited9paper,\gh P. Gianni, Ed.,16 43227 PrePP5n f.112raISSACm\32488) 495tr6.227 PrePP0= 15(Symbonic 94  Algebraic 309.uQ Qor>eProcee85 Pt5.Lec
ur 1Notes9gh 309.uQ
8 Sci4.04rd 43215
2 1Pica fia 15(, Spro Reu-Verlag,u tl.r358e37 227343215
2 1Pi((989.16 43203
2 10 aD. R. Musser\94  A. A. Stepanove9.56 4o4
2 10 5- fTAda Generic LibrdIt)0222786e4o4
2 10 en fT,6Spro Reu-Verlag,u(989.16g06e.894o4
2 10 -dl24_7D. R. Musser\94  A. A. Stepanovem\322Algand)hm-Ori tted9Generic LibrdIi s,\323)056 465t, or 5e 99.624_7Softw99 2Practi2  a4  Experi4.04rd403la 465t, or 2e 99.624_7n) 108 44465t, or ( tl.r24-0.37f) 2emJulyd1o94.16 43453
2 10 aM. Stah7.85 (U. Steinm\237ller,\\322Generic Dynamic Airays,\323)056 434
2 10 5- fTge) C++4Repor93 324.97 434
2 10 en fT,6O
t9bt)d1o93c l([fi98 434
2 10 (J. E. Shopiro,\\322S4r5 Pt.85 (Listt6f5863++,\323)056 415
2 10 5- fTAT&T Bell
Lab*\052ornal TQ
hnica  MemoI85 um)0256.93 415
2 10 en fT,6Julyd1o85.56459-99 415
2 10 1 6er(A. A. Stepanov.85 (M. Leeem\322Te) Standard TQ4 9 Q
2LibrdIt,\323 TQ
hnica 4Repor9 HPL-94-94, Hewlett-Itst 396t, or (Packard LaboOutpui s, Aprol 1o94.16 433o4
2 10 (B. S5rou05rup,9.56 365
2 10 5- fTge) Derigt a4  E tlushufrnf63++ors95l550365
2 10 en fT,6Addison-Wesley, Massachusetts, 1o94.
-272e26o365
2 10 9 Q
0.1 (generate_n) 397.55 639.33 P
264" 660%%Trailer0%%Bouat5 PBox:gener.19 ([f017.89 Ord (: Ascend017.89 s: 660%%Docu 542Fonts: Helveti2a-Bold017+ Times-Itanic017+ Pa9 Qo o-Roman017+ Times-Roman017+ CoOuier0%%+ Pa9 Qo o-Itanic017+ Times-Bold017+ Pa9 Qo o-Bold017+ CoOuier-Oblique017+ Helveti2a-Oblique017EOF
